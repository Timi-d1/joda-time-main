/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 21:49:51 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.math.RoundingMode;
import java.net.URI;
import java.time.Clock;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.HijrahDate;
import java.time.chrono.HijrahEra;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class YearMonth_ESTest extends YearMonth_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      TimeZone timeZone0 = TimeZone.getTimeZone("ZZ*jff3p3g7S");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      Chronology chronology0 = lenientChronology0.withZone(dateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((-423L), chronology0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 7;
      intArray0[3] = 1;
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      YearMonth yearMonth2 = yearMonth1.withMonthOfYear(7);
      yearMonth2.minusMonths(1900);
      YearMonth yearMonth3 = yearMonth0.plusYears(yearMonth1.YEAR);
      int int0 = 1610;
      int int1 = 675;
      MockDate mockDate0 = new MockDate(int0, int1, yearMonth1.MONTH_OF_YEAR, int0, yearMonth1.MONTH_OF_YEAR, yearMonth3.MONTH_OF_YEAR);
      YearMonth.fromDateFields(mockDate0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      Years years0 = Years.ONE;
      YearMonth yearMonth0 = new YearMonth(639L);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, (int[]) null);
      // Undeclared exception!
      try { 
        yearMonth1.plus(years0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      DateTimeFieldType dateTimeFieldType0 = yearMonth0.getFieldType(0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Chronology chronology0 = gregorianChronology0.withUTC();
      YearMonth yearMonth1 = YearMonth.now(chronology0);
      yearMonth1.year();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      YearMonth yearMonth2 = yearMonth1.withYear(675);
      yearMonth1.getMonthOfYear();
      yearMonth2.withField(dateTimeFieldType0, 0);
      System.setCurrentTimeMillis((-198L));
      yearMonth2.withYear(1899);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      ReadablePeriod readablePeriod0 = null;
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      DateTime dateTime0 = new DateTime(1, 1, 1, 0, 1, 1);
      dateTime0.withMillis(0);
      dateTime0.getYearOfEra();
      Minutes minutes1 = Minutes.minutesBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      minutes0.minus(minutes1);
      YearMonth yearMonth2 = yearMonth1.withPeriodAdded(minutes0, 0);
      yearMonth2.minusYears(0);
      yearMonth0.plus(readablePeriod0);
      yearMonth1.toInterval();
      String string0 = "P_";
      Locale locale0 = Locale.GERMANY;
      try { 
        yearMonth0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      dateTimeFieldType0.getDurationType();
      // Undeclared exception!
      try { 
        yearMonth0.withField(dateTimeFieldType0, (-86));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -86 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1;
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      YearMonth.Property yearMonth_Property0 = yearMonth1.monthOfYear();
      YearMonth yearMonth2 = yearMonth_Property0.addWrapFieldToCopy(0);
      yearMonth2.monthOfYear();
      Days days0 = Days.FIVE;
      yearMonth1.withPeriodAdded(days0, 656);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1;
      iSOChronology0.toString();
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      YearMonth.Property yearMonth_Property0 = yearMonth1.monthOfYear();
      YearMonth yearMonth2 = yearMonth_Property0.addWrapFieldToCopy(0);
      yearMonth2.monthOfYear();
      yearMonth1.monthOfYear();
      Minutes minutes0 = Minutes.TWO;
      yearMonth1.minus(minutes0);
      yearMonth2.minus(minutes0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1096;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1;
      intArray0[8] = 0;
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      YearMonth yearMonth2 = yearMonth1.withChronologyRetainFields(iSOChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth2.year();
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        yearMonth_Property0.setCopy("y\";>h 63\"c=~", locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"y\";>h 63\"c=~\" for year is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      DateTimeFieldType dateTimeFieldType0 = yearMonth0.getFieldType(0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Chronology chronology0 = gregorianChronology0.withUTC();
      YearMonth yearMonth1 = YearMonth.now(chronology0);
      yearMonth1.year();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      YearMonth yearMonth2 = yearMonth1.withYear(675);
      yearMonth1.getMonthOfYear();
      yearMonth2.withField(dateTimeFieldType0, 1138);
      yearMonth0.withField(dateTimeFieldType0, (-1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 9223372036854775807L;
      MockDate mockDate0 = new MockDate(9223372036854775807L);
      // Undeclared exception!
      try { 
        YearMonth.fromDateFields(mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for year must not be larger than 292278993
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1;
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      yearMonth1.plus((ReadablePeriod) null);
      YearMonth.Property yearMonth_Property0 = yearMonth1.monthOfYear();
      YearMonth yearMonth2 = yearMonth_Property0.addWrapFieldToCopy(0);
      yearMonth2.monthOfYear();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth(1, 1, gregorianChronology0);
      yearMonth0.minusYears(3166);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "G,]OZJ=H%`";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      Date date0 = null;
      // Undeclared exception!
      try { 
        YearMonth.fromDateFields(date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Object) null, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "D`sh%rJpw<R";
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      // Undeclared exception!
      try { 
        YearMonth.parse("D`sh%rJpw<R", dateTimeFormatter1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      yearMonth0.getFieldType(0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      gregorianChronology0.withZone(dateTimeZone0);
      gregorianChronology0.withUTC();
      YearMonth yearMonth1 = new YearMonth(0, 1);
      yearMonth1.year();
      YearMonth yearMonth2 = new YearMonth();
      yearMonth1.getMonthOfYear();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((-3650L), (Chronology) buddhistChronology0);
      buddhistChronology0.get((ReadablePartial) yearMonth0, (-1236L));
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(buddhistChronology0);
      yearMonth0.getFieldTypes();
      yearMonth1.getYear();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      yearMonth_Property0.get();
      Locale locale0 = Locale.ITALY;
      yearMonth0.withPeriodAdded((ReadablePeriod) null, 1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        YearMonth.parse("J>F.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"J>F.\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth((YearMonth) null, (Chronology) buddhistChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1;
      Locale locale0 = Locale.FRANCE;
      yearMonth0.toString((String) null, locale0);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      YearMonth yearMonth2 = yearMonth1.minusYears(0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(yearMonth2.YEAR);
      YearMonth.now(dateTimeZone0);
      YearMonth.Property yearMonth_Property0 = yearMonth1.monthOfYear();
      YearMonth yearMonth3 = yearMonth_Property0.addWrapFieldToCopy(intArray0[2]);
      yearMonth3.monthOfYear();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.system(zoneOffset0);
      java.time.Instant instant0 = MockInstant.now(clock0);
      Date date0 = Date.from(instant0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(date0);
      Duration duration0 = Duration.millis((-889L));
      Duration duration1 = duration0.minus((ReadableDuration) null);
      Duration duration2 = duration1.abs();
      Minutes minutes0 = duration2.toStandardMinutes();
      duration1.compareTo(duration0);
      yearMonth0.withPeriodAdded(minutes0, 23034375);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = julianChronology0.withZone(dateTimeZone0);
      dateTimeFieldType0.isSupported(chronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.property(dateTimeFieldType0);
      yearMonth_Property0.getReadablePartial();
      YearMonth.now(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2241), 3372, 1213, 0, 0, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      MockDate.UTC(3372, (-435), 0, (-2241), 1389, (-435));
      YearMonth yearMonth1 = yearMonth0.withYear(0);
      yearMonth1.isAfter(yearMonth0);
      YearMonth yearMonth2 = yearMonth_Property0.getYearMonth();
      yearMonth2.size();
      yearMonth1.withYear((-2241));
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1213, (Chronology) null);
      Interval interval0 = new Interval(mutableDateTime0, mutableDateTime0);
      Hours hours0 = Hours.hoursIn(interval0);
      hours0.toStandardDuration();
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      yearMonth_Property0.compareTo((ReadablePartial) yearMonth0);
      YearMonth yearMonth1 = yearMonth_Property0.setCopy(0);
      int int0 = (-1373);
      yearMonth_Property0.addToCopy((-1373));
      yearMonth1.toString();
      YearMonth.parse("0000-02");
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("0000-02");
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime("0000-02", julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"0000-02\": Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3109;
      intArray0[3] = (-1916);
      intArray0[4] = (-2287);
      intArray0[5] = (-669);
      intArray0[6] = (-1571);
      int int0 = 0;
      intArray0[7] = 0;
      intArray0[8] = (-1);
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth((YearMonth) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.getMinimumDaysInFirstWeek();
      GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      yearMonth0.withChronologyRetainFields(gJChronology0);
      int int0 = (-563);
      int int1 = (-867);
      DateTimeZone dateTimeZone0 = null;
      gJChronology0.set(yearMonth0, 0L);
      // Undeclared exception!
      try { 
        yearMonth0.withYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        yearMonth0.getField(0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.getDateTimeMillis((-988L), 0, 0, 0, 0);
      int int0 = 0;
      gregorianChronology0.getDateTimeMillis(1083L, 0, 0, 0, 0);
      YearMonth yearMonth0 = new YearMonth((Chronology) gregorianChronology0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      yearMonth0.toInterval((DateTimeZone) uTCDateTimeZone0);
      yearMonth0.isSupported(dateTimeFieldType0);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      yearMonth1.compareTo((ReadablePartial) yearMonth0);
      YearMonth.Property yearMonth_Property0 = yearMonth1.year();
      yearMonth_Property0.get();
      YearMonth yearMonth2 = yearMonth0.minusYears(int0);
      int int1 = 0;
      Period period0 = Period.minutes(int1);
      PeriodType periodType0 = PeriodType.years();
      Period period1 = period0.withPeriodType(periodType0);
      Days days0 = period1.toStandardDays();
      yearMonth2.withPeriodAdded(days0, intArray0[1]);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = lenientChronology0.withUTC();
      YearMonth yearMonth0 = new YearMonth(0L, chronology0);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, chronology0);
      yearMonth1.size();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial0 = new Partial(dateTimeFieldType0, (-623), lenientChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      yearMonth0.toInterval();
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        yearMonth0.isBefore(localTime0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try { 
        YearMonth.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((-3650L), (Chronology) buddhistChronology0);
      buddhistChronology0.get((ReadablePartial) yearMonth0, (-1236L));
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(buddhistChronology0);
      yearMonth0.getFieldTypes();
      yearMonth1.getYear();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      yearMonth_Property0.get();
      Locale locale0 = Locale.ITALY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      // Undeclared exception!
      try { 
        yearMonth_Property0.setCopy("J>F.", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"J>F.\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      strictChronology0.getZone();
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) strictChronology0);
      yearMonth0.withChronologyRetainFields(strictChronology0);
      MockDate mockDate0 = new MockDate(1, 2, 1);
      YearMonth.fromDateFields(mockDate0);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      YearMonth.fromCalendarFields(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTimeZone.getDefault();
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) uTCDateTimeZone0);
      YearMonth.now((DateTimeZone) uTCDateTimeZone0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      // Undeclared exception!
      try { 
        yearMonth_Property0.setCopy("org/joda/time/tz/data", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org/joda/time/tz/data\" for year is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      YearMonth yearMonth0 = YearMonth.now((DateTimeZone) uTCDateTimeZone0);
      yearMonth0.getMonthOfYear();
      YearMonth yearMonth1 = yearMonth0.minusYears(2);
      String string0 = "";
      String string1 = "Buddhist";
      String string2 = "Drds;i&qRuV1";
      Locale locale0 = new Locale(uTCDateTimeZone0.DEFAULT_TZ_DATA_PATH, string1, string2);
      try { 
        yearMonth1.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) uTCDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth.Property yearMonth_Property0 = yearMonth0.property(dateTimeFieldType0);
      yearMonth_Property0.get();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1L);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      Period period0 = new Period(875L, (Chronology) lenientChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      Period period1 = period0.withField(durationFieldType0, 0);
      Period period2 = period1.withWeeks(1);
      YearMonth yearMonth1 = yearMonth0.minus(period2);
      yearMonth1.toString();
      yearMonth1.year();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      yearMonth0.getField(0);
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      Locale locale0 = Locale.US;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      YearMonth.fromCalendarFields(calendar0);
      // Undeclared exception!
      try { 
        yearMonth0.toLocalDate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]: year: 2014 month: 2
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      int int0 = 4978125;
      yearMonth0.minusMonths(4978125);
      Chronology chronology0 = null;
      // Undeclared exception!
      try { 
        yearMonth0.getField(int0, chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 4978125
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate(142, 142, 142);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      yearMonth_Property0.getField();
      int int0 = (-1164);
      DateTimeZone.forTimeZone((TimeZone) null);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-2285), 24, 4519, 1, 24, 91, 0, julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 91 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try { 
        YearMonth.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1, 1);
      yearMonth0.getFieldType(0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimePrinter0).estimatePrintedLength();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) 1);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-481L), 1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(gJChronology0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forID((String) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      yearMonth0.toString(dateTimeFormatter4);
      yearMonth0.plusMonths(1900);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
      try { 
        YearMonth.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      yearMonth0.withChronologyRetainFields(julianChronology0);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      int int0 = 0;
      yearMonth1.withYear(0);
      // Undeclared exception!
      try { 
        yearMonth1.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      yearMonth0.withYear(364);
      yearMonth0.withMonthOfYear(1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      int int0 = 469;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 2);
      yearMonth0.withChronologyRetainFields(julianChronology0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 469, 0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 469 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(236548278, 1, 1, 0, 236548278, 1);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      Hours hours0 = Hours.THREE;
      yearMonth0.withPeriodAdded(hours0, 0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      yearMonth0.plusYears(4108);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      // Undeclared exception!
      try { 
        yearMonth0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0, 1);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      // Undeclared exception!
      try { 
        yearMonth0.withFieldAdded(durationFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-3029));
      Locale locale0 = Locale.ITALIAN;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      // Undeclared exception!
      try { 
        YearMonth.parse("must not be larger than ", dateTimeFormatter2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"must not be larger than \"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      Period period0 = new Period(1, 1, gJChronology0);
      int int0 = (-640);
      YearMonth yearMonth1 = yearMonth0.minusYears((-640));
      yearMonth1.getField(yearMonth0.YEAR, (Chronology) gJChronology0);
      Period period1 = period0.toPeriod();
      yearMonth0.plus(period1);
      dateTimeFieldType0.getField(gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekOfWeekyear' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.parse("}<*tQ}.=QC[H8;WD4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"}<*tQ}.=QC[H8;WD4\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1;
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      yearMonth1.minusYears(0);
      YearMonth.Property yearMonth_Property0 = yearMonth1.monthOfYear();
      YearMonth yearMonth2 = yearMonth_Property0.addWrapFieldToCopy(intArray0[2]);
      yearMonth2.monthOfYear();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 2316;
      YearMonth.Property yearMonth_Property0 = new YearMonth.Property((YearMonth) null, 2316);
      // Undeclared exception!
      try { 
        yearMonth_Property0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.YearMonth$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null);
      yearMonth0.getFieldTypes();
      yearMonth0.plusMonths((-892));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      // Undeclared exception!
      try { 
        yearMonth0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfHalfday' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      yearMonth_Property0.getName();
      yearMonth_Property0.setCopy(1);
      yearMonth_Property0.setCopy(1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.isStandardOffset(2222L);
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      yearMonth0.getFieldTypes();
      yearMonth0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      // Undeclared exception!
      try { 
        yearMonth0.property(dateTimeFieldType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1507, 0, 0);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Years years0 = Years.THREE;
      yearMonth0.minus(years0);
      MockDate mockDate0 = new MockDate(0, 1507, 1, 1, 29, 0);
      YearMonth.fromDateFields(mockDate0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Hours hours0 = Hours.THREE;
      Minutes minutes0 = hours0.toStandardMinutes();
      Duration duration0 = minutes0.toStandardDuration();
      Duration duration1 = duration0.minus((long) 1);
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      Seconds seconds0 = duration2.toStandardSeconds();
      Duration.standardSeconds(1);
      YearMonth yearMonth1 = yearMonth0.withPeriodAdded(seconds0, (-99));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      // Undeclared exception!
      try { 
        yearMonth1.withField(dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyearOfCentury' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = new Object();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Chronology chronology0 = julianChronology0.withUTC();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(object0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      // Undeclared exception!
      try { 
        yearMonth0.getFieldType((-223));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -223
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 3718;
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth((-1083), 3718, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3718 for monthOfYear must not be larger than 12
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Locale locale0 = Locale.JAPAN;
      timeZone0.getDisplayName(locale0);
      YearMonth yearMonth1 = yearMonth0.plusYears((-1));
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = copticChronology0.withUTC();
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      yearMonth0.withFieldAdded(durationFieldType0, yearMonth1.MONTH_OF_YEAR);
      YearMonth yearMonth2 = YearMonth.now(chronology0);
      yearMonth0.compareTo(yearMonth2);
      String string0 = "";
      // Undeclared exception!
      try { 
        yearMonth1.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      String string0 = "pP7cBf'+{hjmi.?y";
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone("pP7cBf'+{hjmi.?y");
      Chronology chronology0 = iSOChronology0.withZone((DateTimeZone) null);
      YearMonth yearMonth0 = new YearMonth(chronology0);
      ISOChronology.getInstance((DateTimeZone) null);
      YearMonth yearMonth1 = yearMonth0.plusYears(1235);
      String string1 = "'s";
      Locale locale0 = new Locale(string0, string1, dateTimeZone0.DEFAULT_TZ_DATA_PATH);
      try { 
        yearMonth1.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1513);
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Hours hours0 = Hours.hours(1);
      yearMonth0.plus(hours0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      YearMonth yearMonth0 = YearMonth.now((Chronology) iSOChronology0);
      String string0 = "";
      iSOChronology0.set(yearMonth0, 3014L);
      YearMonth.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      dateTimeFieldType0.getDurationType();
      // Undeclared exception!
      try { 
        yearMonth0.withField(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      YearMonth yearMonth0 = YearMonth.parse("", dateTimeFormatter1);
      LocalDate localDate0 = yearMonth0.toLocalDate(1);
      copticChronology0.get((ReadablePartial) localDate0, (long) 1);
      YearMonth yearMonth1 = YearMonth.now((Chronology) copticChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth1.year();
      yearMonth_Property0.addWrapFieldToCopy(539);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-3L), (Chronology) ethiopicChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      yearMonth_Property0.addToCopy(1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth.Property yearMonth_Property0 = yearMonth0.property(dateTimeFieldType0);
      yearMonth_Property0.getYearMonth();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      yearMonth0.toString((String) null);
      YearMonth yearMonth1 = yearMonth0.plusYears(0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      yearMonth1.toInterval((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        yearMonth1.toString(uTCDateTimeZone0.DEFAULT_TZ_DATA_PATH);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = gregorianChronology0.withUTC();
      YearMonth yearMonth0 = YearMonth.now(chronology0);
      yearMonth0.toInterval();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) iSOChronology0);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, (Chronology) iSOChronology0);
      try { 
        yearMonth1.toString("a/B", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      Date date0 = localDate0.toDate();
      YearMonth yearMonth0 = YearMonth.fromDateFields(date0);
      yearMonth0.plusYears(1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 0;
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = null;
      // Undeclared exception!
      try { 
        YearMonth.parse("The provider doesn't have any available ids", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object object0 = new Object();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, (Chronology) buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      // Undeclared exception!
      try { 
        yearMonth1.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfHalfday' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockDate mockDate0 = new MockDate(236548278, 1, 1, 0, 236548278, 1);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid index: ");
      Hours hours0 = Hours.THREE;
      yearMonth0.withPeriodAdded(hours0, 0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
      int int0 = 2;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldType0.getField(iSOChronology0);
      Locale locale0 = Locale.KOREA;
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      // Undeclared exception!
      try { 
        yearMonth_Property0.setCopy("Value ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Value \" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, uTCDateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(uTCDateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now(chronology0);
      uTCDateTimeZone0.writeReplace();
      Seconds seconds0 = Seconds.MAX_VALUE;
      Seconds seconds1 = Seconds.THREE;
      Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      YearMonth yearMonth1 = yearMonth0.withPeriodAdded(seconds0, (-1));
      yearMonth1.minusYears((-2851));
      YearMonth.now((DateTimeZone) uTCDateTimeZone0);
      yearMonth1.getYear();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      // Undeclared exception!
      try { 
        YearMonth.parse(uTCDateTimeZone0.DEFAULT_TZ_DATA_PATH, dateTimeFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        YearMonth.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int[] intArray0 = new int[9];
      JulianChronology.getInstanceUTC();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Object object0 = new Object();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(4016L);
      int int0 = (-1);
      GJChronology gJChronology0 = GJChronology.getInstance();
      // Undeclared exception!
      try { 
        yearMonth0.getField((-1), (Chronology) gJChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -1
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      yearMonth0.withChronologyRetainFields(julianChronology0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("Incomplete parser array");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Incomplete parser array' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Object object0 = new Object();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6d){RGW");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      Locale locale0 = Locale.CANADA_FRENCH;
      yearMonth0.toString("$'$", locale0);
      buddhistChronology0.getZone();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      YearMonth yearMonth1 = null;
      try {
        yearMonth1 = new YearMonth(object0, islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        YearMonth.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      YearMonth yearMonth0 = new YearMonth(0L);
      YearMonth.now();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null, 1);
      YearMonth yearMonth1 = YearMonth.now((Chronology) ethiopicChronology0);
      yearMonth1.withPeriodAdded((ReadablePeriod) null, 0);
      // Undeclared exception!
      try { 
        yearMonth0.toString("org.joda.time.YearMonth");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
      Calendar calendar0 = MockCalendar.getInstance();
      YearMonth.fromCalendarFields(calendar0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1;
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      YearMonth.Property yearMonth_Property0 = yearMonth1.monthOfYear();
      YearMonth yearMonth2 = yearMonth_Property0.addWrapFieldToCopy(0);
      yearMonth2.minusYears(0);
      yearMonth2.monthOfYear();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      int int0 = 640;
      PeriodType periodType0 = PeriodType.yearMonthDay();
      DateTimeZone dateTimeZone0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(640, 1, periodType0, gregorianChronology0);
      yearMonth0.plus(mutablePeriod0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(640);
      yearMonth1.getFields();
      yearMonth1.compareTo(yearMonth0);
      yearMonth0.size();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      int int1 = 6;
      // Undeclared exception!
      try { 
        yearMonth1.withField(dateTimeFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      YearMonth yearMonth1 = YearMonth.fromCalendarFields(calendar0);
      LocalDate localDate0 = new LocalDate((DateTimeZone) uTCDateTimeZone0);
      YearMonth yearMonth2 = yearMonth0.withMonthOfYear(1);
      calendar0.roll(1, true);
      YearMonth yearMonth3 = yearMonth0.plusYears(1);
      YearMonth.Property yearMonth_Property0 = yearMonth1.monthOfYear();
      assertEquals(2, yearMonth_Property0.get());
      
      YearMonth yearMonth4 = YearMonth.fromCalendarFields(calendar0);
      Months months0 = Months.TWO;
      PeriodType periodType0 = months0.getPeriodType();
      int int0 = 0;
      DurationFieldType durationFieldType0 = periodType0.getFieldType(int0);
      yearMonth4.withFieldAdded(durationFieldType0, yearMonth1.YEAR);
      YearMonth yearMonth5 = new YearMonth();
      YearMonth.now();
      YearMonth yearMonth6 = yearMonth3.minus(months0);
      assertEquals(12, yearMonth6.getMonthOfYear());
      assertEquals(2014, yearMonth6.getYear());
      assertFalse(yearMonth0.equals((Object)yearMonth2));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      yearMonth_Property0.get();
      YearMonth yearMonth1 = yearMonth_Property0.setCopy(3);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = locale0.stripExtensions();
      yearMonth_Property0.getAsText(locale1);
      try { 
        yearMonth1.toString("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      dateTimeZone0.getShortName((long) 2);
      LocalTime localTime0 = new LocalTime(2, 1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      LocalTime localTime1 = localTime0.withField(dateTimeFieldType0, 0);
      LocalTime localTime2 = localTime1.withFields(yearMonth0);
      localTime2.getValues();
      yearMonth0.toInterval();
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) localTime2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((-3650L), (Chronology) buddhistChronology0);
      buddhistChronology0.get((ReadablePartial) yearMonth0, (-1236L));
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(buddhistChronology0);
      yearMonth1.toString((String) null);
      yearMonth0.getFieldTypes();
      yearMonth1.getYear();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      yearMonth_Property0.get();
      Locale locale0 = Locale.ITALY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      yearMonth0.getMonthOfYear();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      // Undeclared exception!
      try { 
        yearMonth_Property0.setCopy((String) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for monthOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gregorianChronology0);
      YearMonth yearMonth1 = new YearMonth((Chronology) gregorianChronology0);
      yearMonth0.isAfter(yearMonth1);
      yearMonth0.getField(0, (Chronology) gregorianChronology0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      YearMonth yearMonth2 = new YearMonth(yearMonth0, intArray0);
      Hours hours0 = Hours.hours(95);
      yearMonth0.minus(hours0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      // Undeclared exception!
      try { 
        yearMonth2.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      DateTimeFieldType dateTimeFieldType0 = yearMonth0.getFieldType(0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(2, yearMonth0.size());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Chronology chronology0 = gregorianChronology0.withUTC();
      YearMonth yearMonth1 = YearMonth.now(chronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth1.year();
      assertEquals(2014, yearMonth_Property0.get());
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      YearMonth yearMonth2 = yearMonth1.withYear(675);
      yearMonth1.getMonthOfYear();
      YearMonth yearMonth3 = yearMonth2.withField(dateTimeFieldType0, 1111);
      assertEquals(1899, yearMonth0.getYear());
      assertEquals(675, yearMonth2.getYear());
      assertEquals(1111, yearMonth3.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
  }
}
