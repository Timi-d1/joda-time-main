/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 21:46:26 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Duration_ESTest extends Duration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = new Duration(1L, (-1532L));
      Duration duration1 = duration0.withMillis(2551440384L);
      assertEquals(2551440384L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-4564800000L));
      Duration duration1 = duration0.withMillis((-4564800000L));
      assertEquals((-109555200000L), duration0.getStandardHours());
      assertEquals((-52L), duration1.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.standardDays(175L);
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) null, 2522);
      assertEquals(15120000000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Duration duration0 = minutes0.toStandardDuration();
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, (-1000));
      assertEquals((-119880L), duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-1000L));
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals((-60000L), duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1486L));
      Duration duration1 = duration0.withDurationAdded(690L, 12825000);
      assertEquals(3499650000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod((Chronology) julianChronology0);
      Period period1 = period0.withWeeks((-194));
      Hours hours0 = period1.toStandardHours();
      Duration duration1 = hours0.toStandardDuration();
      Duration duration2 = duration1.withDurationAdded(1873L, (-194));
      assertEquals((-117331563L), duration2.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Duration duration1 = duration0.withDurationAdded(0L, 3600000);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.millis(3793L);
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(3, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-1000L));
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals((-60000L), duration0.getStandardSeconds());
      assertEquals((-60000), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Minutes minutes0 = duration0.ZERO.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-367L));
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals((-22020000L), duration0.getMillis());
      assertEquals((-367), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Days days0 = Days.SIX;
      Duration duration0 = days0.toStandardDuration();
      duration0.ZERO.toStandardHours();
      assertEquals(144L, duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-367L));
      Hours hours0 = duration0.toStandardHours();
      assertEquals((-22020000L), duration0.getMillis());
      assertEquals((-6), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2176L);
      Days days0 = duration0.toStandardDays();
      assertEquals(2176, days0.getDays());
      assertEquals(188006400L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod((Chronology) julianChronology0);
      Period period1 = period0.withWeeks((-194));
      Hours hours0 = period1.toStandardHours();
      Duration duration1 = hours0.toStandardDuration();
      Days days0 = duration1.toStandardDays();
      assertEquals((-1358), days0.getDays());
      assertEquals((-1358L), duration1.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.standardHours(3600000L);
      Duration duration1 = duration0.toDuration();
      assertEquals(12960000000000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.millis(1000L);
      Duration duration1 = duration0.toDuration();
      assertEquals(1L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(3600000L);
      assertEquals(3600000000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-12219292800000L));
      assertEquals((-141427000L), duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(8640L);
      assertEquals(8640L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = Duration.standardMinutes(1647L);
      Duration duration2 = duration0.plus((ReadableDuration) duration1);
      assertEquals(98820000L, duration2.getMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2494L);
      Duration duration1 = duration0.plus(0L);
      assertEquals(215481600L, duration1.getStandardSeconds());
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod((Chronology) julianChronology0);
      Period period1 = period0.withWeeks((-194));
      Hours hours0 = period1.toStandardHours();
      Duration duration1 = hours0.toStandardDuration();
      Duration duration2 = duration1.plus(0L);
      assertSame(duration2, duration1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      Duration duration1 = duration0.plus(0L);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.parse("PT5184000000S");
      assertEquals(86400000L, duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2053L));
      Duration duration1 = duration0.negated();
      assertEquals(7390800L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Days days0 = Days.TWO;
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.ZERO.negated();
      assertEquals(0L, duration1.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Days days0 = Days.SIX;
      Hours hours0 = days0.toStandardHours();
      Duration duration0 = hours0.toStandardDuration();
      Duration duration1 = duration0.multipliedBy((-1453L));
      assertEquals((-209232L), duration1.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.negated();
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      assertEquals(20160L, duration2.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-3012L));
      Duration duration1 = Duration.standardMinutes((-3012L));
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      assertEquals((-10662480000L), duration2.getMillis());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2494L);
      Duration duration1 = duration0.minus(2176L);
      assertEquals(215481597824L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Duration duration0 = new Duration(2050L, 2050L);
      Duration duration1 = duration0.minus(0L);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Duration duration0 = Duration.millis((-12219292800000L));
      assertEquals((-12219292800L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Duration duration0 = Duration.millis((-91L));
      assertEquals((-91L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Duration duration0 = Duration.standardDays(730L);
      Duration duration1 = duration0.negated();
      long long0 = duration1.getStandardSeconds();
      assertEquals((-63072000000L), duration1.getMillis());
      assertEquals((-63072000L), long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.millis(1682L);
      long long0 = duration0.getStandardMinutes();
      assertEquals(0L, long0);
      assertEquals(1682L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.minus(30962844000000L);
      long long0 = duration1.getStandardMinutes();
      assertEquals((-516047400L), long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Duration duration0 = new Duration((-421L), (-421L));
      long long0 = duration0.getStandardHours();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-1000L));
      long long0 = duration0.getStandardHours();
      assertEquals((-16L), long0);
      assertEquals((-60000L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Duration duration0 = Duration.standardDays(25L);
      long long0 = duration0.getStandardDays();
      assertEquals(25L, long0);
      assertEquals(2160000000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-3012L));
      long long0 = duration0.getStandardDays();
      assertEquals((-125L), long0);
      assertEquals((-10843200L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Days days0 = Days.days((-1291));
      Duration duration0 = days0.toStandardDuration();
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      Duration duration1 = duration0.dividedBy((long) (-1291), roundingMode0);
      assertEquals(24L, duration1.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Days days0 = Days.TWO;
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.multipliedBy(9104400000L);
      Duration duration2 = duration1.abs();
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      Duration duration3 = duration2.dividedBy((-91L), roundingMode0);
      assertSame(duration2, duration1);
      assertEquals((-288139252747L), duration3.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Duration duration0 = Duration.millis(1682L);
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      duration0.ZERO.dividedBy((long) 3, roundingMode0);
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1682L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Duration duration0 = Duration.standardDays(175L);
      Duration duration1 = duration0.dividedBy(175L);
      assertEquals(86400000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-4564800000L));
      Duration duration1 = duration0.abs();
      Duration duration2 = duration1.dividedBy((-4564800000L));
      assertEquals((-86400000L), duration2.getMillis());
      assertEquals((-6573312000000L), duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.negated();
      Duration duration2 = duration1.plus((ReadableDuration) duration0);
      Duration duration3 = duration2.dividedBy(168L);
      assertNotSame(duration3, duration2);
      assertEquals(0L, duration3.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Duration duration1 = duration0.abs();
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Days days0 = Days.TWO;
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.multipliedBy(9104400000L);
      Duration duration2 = duration1.abs();
      // Undeclared exception!
      try { 
        duration2.withDurationAdded((ReadableDuration) duration2, 692);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 1573240320000000000 * 692
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      // Undeclared exception!
      try { 
        duration0.withDurationAdded((-9223372036854775808L), (-568));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -568
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(86400000L);
      // Undeclared exception!
      try { 
        duration0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 5184000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Duration duration0 = Duration.standardDays(89460000L);
      // Undeclared exception!
      try { 
        duration0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 128822400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Duration duration0 = Duration.standardHours(21859200000L);
      // Undeclared exception!
      try { 
        duration0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 21859200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      // Undeclared exception!
      try { 
        duration0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15032385529
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardMinutes((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 60000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardHours((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 3600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardDays(31083597720000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 31083597720000 * 86400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.parse("jB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"jB\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Duration duration0 = Duration.standardHours(31536000000L);
      // Undeclared exception!
      try { 
        duration0.multipliedBy((-1652L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 113529600000000000 * -1652
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Duration duration0 = new Duration((-138L));
      // Undeclared exception!
      try { 
        duration0.dividedBy((-91L), (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(3600000L);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        duration0.dividedBy(0L, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Duration duration0 = days0.toStandardDuration();
      // Undeclared exception!
      try { 
        duration0.dividedBy(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object object0 = new Object();
      Duration duration0 = null;
      try {
        duration0 = new Duration(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No duration converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Duration duration0 = null;
      try {
        duration0 = new Duration(2626L, (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 - 2626
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-3242L));
      Duration duration1 = new Duration(duration0);
      assertEquals((-194520L), duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      long long0 = duration0.getStandardDays();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Duration duration0 = new Duration(86400000L);
      long long0 = duration0.getStandardMinutes();
      assertEquals(1440L, long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Duration duration0 = days0.toStandardDuration();
      long long0 = duration0.getStandardHours();
      assertEquals(168L, long0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1L);
      Duration duration1 = duration0.withMillis((-5165L));
      Duration duration2 = duration1.abs();
      assertNotSame(duration2, duration1);
      assertEquals(60000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Duration duration0 = Duration.millis(1000L);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      Duration duration1 = duration0.dividedBy((long) 1, roundingMode0);
      assertSame(duration1, duration0);
      assertEquals(1000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Duration duration0 = Duration.millis(1000L);
      Duration duration1 = duration0.dividedBy((long) 1);
      assertEquals(1000L, duration1.getMillis());
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1L);
      duration0.ZERO.multipliedBy(1L);
      assertEquals(60000L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Duration duration0 = hours0.toStandardDuration();
      Duration duration1 = duration0.ZERO.minus((ReadableDuration) null);
      assertEquals(0L, duration1.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1L);
      Duration duration1 = duration0.plus((ReadableDuration) null);
      assertEquals(60000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-3242L));
      Duration duration1 = duration0.plus((ReadableDuration) duration0);
      assertEquals((-389040000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1L);
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals(60000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      Duration duration0 = seconds0.toStandardDuration();
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, 2147483629);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1L);
      Duration duration1 = duration0.withDurationAdded(217L, 0);
      assertEquals(60000L, duration1.getMillis());
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Duration duration0 = new Duration(86400000L, 86400000L);
      Duration duration1 = duration0.withMillis(0L);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      assertEquals(0L, duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Duration duration0 = Duration.millis(89460000L);
      assertEquals(89460000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Duration duration1 = duration0.toDuration();
      assertEquals(0L, duration1.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardSeconds((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 1000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      // Undeclared exception!
      try { 
        duration0.minus((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      long long0 = duration0.getStandardSeconds();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Duration duration0 = hours0.toStandardDuration();
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals(300L, duration0.getStandardMinutes());
      assertEquals(300, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Duration duration0 = new Duration((-91L));
      // Undeclared exception!
      try { 
        duration0.plus((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -91 + -9223372036854775808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Duration duration0 = hours0.toStandardDuration();
      duration0.ZERO.toStandardSeconds();
      assertEquals(18000L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1505L));
      Duration duration1 = duration0.toDuration();
      assertEquals((-130032000000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Duration duration0 = new Duration(86400000L, 86400000L);
      Days days0 = duration0.ZERO.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Duration duration0 = Duration.parse("PT0S");
      assertEquals(0L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Duration duration0 = hours0.toStandardDuration();
      Hours hours1 = duration0.toStandardHours();
      assertEquals(5L, duration0.getStandardHours());
      assertEquals(5, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1L);
      long long0 = duration0.getStandardSeconds();
      assertEquals(60000L, duration0.getMillis());
      assertEquals(60L, long0);
  }
}
