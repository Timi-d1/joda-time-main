/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 19:26:41 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-961));
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-961), true);
      assertEquals(0L, long0);
      assertEquals("-00:00:00.961", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      long long0 = dateTimeZone0.convertLocalToUTC(757382398481L, false);
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
      assertEquals(757295998482L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertEquals("-23:59:59.999", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 53);
      assertEquals("+00:53", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((byte)11, (byte)59);
      assertEquals("+11:59", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(23);
      assertEquals("+23:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(57);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=+00:00:00.057,offset=57,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("+00:00:00.057", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.previousTransition(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      long long0 = uTCDateTimeZone0.UTC.nextTransition(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      long long0 = uTCDateTimeZone0.nextTransition((-2096L));
      assertEquals((-2096L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      dateTimeZone0.UTC.isFixed();
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Denver");
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      int int0 = uTCDateTimeZone0.getStandardOffset((-98L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(29);
      int int0 = dateTimeZone0.getStandardOffset(0L);
      assertEquals(29, int0);
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-23));
      int int0 = dateTimeZone0.getOffsetFromLocal(0);
      assertEquals((-23), int0);
      assertEquals("-00:00:00.023", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-23));
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals((-23), int0);
      assertEquals("-00:00:00.023", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      int int0 = dateTimeZone0.getOffset((long) 13);
      assertEquals("+13:00", dateTimeZone0.getID());
      assertEquals(46800000, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone("EST");
      int int0 = dateTimeZone0.getOffset(3367L);
      assertEquals((-18000000), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(31449600000L);
      LocalDateTime localDateTime1 = localDateTime0.minusHours(326565);
      dateTimeZone0.isLocalDateTimeGap(localDateTime1);
      dateTimeZone0.getNameKey((-6588L));
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(3);
      Locale locale0 = Locale.CANADA;
      dateTimeZone1.UTC.getName((-6588L), locale0);
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetHours(3);
      assertEquals("+03:00", dateTimeZone2.getID());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      dateTimeZone0.getID();
      String string0 = dateTimeZone0.getShortName((-6588L));
      assertEquals("UTC", string0);
      
      dateTimeZone0.getName((-1L));
      DateTimeZone dateTimeZone3 = DateTimeZone.forTimeZone(timeZone0);
      dateTimeZone3.UTC.previousTransition(3);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      uTCDateTimeZone0.getOffsetFromLocal((-1L));
      dateTimeZone3.isStandardOffset((-6588L));
      uTCDateTimeZone0.convertLocalToUTC((-1350L), false);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone4 = zonedChronology0.getZone();
      dateTimeZone3.equals(dateTimeZone4);
      DateTimeZone dateTimeZone5 = DateTimeZone.forOffsetMillis(86399999);
      assertNotSame(dateTimeZone5, dateTimeZone2);
      assertEquals("+23:59:59.999", dateTimeZone5.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      long long0 = uTCDateTimeZone0.UTC.getMillisKeepLocal(uTCDateTimeZone0, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1852);
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 648L);
      assertEquals((-1204L), long0);
      assertEquals("+00:00:01.852", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(3);
      boolean boolean0 = dateTimeZone1.equals(dateTimeZone0);
      assertFalse(boolean0);
      assertEquals("+03:00", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.UTC.convertUTCToLocal(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      long long0 = uTCDateTimeZone0.convertUTCToLocal(10800000L);
      assertEquals(10800000L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone("EST");
      long long0 = dateTimeZone0.convertLocalToUTC(1879L, false, 1879L);
      assertEquals(18001879L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(10);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 10, false, 1578L);
      assertEquals("+10:00", dateTimeZone0.getID());
      assertEquals((-35999990L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(10);
      long long0 = dateTimeZone0.convertLocalToUTC(196L, false);
      assertEquals("+10:00", dateTimeZone0.getID());
      assertEquals((-35999804L), long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      long long0 = uTCDateTimeZone0.adjustOffset(0L, false);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      long long0 = uTCDateTimeZone0.adjustOffset((-3783L), true);
      assertEquals((-3783L), long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 648L);
      assertEquals(648L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      long long0 = dateTimeZone0.convertUTCToLocal((-1460L));
      assertEquals((-1460L), long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-23), (-23));
      long long0 = dateTimeZone0.convertUTCToLocal(364L);
      assertEquals((-84179636L), long0);
      assertEquals("-23:23", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      String string0 = uTCDateTimeZone0.getName(760L, (Locale) null);
      assertEquals("Coordinated Universal Time", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      Locale locale0 = new Locale("org/joda/time/tz/data", "org/joda/time/tz/data", "org/joda/time/tz/data");
      String string0 = dateTimeZone0.getShortName((long) 13, locale0);
      assertEquals("+13:00", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      String string0 = uTCDateTimeZone0.getShortName((-1L), (Locale) null);
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2440));
      dateTimeZone0.UTC.previousTransition((-1L));
      DateTimeZone.getNameProvider();
      dateTimeZone0.previousTransition((-2440));
      dateTimeZone0.UTC.getOffset(3298L);
      dateTimeZone0.getStandardOffset(0L);
      DateTimeUtils.setCurrentMillisFixed((-1L));
      long long0 = dateTimeZone0.convertLocalToUTC((-1200L), true);
      assertEquals(1240L, long0);
      
      int int0 = dateTimeZone0.getStandardOffset((-1097L));
      assertEquals("-00:00:02.440", dateTimeZone0.getID());
      assertEquals((-2440), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(992, "org/joda/time/tz/data");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'org/joda/time/tz/data' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-86400035), (-86400035));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -86400035
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(702, 702);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 702
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(86400000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 86400000
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(34);
      // Undeclared exception!
      try { 
        dateTimeZone0.convertUTCToLocal(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(57);
      long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-25L));
      assertEquals(32L, long0);
      assertEquals("+00:00:00.057", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      int int0 = dateTimeZone0.getOffsetFromLocal((-1532L));
      assertEquals(43200000, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Denver");
      LocalDateTime localDateTime0 = new LocalDateTime();
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      Locale locale0 = Locale.ROOT;
      String string0 = dateTimeZone0.getName((-757425600001L), locale0);
      assertEquals("New Zealand Daylight Time", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals(46800000, int0);
      assertEquals("+13:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(10000);
      assertEquals("+00:00:10", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3600000);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      Locale locale0 = Locale.JAPANESE;
      uTCDateTimeZone0.getName((long) 3600000, locale0);
      dateTimeZone0.convertLocalToUTC((long) 3600000, false, (long) 3600000);
      int int0 = 0;
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
      TimeZone.getDefault();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeZone.forID("GMT");
      DateTime dateTime0 = DateTime.now();
      dateTimeZone1.getOffset((ReadableInstant) dateTime0);
      dateTimeZone1.hashCode();
      dateTimeZone0.isStandardOffset(0L);
      uTCDateTimeZone0.convertLocalToUTC(0L, true, (long) 0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("U5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'U5' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      DateTimeZone.setProvider(provider0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTimeUtils.setCurrentMillisOffset(0);
      DateTimeZone.getProvider();
      boolean boolean0 = dateTimeZone0.isStandardOffset(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-2028680588));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -2028680588
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(10, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Positive hours must not have negative minutes: -1
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-1400));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1400
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours(2530);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 2530
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, 555);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 555
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("UT-+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-+\" is malformed at \"+\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("UT+'ly2~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+'ly2~\" is malformed at \"'ly2~\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("GMT-+00:00:01.847");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-+00:00:01.847\" is malformed at \"+00:00:01.847\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("GMT+2~8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+2~8\" is malformed at \"2~8\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("UTC-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("UTC+-,7$b{2:Wh#?q+66\".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+-,7$b{2:Wh#?q+66\".\" is malformed at \"-,7$b{2:Wh#?q+66\".\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Z");
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UT");
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTimeZone.setDefault(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTimeZone.LazyInit dateTimeZone_LazyInit0 = new DateTimeZone.LazyInit();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      String string0 = uTCDateTimeZone0.toString();
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Denver");
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("America/Denver", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+03:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:01.847");
      Locale locale0 = new Locale("U'C-", "org/joda/time/tz/data", "U'C-");
      dateTimeZone0.getName(3600L, locale0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.forID((String) null);
      uTCDateTimeZone0.writeReplace();
      uTCDateTimeZone0.previousTransition((-1621L));
      String string0 = DateTimeZone.DEFAULT_TZ_DATA_PATH;
      uTCDateTimeZone0.getOffsetFromLocal(1899L);
      UTCDateTimeZone uTCDateTimeZone1 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U'C-");
      uTCDateTimeZone1.getStandardOffset((-1460L));
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      defaultNameProvider0.getName(locale0, "The offset cannot be zero", "The offset cannot be zero");
      DateTimeZone.setNameProvider(defaultNameProvider0);
      UTCDateTimeZone uTCDateTimeZone2 = (UTCDateTimeZone)DateTimeZone.UTC;
      Object object0 = new Object();
      uTCDateTimeZone2.equals(object0);
      Locale locale1 = Locale.ROOT;
      uTCDateTimeZone0.getName(651L, locale1);
      dateTimeZone0.nextTransition(3600L);
      dateTimeZone0.adjustOffset(1899L, false);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("9-,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '9-,' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(597, set0.size());
  }
}
