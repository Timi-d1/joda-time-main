/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 21:33:43 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormatSymbols;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.UTCDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeUtils_ESTest extends DateTimeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset(1L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeUtils.SystemMillisProvider dateTimeUtils_SystemMillisProvider0 = (DateTimeUtils.SystemMillisProvider)DateTimeUtils.SYSTEM_MILLIS_PROVIDER;
      long long0 = dateTimeUtils_SystemMillisProvider0.getMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeUtils.FixedMillisProvider dateTimeUtils_FixedMillisProvider0 = new DateTimeUtils.FixedMillisProvider(2629746000L);
      long long0 = dateTimeUtils_FixedMillisProvider0.getMillis();
      assertEquals(2629746000L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = DateTimeUtils.toJulianDayNumber((-9223372036854775808L));
      assertEquals((-106749550580L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      PeriodType periodType2 = DateTimeUtils.getPeriodType(periodType1);
      assertEquals(0, periodType2.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      long long0 = DateTimeUtils.getInstantMillis(instant0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.millis(31536000000L);
      long long0 = DateTimeUtils.getDurationMillis(duration0);
      assertEquals(31536000000L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      DateFormatSymbols dateFormatSymbols0 = DateTimeUtils.getDateFormatSymbols(locale0);
      assertEquals("GanjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(2440587.5);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(2440588L);
      assertEquals(43200000L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed(0L);
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed((-83L));
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals((-83L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.setDefaultTimeZoneNames((Map<String, DateTimeZone>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getChronology((Chronology) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Chronology chronology0 = DateTimeUtils.getInstantChronology(instant0);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Instant instant0 = new Instant((-1250L));
      long long0 = DateTimeUtils.getInstantMillis(instant0);
      assertEquals((-1250L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = DateTimeUtils.toJulianDay(58);
      assertEquals(2440587.5000006715, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.getDateFormatSymbols((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.isContiguous((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Partial must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = DateTimeUtils.getDurationMillis((ReadableDuration) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Duration duration0 = minutes0.toStandardDuration();
      long long0 = DateTimeUtils.getDurationMillis(duration0);
      assertEquals((-128849018880000L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodType periodType0 = DateTimeUtils.getPeriodType((PeriodType) null);
      assertEquals("Standard", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeUtils.getZone((DateTimeZone) null);
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeUtils.getZone(uTCDateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-Summer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-Summer\" is malformed at \"Summer\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval((ReadableInterval) null);
      assertEquals(1392409281320L, readableInterval0.getStartMillis());
      assertNotNull(readableInterval0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInterval) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) null, (ReadableInstant) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getInstantChronology((ReadableInstant) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = DateTimeUtils.getInstantMillis((ReadableInstant) null);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.setCurrentMillisProvider((DateTimeUtils.MillisProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The MillisProvider must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeUtils.SystemMillisProvider dateTimeUtils_SystemMillisProvider0 = (DateTimeUtils.SystemMillisProvider)DateTimeUtils.SYSTEM_MILLIS_PROVIDER;
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_SystemMillisProvider0);
      assertEquals(1392409281320L, dateTimeUtils_SystemMillisProvider0.getMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset(0L);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset((-412L));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider((-1000L));
      long long0 = dateTimeUtils_OffsetMillisProvider0.getMillis();
      assertEquals(1392409280320L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeUtils.SystemMillisProvider dateTimeUtils_SystemMillisProvider0 = new DateTimeUtils.SystemMillisProvider();
      assertEquals(1392409281320L, dateTimeUtils_SystemMillisProvider0.getMillis());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeUtils dateTimeUtils0 = new DateTimeUtils();
      assertEquals(1392409281320L, dateTimeUtils0.currentTimeMillis());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = DateTimeUtils.toJulianDayNumber(2629746000L);
      assertEquals(2440618L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Map<String, DateTimeZone> map0 = DateTimeUtils.getDefaultTimeZoneNames();
      DateTimeUtils.setDefaultTimeZoneNames(map0);
      assertEquals(11, map0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay((-409L));
      assertEquals((-210902097600000L), long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeUtils.setCurrentMillisSystem();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeUtils.FixedMillisProvider dateTimeUtils_FixedMillisProvider0 = new DateTimeUtils.FixedMillisProvider(0L);
      long long0 = dateTimeUtils_FixedMillisProvider0.getMillis();
      assertEquals(0L, long0);
  }
}
