/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 23:20:30 GMT 2025
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseDuration_ESTest extends BaseDuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.now();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) instant0, (PeriodType) null);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1567).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("'>Q_c~;", dateTimeFormatter0);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      duration0.toIntervalTo(mutableDateTime0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Days days0 = Days.FIVE;
      Weeks weeks0 = days0.toStandardWeeks();
      Duration duration0 = weeks0.toStandardDuration();
      Interval interval0 = duration0.toIntervalTo((ReadableInstant) null);
      assertEquals(1392409281320L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-1L));
      Duration duration1 = duration0.negated();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((-589L), (Chronology) gJChronology0);
      duration1.toIntervalTo(dateTime0);
      assertEquals((-1000L), duration0.getMillis());
      assertFalse(duration0.equals((Object)duration1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = new Duration(1L, 1L);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Instant instant0 = Instant.parse("", dateTimeFormatter0);
      duration0.toIntervalFrom(instant0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, copticChronology0);
      Days days0 = Days.daysIn(mutableInterval0);
      Period period0 = days0.toPeriod();
      Duration duration0 = period0.toStandardDuration();
      DateTime dateTime0 = new DateTime(1L, (Chronology) copticChronology0);
      DateTime dateTime1 = dateTime0.plusMonths((byte) (-28));
      Interval interval0 = duration0.toIntervalFrom(dateTime1);
      assertEquals((-68255999999L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Duration duration0 = weeks0.toStandardDuration();
      long long0 = duration0.getMillis();
      assertEquals(1209600000L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      long long0 = duration0.getMillis();
      assertEquals((-1298798110310400000L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Duration duration1 = duration0.plus(21859200000L);
      Instant instant0 = Instant.now();
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        duration1.toPeriodTo((ReadableInstant) instant0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 21859200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Duration duration0 = minutes0.toStandardDuration();
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
      try { 
        duration0.toPeriod(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 128849018820
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      long long0 = duration0.getMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withTime(0, 0, 0, 0);
      Duration duration0 = new Duration(dateTime1, dateTime0);
      assertEquals(20L, duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.now();
      Period period0 = duration0.toPeriodTo((ReadableInstant) instant0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.now();
      Interval interval0 = duration0.toIntervalFrom(instant0);
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1567).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("'>Q_c~;", dateTimeFormatter0);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      Weeks weeks0 = Weeks.TWO;
      Seconds seconds0 = weeks0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Instant instant0 = new Instant();
      Chronology chronology0 = instant0.getChronology();
      duration0.toPeriod(periodType0, chronology0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      duration0.toPeriod((Chronology) buddhistChronology0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      Duration duration1 = Duration.standardMinutes(2592000000L);
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      Instant instant0 = new Instant(0L);
      // Undeclared exception!
      try { 
        duration2.toIntervalFrom(instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.millis((-1782L));
      PeriodType periodType0 = PeriodType.yearMonthDay();
      duration0.toPeriod(periodType0);
      assertEquals((-1782L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.now();
      Period period0 = duration0.toPeriodTo((ReadableInstant) instant0, (PeriodType) null);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = Instant.now();
      Duration duration0 = Duration.standardHours(30672000000L);
      PeriodType periodType0 = PeriodType.minutes();
      // Undeclared exception!
      try { 
        duration0.toPeriodFrom((ReadableInstant) instant0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1840320000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.millis((-1782L));
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        duration0.toIntervalTo(dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.ZERO;
      Period period0 = duration0.toPeriodFrom((ReadableInstant) instant0);
      assertNotNull(period0);
  }
}
