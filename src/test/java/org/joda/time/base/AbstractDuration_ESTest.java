/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 21:52:30 GMT 2025
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Duration;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDuration_ESTest extends AbstractDuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = new Duration((-2469L), (-2469L));
      Duration duration1 = duration0.minus((-2027L));
      String string0 = duration1.toString();
      assertEquals("PT2.027S", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.millis((-3197L));
      duration0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.millis(601L);
      Duration duration1 = duration0.negated();
      boolean boolean0 = duration1.equals(duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.millis((-2469L));
      boolean boolean0 = duration0.isLongerThan((ReadableDuration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-326L));
      Duration duration1 = new Duration((-1697L));
      boolean boolean0 = duration0.isEqual(duration1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1696L);
      String string0 = duration0.toString();
      assertEquals("PT6105600S", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1L);
      Duration duration1 = duration0.multipliedBy(3600L);
      Duration duration2 = duration1.toDuration();
      assertSame(duration2, duration1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Duration duration1 = duration0.toDuration();
      assertEquals(0L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-292L));
      Duration duration1 = duration0.toDuration();
      assertEquals((-420480L), duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.millis((-3197L));
      boolean boolean0 = duration0.isShorterThan(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = new Duration(1530L, (-1107L));
      Duration duration1 = duration0.minus((ReadableDuration) duration0);
      boolean boolean0 = duration1.isLongerThan(duration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      // Undeclared exception!
      try { 
        duration0.toPeriod();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -360777252864
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2370L));
      // Undeclared exception!
      try { 
        duration0.compareTo((ReadableDuration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractDuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Duration duration1 = duration0.withMillis((-131L));
      int int0 = duration0.compareTo((ReadableDuration) duration1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(2329L);
      Duration duration1 = duration0.dividedBy(2329L);
      int int0 = duration1.compareTo((ReadableDuration) duration0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      int int0 = duration0.compareTo((ReadableDuration) duration0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.millis((-2516L));
      Duration duration1 = duration0.minus((-2027L));
      String string0 = duration1.toString();
      assertEquals("PT-0.489S", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = new Duration((-2449L), (-2449L));
      String string0 = duration0.toString();
      assertEquals("PT0S", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.millis((-2516L));
      Duration duration1 = duration0.withMillis(0L);
      Duration duration2 = Duration.ZERO;
      boolean boolean0 = duration1.equals(duration2);
      assertFalse(duration2.equals((Object)duration0));
      assertTrue(boolean0);
      assertFalse(duration0.equals((Object)duration2));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = new Duration((-2449L), (-2449L));
      PeriodType periodType0 = PeriodType.time();
      Period period0 = duration0.toPeriod(periodType0);
      boolean boolean0 = duration0.equals(period0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = new Duration(1664L);
      Duration duration1 = Duration.standardSeconds(1664L);
      boolean boolean0 = duration1.equals(duration0);
      assertFalse(boolean0);
      assertFalse(duration0.equals((Object)duration1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = new Duration(1664L);
      boolean boolean0 = duration0.isShorterThan((ReadableDuration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = new Duration((-2469L), (-2469L));
      boolean boolean0 = duration0.isLongerThan((ReadableDuration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = new Duration((-2449L), (-2449L));
      boolean boolean0 = duration0.isEqual((ReadableDuration) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      Duration duration1 = duration0.minus((long) 2879);
      boolean boolean0 = duration0.isEqual(duration1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = new Duration((-492L));
      Duration duration1 = Duration.standardDays(1);
      boolean boolean0 = duration0.isShorterThan(duration1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      boolean boolean0 = duration0.isEqual(duration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = new Duration((-492L));
      Period period0 = duration0.toPeriod();
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Duration duration0 = Duration.millis((-2516L));
      boolean boolean0 = duration0.equals(duration0);
      assertTrue(boolean0);
  }
}
