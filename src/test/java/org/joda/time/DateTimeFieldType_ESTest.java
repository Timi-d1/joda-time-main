/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 23:22:21 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Partial;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeFieldType_ESTest extends DateTimeFieldType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      dateTimeFieldType0.isSupported(buddhistChronology0);
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldType0.getDurationType();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      partial0.toString();
      buddhistChronology0.validate(partial0, intArray0);
      dateTimeFieldType0.getField(buddhistChronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType1.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldType0.getField((Chronology) null);
      dateTimeFieldType0.isSupported((Chronology) null);
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType1.getField((Chronology) null);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldType2.isSupported((Chronology) null);
      DateTimeFieldType.weekyear();
      DurationFieldType durationFieldType0 = dateTimeFieldType1.getRangeDurationType();
      assertEquals("centuries", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      dateTimeFieldType0.getRangeDurationType();
      GJChronology gJChronology0 = GJChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      Chronology chronology0 = gJChronology0.withZone(uTCDateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(chronology0);
      Chronology chronology1 = lenientChronology0.withUTC();
      dateTimeFieldType0.getField(chronology1);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      dateTimeFieldType0.isSupported(islamicChronology0);
      DateTimeFieldType.era();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      dateTimeFieldType0.getDurationType();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      dateTimeFieldType0.getField(julianChronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      dateTimeFieldType1.getRangeDurationType();
      DateTimeFieldType.monthOfYear();
      DateTimeFieldType.weekOfWeekyear();
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldType2.isSupported(julianChronology0);
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType3.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      dateTimeFieldType0.getField(gregorianChronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(13);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = gregorianChronology0.withUTC();
      dateTimeFieldType0.getField(chronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      dateTimeFieldType0.getField((Chronology) null);
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldType1.getDurationType();
      dateTimeFieldType1.getRangeDurationType();
      dateTimeFieldType1.isSupported((Chronology) null);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.yearOfCentury();
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.getMinimumDaysInFirstWeek();
      dateTimeFieldType0.getField(gJChronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldType1.getDurationType();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.centuryOfEra();
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      Chronology chronology0 = gJChronology0.withZone((DateTimeZone) null);
      dateTimeFieldType0.getField(chronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.getDurationType();
      dateTimeFieldType0.toString();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Chronology chronology0 = gJChronology0.withUTC();
      dateTimeFieldType0.isSupported(chronology0);
      DateTimeFieldType.millisOfDay();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType1.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      Chronology chronology0 = julianChronology0.withZone(uTCDateTimeZone0);
      dateTimeFieldType0.getField(chronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfSecond();
      String string0 = dateTimeFieldType1.toString();
      assertEquals("millisOfSecond", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      dateTimeFieldType0.getField(iSOChronology0);
      dateTimeFieldType0.getDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfEra();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldType0.getField((Chronology) null);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
      dateTimeFieldType1.getField((Chronology) null);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.weekyearOfCentury();
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      BuddhistChronology.getInstance();
      dateTimeFieldType0.getField(buddhistChronology0);
      dateTimeFieldType0.getField(buddhistChronology0);
      dateTimeFieldType0.getDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType1.getDurationType();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldType1.getRangeDurationType();
      dateTimeFieldType2.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.secondOfMinute();
      assertFalse(dateTimeFieldType3.equals((Object)dateTimeFieldType0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Chronology chronology0 = copticChronology0.withUTC();
      dateTimeFieldType0.isSupported(chronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.secondOfDay();
      dateTimeFieldType2.getRangeDurationType();
      dateTimeFieldType1.getDurationType();
      DateTimeFieldType.secondOfDay();
      dateTimeFieldType1.getName();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType3.getName();
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType4.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Chronology chronology0 = iSOChronology0.withUTC();
      dateTimeFieldType0.isSupported(chronology0);
      dateTimeFieldType0.getDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldType1.getDurationType();
      dateTimeFieldType1.getDurationType();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfWeek();
      DateTimeFieldType.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.era();
      assertFalse(dateTimeFieldType3.equals((Object)dateTimeFieldType2));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      dateTimeFieldType0.getField(ethiopicChronology0);
      dateTimeFieldType0.getDurationType();
      dateTimeFieldType0.getDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
      dateTimeFieldType1.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType2.isSupported(ethiopicChronology0);
      DateTimeFieldType.secondOfDay();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldType3.getDurationType();
      DateTimeFieldType.millisOfSecond();
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.millisOfSecond();
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldType4.getRangeDurationType();
      dateTimeFieldType5.getField(ethiopicChronology0);
      dateTimeFieldType4.getDurationType();
      DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType1.isSupported(ethiopicChronology0);
      DateTimeFieldType.dayOfWeek();
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.monthOfYear();
      assertFalse(dateTimeFieldType6.equals((Object)dateTimeFieldType4));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
      uTCDateTimeZone0.convertUTCToLocal(1633L);
      Chronology chronology0 = lenientChronology0.withZone(uTCDateTimeZone0);
      dateTimeFieldType0.getField(chronology0);
      DateTimeFieldType.weekyear();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeFieldType.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType0.getDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      dateTimeFieldType1.getField(julianChronology0);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldType2.getRangeDurationType();
      String string0 = dateTimeFieldType2.toString();
      assertEquals("yearOfCentury", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType.secondOfMinute();
      DateTimeFieldType.yearOfCentury();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType1.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType0.getName();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType1.getRangeDurationType();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      ethiopicChronology0.withZone(dateTimeZone0);
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(ethiopicChronology0);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeFieldType.era();
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try { 
        CopticChronology.getInstance((DateTimeZone) null, (-1702));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1702
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
      assertSame(durationFieldType1, durationFieldType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("days", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      dateTimeFieldType0.getRangeDurationType();
      String string0 = dateTimeFieldType0.toString();
      assertEquals("era", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfHalfday();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFieldType.clockhourOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(10, 10);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      boolean boolean0 = dateTimeFieldType0.isSupported(islamicChronology0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType.minuteOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(9);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weekyears();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      dateTimeFieldType1.getName();
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFieldType.halfdayOfDay();
      DateTimeFieldType.weekOfWeekyear();
      DateTimeFieldType.millisOfSecond();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType2.getName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      dateTimeFieldType0.isSupported(copticChronology0);
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      DateTimeFieldType.monthOfYear();
      DateTimeFieldType.secondOfMinute();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.yearOfEra();
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      Chronology chronology0 = julianChronology0.withZone(uTCDateTimeZone0);
      dateTimeFieldType0.getField(chronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfSecond();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Chronology chronology1 = buddhistChronology0.withZone(uTCDateTimeZone0);
      dateTimeFieldType1.getField(chronology1);
      dateTimeFieldType1.isSupported(julianChronology0);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType2.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.minuteOfDay();
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.era();
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType5.getDurationType();
      dateTimeFieldType3.getField(chronology0);
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldType6.getRangeDurationType();
      DateTimeFieldType.minuteOfHour();
      DateTimeFieldType dateTimeFieldType7 = DateTimeFieldType.year();
      dateTimeFieldType3.getName();
      DateTimeFieldType dateTimeFieldType8 = DateTimeFieldType.secondOfDay();
      dateTimeFieldType8.getDurationType();
      dateTimeFieldType4.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType9 = DateTimeFieldType.monthOfYear();
      dateTimeFieldType9.getRangeDurationType();
      dateTimeFieldType9.isSupported(chronology0);
      DateTimeFieldType dateTimeFieldType10 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType10.getRangeDurationType();
      dateTimeFieldType10.getField(chronology0);
      dateTimeFieldType4.toString();
      dateTimeFieldType7.getName();
      DateTimeFieldType.weekyear();
      DateTimeFieldType dateTimeFieldType11 = DateTimeFieldType.dayOfMonth();
      assertFalse(dateTimeFieldType11.equals((Object)dateTimeFieldType5));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldType0.isSupported(julianChronology0);
      dateTimeFieldType0.isSupported(julianChronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldType1.isSupported(julianChronology0);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.millisOfDay();
      dateTimeFieldType2.isSupported(julianChronology0);
      dateTimeFieldType2.getDurationType();
      dateTimeFieldType2.getRangeDurationType();
      dateTimeFieldType2.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.monthOfYear();
      dateTimeFieldType4.getField(julianChronology0);
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.weekyear();
      DateTimeFieldType.yearOfEra();
      dateTimeFieldType3.getDurationType();
      dateTimeFieldType5.getField(julianChronology0);
      DateTimeFieldType.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.minuteOfHour();
      DateTimeFieldType dateTimeFieldType7 = DateTimeFieldType.secondOfDay();
      assertFalse(dateTimeFieldType7.equals((Object)dateTimeFieldType6));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("clockhourOfHalfday");
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Chronology chronology0 = gregorianChronology0.withUTC();
      dateTimeFieldType0.getField(chronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldType1.getDurationType();
      dateTimeFieldType1.isSupported(chronology0);
      dateTimeFieldType1.getField(chronology0);
      dateTimeFieldType0.getName();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldType2.isSupported(gregorianChronology0);
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldType3.getDurationType();
      dateTimeFieldType3.getField(gregorianChronology0);
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType4.getField(chronology0);
      DateTimeFieldType.yearOfEra();
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldType5.getDurationType();
      DateTimeFieldType.secondOfMinute();
      dateTimeFieldType5.getField(gregorianChronology0);
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.hourOfDay();
      DateTimeFieldType.secondOfDay();
      dateTimeFieldType2.getRangeDurationType();
      DateTimeFieldType.minuteOfDay();
      dateTimeFieldType6.getName();
      DateTimeFieldType dateTimeFieldType7 = DateTimeFieldType.secondOfDay();
      assertFalse(dateTimeFieldType7.equals((Object)dateTimeFieldType4));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      GJChronology gJChronology0 = GJChronology.getInstance();
      dateTimeFieldType0.isSupported(gJChronology0);
      DateTimeFieldType.weekyear();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
      dateTimeFieldType1.getDurationType();
      dateTimeFieldType1.getRangeDurationType();
      gJChronology0.getMinimumDaysInFirstWeek();
      dateTimeFieldType1.getField(gJChronology0);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.weekOfWeekyear();
      DateTimeField dateTimeField0 = dateTimeFieldType2.getField(gJChronology0);
      dateTimeFieldType2.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.monthOfYear();
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldType4.getRangeDurationType();
      dateTimeFieldType3.getRangeDurationType();
      DateTimeFieldType.hourOfHalfday();
      DateTimeFieldType.minuteOfHour();
      DateTimeFieldType.minuteOfDay();
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.dayOfYear();
      DateTimeField dateTimeField1 = dateTimeFieldType5.getField(gJChronology0);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      dateTimeFieldType0.isSupported(strictChronology0);
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.toString();
      DateTimeFieldType.weekyear();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.monthOfYear();
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType.dayOfWeek();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfEra();
      dateTimeFieldType1.getDurationType();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldType2.isSupported(buddhistChronology0);
      DateTimeFieldType.hourOfDay();
      DateTimeFieldType.hourOfHalfday();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfDay();
      dateTimeFieldType3.getDurationType();
      DateTimeFieldType.minuteOfDay();
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.secondOfDay();
      dateTimeFieldType4.isSupported(buddhistChronology0);
      DateTimeFieldType.hourOfHalfday();
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFieldType.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType5.getName());
  }
}
