/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 20:57:42 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.net.URI;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateMidnight_ESTest extends DateMidnight_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = Integer.MAX_VALUE;
      Period period0 = new Period(165, Integer.MAX_VALUE, (-1), Integer.MAX_VALUE, 292278993, 165, Integer.MAX_VALUE, 292278993);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withPeriodAdded(period0, 4682);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: 10054518435254
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((-61753104000000L), (Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals((-61753104000000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.minusMonths(2146124481);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = (-4339);
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks((-4339));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(2624227200000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      Years years0 = Years.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.minus((ReadablePeriod) years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481677 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)16;
      byte byte0 = (byte) (-28);
      byteArray0[2] = (byte) (-28);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)16, (byte) (-28)}, byteArray0);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-353L));
      DateMidnight dateMidnight0 = new DateMidnight((Object) null);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = dateMidnight0.getMinuteOfDay();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals(0, int0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      Interval interval0 = dateMidnight0.toInterval();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals((-86400000L), interval0.getStartMillis());
      assertNotNull(interval0);
      
      int int1 = 93;
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekOfWeekyear(93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 93 for weekOfWeekyear must be in the range [1,53]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      System.setCurrentTimeMillis(4511L);
      DateMidnight dateMidnight0 = new DateMidnight(4511L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1410));
      assertEquals("-00:00:01.410", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.410", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals("-00:00:01.410", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.410", dateTimeZone0.toString());
      assertEquals(1410L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("-00:00:01.410", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.410", dateTimeZone0.toString());
      assertNotNull(copticChronology0);
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withUTC();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals("-00:00:01.410", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.410", dateTimeZone0.toString());
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      
      DateMidnight dateMidnight2 = DateMidnight.now((Chronology) copticChronology1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals("-00:00:01.410", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.410", dateTimeZone0.toString());
      assertEquals(0L, dateMidnight2.getMillis());
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight1.withPeriodAdded((ReadablePeriod) null, 2147483644);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals("-00:00:01.410", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.410", dateTimeZone0.toString());
      assertEquals(1410L, dateMidnight1.getMillis());
      assertEquals(1410L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight3.minusYears((-17));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals("-00:00:01.410", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.410", dateTimeZone0.toString());
      assertEquals(1410L, dateMidnight1.getMillis());
      assertEquals(1410L, dateMidnight3.getMillis());
      assertEquals(536457601410L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotNull(dateMidnight4);
      
      long long0 = (-1253L);
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (long) (-1410), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) 1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(0, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter4);
      
      DateMidnight dateMidnight2 = dateMidnight1.minusMonths(0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight1.minusWeeks(1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(1391731200000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      // Undeclared exception!
      try { 
        dateMidnight1.withEra(20);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.roundCeilingCopy();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1410393600000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) dateMidnight0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) 1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(0);
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(0, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter4);
      
      DateMidnight dateMidnight3 = dateMidnight1.minusMonths(0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotNull(dateMidnight3);
      
      long long0 = dateMidnight_Property0.getMillis();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertEquals(1392336000000L, long0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        dateMidnight1.withField(dateTimeFieldType0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertNotNull(uTCDateTimeZone0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      assertFalse(boolean0);
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withZone(uTCDateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      
      DateMidnight dateMidnight0 = new DateMidnight(3281L, (Chronology) ethiopicChronology1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withEra(1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertNotNull(weeks0);
      
      DateMidnight dateMidnight2 = dateMidnight1.minus((ReadablePeriod) weeks0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0L, dateMidnight2.getMillis());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      System.setCurrentTimeMillis(4511L);
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1410));
      assertEquals("-00:00:01.410", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.410", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals("-00:00:01.410", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.410", dateTimeZone0.toString());
      assertEquals(1410L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = 2112278998;
      // Undeclared exception!
      try { 
        dateMidnight1.withEra(2112278998);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2112278998 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.roundCeilingCopy();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1410393600000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) 1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      
      LocalDate localDate0 = dateTimeFormatter3.parseLocalDate("");
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(3, localDate0.size());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(localDate0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(0, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter4);
      
      DateMidnight dateMidnight3 = dateMidnight1.minusMonths(0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      long long0 = dateMidnight_Property0.getMillis();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertEquals(1392336000000L, long0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded(durationFieldType0, (-2846));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(86400L, (DateTimeZone) null);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfMonth();
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.weekOfWeekyear();
      assertEquals(0L, dateMidnight0.getMillis());
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      DateMidnight dateMidnight1 = dateMidnight0.withYear(11);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61820064000000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = dateMidnight0.getCenturyOfEra();
      assertEquals(0L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals(19, int0);
      
      Date date0 = dateMidnight0.toDate();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotNull(date0);
      
      DateMidnight dateMidnight2 = dateMidnight1.withDurationAdded(341L, 11);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61820064000000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight1.withDurationAdded((long) 11, 11);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61820064000000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight3.withZoneRetainFields((DateTimeZone) null);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61820064000000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight3.getMillis());
      assertEquals((-61820064000000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      DateMidnight.Property dateMidnight_Property2 = dateMidnight3.year();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61820064000000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property0);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property1);
      assertNotNull(dateMidnight_Property2);
      
      DateMidnight dateMidnight5 = dateMidnight3.plusYears(1435);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61820064000000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight3.getMillis());
      assertEquals((-16535836800000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotNull(dateMidnight5);
      
      DateMidnight dateMidnight6 = dateMidnight0.plusWeeks(Integer.MAX_VALUE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(1298798109705600000L, dateMidnight6.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotNull(dateMidnight6);
      
      DateMidnight.Property dateMidnight_Property3 = dateMidnight3.yearOfCentury();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61820064000000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight_Property3.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight_Property3.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight_Property3.equals((Object)dateMidnight_Property2));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight_Property3, dateMidnight_Property1);
      assertNotSame(dateMidnight_Property3, dateMidnight_Property0);
      assertNotSame(dateMidnight_Property3, dateMidnight_Property2);
      assertNotNull(dateMidnight_Property3);
      
      DateMidnight.Property dateMidnight_Property4 = dateMidnight5.yearOfEra();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61820064000000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight3.getMillis());
      assertEquals((-16535836800000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight_Property4.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight_Property4.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight_Property4.equals((Object)dateMidnight_Property2));
      assertFalse(dateMidnight_Property4.equals((Object)dateMidnight_Property3));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight_Property4, dateMidnight_Property1);
      assertNotSame(dateMidnight_Property4, dateMidnight_Property0);
      assertNotSame(dateMidnight_Property4, dateMidnight_Property2);
      assertNotSame(dateMidnight_Property4, dateMidnight_Property3);
      assertNotNull(dateMidnight_Property4);
      
      DateMidnight dateMidnight7 = dateMidnight0.withDayOfYear(19);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(1555200000L, dateMidnight7.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertNotNull(dateMidnight7);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DurationField durationField0 = buddhistChronology0.weeks();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
      
      DateMidnight.Property dateMidnight_Property5 = dateMidnight0.yearOfEra();
      assertEquals(0L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property5.equals((Object)dateMidnight_Property3));
      assertFalse(dateMidnight_Property5.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight_Property5.equals((Object)dateMidnight_Property2));
      assertFalse(dateMidnight_Property5.equals((Object)dateMidnight_Property4));
      assertFalse(dateMidnight_Property5.equals((Object)dateMidnight_Property1));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight_Property5, dateMidnight_Property3);
      assertNotSame(dateMidnight_Property5, dateMidnight_Property0);
      assertNotSame(dateMidnight_Property5, dateMidnight_Property2);
      assertNotSame(dateMidnight_Property5, dateMidnight_Property4);
      assertNotSame(dateMidnight_Property5, dateMidnight_Property1);
      assertNotNull(dateMidnight_Property5);
      
      DateMidnight dateMidnight8 = dateMidnight5.withCenturyOfEra(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-60715526400000L), dateMidnight8.getMillis());
      assertEquals((-61820064000000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight3.getMillis());
      assertEquals((-16535836800000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight8.equals((Object)dateMidnight0));
      assertFalse(dateMidnight8.equals((Object)dateMidnight1));
      assertFalse(dateMidnight8.equals((Object)dateMidnight7));
      assertFalse(dateMidnight8.equals((Object)dateMidnight5));
      assertFalse(dateMidnight8.equals((Object)dateMidnight6));
      assertFalse(dateMidnight8.equals((Object)dateMidnight2));
      assertFalse(dateMidnight8.equals((Object)dateMidnight3));
      assertFalse(dateMidnight8.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight7));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight7));
      assertFalse(dateMidnight5.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight8, dateMidnight0);
      assertNotSame(dateMidnight8, dateMidnight1);
      assertNotSame(dateMidnight8, dateMidnight7);
      assertNotSame(dateMidnight8, dateMidnight5);
      assertNotSame(dateMidnight8, dateMidnight6);
      assertNotSame(dateMidnight8, dateMidnight2);
      assertNotSame(dateMidnight8, dateMidnight3);
      assertNotSame(dateMidnight8, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight8);
      assertNotSame(dateMidnight3, dateMidnight7);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight7);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight8);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotNull(dateMidnight8);
      
      DateMidnight dateMidnight9 = dateMidnight0.plusDays(11);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(950400000L, dateMidnight9.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight8));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight9.equals((Object)dateMidnight3));
      assertFalse(dateMidnight9.equals((Object)dateMidnight7));
      assertFalse(dateMidnight9.equals((Object)dateMidnight0));
      assertFalse(dateMidnight9.equals((Object)dateMidnight2));
      assertFalse(dateMidnight9.equals((Object)dateMidnight8));
      assertFalse(dateMidnight9.equals((Object)dateMidnight1));
      assertFalse(dateMidnight9.equals((Object)dateMidnight4));
      assertFalse(dateMidnight9.equals((Object)dateMidnight6));
      assertFalse(dateMidnight9.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight9, dateMidnight3);
      assertNotSame(dateMidnight9, dateMidnight7);
      assertNotSame(dateMidnight9, dateMidnight0);
      assertNotSame(dateMidnight9, dateMidnight2);
      assertNotSame(dateMidnight9, dateMidnight8);
      assertNotSame(dateMidnight9, dateMidnight1);
      assertNotSame(dateMidnight9, dateMidnight4);
      assertNotSame(dateMidnight9, dateMidnight6);
      assertNotSame(dateMidnight9, dateMidnight5);
      assertNotNull(dateMidnight9);
      
      DateMidnight dateMidnight10 = dateMidnight9.withDayOfMonth(1);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(950400000L, dateMidnight9.getMillis());
      assertEquals(0L, dateMidnight10.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight8));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight9.equals((Object)dateMidnight3));
      assertFalse(dateMidnight9.equals((Object)dateMidnight7));
      assertFalse(dateMidnight9.equals((Object)dateMidnight0));
      assertFalse(dateMidnight9.equals((Object)dateMidnight2));
      assertFalse(dateMidnight9.equals((Object)dateMidnight8));
      assertFalse(dateMidnight9.equals((Object)dateMidnight1));
      assertFalse(dateMidnight9.equals((Object)dateMidnight4));
      assertFalse(dateMidnight9.equals((Object)dateMidnight6));
      assertFalse(dateMidnight9.equals((Object)dateMidnight5));
      assertFalse(dateMidnight10.equals((Object)dateMidnight6));
      assertFalse(dateMidnight10.equals((Object)dateMidnight1));
      assertFalse(dateMidnight10.equals((Object)dateMidnight7));
      assertFalse(dateMidnight10.equals((Object)dateMidnight4));
      assertFalse(dateMidnight10.equals((Object)dateMidnight3));
      assertFalse(dateMidnight10.equals((Object)dateMidnight2));
      assertTrue(dateMidnight10.equals((Object)dateMidnight0));
      assertFalse(dateMidnight10.equals((Object)dateMidnight9));
      assertFalse(dateMidnight10.equals((Object)dateMidnight8));
      assertFalse(dateMidnight10.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight9, dateMidnight3);
      assertNotSame(dateMidnight9, dateMidnight7);
      assertNotSame(dateMidnight9, dateMidnight0);
      assertNotSame(dateMidnight9, dateMidnight2);
      assertNotSame(dateMidnight9, dateMidnight8);
      assertNotSame(dateMidnight9, dateMidnight1);
      assertNotSame(dateMidnight9, dateMidnight4);
      assertNotSame(dateMidnight9, dateMidnight6);
      assertNotSame(dateMidnight9, dateMidnight5);
      assertNotSame(dateMidnight9, dateMidnight10);
      assertNotSame(dateMidnight10, dateMidnight6);
      assertNotSame(dateMidnight10, dateMidnight1);
      assertNotSame(dateMidnight10, dateMidnight7);
      assertNotSame(dateMidnight10, dateMidnight4);
      assertNotSame(dateMidnight10, dateMidnight3);
      assertNotSame(dateMidnight10, dateMidnight2);
      assertNotSame(dateMidnight10, dateMidnight9);
      assertNotSame(dateMidnight10, dateMidnight0);
      assertNotSame(dateMidnight10, dateMidnight8);
      assertNotSame(dateMidnight10, dateMidnight5);
      assertNotNull(dateMidnight10);
      
      DateMidnight dateMidnight11 = dateMidnight_Property0.addWrapFieldToCopy(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight11.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight8));
      assertTrue(dateMidnight0.equals((Object)dateMidnight10));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property5));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property3));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property2));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property4));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight11.equals((Object)dateMidnight8));
      assertFalse(dateMidnight11.equals((Object)dateMidnight4));
      assertFalse(dateMidnight11.equals((Object)dateMidnight1));
      assertFalse(dateMidnight11.equals((Object)dateMidnight7));
      assertFalse(dateMidnight11.equals((Object)dateMidnight2));
      assertFalse(dateMidnight11.equals((Object)dateMidnight6));
      assertFalse(dateMidnight11.equals((Object)dateMidnight3));
      assertTrue(dateMidnight11.equals((Object)dateMidnight10));
      assertFalse(dateMidnight11.equals((Object)dateMidnight9));
      assertFalse(dateMidnight11.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight11);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property5);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property3);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property2);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property4);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight11, dateMidnight8);
      assertNotSame(dateMidnight11, dateMidnight4);
      assertNotSame(dateMidnight11, dateMidnight1);
      assertSame(dateMidnight11, dateMidnight0);
      assertNotSame(dateMidnight11, dateMidnight7);
      assertNotSame(dateMidnight11, dateMidnight2);
      assertNotSame(dateMidnight11, dateMidnight6);
      assertNotSame(dateMidnight11, dateMidnight3);
      assertNotSame(dateMidnight11, dateMidnight10);
      assertNotSame(dateMidnight11, dateMidnight9);
      assertNotSame(dateMidnight11, dateMidnight5);
      assertNotNull(dateMidnight11);
      
      Duration duration0 = new Duration(341L);
      assertEquals(341L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertNotNull(duration0);
      
      boolean boolean0 = dateMidnight3.isAfter(dateMidnight4);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61820064000000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight3.getMillis());
      assertEquals((-61820064000000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight8));
      assertTrue(dateMidnight0.equals((Object)dateMidnight10));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight10));
      assertFalse(dateMidnight1.equals((Object)dateMidnight9));
      assertFalse(dateMidnight1.equals((Object)dateMidnight8));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight11));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight8));
      assertFalse(dateMidnight3.equals((Object)dateMidnight9));
      assertFalse(dateMidnight3.equals((Object)dateMidnight10));
      assertFalse(dateMidnight3.equals((Object)dateMidnight11));
      assertFalse(dateMidnight3.equals((Object)dateMidnight7));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight4.equals((Object)dateMidnight6));
      assertFalse(dateMidnight4.equals((Object)dateMidnight8));
      assertFalse(dateMidnight4.equals((Object)dateMidnight10));
      assertFalse(dateMidnight4.equals((Object)dateMidnight7));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight9));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight11));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight11);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight10);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight9);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight11);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight8);
      assertNotSame(dateMidnight3, dateMidnight9);
      assertNotSame(dateMidnight3, dateMidnight10);
      assertNotSame(dateMidnight3, dateMidnight11);
      assertNotSame(dateMidnight3, dateMidnight7);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertNotSame(dateMidnight4, dateMidnight8);
      assertNotSame(dateMidnight4, dateMidnight10);
      assertNotSame(dateMidnight4, dateMidnight7);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight9);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight11);
      assertSame(dateMidnight4, dateMidnight1);
      assertFalse(boolean0);
      
      Duration duration1 = Duration.standardMinutes(0L);
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      
      DateMidnight dateMidnight12 = dateMidnight8.minus((ReadableDuration) duration0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-60715526400000L), dateMidnight8.getMillis());
      assertEquals((-61820064000000L), dateMidnight1.getMillis());
      assertEquals(341L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-61820064000000L), dateMidnight3.getMillis());
      assertEquals((-60715612800000L), dateMidnight12.getMillis());
      assertEquals((-16535836800000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight8));
      assertTrue(dateMidnight0.equals((Object)dateMidnight10));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight8.equals((Object)dateMidnight11));
      assertFalse(dateMidnight8.equals((Object)dateMidnight9));
      assertFalse(dateMidnight8.equals((Object)dateMidnight0));
      assertFalse(dateMidnight8.equals((Object)dateMidnight1));
      assertFalse(dateMidnight8.equals((Object)dateMidnight7));
      assertFalse(dateMidnight8.equals((Object)dateMidnight5));
      assertFalse(dateMidnight8.equals((Object)dateMidnight6));
      assertFalse(dateMidnight8.equals((Object)dateMidnight10));
      assertFalse(dateMidnight8.equals((Object)dateMidnight2));
      assertFalse(dateMidnight8.equals((Object)dateMidnight3));
      assertFalse(dateMidnight8.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight10));
      assertFalse(dateMidnight1.equals((Object)dateMidnight9));
      assertFalse(dateMidnight1.equals((Object)dateMidnight8));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight11));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight8));
      assertFalse(dateMidnight3.equals((Object)dateMidnight9));
      assertFalse(dateMidnight3.equals((Object)dateMidnight10));
      assertFalse(dateMidnight3.equals((Object)dateMidnight11));
      assertFalse(dateMidnight3.equals((Object)dateMidnight7));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight12.equals((Object)dateMidnight3));
      assertFalse(dateMidnight12.equals((Object)dateMidnight0));
      assertFalse(dateMidnight12.equals((Object)dateMidnight10));
      assertFalse(dateMidnight12.equals((Object)dateMidnight5));
      assertFalse(dateMidnight12.equals((Object)dateMidnight9));
      assertFalse(dateMidnight12.equals((Object)dateMidnight4));
      assertFalse(dateMidnight12.equals((Object)dateMidnight8));
      assertFalse(dateMidnight12.equals((Object)dateMidnight1));
      assertFalse(dateMidnight12.equals((Object)dateMidnight6));
      assertFalse(dateMidnight12.equals((Object)dateMidnight7));
      assertFalse(dateMidnight12.equals((Object)dateMidnight11));
      assertFalse(dateMidnight12.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight7));
      assertFalse(dateMidnight5.equals((Object)dateMidnight10));
      assertFalse(dateMidnight5.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight9));
      assertFalse(dateMidnight5.equals((Object)dateMidnight8));
      assertFalse(dateMidnight5.equals((Object)dateMidnight11));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight11);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight12);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight8, dateMidnight11);
      assertNotSame(dateMidnight8, dateMidnight9);
      assertNotSame(dateMidnight8, dateMidnight1);
      assertNotSame(dateMidnight8, dateMidnight0);
      assertNotSame(dateMidnight8, dateMidnight12);
      assertNotSame(dateMidnight8, dateMidnight7);
      assertNotSame(dateMidnight8, dateMidnight5);
      assertNotSame(dateMidnight8, dateMidnight6);
      assertNotSame(dateMidnight8, dateMidnight10);
      assertNotSame(dateMidnight8, dateMidnight2);
      assertNotSame(dateMidnight8, dateMidnight3);
      assertNotSame(dateMidnight8, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight12);
      assertNotSame(dateMidnight1, dateMidnight10);
      assertNotSame(dateMidnight1, dateMidnight9);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight11);
      assertNotSame(duration0, duration1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight8);
      assertNotSame(dateMidnight3, dateMidnight9);
      assertNotSame(dateMidnight3, dateMidnight12);
      assertNotSame(dateMidnight3, dateMidnight10);
      assertNotSame(dateMidnight3, dateMidnight11);
      assertNotSame(dateMidnight3, dateMidnight7);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertNotSame(dateMidnight12, dateMidnight3);
      assertNotSame(dateMidnight12, dateMidnight0);
      assertNotSame(dateMidnight12, dateMidnight10);
      assertNotSame(dateMidnight12, dateMidnight5);
      assertNotSame(dateMidnight12, dateMidnight9);
      assertNotSame(dateMidnight12, dateMidnight4);
      assertNotSame(dateMidnight12, dateMidnight8);
      assertNotSame(dateMidnight12, dateMidnight1);
      assertNotSame(dateMidnight12, dateMidnight6);
      assertNotSame(dateMidnight12, dateMidnight7);
      assertNotSame(dateMidnight12, dateMidnight11);
      assertNotSame(dateMidnight12, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight12);
      assertNotSame(dateMidnight5, dateMidnight7);
      assertNotSame(dateMidnight5, dateMidnight10);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight9);
      assertNotSame(dateMidnight5, dateMidnight8);
      assertNotSame(dateMidnight5, dateMidnight11);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotNull(dateMidnight12);
      
      DateMidnight dateMidnight13 = dateMidnight_Property0.roundCeilingCopy();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight13.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight8));
      assertFalse(dateMidnight0.equals((Object)dateMidnight12));
      assertTrue(dateMidnight0.equals((Object)dateMidnight10));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property5));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property3));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property2));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property4));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertTrue(dateMidnight13.equals((Object)dateMidnight10));
      assertFalse(dateMidnight13.equals((Object)dateMidnight1));
      assertFalse(dateMidnight13.equals((Object)dateMidnight6));
      assertFalse(dateMidnight13.equals((Object)dateMidnight7));
      assertFalse(dateMidnight13.equals((Object)dateMidnight5));
      assertFalse(dateMidnight13.equals((Object)dateMidnight2));
      assertFalse(dateMidnight13.equals((Object)dateMidnight12));
      assertFalse(dateMidnight13.equals((Object)dateMidnight4));
      assertFalse(dateMidnight13.equals((Object)dateMidnight8));
      assertFalse(dateMidnight13.equals((Object)dateMidnight9));
      assertFalse(dateMidnight13.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight13);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight11);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight12);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property5);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property3);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property2);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property4);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertSame(dateMidnight13, dateMidnight0);
      assertNotSame(dateMidnight13, dateMidnight7);
      assertNotSame(dateMidnight13, dateMidnight2);
      assertNotSame(dateMidnight13, dateMidnight9);
      assertNotSame(dateMidnight13, dateMidnight3);
      assertSame(dateMidnight13, dateMidnight11);
      assertNotSame(dateMidnight13, dateMidnight1);
      assertNotSame(dateMidnight13, dateMidnight10);
      assertNotSame(dateMidnight13, dateMidnight6);
      assertNotSame(dateMidnight13, dateMidnight5);
      assertNotSame(dateMidnight13, dateMidnight12);
      assertNotSame(dateMidnight13, dateMidnight4);
      assertNotSame(dateMidnight13, dateMidnight8);
      assertNotNull(dateMidnight13);
      
      DateMidnight dateMidnight14 = dateMidnight2.plus((ReadableDuration) duration1);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61820064000000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-61820064000000L), dateMidnight14.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight8));
      assertFalse(dateMidnight0.equals((Object)dateMidnight12));
      assertTrue(dateMidnight0.equals((Object)dateMidnight10));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight10));
      assertFalse(dateMidnight1.equals((Object)dateMidnight12));
      assertFalse(dateMidnight1.equals((Object)dateMidnight9));
      assertFalse(dateMidnight1.equals((Object)dateMidnight8));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight13));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight11));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight12));
      assertFalse(dateMidnight2.equals((Object)dateMidnight13));
      assertFalse(dateMidnight2.equals((Object)dateMidnight10));
      assertFalse(dateMidnight2.equals((Object)dateMidnight11));
      assertFalse(dateMidnight2.equals((Object)dateMidnight8));
      assertFalse(dateMidnight2.equals((Object)dateMidnight9));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight7));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(dateMidnight14.equals((Object)dateMidnight0));
      assertFalse(dateMidnight14.equals((Object)dateMidnight5));
      assertFalse(dateMidnight14.equals((Object)dateMidnight7));
      assertFalse(dateMidnight14.equals((Object)dateMidnight10));
      assertFalse(dateMidnight14.equals((Object)dateMidnight6));
      assertFalse(dateMidnight14.equals((Object)dateMidnight13));
      assertFalse(dateMidnight14.equals((Object)dateMidnight8));
      assertFalse(dateMidnight14.equals((Object)dateMidnight9));
      assertFalse(dateMidnight14.equals((Object)dateMidnight11));
      assertFalse(dateMidnight14.equals((Object)dateMidnight12));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight13);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight11);
      assertNotSame(dateMidnight0, dateMidnight14);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight12);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight12);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight13);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight10);
      assertNotSame(dateMidnight1, dateMidnight9);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertSame(dateMidnight1, dateMidnight14);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight11);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight13);
      assertNotSame(dateMidnight2, dateMidnight10);
      assertNotSame(dateMidnight2, dateMidnight11);
      assertNotSame(dateMidnight2, dateMidnight8);
      assertSame(dateMidnight2, dateMidnight14);
      assertNotSame(dateMidnight2, dateMidnight7);
      assertSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight12);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight9);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(duration1, duration0);
      assertNotSame(dateMidnight14, dateMidnight5);
      assertNotSame(dateMidnight14, dateMidnight10);
      assertNotSame(dateMidnight14, dateMidnight13);
      assertNotSame(dateMidnight14, dateMidnight8);
      assertNotSame(dateMidnight14, dateMidnight11);
      assertNotSame(dateMidnight14, dateMidnight12);
      assertSame(dateMidnight14, dateMidnight4);
      assertSame(dateMidnight14, dateMidnight1);
      assertNotSame(dateMidnight14, dateMidnight0);
      assertSame(dateMidnight14, dateMidnight2);
      assertNotSame(dateMidnight14, dateMidnight7);
      assertNotSame(dateMidnight14, dateMidnight6);
      assertNotSame(dateMidnight14, dateMidnight9);
      assertSame(dateMidnight14, dateMidnight3);
      assertNotNull(dateMidnight14);
      
      // Undeclared exception!
      try { 
        DateMidnight.parse("JrlvW!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"JrlvW!\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

//  @Test(timeout = 4000)
//  public void test011()  throws Throwable  {
//      DateMidnight dateMidnight0 = DateMidnight.now();
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertNotNull(dateMidnight0);
//      
//      DateMidnight dateMidnight1 = dateMidnight0.minusYears(0);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotNull(dateMidnight1);
//      
//      DateMidnight dateMidnight2 = dateMidnight1.minusDays(0);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(1392336000000L, dateMidnight2.getMillis());
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertSame(dateMidnight2, dateMidnight1);
//      assertSame(dateMidnight2, dateMidnight0);
//      assertNotNull(dateMidnight2);
//      
//      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
//      assertTrue(uTCDateTimeZone0.isFixed());
//      assertEquals("UTC", uTCDateTimeZone0.toString());
//      assertEquals("UTC", uTCDateTimeZone0.getID());
//      assertNotNull(uTCDateTimeZone0);
//      
//      DateMidnight dateMidnight3 = dateMidnight2.withZoneRetainFields(uTCDateTimeZone0);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(1392336000000L, dateMidnight2.getMillis());
//      assertTrue(uTCDateTimeZone0.isFixed());
//      assertEquals("UTC", uTCDateTimeZone0.toString());
//      assertEquals("UTC", uTCDateTimeZone0.getID());
//      assertEquals(1392336000000L, dateMidnight3.getMillis());
//      assertTrue(dateMidnight3.equals((Object)dateMidnight2));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight0));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight1));
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight2, dateMidnight3);
//      assertSame(dateMidnight2, dateMidnight1);
//      assertSame(dateMidnight2, dateMidnight0);
//      assertNotSame(dateMidnight3, dateMidnight0);
//      assertNotSame(dateMidnight3, dateMidnight1);
//      assertNotSame(dateMidnight3, dateMidnight2);
//      assertNotNull(dateMidnight3);
//      
//      DateMidnight.Property dateMidnight_Property0 = dateMidnight3.yearOfEra();
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(1392336000000L, dateMidnight2.getMillis());
//      assertTrue(uTCDateTimeZone0.isFixed());
//      assertEquals("UTC", uTCDateTimeZone0.toString());
//      assertEquals("UTC", uTCDateTimeZone0.getID());
//      assertEquals(1392336000000L, dateMidnight3.getMillis());
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight2.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight2));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight0));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight1));
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight2, dateMidnight3);
//      assertSame(dateMidnight2, dateMidnight1);
//      assertSame(dateMidnight2, dateMidnight0);
//      assertNotSame(dateMidnight3, dateMidnight0);
//      assertNotSame(dateMidnight3, dateMidnight1);
//      assertNotSame(dateMidnight3, dateMidnight2);
//      assertNotNull(dateMidnight_Property0);
//      
//      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
//      assertEquals("UTC", dateTimeZone0.toString());
//      assertTrue(dateTimeZone0.isFixed());
//      assertEquals("UTC", dateTimeZone0.getID());
//      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone0));
//      assertNotSame(dateTimeZone0, uTCDateTimeZone0);
//      assertNotNull(dateTimeZone0);
//      
//      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
//      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
//      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
//      assertNotNull(dateTimeFieldType0);
//      
//      DateMidnight.Property dateMidnight_Property1 = dateMidnight3.property(dateTimeFieldType0);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(1392336000000L, dateMidnight2.getMillis());
//      assertTrue(uTCDateTimeZone0.isFixed());
//      assertEquals("UTC", uTCDateTimeZone0.toString());
//      assertEquals("UTC", uTCDateTimeZone0.getID());
//      assertEquals(1392336000000L, dateMidnight3.getMillis());
//      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
//      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight2.equals((Object)dateMidnight3));
//      assertTrue(uTCDateTimeZone0.equals((Object)dateTimeZone0));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight2));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight0));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight2, dateMidnight3);
//      assertSame(dateMidnight2, dateMidnight1);
//      assertSame(dateMidnight2, dateMidnight0);
//      assertNotSame(uTCDateTimeZone0, dateTimeZone0);
//      assertNotSame(dateMidnight3, dateMidnight0);
//      assertNotSame(dateMidnight3, dateMidnight1);
//      assertNotSame(dateMidnight3, dateMidnight2);
//      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
//      assertNotNull(dateMidnight_Property1);
//      
//      DateMidnight dateMidnight4 = dateMidnight1.plusWeeks(3064);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(3245443200000L, dateMidnight4.getMillis());
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight4);
//      assertNotSame(dateMidnight4, dateMidnight3);
//      assertNotSame(dateMidnight4, dateMidnight0);
//      assertNotSame(dateMidnight4, dateMidnight2);
//      assertNotSame(dateMidnight4, dateMidnight1);
//      assertNotNull(dateMidnight4);
//      
//      int int0 = dateMidnight0.compareTo(dateMidnight1);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight4);
//      assertEquals(0, int0);
//      
//      Duration duration0 = new Duration(dateMidnight4, dateMidnight0);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(3245443200000L, dateMidnight4.getMillis());
//      assertEquals((-1853107200000L), duration0.getMillis());
//      assertEquals((-1853107200L), duration0.getStandardSeconds());
//      assertEquals((-514752L), duration0.getStandardHours());
//      assertEquals((-21448L), duration0.getStandardDays());
//      assertEquals((-30885120L), duration0.getStandardMinutes());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
//      assertNotNull(duration0);
//      
//      Seconds seconds0 = duration0.toStandardSeconds();
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(3245443200000L, dateMidnight4.getMillis());
//      assertEquals((-1853107200000L), duration0.getMillis());
//      assertEquals((-1853107200L), duration0.getStandardSeconds());
//      assertEquals((-514752L), duration0.getStandardHours());
//      assertEquals((-21448L), duration0.getStandardDays());
//      assertEquals((-30885120L), duration0.getStandardMinutes());
//      assertEquals((-1853107200), seconds0.getSeconds());
//      assertEquals(1, seconds0.size());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight4);
//      assertNotSame(dateMidnight4, dateMidnight3);
//      assertNotSame(dateMidnight4, dateMidnight0);
//      assertNotSame(dateMidnight4, dateMidnight2);
//      assertNotSame(dateMidnight4, dateMidnight1);
//      assertNotNull(seconds0);
//      
//      Minutes minutes0 = Minutes.THREE;
//      assertEquals(3, minutes0.getMinutes());
//      assertEquals(1, minutes0.size());
//      assertNotNull(minutes0);
//      
//      Hours hours0 = minutes0.toStandardHours();
//      assertEquals(3, minutes0.getMinutes());
//      assertEquals(1, minutes0.size());
//      assertEquals(1, hours0.size());
//      assertEquals(0, hours0.getHours());
//      assertNotNull(hours0);
//      
//      DateMidnight dateMidnight5 = dateMidnight0.minusYears(3064);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals((-95298163200000L), dateMidnight5.getMillis());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertNotSame(dateMidnight0, dateMidnight5);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight5, dateMidnight0);
//      assertNotSame(dateMidnight5, dateMidnight1);
//      assertNotSame(dateMidnight5, dateMidnight4);
//      assertNotSame(dateMidnight5, dateMidnight2);
//      assertNotSame(dateMidnight5, dateMidnight3);
//      assertNotNull(dateMidnight5);
//      
//      DateTime dateTime0 = dateMidnight5.toDateTime((DateTimeZone) uTCDateTimeZone0);
//      assertEquals((-95298163200000L), dateTime0.getMillis());
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertTrue(uTCDateTimeZone0.isFixed());
//      assertEquals("UTC", uTCDateTimeZone0.toString());
//      assertEquals("UTC", uTCDateTimeZone0.getID());
//      assertEquals((-95298163200000L), dateMidnight5.getMillis());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertTrue(uTCDateTimeZone0.equals((Object)dateTimeZone0));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertNotSame(dateMidnight0, dateMidnight5);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(uTCDateTimeZone0, dateTimeZone0);
//      assertNotSame(dateMidnight5, dateMidnight0);
//      assertNotSame(dateMidnight5, dateMidnight1);
//      assertNotSame(dateMidnight5, dateMidnight4);
//      assertNotSame(dateMidnight5, dateMidnight2);
//      assertNotSame(dateMidnight5, dateMidnight3);
//      assertNotNull(dateTime0);
//      
//      Interval interval0 = dateMidnight5.toInterval();
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals((-95298076800000L), interval0.getEndMillis());
//      assertEquals((-95298163200000L), interval0.getStartMillis());
//      assertEquals((-95298163200000L), dateMidnight5.getMillis());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertNotSame(dateMidnight0, dateMidnight5);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight5, dateMidnight0);
//      assertNotSame(dateMidnight5, dateMidnight1);
//      assertNotSame(dateMidnight5, dateMidnight4);
//      assertNotSame(dateMidnight5, dateMidnight2);
//      assertNotSame(dateMidnight5, dateMidnight3);
//      assertNotNull(interval0);
//      
//      DateMidnight dateMidnight6 = dateMidnight5.plus((long) 3064);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals((-95298163200000L), dateMidnight6.getMillis());
//      assertEquals((-95298163200000L), dateMidnight5.getMillis());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertNotSame(dateMidnight0, dateMidnight5);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertNotSame(dateMidnight0, dateMidnight6);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight6, dateMidnight2);
//      assertSame(dateMidnight6, dateMidnight5);
//      assertNotSame(dateMidnight6, dateMidnight3);
//      assertNotSame(dateMidnight6, dateMidnight0);
//      assertNotSame(dateMidnight6, dateMidnight1);
//      assertNotSame(dateMidnight6, dateMidnight4);
//      assertNotSame(dateMidnight5, dateMidnight0);
//      assertNotSame(dateMidnight5, dateMidnight1);
//      assertNotSame(dateMidnight5, dateMidnight4);
//      assertNotSame(dateMidnight5, dateMidnight2);
//      assertSame(dateMidnight5, dateMidnight6);
//      assertNotSame(dateMidnight5, dateMidnight3);
//      assertNotNull(dateMidnight6);
//      
//      Months months0 = Months.monthsBetween((ReadableInstant) dateMidnight6, (ReadableInstant) dateMidnight1);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals((-95298163200000L), dateMidnight6.getMillis());
//      assertEquals(36768, months0.getMonths());
//      assertEquals(1, months0.size());
//      assertEquals((-95298163200000L), dateMidnight5.getMillis());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertNotSame(dateMidnight0, dateMidnight5);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertNotSame(dateMidnight0, dateMidnight6);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight6);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight4);
//      assertNotSame(dateMidnight1, dateMidnight5);
//      assertNotSame(dateMidnight6, dateMidnight2);
//      assertSame(dateMidnight6, dateMidnight5);
//      assertNotSame(dateMidnight6, dateMidnight3);
//      assertNotSame(dateMidnight6, dateMidnight0);
//      assertNotSame(dateMidnight6, dateMidnight1);
//      assertNotSame(dateMidnight6, dateMidnight4);
//      assertNotSame(dateMidnight5, dateMidnight0);
//      assertNotSame(dateMidnight5, dateMidnight1);
//      assertNotSame(dateMidnight5, dateMidnight4);
//      assertNotSame(dateMidnight5, dateMidnight2);
//      assertSame(dateMidnight5, dateMidnight6);
//      assertNotSame(dateMidnight5, dateMidnight3);
//      assertNotNull(months0);
//      
//      DurationFieldType durationFieldType0 = months0.getFieldType();
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals((-95298163200000L), dateMidnight6.getMillis());
//      assertEquals(36768, months0.getMonths());
//      assertEquals(1, months0.size());
//      assertEquals("months", durationFieldType0.getName());
//      assertEquals("months", durationFieldType0.toString());
//      assertEquals((-95298163200000L), dateMidnight5.getMillis());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertNotSame(dateMidnight0, dateMidnight5);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertNotSame(dateMidnight0, dateMidnight6);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight6);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight4);
//      assertNotSame(dateMidnight1, dateMidnight5);
//      assertNotSame(dateMidnight6, dateMidnight2);
//      assertSame(dateMidnight6, dateMidnight5);
//      assertNotSame(dateMidnight6, dateMidnight3);
//      assertNotSame(dateMidnight6, dateMidnight0);
//      assertNotSame(dateMidnight6, dateMidnight1);
//      assertNotSame(dateMidnight6, dateMidnight4);
//      assertNotSame(dateMidnight5, dateMidnight0);
//      assertNotSame(dateMidnight5, dateMidnight1);
//      assertNotSame(dateMidnight5, dateMidnight4);
//      assertNotSame(dateMidnight5, dateMidnight2);
//      assertSame(dateMidnight5, dateMidnight6);
//      assertNotSame(dateMidnight5, dateMidnight3);
//      assertNotNull(durationFieldType0);
//      
//      DateMidnight dateMidnight7 = dateMidnight2.withFieldAdded(durationFieldType0, 471);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals((-95298163200000L), dateMidnight6.getMillis());
//      assertEquals(1392336000000L, dateMidnight2.getMillis());
//      assertEquals(36768, months0.getMonths());
//      assertEquals(1, months0.size());
//      assertEquals("months", durationFieldType0.getName());
//      assertEquals("months", durationFieldType0.toString());
//      assertEquals(2630793600000L, dateMidnight7.getMillis());
//      assertEquals((-95298163200000L), dateMidnight5.getMillis());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
//      assertTrue(dateMidnight2.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
//      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertNotSame(dateMidnight0, dateMidnight5);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertNotSame(dateMidnight0, dateMidnight6);
//      assertNotSame(dateMidnight0, dateMidnight7);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight6);
//      assertNotSame(dateMidnight1, dateMidnight7);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight4);
//      assertNotSame(dateMidnight1, dateMidnight5);
//      assertNotSame(dateMidnight6, dateMidnight2);
//      assertSame(dateMidnight6, dateMidnight5);
//      assertNotSame(dateMidnight6, dateMidnight3);
//      assertNotSame(dateMidnight6, dateMidnight7);
//      assertNotSame(dateMidnight6, dateMidnight0);
//      assertNotSame(dateMidnight6, dateMidnight1);
//      assertNotSame(dateMidnight6, dateMidnight4);
//      assertNotSame(dateMidnight2, dateMidnight3);
//      assertSame(dateMidnight2, dateMidnight1);
//      assertNotSame(dateMidnight2, dateMidnight5);
//      assertNotSame(dateMidnight2, dateMidnight4);
//      assertSame(dateMidnight2, dateMidnight0);
//      assertNotSame(dateMidnight2, dateMidnight6);
//      assertNotSame(dateMidnight2, dateMidnight7);
//      assertNotSame(dateMidnight7, dateMidnight5);
//      assertNotSame(dateMidnight7, dateMidnight1);
//      assertNotSame(dateMidnight7, dateMidnight4);
//      assertNotSame(dateMidnight7, dateMidnight6);
//      assertNotSame(dateMidnight7, dateMidnight3);
//      assertNotSame(dateMidnight7, dateMidnight2);
//      assertNotSame(dateMidnight7, dateMidnight0);
//      assertNotSame(dateMidnight5, dateMidnight0);
//      assertNotSame(dateMidnight5, dateMidnight1);
//      assertNotSame(dateMidnight5, dateMidnight4);
//      assertNotSame(dateMidnight5, dateMidnight2);
//      assertSame(dateMidnight5, dateMidnight6);
//      assertNotSame(dateMidnight5, dateMidnight7);
//      assertNotSame(dateMidnight5, dateMidnight3);
//      assertNotNull(dateMidnight7);
//      
//      // Undeclared exception!
//      try { 
//        dateMidnight4.withDurationAdded(100000000000000000L, 320);
//        fail("Expecting exception: ArithmeticException");
//      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows a long: 100000000000000000 * 320
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
//  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(4L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 5;
      try { 
        ethiopicChronology0.getDateTimeMillis(4L, 0, 1, 5, (-1351));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1351 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      assertEquals((-62135596800000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      assertEquals((-62135596800000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withChronology(lenientChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(copticChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withWeekOfWeekyear(1);
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1379030400000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = dateMidnight0.getSecondOfDay();
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals(0, int0);
      
      Period period0 = Period.weeks(1);
      assertNotNull(period0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      
      CopticChronology copticChronology1 = CopticChronology.getInstance(dateTimeZone1);
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      
      Period period1 = period0.normalizedStandard((PeriodType) null);
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      int int1 = dateMidnight0.compareTo((ReadableInstant) dateMidnight1);
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1379030400000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(int1 == int0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(copticChronology0, copticChronology1);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals(1, int1);
      
      Period period2 = period1.plus(period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = durationFieldType0.isSupported(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(copticChronology0, copticChronology1);
      assertTrue(boolean0);
      
      Period period3 = period2.withField(durationFieldType0, 1);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(597, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      DateMidnight dateMidnight2 = dateMidnight1.withPeriodAdded(period3, 6);
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1379030400000L, dateMidnight1.getMillis());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(1386288000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(copticChronology0, copticChronology1);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      int int2 = (-2949);
      Period period4 = period0.withPeriodType((PeriodType) null);
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotNull(period4);
      
      // Undeclared exception!
      try { 
        dateMidnight2.plusYears((-2949));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Chronology chronology0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(1L, (Chronology) null);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 2222;
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(2222);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(7952515200000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      URI uRI0 = MockURI.aFTPURI;
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNotNull(uRI0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2222);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.222", dateTimeZone0.toString());
      assertEquals("+00:00:02.222", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight2 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.222", dateTimeZone0.toString());
      assertEquals("+00:00:02.222", dateTimeZone0.getID());
      assertEquals((-2222L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight(60000L, dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfWeek(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-259200000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = dateMidnight1.getDayOfWeek();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-259200000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals(1, int0);
      
      DateMidnight dateMidnight2 = dateMidnight0.minus((ReadablePeriod) null);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        DateMidnight.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S C(sc?}Y8\"`QOjB6}");
      assertFalse(boolean0);
      
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = (-4339);
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths((-4339));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LimitChronology limitChronology0 = LimitChronology.getInstance(julianChronology0, dateMidnight0, (ReadableDateTime) null);
      assertEquals(0L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotNull(limitChronology0);
      
      Chronology chronology0 = limitChronology0.withUTC();
      assertEquals(0L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      assertNotNull(chronology0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.checkInstant((-20697552000000L), chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 1969-12-19T00:00:00.000Z (JulianChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths((-4339));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateMidnight dateMidnight2 = dateMidnight1.plusYears(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight1.getMillis());
      assertEquals(11410329600000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertEquals(2, days0.getDays());
      assertNotNull(days0);
      
      DateMidnight dateMidnight3 = dateMidnight2.withPeriodAdded(days0, 0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight1.getMillis());
      assertEquals(11410329600000L, dateMidnight2.getMillis());
      assertEquals(1, days0.size());
      assertEquals(2, days0.getDays());
      assertEquals(11410329600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertNotNull(uTCDateTimeZone0);
      
      Chronology chronology0 = gregorianChronology0.withZone(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(chronology0);
      
      long long0 = dateMidnight3.checkInstant((-1L), chronology0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight1.getMillis());
      assertEquals(11410329600000L, dateMidnight2.getMillis());
      assertEquals(1, days0.size());
      assertEquals(2, days0.getDays());
      assertEquals(11410329600000L, dateMidnight3.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertEquals((-86400000L), long0);
      
      // Undeclared exception!
      try { 
        dateMidnight2.withDayOfWeek((-4339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4339 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, (Chronology) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertFalse(boolean1);
      
      DateMidnight dateMidnight1 = dateMidnight0.minusDays(440);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1354320000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      Seconds seconds0 = Seconds.seconds(440);
      assertEquals(440, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Duration duration0 = seconds0.toStandardDuration();
      assertEquals(440, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(7L, duration0.getStandardMinutes());
      assertEquals(440000L, duration0.getMillis());
      assertEquals(440L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      Interval interval0 = new Interval(duration0, dateMidnight1);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1354320000000L, dateMidnight1.getMillis());
      assertEquals(440, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(7L, duration0.getStandardMinutes());
      assertEquals(440000L, duration0.getMillis());
      assertEquals(440L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1354320000000L, interval0.getEndMillis());
      assertEquals(1354319560000L, interval0.getStartMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotNull(interval0);
      
      Duration duration1 = interval0.toDuration();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1354320000000L, dateMidnight1.getMillis());
      assertEquals(440, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(7L, duration0.getStandardMinutes());
      assertEquals(440000L, duration0.getMillis());
      assertEquals(440L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1354320000000L, interval0.getEndMillis());
      assertEquals(1354319560000L, interval0.getStartMillis());
      assertEquals(7L, duration1.getStandardMinutes());
      assertEquals(440000L, duration1.getMillis());
      assertEquals(440L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(duration1.equals((Object)duration0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      
      DateMidnight dateMidnight2 = dateMidnight1.withDurationAdded((ReadableDuration) duration1, 2146783000);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1354320000000L, dateMidnight1.getMillis());
      assertEquals(440, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(7L, duration0.getStandardMinutes());
      assertEquals(440000L, duration0.getMillis());
      assertEquals(440L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1354320000000L, interval0.getEndMillis());
      assertEquals(1354319560000L, interval0.getStartMillis());
      assertEquals(7L, duration1.getStandardMinutes());
      assertEquals(440000L, duration1.getMillis());
      assertEquals(440L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(945938822400000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      LocalDate localDate0 = dateMidnight2.toLocalDate();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1354320000000L, dateMidnight1.getMillis());
      assertEquals(440, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(7L, duration0.getStandardMinutes());
      assertEquals(440000L, duration0.getMillis());
      assertEquals(440L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1354320000000L, interval0.getEndMillis());
      assertEquals(1354319560000L, interval0.getStartMillis());
      assertEquals(7L, duration1.getStandardMinutes());
      assertEquals(440000L, duration1.getMillis());
      assertEquals(440L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(945938822400000L, dateMidnight2.getMillis());
      assertEquals(3, localDate0.size());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(localDate0);
      
      DateMidnight dateMidnight3 = dateMidnight0.withFields(localDate0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1354320000000L, dateMidnight1.getMillis());
      assertEquals(440, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(7L, duration0.getStandardMinutes());
      assertEquals(440000L, duration0.getMillis());
      assertEquals(440L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1354320000000L, interval0.getEndMillis());
      assertEquals(1354319560000L, interval0.getStartMillis());
      assertEquals(7L, duration1.getStandardMinutes());
      assertEquals(440000L, duration1.getMillis());
      assertEquals(440L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(945938822400000L, dateMidnight2.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(945938822400000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertTrue(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 1, (Chronology) copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = mutablePeriod0.toDurationFrom(dateMidnight0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertNotNull(duration0);
      
      DateMidnight dateMidnight1 = new DateMidnight((long) 1);
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotNull(dateMidnight1);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod(duration0, dateMidnight1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotNull(mutablePeriod1);
      
      Period period0 = mutablePeriod1.toPeriod();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotNull(period0);
      
      long long0 = copticChronology0.add((ReadablePeriod) period0, (-918L), 1521);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertEquals(603L, long0);
      
      long long1 = dateMidnight0.checkInstant(31536000000L, copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(long1 == long0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals(31536000000L, long1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Period period0 = new Period(165, (-867), (-1), (-867), 292278993, 165, (-867), 292278993);
      assertNotNull(period0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(period0, 4682);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4939773910992000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight0.minusYears((-1410));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      Period period1 = Period.months((-867));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      DateMidnight dateMidnight3 = dateMidnight2.withFields((ReadablePartial) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      int int0 = dateMidnight3.getSecondOfMinute();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertEquals(0, int0);
      
      boolean boolean0 = dateMidnight2.isEqualNow();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertFalse(boolean0);
      
      MutableDateTime mutableDateTime0 = dateMidnight2.toMutableDateTime((DateTimeZone) null);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(45887558400000L, mutableDateTime0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(mutableDateTime0);
      
      DateMidnight dateMidnight4 = dateMidnight2.plus((ReadablePeriod) period0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(1100943532800000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(period0, period1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = dateMidnight2.plusDays(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotNull(dateMidnight5);
      
      DateMidnight dateMidnight6 = dateMidnight2.minusWeeks(4);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45885139200000L, dateMidnight6.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotNull(dateMidnight6);
      
      Instant instant0 = dateMidnight6.toInstant();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45885139200000L, dateMidnight6.getMillis());
      assertEquals(45885139200000L, instant0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotNull(instant0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.monthOfYear();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4939773910992000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(period0, period1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotNull(dateMidnight_Property0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(45887558400000L, mutableDateTime0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotNull(mutableDateTime_Property0);
      
      int int1 = dateMidnight0.getMinuteOfDay();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertTrue(int1 == int0);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertEquals(0, int1);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight5.centuryOfEra();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotNull(dateMidnight_Property1);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      assertNotNull(lenientChronology0);
      
      DateMidnight dateMidnight7 = dateMidnight3.withChronology(lenientChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight7.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight4));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight7);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight7);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight7);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DateMidnight dateMidnight8 = dateMidnight0.withZoneRetainFields((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight8.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight8.equals((Object)dateMidnight7));
      assertFalse(dateMidnight8.equals((Object)dateMidnight3));
      assertFalse(dateMidnight8.equals((Object)dateMidnight2));
      assertFalse(dateMidnight8.equals((Object)dateMidnight1));
      assertFalse(dateMidnight8.equals((Object)dateMidnight6));
      assertFalse(dateMidnight8.equals((Object)dateMidnight4));
      assertFalse(dateMidnight8.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight8, dateMidnight7);
      assertNotSame(dateMidnight8, dateMidnight3);
      assertNotSame(dateMidnight8, dateMidnight2);
      assertSame(dateMidnight8, dateMidnight0);
      assertNotSame(dateMidnight8, dateMidnight1);
      assertNotSame(dateMidnight8, dateMidnight6);
      assertNotSame(dateMidnight8, dateMidnight4);
      assertNotSame(dateMidnight8, dateMidnight5);
      assertNotNull(dateMidnight8);
      
      DateMidnight dateMidnight9 = dateMidnight_Property0.setCopy(5);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4939773910992000000L, dateMidnight1.getMillis());
      assertEquals(4939773897772800000L, dateMidnight9.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight8));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight9.equals((Object)dateMidnight2));
      assertFalse(dateMidnight9.equals((Object)dateMidnight3));
      assertFalse(dateMidnight9.equals((Object)dateMidnight7));
      assertFalse(dateMidnight9.equals((Object)dateMidnight5));
      assertFalse(dateMidnight9.equals((Object)dateMidnight0));
      assertFalse(dateMidnight9.equals((Object)dateMidnight6));
      assertFalse(dateMidnight9.equals((Object)dateMidnight8));
      assertFalse(dateMidnight9.equals((Object)dateMidnight4));
      assertFalse(dateMidnight9.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(period0, period1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight9);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight9, dateMidnight2);
      assertNotSame(dateMidnight9, dateMidnight3);
      assertNotSame(dateMidnight9, dateMidnight7);
      assertNotSame(dateMidnight9, dateMidnight5);
      assertNotSame(dateMidnight9, dateMidnight0);
      assertNotSame(dateMidnight9, dateMidnight6);
      assertNotSame(dateMidnight9, dateMidnight8);
      assertNotSame(dateMidnight9, dateMidnight4);
      assertNotSame(dateMidnight9, dateMidnight1);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotNull(dateMidnight9);
      
      DateMidnight dateMidnight10 = dateMidnight_Property1.addToCopy(1345L);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(4290297580800000L, dateMidnight10.getMillis());
      assertEquals(45887558400000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight9));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight7));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight8));
      assertFalse(dateMidnight10.equals((Object)dateMidnight4));
      assertFalse(dateMidnight10.equals((Object)dateMidnight8));
      assertFalse(dateMidnight10.equals((Object)dateMidnight1));
      assertFalse(dateMidnight10.equals((Object)dateMidnight7));
      assertFalse(dateMidnight10.equals((Object)dateMidnight6));
      assertFalse(dateMidnight10.equals((Object)dateMidnight9));
      assertFalse(dateMidnight10.equals((Object)dateMidnight2));
      assertFalse(dateMidnight10.equals((Object)dateMidnight0));
      assertFalse(dateMidnight10.equals((Object)dateMidnight5));
      assertFalse(dateMidnight10.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight7));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight8));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight9));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight9);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight10);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight7);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight8);
      assertNotSame(dateMidnight10, dateMidnight4);
      assertNotSame(dateMidnight10, dateMidnight8);
      assertNotSame(dateMidnight10, dateMidnight1);
      assertNotSame(dateMidnight10, dateMidnight7);
      assertNotSame(dateMidnight10, dateMidnight6);
      assertNotSame(dateMidnight10, dateMidnight9);
      assertNotSame(dateMidnight10, dateMidnight2);
      assertNotSame(dateMidnight10, dateMidnight0);
      assertNotSame(dateMidnight10, dateMidnight5);
      assertNotSame(dateMidnight10, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight7);
      assertSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight8);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotSame(dateMidnight5, dateMidnight10);
      assertNotSame(dateMidnight5, dateMidnight9);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotNull(dateMidnight10);
      
      DateMidnight dateMidnight11 = dateMidnight4.withWeekyear(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals((-62150976000000L), dateMidnight11.getMillis());
      assertEquals(1100943532800000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight10));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight9));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight10));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight7));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight8));
      assertFalse(dateMidnight11.equals((Object)dateMidnight1));
      assertFalse(dateMidnight11.equals((Object)dateMidnight3));
      assertFalse(dateMidnight11.equals((Object)dateMidnight7));
      assertFalse(dateMidnight11.equals((Object)dateMidnight8));
      assertFalse(dateMidnight11.equals((Object)dateMidnight10));
      assertFalse(dateMidnight11.equals((Object)dateMidnight9));
      assertFalse(dateMidnight11.equals((Object)dateMidnight0));
      assertFalse(dateMidnight11.equals((Object)dateMidnight5));
      assertFalse(dateMidnight11.equals((Object)dateMidnight4));
      assertFalse(dateMidnight11.equals((Object)dateMidnight6));
      assertFalse(dateMidnight11.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight10));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight9));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight8));
      assertFalse(dateMidnight4.equals((Object)dateMidnight7));
      assertFalse(dateMidnight4.equals((Object)dateMidnight6));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight11);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(period0, period1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight9);
      assertNotSame(dateMidnight2, dateMidnight11);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight10);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight7);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight8);
      assertNotSame(dateMidnight11, dateMidnight1);
      assertNotSame(dateMidnight11, dateMidnight3);
      assertNotSame(dateMidnight11, dateMidnight7);
      assertNotSame(dateMidnight11, dateMidnight8);
      assertNotSame(dateMidnight11, dateMidnight10);
      assertNotSame(dateMidnight11, dateMidnight9);
      assertNotSame(dateMidnight11, dateMidnight0);
      assertNotSame(dateMidnight11, dateMidnight5);
      assertNotSame(dateMidnight11, dateMidnight4);
      assertNotSame(dateMidnight11, dateMidnight6);
      assertNotSame(dateMidnight11, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight10);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight9);
      assertNotSame(dateMidnight4, dateMidnight11);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight8);
      assertNotSame(dateMidnight4, dateMidnight7);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertNotNull(dateMidnight11);
      
      DateMidnight.Property dateMidnight_Property2 = dateMidnight0.year();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight10));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight11));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight11);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property0);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property1);
      assertNotNull(dateMidnight_Property2);
      
      DateMidnight dateMidnight12 = dateMidnight_Property0.addToCopy(70);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4939773910992000000L, dateMidnight1.getMillis());
      assertEquals(4939774095024000000L, dateMidnight12.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight10));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight11));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight10));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight8));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight9));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight11));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight12.equals((Object)dateMidnight5));
      assertFalse(dateMidnight12.equals((Object)dateMidnight2));
      assertFalse(dateMidnight12.equals((Object)dateMidnight4));
      assertFalse(dateMidnight12.equals((Object)dateMidnight8));
      assertFalse(dateMidnight12.equals((Object)dateMidnight7));
      assertFalse(dateMidnight12.equals((Object)dateMidnight1));
      assertFalse(dateMidnight12.equals((Object)dateMidnight6));
      assertFalse(dateMidnight12.equals((Object)dateMidnight0));
      assertFalse(dateMidnight12.equals((Object)dateMidnight10));
      assertFalse(dateMidnight12.equals((Object)dateMidnight11));
      assertFalse(dateMidnight12.equals((Object)dateMidnight9));
      assertFalse(dateMidnight12.equals((Object)dateMidnight3));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property2));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight12);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight11);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(period0, period1);
      assertNotSame(dateMidnight1, dateMidnight10);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight9);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight11);
      assertNotSame(dateMidnight1, dateMidnight12);
      assertNotSame(dateMidnight12, dateMidnight5);
      assertNotSame(dateMidnight12, dateMidnight2);
      assertNotSame(dateMidnight12, dateMidnight4);
      assertNotSame(dateMidnight12, dateMidnight8);
      assertNotSame(dateMidnight12, dateMidnight7);
      assertNotSame(dateMidnight12, dateMidnight1);
      assertNotSame(dateMidnight12, dateMidnight6);
      assertNotSame(dateMidnight12, dateMidnight0);
      assertNotSame(dateMidnight12, dateMidnight10);
      assertNotSame(dateMidnight12, dateMidnight11);
      assertNotSame(dateMidnight12, dateMidnight9);
      assertNotSame(dateMidnight12, dateMidnight3);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property2);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotNull(dateMidnight12);
      
      DateMidnight dateMidnight13 = dateMidnight1.minusYears(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4939773910992000000L, dateMidnight1.getMillis());
      assertEquals(4939773910992000000L, dateMidnight13.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight10));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight12));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight11));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight10));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight8));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight9));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight11));
      assertFalse(dateMidnight1.equals((Object)dateMidnight12));
      assertFalse(dateMidnight13.equals((Object)dateMidnight5));
      assertFalse(dateMidnight13.equals((Object)dateMidnight2));
      assertFalse(dateMidnight13.equals((Object)dateMidnight9));
      assertFalse(dateMidnight13.equals((Object)dateMidnight11));
      assertFalse(dateMidnight13.equals((Object)dateMidnight3));
      assertFalse(dateMidnight13.equals((Object)dateMidnight10));
      assertFalse(dateMidnight13.equals((Object)dateMidnight12));
      assertFalse(dateMidnight13.equals((Object)dateMidnight0));
      assertFalse(dateMidnight13.equals((Object)dateMidnight4));
      assertFalse(dateMidnight13.equals((Object)dateMidnight8));
      assertFalse(dateMidnight13.equals((Object)dateMidnight6));
      assertFalse(dateMidnight13.equals((Object)dateMidnight7));
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight12);
      assertNotSame(dateMidnight0, dateMidnight13);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight11);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(period0, period1);
      assertNotSame(dateMidnight1, dateMidnight10);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight9);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight11);
      assertNotSame(dateMidnight1, dateMidnight12);
      assertSame(dateMidnight1, dateMidnight13);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight13, dateMidnight5);
      assertNotSame(dateMidnight13, dateMidnight2);
      assertNotSame(dateMidnight13, dateMidnight11);
      assertNotSame(dateMidnight13, dateMidnight3);
      assertNotSame(dateMidnight13, dateMidnight0);
      assertNotSame(dateMidnight13, dateMidnight4);
      assertNotSame(dateMidnight13, dateMidnight8);
      assertNotSame(dateMidnight13, dateMidnight6);
      assertSame(dateMidnight13, dateMidnight1);
      assertNotSame(dateMidnight13, dateMidnight9);
      assertNotSame(dateMidnight13, dateMidnight10);
      assertNotSame(dateMidnight13, dateMidnight12);
      assertNotSame(dateMidnight13, dateMidnight7);
      assertNotNull(dateMidnight13);
  }

//  @Test(timeout = 4000)
//  public void test022()  throws Throwable  {
//      DateMidnight dateMidnight0 = DateMidnight.now();
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertNotNull(dateMidnight0);
//      
//      DateMidnight dateMidnight1 = dateMidnight0.minusYears(0);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotNull(dateMidnight1);
//      
//      DateMidnight dateMidnight2 = dateMidnight1.minusDays(0);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(1392336000000L, dateMidnight2.getMillis());
//      assertSame(dateMidnight0, dateMidnight2);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertSame(dateMidnight2, dateMidnight0);
//      assertSame(dateMidnight2, dateMidnight1);
//      assertNotNull(dateMidnight2);
//      
//      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
//      assertEquals("UTC", uTCDateTimeZone0.getID());
//      assertTrue(uTCDateTimeZone0.isFixed());
//      assertEquals("UTC", uTCDateTimeZone0.toString());
//      assertNotNull(uTCDateTimeZone0);
//      
//      DateMidnight dateMidnight3 = dateMidnight2.withZoneRetainFields(uTCDateTimeZone0);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(1392336000000L, dateMidnight2.getMillis());
//      assertEquals("UTC", uTCDateTimeZone0.getID());
//      assertTrue(uTCDateTimeZone0.isFixed());
//      assertEquals("UTC", uTCDateTimeZone0.toString());
//      assertEquals(1392336000000L, dateMidnight3.getMillis());
//      assertTrue(dateMidnight3.equals((Object)dateMidnight2));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight0));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight1));
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertSame(dateMidnight2, dateMidnight0);
//      assertNotSame(dateMidnight2, dateMidnight3);
//      assertSame(dateMidnight2, dateMidnight1);
//      assertNotSame(dateMidnight3, dateMidnight2);
//      assertNotSame(dateMidnight3, dateMidnight1);
//      assertNotSame(dateMidnight3, dateMidnight0);
//      assertNotNull(dateMidnight3);
//      
//      DateMidnight.Property dateMidnight_Property0 = dateMidnight3.yearOfEra();
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(1392336000000L, dateMidnight2.getMillis());
//      assertEquals("UTC", uTCDateTimeZone0.getID());
//      assertTrue(uTCDateTimeZone0.isFixed());
//      assertEquals("UTC", uTCDateTimeZone0.toString());
//      assertEquals(1392336000000L, dateMidnight3.getMillis());
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight2.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight2));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight0));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight1));
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertSame(dateMidnight2, dateMidnight0);
//      assertNotSame(dateMidnight2, dateMidnight3);
//      assertSame(dateMidnight2, dateMidnight1);
//      assertNotSame(dateMidnight3, dateMidnight2);
//      assertNotSame(dateMidnight3, dateMidnight1);
//      assertNotSame(dateMidnight3, dateMidnight0);
//      assertNotNull(dateMidnight_Property0);
//      
//      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
//      assertTrue(dateTimeZone0.isFixed());
//      assertEquals("UTC", dateTimeZone0.toString());
//      assertEquals("UTC", dateTimeZone0.getID());
//      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone0));
//      assertNotSame(dateTimeZone0, uTCDateTimeZone0);
//      assertNotNull(dateTimeZone0);
//      
//      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
//      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
//      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
//      assertNotNull(dateTimeFieldType0);
//      
//      DateMidnight.Property dateMidnight_Property1 = dateMidnight3.property(dateTimeFieldType0);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(1392336000000L, dateMidnight2.getMillis());
//      assertEquals("UTC", uTCDateTimeZone0.getID());
//      assertTrue(uTCDateTimeZone0.isFixed());
//      assertEquals("UTC", uTCDateTimeZone0.toString());
//      assertEquals(1392336000000L, dateMidnight3.getMillis());
//      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
//      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight2.equals((Object)dateMidnight3));
//      assertTrue(uTCDateTimeZone0.equals((Object)dateTimeZone0));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight2));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight0));
//      assertTrue(dateMidnight3.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertSame(dateMidnight2, dateMidnight0);
//      assertNotSame(dateMidnight2, dateMidnight3);
//      assertSame(dateMidnight2, dateMidnight1);
//      assertNotSame(uTCDateTimeZone0, dateTimeZone0);
//      assertNotSame(dateMidnight3, dateMidnight2);
//      assertNotSame(dateMidnight3, dateMidnight1);
//      assertNotSame(dateMidnight3, dateMidnight0);
//      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
//      assertNotNull(dateMidnight_Property1);
//      
//      DateMidnight dateMidnight4 = dateMidnight1.plusWeeks(3064);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(3245443200000L, dateMidnight4.getMillis());
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotSame(dateMidnight1, dateMidnight4);
//      assertNotSame(dateMidnight4, dateMidnight0);
//      assertNotSame(dateMidnight4, dateMidnight3);
//      assertNotSame(dateMidnight4, dateMidnight2);
//      assertNotSame(dateMidnight4, dateMidnight1);
//      assertNotNull(dateMidnight4);
//      
//      Duration duration0 = new Duration(dateMidnight4, dateMidnight0);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(3245443200000L, dateMidnight4.getMillis());
//      assertEquals((-21448L), duration0.getStandardDays());
//      assertEquals((-1853107200000L), duration0.getMillis());
//      assertEquals((-1853107200L), duration0.getStandardSeconds());
//      assertEquals((-514752L), duration0.getStandardHours());
//      assertEquals((-30885120L), duration0.getStandardMinutes());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
//      assertNotNull(duration0);
//      
//      Seconds seconds0 = duration0.toStandardSeconds();
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(3245443200000L, dateMidnight4.getMillis());
//      assertEquals((-21448L), duration0.getStandardDays());
//      assertEquals((-1853107200000L), duration0.getMillis());
//      assertEquals((-1853107200L), duration0.getStandardSeconds());
//      assertEquals((-514752L), duration0.getStandardHours());
//      assertEquals((-30885120L), duration0.getStandardMinutes());
//      assertEquals((-1853107200), seconds0.getSeconds());
//      assertEquals(1, seconds0.size());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotSame(dateMidnight1, dateMidnight4);
//      assertNotSame(dateMidnight4, dateMidnight0);
//      assertNotSame(dateMidnight4, dateMidnight3);
//      assertNotSame(dateMidnight4, dateMidnight2);
//      assertNotSame(dateMidnight4, dateMidnight1);
//      assertNotNull(seconds0);
//      
//      Minutes minutes0 = Minutes.THREE;
//      assertEquals(1, minutes0.size());
//      assertEquals(3, minutes0.getMinutes());
//      assertNotNull(minutes0);
//      
//      Hours hours0 = minutes0.toStandardHours();
//      assertEquals(1, minutes0.size());
//      assertEquals(3, minutes0.getMinutes());
//      assertEquals(0, hours0.getHours());
//      assertEquals(1, hours0.size());
//      assertNotNull(hours0);
//      
//      Days days0 = hours0.toStandardDays();
//      assertEquals(1, minutes0.size());
//      assertEquals(3, minutes0.getMinutes());
//      assertEquals(0, hours0.getHours());
//      assertEquals(1, hours0.size());
//      assertEquals(0, days0.getDays());
//      assertEquals(1, days0.size());
//      assertNotNull(days0);
//      
//      DateMidnight dateMidnight5 = dateMidnight4.minus((ReadablePeriod) days0);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(3245443200000L, dateMidnight4.getMillis());
//      assertEquals(1, minutes0.size());
//      assertEquals(3, minutes0.getMinutes());
//      assertEquals(0, hours0.getHours());
//      assertEquals(1, hours0.size());
//      assertEquals(0, days0.getDays());
//      assertEquals(1, days0.size());
//      assertEquals(3245443200000L, dateMidnight5.getMillis());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight0, dateMidnight5);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertNotSame(dateMidnight1, dateMidnight5);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotSame(dateMidnight1, dateMidnight4);
//      assertNotSame(dateMidnight4, dateMidnight0);
//      assertNotSame(dateMidnight4, dateMidnight3);
//      assertNotSame(dateMidnight4, dateMidnight2);
//      assertSame(dateMidnight4, dateMidnight5);
//      assertNotSame(dateMidnight4, dateMidnight1);
//      assertNotSame(dateMidnight5, dateMidnight1);
//      assertNotSame(dateMidnight5, dateMidnight3);
//      assertSame(dateMidnight5, dateMidnight4);
//      assertNotSame(dateMidnight5, dateMidnight0);
//      assertNotSame(dateMidnight5, dateMidnight2);
//      assertNotNull(dateMidnight5);
//      
//      DateMidnight dateMidnight6 = dateMidnight0.minusYears(3064);
//      assertEquals((-95298163200000L), dateMidnight6.getMillis());
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertNotSame(dateMidnight6, dateMidnight2);
//      assertNotSame(dateMidnight6, dateMidnight3);
//      assertNotSame(dateMidnight6, dateMidnight0);
//      assertNotSame(dateMidnight6, dateMidnight4);
//      assertNotSame(dateMidnight6, dateMidnight5);
//      assertNotSame(dateMidnight6, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight0, dateMidnight5);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertNotSame(dateMidnight0, dateMidnight6);
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertNotNull(dateMidnight6);
//      
//      DateTime dateTime0 = dateMidnight6.toDateTime((DateTimeZone) uTCDateTimeZone0);
//      assertEquals((-95298163200000L), dateMidnight6.getMillis());
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals((-95298163200000L), dateTime0.getMillis());
//      assertEquals("UTC", uTCDateTimeZone0.getID());
//      assertTrue(uTCDateTimeZone0.isFixed());
//      assertEquals("UTC", uTCDateTimeZone0.toString());
//      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertTrue(uTCDateTimeZone0.equals((Object)dateTimeZone0));
//      assertNotSame(dateMidnight6, dateMidnight2);
//      assertNotSame(dateMidnight6, dateMidnight3);
//      assertNotSame(dateMidnight6, dateMidnight0);
//      assertNotSame(dateMidnight6, dateMidnight4);
//      assertNotSame(dateMidnight6, dateMidnight5);
//      assertNotSame(dateMidnight6, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight0, dateMidnight5);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertNotSame(dateMidnight0, dateMidnight6);
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertNotSame(uTCDateTimeZone0, dateTimeZone0);
//      assertNotNull(dateTime0);
//      
//      Interval interval0 = dateMidnight6.toInterval();
//      assertEquals((-95298163200000L), dateMidnight6.getMillis());
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals((-95298076800000L), interval0.getEndMillis());
//      assertEquals((-95298163200000L), interval0.getStartMillis());
//      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertNotSame(dateMidnight6, dateMidnight2);
//      assertNotSame(dateMidnight6, dateMidnight3);
//      assertNotSame(dateMidnight6, dateMidnight0);
//      assertNotSame(dateMidnight6, dateMidnight4);
//      assertNotSame(dateMidnight6, dateMidnight5);
//      assertNotSame(dateMidnight6, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight0, dateMidnight5);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertNotSame(dateMidnight0, dateMidnight6);
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertNotNull(interval0);
//      
//      DateMidnight dateMidnight7 = dateMidnight6.plus((long) 3064);
//      assertEquals((-95298163200000L), dateMidnight6.getMillis());
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals((-95298163200000L), dateMidnight7.getMillis());
//      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
//      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
//      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
//      assertNotSame(dateMidnight6, dateMidnight2);
//      assertNotSame(dateMidnight6, dateMidnight3);
//      assertNotSame(dateMidnight6, dateMidnight0);
//      assertNotSame(dateMidnight6, dateMidnight4);
//      assertNotSame(dateMidnight6, dateMidnight5);
//      assertSame(dateMidnight6, dateMidnight7);
//      assertNotSame(dateMidnight6, dateMidnight1);
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight0, dateMidnight5);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertNotSame(dateMidnight0, dateMidnight7);
//      assertNotSame(dateMidnight0, dateMidnight6);
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertNotSame(dateMidnight7, dateMidnight5);
//      assertSame(dateMidnight7, dateMidnight6);
//      assertNotSame(dateMidnight7, dateMidnight3);
//      assertNotSame(dateMidnight7, dateMidnight1);
//      assertNotSame(dateMidnight7, dateMidnight4);
//      assertNotSame(dateMidnight7, dateMidnight0);
//      assertNotSame(dateMidnight7, dateMidnight2);
//      assertNotNull(dateMidnight7);
//      
//      DateMidnight dateMidnight8 = dateMidnight5.plusDays(Integer.MAX_VALUE);
//      assertEquals(1392336000000L, dateMidnight0.getMillis());
//      assertEquals(1392336000000L, dateMidnight1.getMillis());
//      assertEquals(185545832544000000L, dateMidnight8.getMillis());
//      assertEquals(3245443200000L, dateMidnight4.getMillis());
//      assertEquals(1, minutes0.size());
//      assertEquals(3, minutes0.getMinutes());
//      assertEquals(0, hours0.getHours());
//      assertEquals(1, hours0.size());
//      assertEquals(0, days0.getDays());
//      assertEquals(1, days0.size());
//      assertEquals(3245443200000L, dateMidnight5.getMillis());
//      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
//      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
//      assertTrue(dateMidnight1.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight8.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight8.equals((Object)dateMidnight5));
//      assertFalse(dateMidnight8.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight8.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight8.equals((Object)dateMidnight7));
//      assertFalse(dateMidnight8.equals((Object)dateMidnight4));
//      assertFalse(dateMidnight8.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight8.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight6));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight7));
//      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight7));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
//      assertFalse(dateMidnight5.equals((Object)dateMidnight6));
//      assertSame(dateMidnight0, dateMidnight2);
//      assertNotSame(dateMidnight0, dateMidnight8);
//      assertNotSame(dateMidnight0, dateMidnight5);
//      assertNotSame(dateMidnight0, dateMidnight3);
//      assertNotSame(dateMidnight0, dateMidnight7);
//      assertNotSame(dateMidnight0, dateMidnight6);
//      assertNotSame(dateMidnight0, dateMidnight4);
//      assertSame(dateMidnight0, dateMidnight1);
//      assertNotSame(dateMidnight1, dateMidnight6);
//      assertNotSame(dateMidnight1, dateMidnight5);
//      assertSame(dateMidnight1, dateMidnight2);
//      assertNotSame(dateMidnight1, dateMidnight3);
//      assertSame(dateMidnight1, dateMidnight0);
//      assertNotSame(dateMidnight1, dateMidnight8);
//      assertNotSame(dateMidnight1, dateMidnight7);
//      assertNotSame(dateMidnight1, dateMidnight4);
//      assertNotSame(dateMidnight8, dateMidnight6);
//      assertNotSame(dateMidnight8, dateMidnight5);
//      assertNotSame(dateMidnight8, dateMidnight0);
//      assertNotSame(dateMidnight8, dateMidnight2);
//      assertNotSame(dateMidnight8, dateMidnight7);
//      assertNotSame(dateMidnight8, dateMidnight4);
//      assertNotSame(dateMidnight8, dateMidnight3);
//      assertNotSame(dateMidnight8, dateMidnight1);
//      assertNotSame(dateMidnight4, dateMidnight0);
//      assertNotSame(dateMidnight4, dateMidnight3);
//      assertNotSame(dateMidnight4, dateMidnight6);
//      assertNotSame(dateMidnight4, dateMidnight8);
//      assertNotSame(dateMidnight4, dateMidnight2);
//      assertNotSame(dateMidnight4, dateMidnight7);
//      assertSame(dateMidnight4, dateMidnight5);
//      assertNotSame(dateMidnight4, dateMidnight1);
//      assertNotSame(dateMidnight5, dateMidnight1);
//      assertNotSame(dateMidnight5, dateMidnight7);
//      assertNotSame(dateMidnight5, dateMidnight3);
//      assertSame(dateMidnight5, dateMidnight4);
//      assertNotSame(dateMidnight5, dateMidnight0);
//      assertNotSame(dateMidnight5, dateMidnight8);
//      assertNotSame(dateMidnight5, dateMidnight2);
//      assertNotSame(dateMidnight5, dateMidnight6);
//      assertNotNull(dateMidnight8);
//      
//      // Undeclared exception!
//      try { 
//        dateMidnight8.plusYears(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
//      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 5881683 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
//  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = (-867);
      Period period0 = new Period(165, (-867), (-1), (-867), 292278993, 165, (-867), 292278993);
      assertNotNull(period0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(period0, 4682);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4939773910992000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      // Undeclared exception!
      try { 
        dateMidnight0.minusYears(292278993);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292276979 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = dateMidnight0.getEra();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals(1, int0);
      
      String string0 = dateMidnight_Property0.getAsText();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals("AD", string0);
      assertNotNull(string0);
      
      DateMidnight dateMidnight2 = dateMidnight1.plusYears(10);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.plus(2592000000L);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertEquals((-61817472000000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight3.withMonthOfYear(1);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertEquals((-61817472000000L), dateMidnight3.getMillis());
      assertEquals((-61817472000000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      Days days0 = Days.SEVEN;
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertNotNull(days0);
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertNotNull(period0);
      
      int int1 = 677;
      int int2 = dateMidnight0.compareTo((ReadableInstant) dateMidnight4);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertEquals((-61817472000000L), dateMidnight3.getMillis());
      assertEquals((-61817472000000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertEquals(1, int2);
      
      String string1 = days0.toString();
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertFalse(string1.equals((Object)string0));
      assertEquals("P7D", string1);
      assertNotNull(string1);
      
      Period period1 = period0.minusMonths(677);
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      DateMidnight dateMidnight5 = dateMidnight2.withCenturyOfEra(1);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertEquals((-58664390400000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotNull(dateMidnight5);
      
      Days days1 = days0.dividedBy((-3459));
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertFalse(days1.equals((Object)days0));
      assertNotSame(days1, days0);
      assertNotSame(days0, days1);
      assertNotNull(days1);
      
      Period period2 = period1.plusMonths(1);
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(days0.equals((Object)days1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(days0, days1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotNull(period2);
      
      DateMidnight dateMidnight6 = dateMidnight2.plus((ReadablePeriod) period2);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-63597225600000L), dateMidnight6.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(days0.equals((Object)days1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(days0, days1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotNull(dateMidnight6);
      
      DateMidnight dateMidnight7 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight7.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertTrue(dateMidnight7.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotNull(dateMidnight7);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight7.yearOfCentury();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight7.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertTrue(dateMidnight7.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      // Undeclared exception!
      try { 
        dateMidnight6.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 165;
      Period period0 = new Period(165, 165, (-1), 165, 292278993, 165, 165, 292278993);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withPeriodAdded(period0, 292278993);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 48226033845
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = Duration.millis(1689L);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      DateTime dateTime1 = dateTime0.plus((ReadableDuration) duration0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime1, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      
      int int0 = dateTime1.getMillisOfSecond();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(9, int0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, dateTimeZone1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(9);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = new DateMidnight(1, 1, 9, dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-62134905600000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotNull(dateMidnight2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      try { 
        dateMidnight2.toString("org/joda/time/tz/data", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 0;
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfWeek(0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1391904000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.withChronology(lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1391904000000L, dateMidnight1.getMillis());
      assertEquals(1391904000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      String string0 = ";nU`Y9|ux5";
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string1 = "";
      Locale locale1 = new Locale("", ";nU`Y9|ux5");
      assertEquals(";NU`Y9|UX5", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("_;NU`Y9|UX5", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string2 = locale0.getDisplayScript(locale1);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(";NU`Y9|UX5", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("_;NU`Y9|UX5", locale1.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      // Undeclared exception!
      try { 
        dateMidnight1.withYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(gregorianChronology0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight0.minusMonths((-4339));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      int int0 = 0;
      DateMidnight dateMidnight3 = dateMidnight2.plusYears(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight2.getMillis());
      assertEquals(11410329600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      Days days0 = Days.TWO;
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight4 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = dateMidnight3.withPeriodAdded(days0, 0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight2.getMillis());
      assertEquals(11410329600000L, dateMidnight3.getMillis());
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(11410329600000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertSame(dateMidnight5, dateMidnight2);
      assertSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotNull(dateMidnight5);
      
      // Undeclared exception!
      try { 
        dateMidnight3.withDayOfWeek((-4339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4339 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 9;
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(9);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61879420800000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.withYearOfCentury(9);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61879420800000L), dateMidnight1.getMillis());
      assertEquals((-61879420800000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.plusWeeks(9);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61879420800000L), dateMidnight1.getMillis());
      assertEquals((-61879420800000L), dateMidnight2.getMillis());
      assertEquals((-61873977600000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight3.withWeekOfWeekyear(9);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61879420800000L), dateMidnight1.getMillis());
      assertEquals((-61879420800000L), dateMidnight2.getMillis());
      assertEquals((-61873977600000L), dateMidnight3.getMillis());
      assertEquals((-61878211200000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      int int1 = (-1923);
      // Undeclared exception!
      try { 
        dateMidnight1.withDayOfWeek(9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 9 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = Duration.millis(1689L);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      DateTime dateTime1 = dateTime0.plus((ReadableDuration) duration0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime1, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      
      int int0 = dateTime1.getMillisOfSecond();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(9, int0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, dateTimeZone1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(9);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.plus((ReadableDuration) duration0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertEquals(1415923200000L, dateMidnight2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.plusMonths(0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertEquals(1415923200000L, dateMidnight2.getMillis());
      assertEquals(1415923200000L, dateMidnight3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = DateMidnight.now(dateTimeZone1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = new DateMidnight(dateTime1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals(1392336000000L, dateMidnight5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertNotNull(dateMidnight5);
      
      DateMidnight dateMidnight6 = dateMidnight0.plusWeeks(0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertTrue(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertSame(dateMidnight6, dateMidnight0);
      assertNotNull(dateMidnight6);
      
      DateMidnight dateMidnight7 = dateMidnight1.plusWeeks(17);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1426204800000L, dateMidnight7.getMillis());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotNull(dateMidnight7);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight7.year();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1426204800000L, dateMidnight7.getMillis());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight8 = dateMidnight_Property0.withMinimumValue();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertEquals(1426204800000L, dateMidnight7.getMillis());
      assertEquals((-9223372010908800000L), dateMidnight8.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateMidnight8.equals((Object)dateMidnight6));
      assertFalse(dateMidnight8.equals((Object)dateMidnight3));
      assertFalse(dateMidnight8.equals((Object)dateMidnight2));
      assertFalse(dateMidnight8.equals((Object)dateMidnight0));
      assertFalse(dateMidnight8.equals((Object)dateMidnight4));
      assertFalse(dateMidnight8.equals((Object)dateMidnight5));
      assertFalse(dateMidnight8.equals((Object)dateMidnight1));
      assertFalse(dateMidnight8.equals((Object)dateMidnight7));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight8);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight8, dateMidnight6);
      assertNotSame(dateMidnight8, dateMidnight3);
      assertNotSame(dateMidnight8, dateMidnight2);
      assertNotSame(dateMidnight8, dateMidnight0);
      assertNotSame(dateMidnight8, dateMidnight4);
      assertNotSame(dateMidnight8, dateMidnight5);
      assertNotSame(dateMidnight8, dateMidnight1);
      assertNotSame(dateMidnight8, dateMidnight7);
      assertNotNull(dateMidnight8);
      
      DateMidnight dateMidnight9 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertEquals(1426204800000L, dateMidnight7.getMillis());
      assertEquals(1420070400000L, dateMidnight9.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight8));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight8));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight8));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateMidnight9.equals((Object)dateMidnight7));
      assertFalse(dateMidnight9.equals((Object)dateMidnight3));
      assertFalse(dateMidnight9.equals((Object)dateMidnight0));
      assertFalse(dateMidnight9.equals((Object)dateMidnight2));
      assertFalse(dateMidnight9.equals((Object)dateMidnight4));
      assertFalse(dateMidnight9.equals((Object)dateMidnight6));
      assertFalse(dateMidnight9.equals((Object)dateMidnight1));
      assertFalse(dateMidnight9.equals((Object)dateMidnight5));
      assertFalse(dateMidnight9.equals((Object)dateMidnight8));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight9);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight8);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight9);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight9, dateMidnight7);
      assertNotSame(dateMidnight9, dateMidnight3);
      assertNotSame(dateMidnight9, dateMidnight0);
      assertNotSame(dateMidnight9, dateMidnight2);
      assertNotSame(dateMidnight9, dateMidnight4);
      assertNotSame(dateMidnight9, dateMidnight6);
      assertNotSame(dateMidnight9, dateMidnight1);
      assertNotSame(dateMidnight9, dateMidnight5);
      assertNotSame(dateMidnight9, dateMidnight8);
      assertNotNull(dateMidnight9);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths((-4339));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      DateMidnight dateMidnight2 = dateMidnight1.plusYears(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight1.getMillis());
      assertEquals(11410329600000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      assertEquals(0L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight3 = dateMidnight0.withMillis(918518400000L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(918518400000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      Days days0 = Days.TWO;
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      DateMidnight dateMidnight4 = dateMidnight2.withPeriodAdded(days0, 0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight1.getMillis());
      assertEquals(11410329600000L, dateMidnight2.getMillis());
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(11410329600000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      // Undeclared exception!
      try { 
        dateMidnight2.withDayOfWeek((-4339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4339 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)28;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)96, (byte)63, (byte) (-56), (byte)47, (byte) (-61), (byte)84, (byte)96, (byte)28}, byteArray0);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight(3908L, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Interval interval0 = dateMidnight0.toInterval();
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(86400000L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      boolean boolean1 = dateTimeZone0.isStandardOffset(1128L);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight0.minusYears((byte)84);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2650752000000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = Duration.millis(1689L);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      DateTime dateTime1 = dateTime0.plus((ReadableDuration) duration0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime1, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      
      int int0 = dateTime1.getMillisOfSecond();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(9, int0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, dateTimeZone1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(9);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.plus((ReadableDuration) duration0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertEquals(1415923200000L, dateMidnight2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.plusMonths(0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertEquals(1415923200000L, dateMidnight2.getMillis());
      assertEquals(1415923200000L, dateMidnight3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight1.withMonthOfYear(9);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertEquals(1410652800000L, dateMidnight4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = dateMidnight0.plusWeeks(0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertSame(dateMidnight5, dateMidnight0);
      assertNotNull(dateMidnight5);
      
      DateMidnight dateMidnight6 = dateMidnight1.plusWeeks(17);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertEquals(1426204800000L, dateMidnight6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotNull(dateMidnight6);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight6.year();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertEquals(1426204800000L, dateMidnight6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight7 = dateMidnight_Property0.withMinimumValue();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertEquals(1426204800000L, dateMidnight6.getMillis());
      assertEquals((-9223372010908800000L), dateMidnight7.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight7);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotNull(dateMidnight7);
      
      DateMidnight dateMidnight8 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409283009L, dateTime1.getMillis());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1415923200000L, dateMidnight1.getMillis());
      assertEquals(1426204800000L, dateMidnight6.getMillis());
      assertEquals(1420070400000L, dateMidnight8.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight7));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight8.equals((Object)dateMidnight3));
      assertFalse(dateMidnight8.equals((Object)dateMidnight6));
      assertFalse(dateMidnight8.equals((Object)dateMidnight7));
      assertFalse(dateMidnight8.equals((Object)dateMidnight0));
      assertFalse(dateMidnight8.equals((Object)dateMidnight2));
      assertFalse(dateMidnight8.equals((Object)dateMidnight5));
      assertFalse(dateMidnight8.equals((Object)dateMidnight1));
      assertFalse(dateMidnight8.equals((Object)dateMidnight4));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight8);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight7);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight8, dateMidnight3);
      assertNotSame(dateMidnight8, dateMidnight6);
      assertNotSame(dateMidnight8, dateMidnight7);
      assertNotSame(dateMidnight8, dateMidnight0);
      assertNotSame(dateMidnight8, dateMidnight2);
      assertNotSame(dateMidnight8, dateMidnight5);
      assertNotSame(dateMidnight8, dateMidnight1);
      assertNotSame(dateMidnight8, dateMidnight4);
      assertNotNull(dateMidnight8);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = Duration.millis(1689L);
      assertEquals(1689L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertNotNull(duration0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      
      int int0 = dateTime0.getMillisOfSecond();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(320, int0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, dateTimeZone1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = new DateMidnight(1689L, dateTimeZone1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.plus((ReadableDuration) duration0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.plusMonths(0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertEquals(0L, dateMidnight3.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      int int1 = 17;
      // Undeclared exception!
      try { 
        dateMidnight1.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertEquals(2, days0.getDays());
      assertNotNull(days0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.centuryOfEra();
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      assertEquals((-62135596800000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      assertEquals((-62135596800000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfWeek(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = 0L;
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      boolean boolean0 = dateMidnight1.isBefore(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertTrue(boolean0);
      
      Days days0 = Days.THREE;
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      DateMidnight dateMidnight2 = dateMidnight0.minusYears(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertTrue(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      Duration duration0 = days0.toStandardDuration();
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-2931);
      DateMidnight dateMidnight3 = dateMidnight1.withDurationAdded((ReadableDuration) duration0, (-2931));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals((-3568233600000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight3.plusWeeks(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals((-3568233600000L), dateMidnight3.getMillis());
      assertEquals((-3568233600000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotNull(dateMidnight4);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight4.dayOfMonth();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals((-3568233600000L), dateMidnight3.getMillis());
      assertEquals((-3568233600000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight5 = dateMidnight3.plusMonths(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals((-3568233600000L), dateMidnight3.getMillis());
      assertEquals((-3334262400000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotNull(dateMidnight5);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight4.monthOfYear();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals((-3568233600000L), dateMidnight3.getMillis());
      assertEquals((-3568233600000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      DateMidnight dateMidnight6 = dateMidnight0.minus((long) (-2931));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight6.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotNull(dateMidnight6);
      
      int int1 = dateMidnight6.getMillisOfSecond();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight6.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(int1 == int0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertEquals(0, int1);
      
      DateMidnight.Property dateMidnight_Property2 = dateMidnight4.centuryOfEra();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals((-3568233600000L), dateMidnight3.getMillis());
      assertEquals((-3568233600000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight6));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight_Property2, dateMidnight_Property1);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotNull(dateMidnight_Property2);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(89);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.089", dateTimeZone0.getID());
      assertEquals("+00:00:00.089", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        CopticChronology.getInstance(dateTimeZone0, (-779));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -779
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(2283);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(7142730508800000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight0.withPeriodAdded((ReadablePeriod) null, 521);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight1.minusMonths((-1841));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(7142730508800000L, dateMidnight1.getMillis());
      assertEquals(7147571760000000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-91101110400000L));
      assertEquals((-91101110400000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = (-2147483592);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">vMiAZ`-&$Y._boi8");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekyear((-2147483592));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483592 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      Days days0 = Days.TWO;
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      DateMidnight dateMidnight2 = dateMidnight1.withPeriodAdded(days0, 0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0L, dateMidnight2.getMillis());
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      // Undeclared exception!
      try { 
        dateMidnight1.withDayOfWeek((-4339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4339 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = 0L;
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 89;
      boolean boolean0 = dateMidnight0.isBefore(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertFalse(boolean0);
      
      Days days0 = Days.THREE;
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      int int1 = (-2931);
      DateMidnight dateMidnight2 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, (-2931));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.plusWeeks(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertEquals(0L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight3.dayOfMonth();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertEquals(0L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight4 = dateMidnight2.plusMonths(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertEquals(233971200000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotNull(dateMidnight4);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight3.monthOfYear();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertEquals(0L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight4));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      // Undeclared exception!
      try { 
        dateMidnight3.withDayOfMonth(89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 89 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1000000000L);
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      int int0 = dateMidnight_Property0.get();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(1, int0);
      
      int int1 = dateMidnight0.getMillisOfSecond();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMaximumValue();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(29808000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Chronology chronology0 = iSOChronology0.withZone((DateTimeZone) null);
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
      assertNotNull(chronology0);
      
      Chronology chronology1 = iSOChronology0.withUTC();
      assertSame(iSOChronology0, chronology0);
      assertSame(iSOChronology0, chronology1);
      assertSame(chronology1, iSOChronology0);
      assertSame(chronology1, chronology0);
      assertNotNull(chronology1);
      
      MutableDateTime mutableDateTime0 = dateMidnight1.toMutableDateTime(chronology1);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(29808000000L, dateMidnight1.getMillis());
      assertEquals(29808000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(iSOChronology0, chronology0);
      assertSame(iSOChronology0, chronology1);
      assertSame(chronology1, iSOChronology0);
      assertSame(chronology1, chronology0);
      assertNotNull(mutableDateTime0);
      
      Interval interval0 = dateMidnight1.toInterval();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(29808000000L, dateMidnight1.getMillis());
      assertEquals(29808000000L, interval0.getStartMillis());
      assertEquals(29894400000L, interval0.getEndMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(interval0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      int int2 = mutableDateTime0.get(dateTimeField0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(29808000000L, dateMidnight1.getMillis());
      assertEquals(29808000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(iSOChronology0, chronology0);
      assertSame(iSOChronology0, chronology1);
      assertSame(chronology1, iSOChronology0);
      assertSame(chronology1, chronology0);
      assertEquals(0, int2);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.monthOfYear();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.roundHalfFloorCopy();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.minusDays(0);
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertEquals(0L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertTrue(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight0.withYear(1);
      assertEquals((-62134646400000L), dateMidnight4.getMillis());
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotNull(dateMidnight4);
      
      long long0 = dateMidnight1.checkInstant(2546L, iSOChronology0);
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(29808000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertTrue(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(iSOChronology0, chronology0);
      assertSame(iSOChronology0, chronology1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = 0L;
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 89;
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      boolean boolean0 = dateMidnight1.isBefore(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertTrue(boolean0);
      
      Days days0 = Days.THREE;
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertNotNull(days0);
      
      DateMidnight dateMidnight2 = dateMidnight0.minusYears(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      Duration duration0 = days0.toStandardDuration();
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertNotNull(mutablePeriod0);
      
      int int1 = (-2931);
      DateMidnight dateMidnight3 = dateMidnight1.withDurationAdded((ReadableDuration) null, (-2931));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals((-2808518400000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertTrue(dateMidnight3.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight3.plusWeeks(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals((-2808518400000L), dateMidnight3.getMillis());
      assertEquals((-2808518400000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertTrue(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertTrue(dateMidnight4.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight4.dayOfMonth();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals((-2808518400000L), dateMidnight3.getMillis());
      assertEquals((-2808518400000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertTrue(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertTrue(dateMidnight4.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight5 = dateMidnight3.plusMonths(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals((-2808518400000L), dateMidnight3.getMillis());
      assertEquals((-2574547200000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertTrue(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotNull(dateMidnight5);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight4.monthOfYear();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals((-2808518400000L), dateMidnight3.getMillis());
      assertEquals((-2808518400000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertTrue(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertTrue(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      DateMidnight.Property dateMidnight_Property2 = dateMidnight1.weekyear();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property0);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property1);
      assertNotNull(dateMidnight_Property2);
      
      DateMidnight.Property dateMidnight_Property3 = dateMidnight1.year();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight_Property3.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight_Property3.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight_Property3.equals((Object)dateMidnight_Property2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight_Property3, dateMidnight_Property0);
      assertNotSame(dateMidnight_Property3, dateMidnight_Property1);
      assertNotSame(dateMidnight_Property3, dateMidnight_Property2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotNull(dateMidnight_Property3);
      
      // Undeclared exception!
      try { 
        dateMidnight4.withDayOfMonth(89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 89 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(uTCDateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = dateMidnight0.getYearOfEra();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2014, int0);
      
      LocalTime localTime0 = new LocalTime(1427L, (DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withFields(localTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.withYearOfCentury(0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(950486400000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      Locale locale0 = new Locale("org/joda/time/tz/data");
      assertEquals("org/joda/time/tz/data", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org/joda/time/tz/data", locale0.toString());
      assertNotNull(locale0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Chronology chronology0 = julianChronology0.withZone(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      DateMidnight dateMidnight3 = dateMidnight1.withYearOfEra(3929);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(61823865600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight3.dayOfYear();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(61823865600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertNotNull(uTCDateTimeZone0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 14;
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfYear(14);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1389657600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      // Undeclared exception!
      try { 
        dateMidnight1.withDayOfWeek(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      int int0 = 117;
      DateMidnight dateMidnight1 = dateMidnight0.withYear(117);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-58471200000000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight0.withWeekyear(117);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-58470768000000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      int int1 = dateMidnight_Property0.getMaximumValue();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(int1 == int0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertEquals(292278993, int1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int2 = 31;
      DateMidnight dateMidnight3 = dateMidnight0.withField(dateTimeFieldType0, 31);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1406851200000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      Interval interval0 = dateMidnight3.toInterval();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1406851200000L, dateMidnight3.getMillis());
      assertEquals(1406937600000L, interval0.getEndMillis());
      assertEquals(1406851200000L, interval0.getStartMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(interval0);
      
      DateMidnight dateMidnight4 = dateMidnight3.minusMonths(27);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1406851200000L, dateMidnight3.getMillis());
      assertEquals(1335830400000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotNull(dateMidnight4);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      String string0 = "yearOfEra";
      // Undeclared exception!
      try { 
        DateMidnight.parse("yearOfEra");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"yearOfEra\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(dateMidnight0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight0.plus((ReadablePeriod) mutablePeriod0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight1.withPeriodAdded(mutablePeriod0, 1437);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals(0L, dateMidnight3.getMillis());
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfWeek(0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1391904000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.withChronology(lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1391904000000L, dateMidnight1.getMillis());
      assertEquals(1391904000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight_Property0.roundCeilingCopy();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1410393600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      Locale locale0 = new Locale("", ";nU`Y9|ux5");
      assertEquals("_;NU`Y9|UX5", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals(";NU`Y9|UX5", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      DateMidnight dateMidnight4 = dateMidnight2.minusMonths(0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1391904000000L, dateMidnight1.getMillis());
      assertEquals(1391904000000L, dateMidnight2.getMillis());
      assertEquals(1391904000000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight2);
      assertNotNull(dateMidnight4);
      
      long long0 = dateMidnight_Property0.getMillis();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals(1392336000000L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minusDays((-2532));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1611100800000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateMidnight dateMidnight2 = dateMidnight1.withChronology(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1611100800000L, dateMidnight1.getMillis());
      assertEquals(1611100800000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.minusYears((-19));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1611100800000L, dateMidnight1.getMillis());
      assertEquals(1611100800000L, dateMidnight2.getMillis());
      assertEquals(2192832000000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight3.centuryOfEra();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1611100800000L, dateMidnight1.getMillis());
      assertEquals(1611100800000L, dateMidnight2.getMillis());
      assertEquals(2192832000000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight4 = dateMidnight1.plusWeeks(3187);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1611100800000L, dateMidnight1.getMillis());
      assertEquals(3538598400000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotNull(dateMidnight4);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight3.monthOfYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1611100800000L, dateMidnight1.getMillis());
      assertEquals(1611100800000L, dateMidnight2.getMillis());
      assertEquals(2192832000000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight4));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      DateMidnight.Property dateMidnight_Property2 = dateMidnight3.dayOfWeek();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1611100800000L, dateMidnight1.getMillis());
      assertEquals(1611100800000L, dateMidnight2.getMillis());
      assertEquals(2192832000000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight4));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property1));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property0);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property1);
      assertNotNull(dateMidnight_Property2);
      
      DateMidnight dateMidnight5 = dateMidnight0.withFields((ReadablePartial) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotNull(dateMidnight5);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = (-772);
      Chronology chronology0 = null;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-772));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.772", dateTimeZone0.toString());
      assertEquals("-00:00:00.772", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.772", dateTimeZone0.toString());
      assertEquals("-00:00:00.772", dateTimeZone0.getID());
      assertEquals(1392336000772L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks((-1073741823));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.772", dateTimeZone0.toString());
      assertEquals("-00:00:00.772", dateTimeZone0.getID());
      assertEquals(1392336000772L, dateMidnight0.getMillis());
      assertEquals((-649397662214399228L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      Months months0 = Months.FOUR;
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      DateMidnight dateMidnight2 = dateMidnight1.minus((ReadablePeriod) months0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.772", dateTimeZone0.toString());
      assertEquals("-00:00:00.772", dateTimeZone0.getID());
      assertEquals(1392336000772L, dateMidnight0.getMillis());
      assertEquals((-649397662214399228L), dateMidnight1.getMillis());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-649397672668799228L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.withChronology((Chronology) null);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.772", dateTimeZone0.toString());
      assertEquals("-00:00:00.772", dateTimeZone0.getID());
      assertEquals(1392336000772L, dateMidnight0.getMillis());
      assertEquals((-649397662214399228L), dateMidnight1.getMillis());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-649397672668799228L), dateMidnight2.getMillis());
      assertEquals((-649397672668800000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      Duration duration0 = new Duration(6171L, (-772));
      assertEquals((-6L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-6943L), duration0.getMillis());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.withDurationAdded(1601L, 1);
      assertEquals((-6L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-6943L), duration0.getMillis());
      assertEquals((-5342L), duration1.getMillis());
      assertEquals((-5L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      
      DateMidnight dateMidnight4 = dateMidnight3.plus((ReadableDuration) duration1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.772", dateTimeZone0.toString());
      assertEquals("-00:00:00.772", dateTimeZone0.getID());
      assertEquals(1392336000772L, dateMidnight0.getMillis());
      assertEquals((-649397662214399228L), dateMidnight1.getMillis());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-649397672668799228L), dateMidnight2.getMillis());
      assertEquals((-649397672668800000L), dateMidnight3.getMillis());
      assertEquals((-6L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-6943L), duration0.getMillis());
      assertEquals((-5342L), duration1.getMillis());
      assertEquals((-5L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-649397672755200000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotNull(dateMidnight4);
      
      // Undeclared exception!
      try { 
        dateMidnight4.withCenturyOfEra((-1073741823));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1073741823 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 1290;
      int int1 = (-2634);
      int int2 = 1;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals(1392335999999L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded((DurationFieldType) null, 1290);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Hours hours0 = Hours.SIX;
      assertEquals(6, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Period period0 = hours0.toPeriod();
      assertEquals(6, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(period0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) hours0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(6, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1392249600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = dateMidnight0.isBefore((-1L));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertFalse(boolean0);
      
      int int0 = (-4776);
      // Undeclared exception!
      try { 
        dateMidnight1.withField(dateTimeFieldType0, (-4776));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4776 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Years years0 = Years.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      DurationFieldType durationFieldType0 = years0.getFieldType();
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Period period0 = years0.toPeriod();
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(period0);
      
      int int0 = 0;
      int int1 = dateMidnight0.getDayOfYear();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(int1 == int0);
      assertEquals(45, int1);
      
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, 0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      boolean boolean0 = dateMidnight1.isEqual(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        dateMidnight1.plus((ReadablePeriod) years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481634 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      assertNotNull(iSOChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) iSOChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateTimeZone dateTimeZone0 = iSOChronology0.getZone();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withYear(5888);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(123643929600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.year();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(123643929600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
      
      long long0 = dateMidnight_Property0.getDifferenceAsLong(dateMidnight1);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(123643929600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals(0L, long0);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.roundHalfCeilingCopy();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(123643929600000L, dateMidnight1.getMillis());
      assertEquals(123640128000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight1.withCenturyOfEra(5888);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(123643929600000L, dateMidnight1.getMillis());
      assertEquals(18521346988800000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(uTCDateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight(763L, (DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(1963);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(6134671468800000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = (-1185);
      DateMidnight dateMidnight2 = dateMidnight1.plusMonths((-1185));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(6134671468800000L, dateMidnight1.getMillis());
      assertEquals(6131555107200000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      int int1 = (-1239);
      DateMidnight dateMidnight3 = dateMidnight2.plusDays((-1239));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(6134671468800000L, dateMidnight1.getMillis());
      assertEquals(6131555107200000L, dateMidnight2.getMillis());
      assertEquals(6131448057600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      Hours hours0 = Hours.ONE;
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
      assertNotNull(hours0);
      
      Duration duration0 = hours0.toStandardDuration();
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
      assertEquals(60L, duration0.getStandardMinutes());
      assertEquals(3600L, duration0.getStandardSeconds());
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      DateMidnight dateMidnight4 = dateMidnight3.withWeekyear(7678125);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(6134671468800000L, dateMidnight1.getMillis());
      assertEquals(6131555107200000L, dateMidnight2.getMillis());
      assertEquals(6131448057600000L, dateMidnight3.getMillis());
      assertEquals(242236081958400000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = dateMidnight3.plus((ReadableDuration) duration0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(6134671468800000L, dateMidnight1.getMillis());
      assertEquals(6131555107200000L, dateMidnight2.getMillis());
      assertEquals(6131448057600000L, dateMidnight3.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
      assertEquals(60L, duration0.getStandardMinutes());
      assertEquals(3600L, duration0.getStandardSeconds());
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(6131448057600000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight4));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotNull(dateMidnight5);
      
      // Undeclared exception!
      try { 
        dateMidnight5.withYearOfCentury(1963);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1963 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(uTCDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, uTCDateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone0 = zonedChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      String string0 = uTCDateTimeZone0.getName((long) 1);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertEquals("Coordinated Universal Time", string0);
      assertNotNull(string0);
      
      long long0 = zonedChronology0.add(43200000L, (-2040L), 0);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertEquals(43200000L, long0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(0);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61721568000000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      int int0 = period0.getDays();
      assertEquals(0, int0);
      
      DateMidnight dateMidnight2 = dateMidnight1.minus((ReadablePeriod) period0);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61721568000000L), dateMidnight1.getMillis());
      assertEquals((-61721568000000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      String string1 = uTCDateTimeZone0.getName((-2933L));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertEquals("Coordinated Universal Time", string1);
      assertNotNull(string1);
      
      DateMidnight dateMidnight3 = dateMidnight0.plusDays(10);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1393200000000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight0.minusDays(1);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392249600000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = dateMidnight4.withWeekOfWeekyear(1);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392249600000L, dateMidnight4.getMillis());
      assertEquals(1388620800000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotNull(dateMidnight5);
      
      Date date0 = dateMidnight4.toDate();
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392249600000L, dateMidnight4.getMillis());
      assertEquals("Thu Feb 13 00:00:00 GMT 2014", date0.toString());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotNull(date0);
      
      Period period1 = new Period((-2775), 0, 1900, (-1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      DateMidnight dateMidnight6 = dateMidnight5.minus((ReadablePeriod) period1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1398556800000L, dateMidnight6.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392249600000L, dateMidnight4.getMillis());
      assertEquals(1388620800000L, dateMidnight5.getMillis());
      assertFalse(period1.equals((Object)period0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertNotSame(period1, period0);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotNull(dateMidnight6);
      
      DateMidnight dateMidnight7 = dateMidnight0.withDurationAdded((-2040L), 28);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392249600000L, dateMidnight7.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
      assertTrue(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotNull(dateMidnight7);
      
      // Undeclared exception!
      try { 
        LimitChronology.getInstance(zonedChronology0, dateMidnight6, dateMidnight4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The lower limit must be come before than the upper limit
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateTimeZone dateTimeZone0 = dateMidnight0.getZone();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = (-725);
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths((-725));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3298752000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfMonth();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight2 = dateMidnight0.withMillis((-1L));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-86400000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.centuryOfEra();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight2);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-86400000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(gJChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-86400000L), dateMidnight2.getMillis());
      assertEquals(4, localDateTime0.size());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withMillisOfSecond(28265625);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 28265625 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 518, 4270, 0, 0, (-1115));
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = mutablePeriod0.toDurationFrom(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1002119L, duration0.getStandardMinutes());
      assertEquals(60127198885L, duration0.getMillis());
      assertEquals(60127198L, duration0.getStandardSeconds());
      assertEquals(16701L, duration0.getStandardHours());
      assertEquals(695L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.minus(4613L);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1002119L, duration0.getStandardMinutes());
      assertEquals(60127198885L, duration0.getMillis());
      assertEquals(60127198L, duration0.getStandardSeconds());
      assertEquals(16701L, duration0.getStandardHours());
      assertEquals(695L, duration0.getStandardDays());
      assertEquals(16701L, duration1.getStandardHours());
      assertEquals(695L, duration1.getStandardDays());
      assertEquals(1002119L, duration1.getStandardMinutes());
      assertEquals(60127194L, duration1.getStandardSeconds());
      assertEquals(60127194272L, duration1.getMillis());
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      Duration duration2 = duration0.dividedBy((long) (-1115), roundingMode0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1002119L, duration0.getStandardMinutes());
      assertEquals(60127198885L, duration0.getMillis());
      assertEquals(60127198L, duration0.getStandardSeconds());
      assertEquals(16701L, duration0.getStandardHours());
      assertEquals(695L, duration0.getStandardDays());
      assertEquals((-14L), duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals((-53925L), duration2.getStandardSeconds());
      assertEquals((-53925738L), duration2.getMillis());
      assertEquals((-898L), duration2.getStandardMinutes());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertNotNull(duration2);
      
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) duration2, 518);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1002119L, duration0.getStandardMinutes());
      assertEquals(60127198885L, duration0.getMillis());
      assertEquals(60127198L, duration0.getStandardSeconds());
      assertEquals(16701L, duration0.getStandardHours());
      assertEquals(695L, duration0.getStandardDays());
      assertEquals((-14L), duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals((-53925L), duration2.getStandardSeconds());
      assertEquals((-53925738L), duration2.getMillis());
      assertEquals((-898L), duration2.getStandardMinutes());
      assertEquals(1364342400000L, dateMidnight1.getMillis());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.minus((ReadablePeriod) mutablePeriod0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1002119L, duration0.getStandardMinutes());
      assertEquals(60127198885L, duration0.getMillis());
      assertEquals(60127198L, duration0.getStandardSeconds());
      assertEquals(16701L, duration0.getStandardHours());
      assertEquals(695L, duration0.getStandardDays());
      assertEquals((-14L), duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals((-53925L), duration2.getStandardSeconds());
      assertEquals((-53925738L), duration2.getMillis());
      assertEquals((-898L), duration2.getStandardMinutes());
      assertEquals(1364342400000L, dateMidnight1.getMillis());
      assertEquals(1304208000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      CopticChronology copticChronology1 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      
      DateMidnight dateMidnight3 = dateMidnight2.withChronology(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1002119L, duration0.getStandardMinutes());
      assertEquals(60127198885L, duration0.getMillis());
      assertEquals(60127198L, duration0.getStandardSeconds());
      assertEquals(16701L, duration0.getStandardHours());
      assertEquals(695L, duration0.getStandardDays());
      assertEquals((-14L), duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals((-53925L), duration2.getStandardSeconds());
      assertEquals((-53925738L), duration2.getMillis());
      assertEquals((-898L), duration2.getStandardMinutes());
      assertEquals(1364342400000L, dateMidnight1.getMillis());
      assertEquals(1304208000000L, dateMidnight2.getMillis());
      assertEquals(1304208000000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(copticChronology0, copticChronology1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight2.withCenturyOfEra(1);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1002119L, duration0.getStandardMinutes());
      assertEquals(60127198885L, duration0.getMillis());
      assertEquals(60127198L, duration0.getStandardSeconds());
      assertEquals(16701L, duration0.getStandardHours());
      assertEquals(695L, duration0.getStandardDays());
      assertEquals((-14L), duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals((-53925L), duration2.getStandardSeconds());
      assertEquals((-53925738L), duration2.getMillis());
      assertEquals((-898L), duration2.getStandardMinutes());
      assertEquals(1364342400000L, dateMidnight1.getMillis());
      assertEquals(1304208000000L, dateMidnight2.getMillis());
      assertEquals((-58654022400000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotNull(dateMidnight4);
      
      int int0 = dateMidnight4.getDayOfMonth();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1002119L, duration0.getStandardMinutes());
      assertEquals(60127198885L, duration0.getMillis());
      assertEquals(60127198L, duration0.getStandardSeconds());
      assertEquals(16701L, duration0.getStandardHours());
      assertEquals(695L, duration0.getStandardDays());
      assertEquals((-14L), duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals((-53925L), duration2.getStandardSeconds());
      assertEquals((-53925738L), duration2.getMillis());
      assertEquals((-898L), duration2.getStandardMinutes());
      assertEquals(1364342400000L, dateMidnight1.getMillis());
      assertEquals(1304208000000L, dateMidnight2.getMillis());
      assertEquals((-58654022400000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertEquals(1, int0);
      
      DateMidnight dateMidnight5 = dateMidnight4.withYear(518);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1002119L, duration0.getStandardMinutes());
      assertEquals(60127198885L, duration0.getMillis());
      assertEquals(60127198L, duration0.getStandardSeconds());
      assertEquals(16701L, duration0.getStandardHours());
      assertEquals(695L, duration0.getStandardDays());
      assertEquals((-14L), duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals((-53925L), duration2.getStandardSeconds());
      assertEquals((-53925738L), duration2.getMillis());
      assertEquals((-898L), duration2.getStandardMinutes());
      assertEquals(1364342400000L, dateMidnight1.getMillis());
      assertEquals(1304208000000L, dateMidnight2.getMillis());
      assertEquals((-58654022400000L), dateMidnight4.getMillis());
      assertEquals((-45810316800000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotNull(dateMidnight5);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = (-3006);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears((-3006));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-93467952000000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.dayOfYear();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-93467952000000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.withMaximumValue();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-93467952000000L), dateMidnight1.getMillis());
      assertEquals((-93440217600000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        dateMidnight2.withWeekOfWeekyear((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1758L));
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      boolean boolean0 = dateMidnight0.isAfterNow();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertFalse(boolean0);
      
      int int0 = 0;
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(0L, 0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-86400000L), dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.weekyear();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-86400000L), dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
      
      boolean boolean1 = dateMidnight_Property0.isLeap();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-86400000L), dateMidnight1.getMillis());
      assertFalse(boolean1 == boolean0);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertTrue(boolean1);
      
      DateMidnight dateMidnight2 = dateMidnight1.minusYears(0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-86400000L), dateMidnight1.getMillis());
      assertEquals((-86400000L), dateMidnight2.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.plusDays(0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-86400000L), dateMidnight1.getMillis());
      assertEquals((-86400000L), dateMidnight2.getMillis());
      assertEquals((-86400000L), dateMidnight3.getMillis());
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      int int1 = dateMidnight_Property0.get();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-86400000L), dateMidnight1.getMillis());
      assertFalse(int1 == int0);
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertEquals(1970, int1);
      
      DateMidnight dateMidnight4 = dateMidnight_Property0.setCopy((-5539));
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-86400000L), dateMidnight1.getMillis());
      assertEquals((-236960726400000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      int int2 = dateMidnight4.getCenturyOfEra();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-86400000L), dateMidnight1.getMillis());
      assertEquals((-236960726400000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertEquals(55, int2);
      
      int int3 = 1979;
      DateMidnight dateMidnight5 = dateMidnight0.minusMonths(1979);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-5204304000000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotNull(dateMidnight5);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Duration duration0 = null;
      try {
        duration0 = new Duration(ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No duration converter found for type: org.joda.time.chrono.EthiopicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = (-2160);
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths((-2160));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-4287945600000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      // Undeclared exception!
      try { 
        dateMidnight1.withDayOfWeek((-2160));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2160 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Period period0 = new Period(165, (-867), (-1), (-867), 292278993, 165, (-867), 292278993);
      assertNotNull(period0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(period0, 4682);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4939773910992000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight0.minusYears((-1410));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      Period period1 = Period.months((-867));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      DateMidnight dateMidnight3 = dateMidnight2.withFields((ReadablePartial) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      int int0 = dateMidnight3.getSecondOfMinute();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertEquals(0, int0);
      
      boolean boolean0 = dateMidnight2.isEqualNow();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertFalse(boolean0);
      
      MutableDateTime mutableDateTime0 = dateMidnight2.toMutableDateTime((DateTimeZone) null);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(45887558400000L, mutableDateTime0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(mutableDateTime0);
      
      DateMidnight dateMidnight4 = dateMidnight2.plus((ReadablePeriod) period0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(1100943532800000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(period0, period1);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = dateMidnight2.plusDays(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertSame(dateMidnight5, dateMidnight2);
      assertSame(dateMidnight5, dateMidnight3);
      assertNotNull(dateMidnight5);
      
      DateMidnight dateMidnight6 = dateMidnight2.minusWeeks(4);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45885139200000L, dateMidnight6.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotNull(dateMidnight6);
      
      Instant instant0 = dateMidnight6.toInstant();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45885139200000L, dateMidnight6.getMillis());
      assertEquals(45885139200000L, instant0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotNull(instant0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.monthOfYear();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4939773910992000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(period0, period1);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotNull(dateMidnight_Property0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(45887558400000L, mutableDateTime0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(mutableDateTime_Property0);
      
      int int1 = dateMidnight0.getMinuteOfDay();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertTrue(int1 == int0);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertEquals(0, int1);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight5.centuryOfEra();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertSame(dateMidnight5, dateMidnight2);
      assertSame(dateMidnight5, dateMidnight3);
      assertNotNull(dateMidnight_Property1);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      assertNotNull(lenientChronology0);
      
      DateMidnight dateMidnight7 = dateMidnight3.withChronology(lenientChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight7.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight4));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight7);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight7);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertNotNull(dateMidnight7);
      
      DateMidnight dateMidnight8 = dateMidnight0.withZoneRetainFields((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight8.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight8.equals((Object)dateMidnight3));
      assertFalse(dateMidnight8.equals((Object)dateMidnight6));
      assertFalse(dateMidnight8.equals((Object)dateMidnight4));
      assertFalse(dateMidnight8.equals((Object)dateMidnight7));
      assertFalse(dateMidnight8.equals((Object)dateMidnight2));
      assertFalse(dateMidnight8.equals((Object)dateMidnight5));
      assertFalse(dateMidnight8.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight8, dateMidnight3);
      assertNotSame(dateMidnight8, dateMidnight6);
      assertNotSame(dateMidnight8, dateMidnight4);
      assertNotSame(dateMidnight8, dateMidnight7);
      assertSame(dateMidnight8, dateMidnight0);
      assertNotSame(dateMidnight8, dateMidnight2);
      assertNotSame(dateMidnight8, dateMidnight5);
      assertNotSame(dateMidnight8, dateMidnight1);
      assertNotNull(dateMidnight8);
      
      DateMidnight dateMidnight9 = dateMidnight_Property0.setCopy(5);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4939773910992000000L, dateMidnight1.getMillis());
      assertEquals(4939773897772800000L, dateMidnight9.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight8));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight9.equals((Object)dateMidnight4));
      assertFalse(dateMidnight9.equals((Object)dateMidnight0));
      assertFalse(dateMidnight9.equals((Object)dateMidnight8));
      assertFalse(dateMidnight9.equals((Object)dateMidnight6));
      assertFalse(dateMidnight9.equals((Object)dateMidnight3));
      assertFalse(dateMidnight9.equals((Object)dateMidnight7));
      assertFalse(dateMidnight9.equals((Object)dateMidnight2));
      assertFalse(dateMidnight9.equals((Object)dateMidnight1));
      assertFalse(dateMidnight9.equals((Object)dateMidnight5));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(period0, period1);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight9);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight9, dateMidnight4);
      assertNotSame(dateMidnight9, dateMidnight0);
      assertNotSame(dateMidnight9, dateMidnight8);
      assertNotSame(dateMidnight9, dateMidnight6);
      assertNotSame(dateMidnight9, dateMidnight3);
      assertNotSame(dateMidnight9, dateMidnight7);
      assertNotSame(dateMidnight9, dateMidnight2);
      assertNotSame(dateMidnight9, dateMidnight1);
      assertNotSame(dateMidnight9, dateMidnight5);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotNull(dateMidnight9);
      
      DateMidnight dateMidnight10 = dateMidnight_Property1.addToCopy(1345L);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(4290297580800000L, dateMidnight10.getMillis());
      assertEquals(45887558400000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight9));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight7));
      assertFalse(dateMidnight2.equals((Object)dateMidnight8));
      assertFalse(dateMidnight10.equals((Object)dateMidnight5));
      assertFalse(dateMidnight10.equals((Object)dateMidnight2));
      assertFalse(dateMidnight10.equals((Object)dateMidnight9));
      assertFalse(dateMidnight10.equals((Object)dateMidnight0));
      assertFalse(dateMidnight10.equals((Object)dateMidnight1));
      assertFalse(dateMidnight10.equals((Object)dateMidnight8));
      assertFalse(dateMidnight10.equals((Object)dateMidnight3));
      assertFalse(dateMidnight10.equals((Object)dateMidnight4));
      assertFalse(dateMidnight10.equals((Object)dateMidnight7));
      assertFalse(dateMidnight10.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight7));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight9));
      assertFalse(dateMidnight5.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight8));
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight9);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight7);
      assertNotSame(dateMidnight2, dateMidnight10);
      assertNotSame(dateMidnight2, dateMidnight8);
      assertNotSame(dateMidnight10, dateMidnight5);
      assertNotSame(dateMidnight10, dateMidnight2);
      assertNotSame(dateMidnight10, dateMidnight9);
      assertNotSame(dateMidnight10, dateMidnight0);
      assertNotSame(dateMidnight10, dateMidnight1);
      assertNotSame(dateMidnight10, dateMidnight8);
      assertNotSame(dateMidnight10, dateMidnight3);
      assertNotSame(dateMidnight10, dateMidnight4);
      assertNotSame(dateMidnight10, dateMidnight7);
      assertNotSame(dateMidnight10, dateMidnight6);
      assertNotSame(dateMidnight5, dateMidnight7);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight9);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertSame(dateMidnight5, dateMidnight2);
      assertSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight10);
      assertNotSame(dateMidnight5, dateMidnight8);
      assertNotNull(dateMidnight10);
      
      DateMidnight dateMidnight11 = dateMidnight4.withWeekyear(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals((-62150976000000L), dateMidnight11.getMillis());
      assertEquals(1100943532800000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight10));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight9));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight7));
      assertFalse(dateMidnight2.equals((Object)dateMidnight10));
      assertFalse(dateMidnight2.equals((Object)dateMidnight8));
      assertFalse(dateMidnight11.equals((Object)dateMidnight7));
      assertFalse(dateMidnight11.equals((Object)dateMidnight2));
      assertFalse(dateMidnight11.equals((Object)dateMidnight1));
      assertFalse(dateMidnight11.equals((Object)dateMidnight10));
      assertFalse(dateMidnight11.equals((Object)dateMidnight3));
      assertFalse(dateMidnight11.equals((Object)dateMidnight5));
      assertFalse(dateMidnight11.equals((Object)dateMidnight8));
      assertFalse(dateMidnight11.equals((Object)dateMidnight4));
      assertFalse(dateMidnight11.equals((Object)dateMidnight0));
      assertFalse(dateMidnight11.equals((Object)dateMidnight9));
      assertFalse(dateMidnight11.equals((Object)dateMidnight6));
      assertFalse(dateMidnight4.equals((Object)dateMidnight10));
      assertFalse(dateMidnight4.equals((Object)dateMidnight8));
      assertFalse(dateMidnight4.equals((Object)dateMidnight6));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight7));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight9));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight11);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(period0, period1);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight11);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight9);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight7);
      assertNotSame(dateMidnight2, dateMidnight10);
      assertNotSame(dateMidnight2, dateMidnight8);
      assertNotSame(dateMidnight11, dateMidnight7);
      assertNotSame(dateMidnight11, dateMidnight2);
      assertNotSame(dateMidnight11, dateMidnight1);
      assertNotSame(dateMidnight11, dateMidnight10);
      assertNotSame(dateMidnight11, dateMidnight3);
      assertNotSame(dateMidnight11, dateMidnight5);
      assertNotSame(dateMidnight11, dateMidnight8);
      assertNotSame(dateMidnight11, dateMidnight4);
      assertNotSame(dateMidnight11, dateMidnight0);
      assertNotSame(dateMidnight11, dateMidnight9);
      assertNotSame(dateMidnight11, dateMidnight6);
      assertNotSame(dateMidnight4, dateMidnight10);
      assertNotSame(dateMidnight4, dateMidnight8);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight7);
      assertNotSame(dateMidnight4, dateMidnight11);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight9);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotNull(dateMidnight11);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfMonth();
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundFloorCopy();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = 2121;
      DateMidnight dateMidnight2 = dateMidnight0.plusMonths(2121);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(5577638400000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight1.plus(21859200000L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals(21859200000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy(2121);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2121 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1L), (Chronology) null);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(27);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-1325548800000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      Interval interval0 = dateMidnight1.toInterval();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-1325548800000L), dateMidnight1.getMillis());
      assertEquals((-1325548800000L), interval0.getStartMillis());
      assertEquals((-1325462400000L), interval0.getEndMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(interval0);
      
      DateMidnight dateMidnight2 = dateMidnight1.withDayOfMonth(27);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-1325548800000L), dateMidnight1.getMillis());
      assertEquals((-1325894400000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      int int0 = dateMidnight0.getSecondOfMinute();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertEquals(0, int0);
      
      DateMidnight dateMidnight3 = dateMidnight1.minusWeeks((-945));
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-1325548800000L), dateMidnight1.getMillis());
      assertEquals((-754012800000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(27, 27, 12740625, 27, 12740625, 0, 0, 0);
      assertNotNull(mutablePeriod0);
      
      int int1 = mutablePeriod0.getHours();
      assertFalse(int1 == int0);
      assertEquals(12740625, int1);
      
      DateMidnight dateMidnight4 = dateMidnight2.minus((ReadablePeriod) mutablePeriod0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-1325548800000L), dateMidnight1.getMillis());
      assertEquals((-1325894400000L), dateMidnight2.getMillis());
      assertEquals((-7753647456000000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotNull(dateMidnight4);
      
      int int2 = dateMidnight4.getYearOfEra();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-1325548800000L), dateMidnight1.getMillis());
      assertEquals((-1325894400000L), dateMidnight2.getMillis());
      assertEquals((-7753647456000000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertEquals(243735, int2);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateTimeZone.setNameProvider((NameProvider) null);
      DateMidnight dateMidnight5 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-86400000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotNull(dateMidnight5);
      
      MutableDateTime mutableDateTime0 = dateMidnight4.toMutableDateTime((Chronology) null);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-1325548800000L), dateMidnight1.getMillis());
      assertEquals((-1325894400000L), dateMidnight2.getMillis());
      assertEquals((-7753647456000000L), dateMidnight4.getMillis());
      assertEquals((-7753647456000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotNull(mutableDateTime0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight4.yearOfEra();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-1325548800000L), dateMidnight1.getMillis());
      assertEquals((-1325894400000L), dateMidnight2.getMillis());
      assertEquals((-7753647456000000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight4.dayOfYear();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-1325548800000L), dateMidnight1.getMillis());
      assertEquals((-1325894400000L), dateMidnight2.getMillis());
      assertEquals((-7753647456000000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotNull(dateMidnight_Property1);
      
      DateMidnight.Property dateMidnight_Property2 = dateMidnight3.monthOfYear();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-1325548800000L), dateMidnight1.getMillis());
      assertEquals((-754012800000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight4));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property0);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property1);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight_Property2);
      
      DateMidnight dateMidnight6 = dateMidnight_Property0.roundHalfFloorCopy();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-1325548800000L), dateMidnight1.getMillis());
      assertEquals((-7753637779200000L), dateMidnight6.getMillis());
      assertEquals((-1325894400000L), dateMidnight2.getMillis());
      assertEquals((-7753647456000000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property2));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property2);
      assertNotNull(dateMidnight6);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1000000000L);
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      int int0 = dateMidnight_Property0.get();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(1, int0);
      
      int int1 = dateMidnight0.getMillisOfSecond();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = dateMidnight_Property0.getAsText();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals("January", string0);
      assertNotNull(string0);
      
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMaximumValue();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(29808000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Chronology chronology0 = iSOChronology0.withZone((DateTimeZone) null);
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
      assertNotNull(chronology0);
      
      Chronology chronology1 = iSOChronology0.withUTC();
      assertSame(iSOChronology0, chronology0);
      assertSame(iSOChronology0, chronology1);
      assertSame(chronology1, iSOChronology0);
      assertSame(chronology1, chronology0);
      assertNotNull(chronology1);
      
      MutableDateTime mutableDateTime0 = dateMidnight1.toMutableDateTime(chronology1);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(29808000000L, dateMidnight1.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(29808000000L, mutableDateTime0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(iSOChronology0, chronology0);
      assertSame(iSOChronology0, chronology1);
      assertSame(chronology1, iSOChronology0);
      assertSame(chronology1, chronology0);
      assertNotNull(mutableDateTime0);
      
      Interval interval0 = dateMidnight1.toInterval();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(29808000000L, dateMidnight1.getMillis());
      assertEquals(29808000000L, interval0.getStartMillis());
      assertEquals(29894400000L, interval0.getEndMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(interval0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      int int2 = mutableDateTime0.get(dateTimeField0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(29808000000L, dateMidnight1.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(29808000000L, mutableDateTime0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(iSOChronology0, chronology0);
      assertSame(iSOChronology0, chronology1);
      assertSame(chronology1, iSOChronology0);
      assertSame(chronology1, chronology0);
      assertEquals(0, int2);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.dayOfMonth();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.roundHalfFloorCopy();
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight_Property1.roundHalfFloorCopy();
      assertEquals(950400000L, dateMidnight3.getMillis());
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight0.withYear(1);
      assertEquals(950400000L, dateMidnight0.getMillis());
      assertEquals((-62134646400000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotNull(dateMidnight4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(643);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1967390380800000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.minusWeeks(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1967390380800000L, dateMidnight1.getMillis());
      assertEquals(1967389776000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.property(dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1967390380800000L, dateMidnight1.getMillis());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotNull(dateMidnight_Property0);
      
      DateTimeField dateTimeField0 = dateMidnight_Property0.getField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1967390380800000L, dateMidnight1.getMillis());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withEra(1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.withDayOfMonth(1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(1391212800000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      int int0 = 2372;
      int int1 = 1673;
      try { 
        buddhistChronology0.getDateTimeMillis(352831696, 352831696, 352831696, 2372, 352831696, 352831696, 1673);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 352831696 for year must be in the range [-292268511,292279536]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(uTCDateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(1427L);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = dateMidnight1.getYearOfEra();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals(1970, int0);
      
      LocalTime localTime0 = new LocalTime(1427L, (DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateMidnight dateMidnight2 = dateMidnight1.withFields(localTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(0L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.withYearOfCentury(0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(0L, dateMidnight2.getMillis());
      assertEquals((-2208988800000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotNull(dateMidnight_Property0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(julianChronology0);
      
      Chronology chronology0 = julianChronology0.withZone(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      
      MutableDateTime mutableDateTime0 = dateMidnight2.toMutableDateTime(chronology0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(0L, dateMidnight2.getMillis());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(mutableDateTime0);
      
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy("UD=TQ0/[sX", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"UD=TQ0/[sX\" for dayOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(uTCDateTimeZone0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(uTCDateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertTrue(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      Locale locale0 = new Locale(" < ");
      assertEquals("", locale0.getVariant());
      assertEquals(" < ", locale0.toString());
      assertEquals(" < ", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(" < ", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = uTCDateTimeZone0.getName(0L, locale0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("", locale0.getVariant());
      assertEquals(" < ", locale0.toString());
      assertEquals(" < ", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(" < ", locale0.getISO3Language());
      assertEquals("Coordinated Universal Time", string0);
      assertNotNull(string0);
      
      LocalDate localDate0 = dateMidnight1.toLocalDate();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(3, localDate0.size());
      assertTrue(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.property(dateTimeFieldType0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertTrue(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight2 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertTrue(dateMidnight2.equals((Object)dateMidnight1));
      assertTrue(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      UTCDateTimeZone uTCDateTimeZone1 = new UTCDateTimeZone();
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertTrue(uTCDateTimeZone1.isFixed());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertNotNull(uTCDateTimeZone1);
      
      DateMidnight dateMidnight3 = dateMidnight1.withZoneRetainFields(uTCDateTimeZone1);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertTrue(uTCDateTimeZone1.isFixed());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertTrue(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight0.equals((Object)dateMidnight2));
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertTrue(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertTrue(dateMidnight3.equals((Object)dateMidnight2));
      assertTrue(dateMidnight3.equals((Object)dateMidnight0));
      assertTrue(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      Duration duration0 = Duration.standardDays((-3540L));
      assertEquals((-3540L), duration0.getStandardDays());
      assertEquals((-305856000L), duration0.getStandardSeconds());
      assertEquals((-84960L), duration0.getStandardHours());
      assertEquals((-5097600L), duration0.getStandardMinutes());
      assertEquals((-305856000000L), duration0.getMillis());
      assertNotNull(duration0);
      
      Days days0 = Days.MAX_VALUE;
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertNotNull(days0);
      
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals((-3540L), duration0.getStandardDays());
      assertEquals((-305856000L), duration0.getStandardSeconds());
      assertEquals((-84960L), duration0.getStandardHours());
      assertEquals((-5097600L), duration0.getStandardMinutes());
      assertEquals((-305856000000L), duration0.getMillis());
      assertEquals(1, minutes0.size());
      assertEquals((-5097600), minutes0.getMinutes());
      assertNotNull(minutes0);
      
      Duration duration1 = days0.toStandardDuration();
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(2147483647L, duration1.getStandardDays());
      assertEquals(3092376451680L, duration1.getStandardMinutes());
      assertEquals(51539607528L, duration1.getStandardHours());
      assertEquals(185542587100800L, duration1.getStandardSeconds());
      assertEquals(185542587100800000L, duration1.getMillis());
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      assertEquals((-185542892956800000L), duration2.getMillis());
      assertEquals((-51539692488L), duration2.getStandardHours());
      assertEquals((-2147487187L), duration2.getStandardDays());
      assertEquals((-3092381549280L), duration2.getStandardMinutes());
      assertEquals((-185542892956800L), duration2.getStandardSeconds());
      assertEquals((-3540L), duration0.getStandardDays());
      assertEquals((-305856000L), duration0.getStandardSeconds());
      assertEquals((-84960L), duration0.getStandardHours());
      assertEquals((-5097600L), duration0.getStandardMinutes());
      assertEquals((-305856000000L), duration0.getMillis());
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(2147483647L, duration1.getStandardDays());
      assertEquals(3092376451680L, duration1.getStandardMinutes());
      assertEquals(51539607528L, duration1.getStandardHours());
      assertEquals(185542587100800L, duration1.getStandardSeconds());
      assertEquals(185542587100800000L, duration1.getMillis());
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotNull(duration2);
      
      // Undeclared exception!
      try { 
        dateMidnight3.withDurationAdded((ReadableDuration) duration2, 59);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -185542892956800000 * 59
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try { 
        DateMidnight.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight(1623L, (Chronology) gregorianChronology0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = 182;
      DateMidnight dateMidnight2 = dateMidnight1.withYearOfEra(182);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals((-56423779200000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      int int1 = (-1469);
      DateMidnight dateMidnight3 = dateMidnight2.plusWeeks((-1469));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals((-56423779200000L), dateMidnight2.getMillis());
      assertEquals((-57312230400000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(uTCDateTimeZone0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = dateMidnight3.isSupported(dateTimeFieldType0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals((-56423779200000L), dateMidnight2.getMillis());
      assertEquals((-57312230400000L), dateMidnight3.getMillis());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertTrue(boolean0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      DateMidnight.Property dateMidnight_Property0 = new DateMidnight.Property(dateMidnight3, dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals((-56423779200000L), dateMidnight2.getMillis());
      assertEquals((-57312230400000L), dateMidnight3.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotNull(dateMidnight_Property0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withEra((-1469));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1469 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-2545L));
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-59958230400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = dateMidnight1.getEra();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-59958230400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals(1, int0);
      
      DateMidnight dateMidnight2 = dateMidnight0.minusDays(1118);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-96681600000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.plusDays(1118);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-96681600000L), dateMidnight2.getMillis());
      assertEquals((-86400000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertTrue(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      DateTime dateTime0 = dateMidnight2.toDateTimeISO();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-96681600000L), dateMidnight2.getMillis());
      assertEquals((-96681600000L), dateTime0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateTime0);
      
      DateMidnight dateMidnight4 = dateMidnight0.plusWeeks(0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-86400000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertTrue(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotNull(dateMidnight4);
      
      int int1 = dateMidnight4.getDayOfYear();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-86400000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertTrue(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(int1 == int0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertEquals(365, int1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = dateMidnight3.isBefore(dateMidnight1);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-59958230400000L), dateMidnight1.getMillis());
      assertEquals((-96681600000L), dateMidnight2.getMillis());
      assertEquals((-86400000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertTrue(dateMidnight3.equals((Object)dateMidnight4));
      assertTrue(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertFalse(boolean0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight3.property(dateTimeFieldType0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-96681600000L), dateMidnight2.getMillis());
      assertEquals((-86400000L), dateMidnight3.getMillis());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertTrue(dateMidnight3.equals((Object)dateMidnight4));
      assertTrue(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotNull(dateMidnight_Property0);
      
      int int2 = dateMidnight_Property0.getLeapAmount();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-96681600000L), dateMidnight2.getMillis());
      assertEquals((-86400000L), dateMidnight3.getMillis());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertTrue(dateMidnight3.equals((Object)dateMidnight4));
      assertTrue(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertEquals(0, int2);
      
      boolean boolean1 = dateTimeFieldType0.isSupported((Chronology) null);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy((-1440));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1440 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "p:)a\\3m2g";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("p:)a\u0003m2g");
      assertNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(100L);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.year();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight2 = dateMidnight1.minus(100L);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals((-86400000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight_Property0.setCopy((-292275054));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals((-9223372017043200000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      Duration duration0 = new Duration(0L, (-292275054));
      assertEquals((-292275L), duration0.getStandardSeconds());
      assertEquals((-3L), duration0.getStandardDays());
      assertEquals((-292275054L), duration0.getMillis());
      assertEquals((-4871L), duration0.getStandardMinutes());
      assertEquals((-81L), duration0.getStandardHours());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod();
      assertEquals((-292275L), duration0.getStandardSeconds());
      assertEquals((-3L), duration0.getStandardDays());
      assertEquals((-292275054L), duration0.getMillis());
      assertEquals((-4871L), duration0.getStandardMinutes());
      assertEquals((-81L), duration0.getStandardHours());
      assertNotNull(period0);
      
      DateMidnight dateMidnight4 = dateMidnight1.minus((ReadableDuration) duration0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals((-292275L), duration0.getStandardSeconds());
      assertEquals((-3L), duration0.getStandardDays());
      assertEquals((-292275054L), duration0.getMillis());
      assertEquals((-4871L), duration0.getStandardMinutes());
      assertEquals((-81L), duration0.getStandardHours());
      assertEquals(259200000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(uTCDateTimeZone0);
      
      DateMidnight dateMidnight5 = dateMidnight1.withZoneRetainFields(uTCDateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0L, dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertTrue(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotNull(dateMidnight5);
      
      int int0 = dateMidnight1.getHourOfDay();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertTrue(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertEquals(0, int0);
      
      DateMidnight dateMidnight6 = dateMidnight_Property0.addWrapFieldToCopy((-2259));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals((-71287171200000L), dateMidnight6.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertTrue(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotNull(dateMidnight6);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight6.era();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals((-71287171200000L), dateMidnight6.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertTrue(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      DateMidnight dateMidnight7 = dateMidnight5.withMillis(0L);
      assertEquals(0L, dateMidnight7.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0L, dateMidnight5.getMillis());
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertTrue(dateMidnight7.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertTrue(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertTrue(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight6));
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertSame(dateMidnight7, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertSame(dateMidnight5, dateMidnight7);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotNull(dateMidnight7);
      
      DateMidnight dateMidnight8 = dateMidnight1.minusMonths(0);
      assertEquals(0L, dateMidnight8.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateMidnight8.equals((Object)dateMidnight4));
      assertTrue(dateMidnight8.equals((Object)dateMidnight5));
      assertFalse(dateMidnight8.equals((Object)dateMidnight2));
      assertFalse(dateMidnight8.equals((Object)dateMidnight3));
      assertFalse(dateMidnight8.equals((Object)dateMidnight0));
      assertFalse(dateMidnight8.equals((Object)dateMidnight6));
      assertTrue(dateMidnight8.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertTrue(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight8, dateMidnight4);
      assertSame(dateMidnight8, dateMidnight1);
      assertNotSame(dateMidnight8, dateMidnight2);
      assertNotSame(dateMidnight8, dateMidnight7);
      assertNotSame(dateMidnight8, dateMidnight3);
      assertNotSame(dateMidnight8, dateMidnight0);
      assertNotSame(dateMidnight8, dateMidnight5);
      assertNotSame(dateMidnight8, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotNull(dateMidnight8);
      
      DateMidnight.Property dateMidnight_Property2 = dateMidnight1.centuryOfEra();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight8));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertTrue(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight_Property2, dateMidnight_Property0);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property1);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotNull(dateMidnight_Property2);
      
      // Undeclared exception!
      try { 
        dateMidnight0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = (-88L);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-88L));
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals((-88L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-88L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(gJChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) gJChronology0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-88L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(4);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-88L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1266105600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.minusMonths(0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-88L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1266105600000L, dateMidnight1.getMillis());
      assertEquals(1266105600000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      long long1 = (-688L);
      try { 
        gJChronology0.getDateTimeMillis(52, 0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withYear(7);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61942492800000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.plusDays(7);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61942492800000L), dateMidnight1.getMillis());
      assertEquals((-61941888000000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight2.weekOfWeekyear();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61942492800000L), dateMidnight1.getMillis());
      assertEquals((-61941888000000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      int int0 = 1186;
      MutableDateTime mutableDateTime0 = dateMidnight2.toMutableDateTime((Chronology) null);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61942492800000L), dateMidnight1.getMillis());
      assertEquals((-61941888000000L), dateMidnight2.getMillis());
      assertEquals((-61941888000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(mutableDateTime0);
      
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy(1186);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1186 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(679L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Duration duration0 = Duration.millis(1098L);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1098L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1098L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Duration duration1 = Duration.standardSeconds(679L);
      assertEquals(679L, duration1.getStandardSeconds());
      assertEquals(11L, duration1.getStandardMinutes());
      assertEquals(679000L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      
      Duration duration2 = duration1.withDurationAdded((-4141L), 1813);
      assertEquals(679L, duration1.getStandardSeconds());
      assertEquals(11L, duration1.getStandardMinutes());
      assertEquals(679000L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-6828633L), duration2.getMillis());
      assertEquals((-1L), duration2.getStandardHours());
      assertEquals((-6828L), duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals((-113L), duration2.getStandardMinutes());
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotNull(duration2);
      
      boolean boolean0 = duration0.isEqual(duration1);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1098L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(679L, duration1.getStandardSeconds());
      assertEquals(11L, duration1.getStandardMinutes());
      assertEquals(679000L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration2));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertFalse(boolean0);
      
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(periodType0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(lenientChronology0);
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals("YearDayNoDays", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      Chronology chronology0 = lenientChronology0.withUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(lenientChronology0, chronology0);
      assertSame(chronology0, lenientChronology0);
      assertNotNull(chronology0);
      
      int int0 = dateMidnight0.getMillisOfDay();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0, int0);
      
      Period period0 = duration0.toPeriod(periodType0, chronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1098L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(periodType0.equals((Object)periodType1));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(periodType0, periodType1);
      assertSame(lenientChronology0, chronology0);
      assertSame(chronology0, lenientChronology0);
      assertNotNull(period0);
      
      Seconds seconds0 = minutes0.toStandardSeconds();
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1098L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotNull(seconds0);
      
      Duration duration3 = seconds0.toStandardDuration();
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1098L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals(0L, duration3.getStandardSeconds());
      assertEquals(0L, duration3.getMillis());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration2));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration2);
      assertNotNull(duration3);
      
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadableDuration) duration3);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1098L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals(0L, duration3.getStandardSeconds());
      assertEquals(0L, duration3.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration2));
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration2);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      String string0 = dateMidnight1.toString((DateTimeFormatter) null);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1098L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals(0L, duration3.getStandardSeconds());
      assertEquals(0L, duration3.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration2));
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration2);
      assertSame(dateMidnight1, dateMidnight0);
      assertEquals("1970-01-01T00:00:00.000Z", string0);
      assertNotNull(string0);
      
      long long0 = dateMidnight1.checkInstant(679L, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1098L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals(0L, duration3.getStandardSeconds());
      assertEquals(0L, duration3.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration2));
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration2);
      assertSame(dateMidnight1, dateMidnight0);
      assertEquals(0L, long0);
      
      DateMidnight dateMidnight2 = dateMidnight1.plus((ReadablePeriod) minutes0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1098L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, dateMidnight2.getMillis());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals(0L, duration3.getStandardSeconds());
      assertEquals(0L, duration3.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration2));
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration2);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotNull(dateMidnight2);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.year();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1098L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals(0L, duration3.getStandardSeconds());
      assertEquals(0L, duration3.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration2));
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration2);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight3 = dateMidnight_Property0.roundFloorCopy();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1098L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0L, dateMidnight3.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals(0L, duration3.getStandardSeconds());
      assertEquals(0L, duration3.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration2));
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight0);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight1.withMillis(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1098L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0L, dateMidnight4.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals(0L, duration3.getStandardSeconds());
      assertEquals(0L, duration3.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration2));
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertSame(dateMidnight4, dateMidnight1);
      assertSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight2);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotNull(dateMidnight4);
      
      // Undeclared exception!
      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) seconds0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Minutes cannot be compared to class org.joda.time.Seconds
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(islamicChronology0, islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.IslamicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfCentury((-1175));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1175 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      assertNotNull(strictChronology0);
      
      Chronology chronology0 = strictChronology0.withUTC();
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertNotNull(chronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight(168L, chronology0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      LocalTime localTime0 = new LocalTime(0, 0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Period period0 = new Period(localTime0, localTime0, (PeriodType) null);
      assertEquals(4, localTime0.size());
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertEquals(4, localTime0.size());
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      int int0 = 0;
      Period period2 = period1.plusSeconds(0);
      assertEquals(4, localTime0.size());
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period2.equals((Object)period0));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertNotNull(period2);
      
      Period period3 = period1.normalizedStandard((PeriodType) null);
      assertEquals(4, localTime0.size());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period1));
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      
      Period period4 = period3.withFields(period0);
      assertEquals(4, localTime0.size());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period1));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(period4, 0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(0L, dateMidnight1.getMillis());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period4));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period4));
      assertTrue(period3.equals((Object)period1));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfWeek();
      assertEquals(0L, dateMidnight0.getMillis());
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight2 = dateMidnight0.minusYears(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.weekyear();
      assertEquals(0L, dateMidnight0.getMillis());
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekOfWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      int int0 = (-1459);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1459));
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-1459), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      
      DateTimePrinter dateTimePrinter1 = dateTimeFormatter1.getPrinter();
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-1459), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0, dateTimePrinter1.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimePrinter1, dateTimePrinter0);
      assertNotNull(dateTimePrinter1);
      
      Integer integer0 = new Integer((-96));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-96), (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-96));
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-1459), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-96), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear(integer0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-1459), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-96), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter3);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-1459), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-96), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(0L, dateMidnight0.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((long) (-1459), (-1459));
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-1459), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-96), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertFalse(unsupportedDurationField0.isSupported());
      assertTrue(unsupportedDurationField0.isPrecise());
      assertEquals("years", unsupportedDurationField0.getName());
      assertNotNull(unsupportedDurationField0);
      
      DurationFieldType durationFieldType1 = unsupportedDurationField0.getType();
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertFalse(unsupportedDurationField0.isSupported());
      assertTrue(unsupportedDurationField0.isPrecise());
      assertEquals("years", unsupportedDurationField0.getName());
      assertEquals("years", durationFieldType1.getName());
      assertEquals("years", durationFieldType1.toString());
      assertSame(durationFieldType0, durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      assertNotNull(durationFieldType1);
      
      DateMidnight dateMidnight2 = dateMidnight0.withFieldAdded(durationFieldType1, 1);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-1459), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-96), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertFalse(unsupportedDurationField0.isSupported());
      assertTrue(unsupportedDurationField0.isPrecise());
      assertEquals("years", unsupportedDurationField0.getName());
      assertEquals("years", durationFieldType1.getName());
      assertEquals("years", durationFieldType1.toString());
      assertEquals(31536000000L, dateMidnight2.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(durationFieldType0, durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      try { 
        ethiopicChronology0.getDateTimeMillis(747L, 690562340, (-96), 690562340, (-1459));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 690562340 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(gJChronology0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter1);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0L, dateMidnight0.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(1358);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(821318400000L, dateMidnight1.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.yearOfEra();
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(821318400000L, dateMidnight1.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.roundHalfCeilingCopy();
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(821318400000L, dateMidnight1.getMillis());
      assertEquals(820454400000L, dateMidnight2.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((-772), (-772), (-772), (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -772 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(islamicChronology0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.IslamicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minus(2699L);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392249600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateMidnight1.withDayOfWeek((-59));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -59 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("^=KueTvIL(:kJwckH>c");
      assertNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight(0L, (DateTimeZone) null);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateMidnight1);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(gJChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((-1437L), (Chronology) gJChronology0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(4, localDateTime0.size());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotNull(localDateTime0);
      
      int int0 = dateMidnight0.compareTo(dateMidnight1);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals((-1), int0);
      
      DateMidnight dateMidnight2 = dateMidnight0.withFields(localDateTime0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals((-1209600000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateTime dateTime0 = dateMidnight2.toDateTime((Chronology) gJChronology0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals((-1209600000L), dateMidnight2.getMillis());
      assertEquals((-1209600000L), dateTime0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateTime0);
      
      DateMidnight dateMidnight3 = dateMidnight2.minusMonths(3340);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals((-1209600000L), dateMidnight2.getMillis());
      assertEquals((-8784547200000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight2.withDurationAdded((-1L), 3340);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals((-1209600000L), dateMidnight2.getMillis());
      assertEquals((-1296000000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = dateMidnight3.plusDays(3340);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals((-1209600000L), dateMidnight2.getMillis());
      assertEquals((-8784547200000L), dateMidnight3.getMillis());
      assertEquals((-8495971200000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight4));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotNull(dateMidnight5);
      
      GregorianCalendar gregorianCalendar0 = dateMidnight5.toGregorianCalendar();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals((-1209600000L), dateMidnight2.getMillis());
      assertEquals((-8784547200000L), dateMidnight3.getMillis());
      assertEquals((-8495971200000L), dateMidnight5.getMillis());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-8495971200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1700,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=283,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight4));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotNull(gregorianCalendar0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.dayOfMonth();
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotNull(dateMidnight_Property0);
      
      Months months0 = Months.FIVE;
      assertEquals(5, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      DateMidnight dateMidnight6 = dateMidnight0.plus((ReadablePeriod) months0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(5, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(13046400000L, dateMidnight6.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotNull(dateMidnight6);
      
      DateMidnight dateMidnight7 = dateMidnight6.minus(0L);
      assertEquals(13046400000L, dateMidnight7.getMillis());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(5, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(13046400000L, dateMidnight6.getMillis());
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertSame(dateMidnight6, dateMidnight7);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotNull(dateMidnight7);
      
      DateMidnight dateMidnight8 = dateMidnight3.withWeekyear((-1));
      assertEquals((-62178710400000L), dateMidnight8.getMillis());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals((-1209600000L), dateMidnight2.getMillis());
      assertEquals((-8784547200000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight8.equals((Object)dateMidnight6));
      assertFalse(dateMidnight8.equals((Object)dateMidnight0));
      assertFalse(dateMidnight8.equals((Object)dateMidnight5));
      assertFalse(dateMidnight8.equals((Object)dateMidnight7));
      assertFalse(dateMidnight8.equals((Object)dateMidnight2));
      assertFalse(dateMidnight8.equals((Object)dateMidnight1));
      assertFalse(dateMidnight8.equals((Object)dateMidnight3));
      assertFalse(dateMidnight8.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight7));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight4));
      assertFalse(dateMidnight3.equals((Object)dateMidnight7));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight8, dateMidnight6);
      assertNotSame(dateMidnight8, dateMidnight0);
      assertNotSame(dateMidnight8, dateMidnight5);
      assertNotSame(dateMidnight8, dateMidnight7);
      assertNotSame(dateMidnight8, dateMidnight2);
      assertNotSame(dateMidnight8, dateMidnight1);
      assertNotSame(dateMidnight8, dateMidnight3);
      assertNotSame(dateMidnight8, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight7);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight8);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight7);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight3, dateMidnight8);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight8);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withYear(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62163417600000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.withMillis(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62163417600000L), dateMidnight1.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight2.year();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62163417600000L), dateMidnight1.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
      
      Chronology chronology0 = dateMidnight_Property0.getChronology();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62163417600000L), dateMidnight1.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(chronology0);
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      
      MutablePeriod mutablePeriod0 = periodFormatter1.parseMutablePeriod("");
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try { 
        mutablePeriod0.getFieldType(1309);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1309
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse("1d}xz$[;@Bh%g", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1145L));
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(4);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals(2332800000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(uTCDateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis((-1145L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      
      int int0 = 4;
      LocalDateTime localDateTime2 = localDateTime1.withTime(4, 1, 1, 4);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotNull(localDateTime2);
      
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime2, (ReadablePartial) localDateTime2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotNull(days0);
      
      DateMidnight dateMidnight2 = dateMidnight1.minus((ReadablePeriod) days0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals(2332800000L, dateMidnight1.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(2332800000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.year();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals(2332800000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
      
      // Undeclared exception!
      try { 
        dateMidnight1.withMonthOfYear((-1094));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1094 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(uTCDateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight1 = dateMidnight_Property0.addToCopy((-123L));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1068768000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = DateMidnight.now((DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertTrue(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      int int0 = (-3204);
      // Undeclared exception!
      try { 
        dateMidnight0.withMonthOfYear((-3204));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3204 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 2687;
      String string0 = dateMidnight0.toString((String) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("2014-02-14T00:00:00.000Z", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekOfWeekyear(2687);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2687 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse("PeriodFormat.commaspaceand");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"PeriodFormat.commaspaceand\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(lenientChronology0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(lenientChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter3.isParser());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) null);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter3.isParser());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter4);
      
      // Undeclared exception!
      try { 
        DateMidnight.parse(" GM0`_%).", dateTimeFormatter4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(uTCDateTimeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = uTCDateTimeZone0.getName(741L, locale0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("Tempo universale coordinato", string0);
      assertNotNull(string0);
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      DateTimeZone.setDefault(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfEra(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      int int1 = 2573;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(0, 0, 2573, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-317L));
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plus((-1L));
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-172800000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.minusYears(0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-172800000L), dateMidnight1.getMillis());
      assertEquals((-172800000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      Calendar calendar0 = dateMidnight0.toCalendar(locale0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-86400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotNull(calendar0);
      
      DateMidnight dateMidnight3 = dateMidnight1.plusYears(0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-172800000L), dateMidnight1.getMillis());
      assertEquals((-172800000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      int int0 = dateMidnight3.getSecondOfDay();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-172800000L), dateMidnight1.getMillis());
      assertEquals((-172800000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertEquals(0, int0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      DateMidnight dateMidnight4 = dateMidnight0.withField(dateTimeFieldType0, 0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-2177539200000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = dateMidnight4.plusYears(2482);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-2177539200000L), dateMidnight4.getMillis());
      assertEquals(76146825600000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotNull(dateMidnight5);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(uTCDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0, (ReadableInstant) dateMidnight2);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-172800000L), dateMidnight1.getMillis());
      assertEquals((-172800000L), dateMidnight2.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(gJChronology0);
      
      DateMidnight dateMidnight6 = dateMidnight5.withChronology(gJChronology0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-172800000L), dateMidnight1.getMillis());
      assertEquals((-172800000L), dateMidnight2.getMillis());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-2177539200000L), dateMidnight4.getMillis());
      assertEquals(76146825600000L, dateMidnight5.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(76146825600000L, dateMidnight6.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotNull(dateMidnight6);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight4.dayOfWeek();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-2177539200000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight6));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotNull(dateMidnight_Property0);
      
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy(":*6\"^y1lVFG(*S/Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \":*6\"^y1lVFG(*S/Y\" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      int int0 = 0;
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfWeek(0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1391904000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.withChronology(lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1391904000000L, dateMidnight1.getMillis());
      assertEquals(1391904000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight_Property0.roundCeilingCopy();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1410393600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      String string0 = ";nU`Y9|ux5";
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = "";
      Locale locale1 = new Locale("", ";nU`Y9|ux5");
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("_;NU`Y9|UX5", locale1.toString());
      assertEquals("", locale1.getISO3Language());
      assertEquals(";NU`Y9|UX5", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string2 = locale0.getDisplayScript(locale1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("_;NU`Y9|UX5", locale1.toString());
      assertEquals("", locale1.getISO3Language());
      assertEquals(";NU`Y9|UX5", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy(";nU`Y9|ux5", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \";nU`Y9|ux5\" for yearOfCentury is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Chronology chronology0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) null);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Duration duration0 = Duration.standardHours(0L);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadableDuration) duration0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = (-2373);
      // Undeclared exception!
      try { 
        dateMidnight1.withDayOfMonth((-2373));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2373 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = 0L;
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 89;
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      boolean boolean0 = dateMidnight1.isBefore(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertTrue(boolean0);
      
      Days days0 = Days.THREE;
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertNotNull(days0);
      
      DateMidnight dateMidnight2 = dateMidnight0.minusYears(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertTrue(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      Duration duration0 = days0.toStandardDuration();
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertNotNull(mutablePeriod0);
      
      int int1 = (-2931);
      DateMidnight dateMidnight3 = dateMidnight1.withDurationAdded((ReadableDuration) duration0, (-2931));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals((-3568233600000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight3.plusWeeks(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals((-3568233600000L), dateMidnight3.getMillis());
      assertEquals((-3568233600000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight4.dayOfMonth();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals((-3568233600000L), dateMidnight3.getMillis());
      assertEquals((-3568233600000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight5 = dateMidnight3.plusMonths(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals((-3568233600000L), dateMidnight3.getMillis());
      assertEquals((-3334262400000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotNull(dateMidnight5);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight4.monthOfYear();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals((-3568233600000L), dateMidnight3.getMillis());
      assertEquals((-3568233600000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      // Undeclared exception!
      try { 
        dateMidnight4.withDayOfMonth(89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 89 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = dateMidnight0.getEra();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals(1, int0);
      
      String string0 = dateMidnight_Property0.getAsText();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals("AD", string0);
      assertNotNull(string0);
      
      DateMidnight dateMidnight2 = dateMidnight1.plusYears(10);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.plus(2592000000L);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertEquals((-61817472000000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight3.withDayOfYear(1);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertEquals((-61817472000000L), dateMidnight3.getMillis());
      assertEquals((-61820064000000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertTrue(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      Days days0 = Days.SEVEN;
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(period0);
      
      int int1 = 677;
      int int2 = dateMidnight0.compareTo((ReadableInstant) dateMidnight4);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertEquals((-61817472000000L), dateMidnight3.getMillis());
      assertEquals((-61820064000000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertTrue(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight4));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertTrue(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertEquals(1, int2);
      
      String string1 = days0.toString();
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("P7D", string1);
      assertNotNull(string1);
      
      Period period1 = period0.minusMonths(677);
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      DateMidnight dateMidnight5 = dateMidnight2.withCenturyOfEra(1);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertEquals((-58664390400000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertTrue(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotNull(dateMidnight5);
      
      Days days1 = days0.dividedBy((-3459));
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(days1.equals((Object)days0));
      assertNotSame(days1, days0);
      assertNotSame(days0, days1);
      assertNotNull(days1);
      
      Period period2 = period1.plusMonths(1);
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(days0.equals((Object)days1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(days0, days1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotNull(period2);
      
      DateMidnight dateMidnight6 = dateMidnight2.plus((ReadablePeriod) period2);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-63597225600000L), dateMidnight6.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-61820064000000L), dateMidnight2.getMillis());
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertTrue(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(days0.equals((Object)days1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(days0, days1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotNull(dateMidnight6);
      
      DateMidnight dateMidnight7 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight7.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertTrue(dateMidnight7.equals((Object)dateMidnight1));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertNotNull(dateMidnight7);
      
      // Undeclared exception!
      try { 
        dateMidnight6.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61884345600000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(dateMidnight0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotNull(duration0);
      
      DateMidnight dateMidnight2 = dateMidnight1.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61884345600000L), dateMidnight1.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-61884345600000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight1.plus((ReadablePeriod) mutablePeriod0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61884345600000L), dateMidnight1.getMillis());
      assertEquals((-61884345600000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight2.withPeriodAdded(mutablePeriod0, 1437);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61884345600000L), dateMidnight1.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-61884345600000L), dateMidnight2.getMillis());
      assertEquals((-61884345600000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight4.weekyear();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-61884345600000L), dateMidnight1.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-61884345600000L), dateMidnight2.getMillis());
      assertEquals((-61884345600000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1437);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertEquals(1437, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter4);
      
      // Undeclared exception!
      try { 
        DateMidnight.parse("The DateTimeFieldType must not be null", dateTimeFormatter4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The DateTimeFieldType must not b...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = (-1);
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(3599, 3599, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3599 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(uTCDateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      long long0 = (-3300L);
      Duration duration0 = new Duration((-3300L), (-3300L));
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      int int0 = 0;
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, 0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      // Undeclared exception!
      try { 
        dateMidnight1.withWeekOfWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(1579L, 0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(ethiopicChronology0);
      
      long long0 = dateMidnight0.checkInstant(1579L, ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertEquals(0L, long0);
      
      YearMonth yearMonth0 = new YearMonth(dateMidnight0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      DateMidnight dateMidnight2 = dateMidnight1.withFields(yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.minusDays(0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      Duration duration0 = Duration.standardDays((-3034L));
      assertEquals((-262137600L), duration0.getStandardSeconds());
      assertEquals((-4368960L), duration0.getStandardMinutes());
      assertEquals((-262137600000L), duration0.getMillis());
      assertEquals((-72816L), duration0.getStandardHours());
      assertEquals((-3034L), duration0.getStandardDays());
      assertNotNull(duration0);
      
      Period period0 = new Period(dateMidnight0, duration0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-262137600L), duration0.getStandardSeconds());
      assertEquals((-4368960L), duration0.getStandardMinutes());
      assertEquals((-262137600000L), duration0.getMillis());
      assertEquals((-72816L), duration0.getStandardHours());
      assertEquals((-3034L), duration0.getStandardDays());
      assertNotNull(period0);
      
      DateMidnight dateMidnight4 = dateMidnight3.withPeriodAdded(period0, 0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertEquals((-262137600L), duration0.getStandardSeconds());
      assertEquals((-4368960L), duration0.getStandardMinutes());
      assertEquals((-262137600000L), duration0.getMillis());
      assertEquals((-72816L), duration0.getStandardHours());
      assertEquals((-3034L), duration0.getStandardDays());
      assertEquals(1392336000000L, dateMidnight4.getMillis());
      assertSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight1);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = dateMidnight4.minusYears(2000);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertEquals((-262137600L), duration0.getStandardSeconds());
      assertEquals((-4368960L), duration0.getStandardMinutes());
      assertEquals((-262137600000L), duration0.getMillis());
      assertEquals((-72816L), duration0.getStandardHours());
      assertEquals((-3034L), duration0.getStandardDays());
      assertEquals(1392336000000L, dateMidnight4.getMillis());
      assertEquals((-61721568000000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight1);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotNull(dateMidnight5);
      
      DateMidnight dateMidnight6 = dateMidnight5.withYear(984);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertEquals((-262137600L), duration0.getStandardSeconds());
      assertEquals((-4368960L), duration0.getStandardMinutes());
      assertEquals((-262137600000L), duration0.getMillis());
      assertEquals((-72816L), duration0.getStandardHours());
      assertEquals((-3034L), duration0.getStandardDays());
      assertEquals(1392336000000L, dateMidnight4.getMillis());
      assertEquals((-61721568000000L), dateMidnight5.getMillis());
      assertEquals((-31111344000000L), dateMidnight6.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertSame(dateMidnight4, dateMidnight1);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotNull(dateMidnight6);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight4.dayOfMonth();
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertEquals((-262137600L), duration0.getStandardSeconds());
      assertEquals((-4368960L), duration0.getStandardMinutes());
      assertEquals((-262137600000L), duration0.getMillis());
      assertEquals((-72816L), duration0.getStandardHours());
      assertEquals((-3034L), duration0.getStandardDays());
      assertEquals(1392336000000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight6));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertSame(dateMidnight4, dateMidnight1);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight7 = dateMidnight_Property0.withMaximumValue();
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertEquals((-262137600L), duration0.getStandardSeconds());
      assertEquals((-4368960L), duration0.getStandardMinutes());
      assertEquals((-262137600000L), duration0.getMillis());
      assertEquals((-72816L), duration0.getStandardHours());
      assertEquals((-3034L), duration0.getStandardDays());
      assertEquals(1392336000000L, dateMidnight4.getMillis());
      assertEquals(1393545600000L, dateMidnight7.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight7);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight7);
      assertNotSame(dateMidnight4, dateMidnight7);
      assertSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertSame(dateMidnight4, dateMidnight1);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotNull(dateMidnight7);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.plusMonths(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(uTCDateTimeZone0);
      
      DateMidnight dateMidnight3 = dateMidnight2.withZoneRetainFields(uTCDateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight3.yearOfEra();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight_Property0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertNotNull(dateTimeZone0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight3.property(dateTimeFieldType0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      DateMidnight dateMidnight4 = dateMidnight1.plusWeeks(3064);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(3245443200000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      Duration duration0 = new Duration(dateMidnight4, dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(3245443200000L, dateMidnight4.getMillis());
      assertEquals((-30885120L), duration0.getStandardMinutes());
      assertEquals((-1853107200000L), duration0.getMillis());
      assertEquals((-21448L), duration0.getStandardDays());
      assertEquals((-1853107200L), duration0.getStandardSeconds());
      assertEquals((-514752L), duration0.getStandardHours());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotNull(duration0);
      
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(3245443200000L, dateMidnight4.getMillis());
      assertEquals((-30885120L), duration0.getStandardMinutes());
      assertEquals((-1853107200000L), duration0.getMillis());
      assertEquals((-21448L), duration0.getStandardDays());
      assertEquals((-1853107200L), duration0.getStandardSeconds());
      assertEquals((-514752L), duration0.getStandardHours());
      assertEquals(1, seconds0.size());
      assertEquals((-1853107200), seconds0.getSeconds());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(seconds0);
      
      Minutes minutes0 = seconds0.toStandardMinutes();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(3245443200000L, dateMidnight4.getMillis());
      assertEquals((-30885120L), duration0.getStandardMinutes());
      assertEquals((-1853107200000L), duration0.getMillis());
      assertEquals((-21448L), duration0.getStandardDays());
      assertEquals((-1853107200L), duration0.getStandardSeconds());
      assertEquals((-514752L), duration0.getStandardHours());
      assertEquals(1, seconds0.size());
      assertEquals((-1853107200), seconds0.getSeconds());
      assertEquals(1, minutes0.size());
      assertEquals((-30885120), minutes0.getMinutes());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(minutes0);
      
      Hours hours0 = minutes0.toStandardHours();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(3245443200000L, dateMidnight4.getMillis());
      assertEquals((-30885120L), duration0.getStandardMinutes());
      assertEquals((-1853107200000L), duration0.getMillis());
      assertEquals((-21448L), duration0.getStandardDays());
      assertEquals((-1853107200L), duration0.getStandardSeconds());
      assertEquals((-514752L), duration0.getStandardHours());
      assertEquals(1, seconds0.size());
      assertEquals((-1853107200), seconds0.getSeconds());
      assertEquals(1, minutes0.size());
      assertEquals((-30885120), minutes0.getMinutes());
      assertEquals((-514752), hours0.getHours());
      assertEquals(1, hours0.size());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(hours0);
      
      Days days0 = hours0.toStandardDays();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(3245443200000L, dateMidnight4.getMillis());
      assertEquals((-30885120L), duration0.getStandardMinutes());
      assertEquals((-1853107200000L), duration0.getMillis());
      assertEquals((-21448L), duration0.getStandardDays());
      assertEquals((-1853107200L), duration0.getStandardSeconds());
      assertEquals((-514752L), duration0.getStandardHours());
      assertEquals(1, seconds0.size());
      assertEquals((-1853107200), seconds0.getSeconds());
      assertEquals(1, minutes0.size());
      assertEquals((-30885120), minutes0.getMinutes());
      assertEquals((-514752), hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals((-21448), days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(days0);
      
      DateMidnight dateMidnight5 = dateMidnight4.minus((ReadablePeriod) days0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(3245443200000L, dateMidnight4.getMillis());
      assertEquals((-30885120L), duration0.getStandardMinutes());
      assertEquals((-1853107200000L), duration0.getMillis());
      assertEquals((-21448L), duration0.getStandardDays());
      assertEquals((-1853107200L), duration0.getStandardSeconds());
      assertEquals((-514752L), duration0.getStandardHours());
      assertEquals(1, seconds0.size());
      assertEquals((-1853107200), seconds0.getSeconds());
      assertEquals(1, minutes0.size());
      assertEquals((-30885120), minutes0.getMinutes());
      assertEquals((-514752), hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals((-21448), days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(5098550400000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotNull(dateMidnight5);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withUTC();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) copticChronology1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1394928000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("PeriodFormat.spaceandspace");
      assertNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(uTCDateTimeZone0);
      
      CopticChronology copticChronology2 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertFalse(copticChronology2.equals((Object)copticChronology1));
      assertFalse(copticChronology2.equals((Object)copticChronology0));
      assertNotSame(copticChronology2, copticChronology1);
      assertNotSame(copticChronology2, copticChronology0);
      assertNotNull(copticChronology2);
      
      DateMidnight dateMidnight2 = dateMidnight1.withMillis(0L);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1394928000000L, dateMidnight1.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertFalse(copticChronology0.equals((Object)copticChronology2));
      assertFalse(copticChronology1.equals((Object)copticChronology2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(copticChronology0, copticChronology2);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(copticChronology1, copticChronology2);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      int int0 = dateMidnight2.getYear();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1394928000000L, dateMidnight1.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertFalse(copticChronology0.equals((Object)copticChronology2));
      assertFalse(copticChronology1.equals((Object)copticChronology2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(copticChronology0, copticChronology2);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(copticChronology1, copticChronology2);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertEquals(1686, int0);
      
      DateMidnight dateMidnight3 = dateMidnight2.withDayOfMonth(1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1394928000000L, dateMidnight1.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
      assertEquals((-1900800000L), dateMidnight3.getMillis());
      assertFalse(copticChronology0.equals((Object)copticChronology2));
      assertFalse(copticChronology1.equals((Object)copticChronology2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(copticChronology0, copticChronology2);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(copticChronology1, copticChronology2);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.year();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(copticChronology0.equals((Object)copticChronology2));
      assertFalse(copticChronology1.equals((Object)copticChronology2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(copticChronology0, copticChronology2);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(copticChronology1, copticChronology2);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withEra((-786));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -786 for era must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1L), (DateTimeZone) null);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      GregorianCalendar gregorianCalendar0 = dateMidnight0.toGregorianCalendar();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-86400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertNotNull(gregorianCalendar0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfMonth();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.year();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      DateMidnight dateMidnight1 = dateMidnight_Property1.setCopy(0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-62135683200000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = dateMidnight1.getSecondOfMinute();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-62135683200000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals(0, int0);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-86400000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight_Property1.roundFloorCopy();
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-31536000000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(uTCDateTimeZone0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone((String) null);
      assertNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(1);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392422400000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      // Undeclared exception!
      try { 
        dateMidnight1.withCenturyOfEra((-644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -644 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertNotNull(uTCDateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(2524);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(81042076800000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight0.withFieldAdded(durationFieldType0, (-2312));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(1392249600000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight2.yearOfEra();
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(1392249600000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight3 = dateMidnight_Property0.addToCopy(735L);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(1392249600000L, dateMidnight2.getMillis());
      assertEquals(24586588800000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      DateTimeFieldType dateTimeFieldType0 = dateMidnight_Property0.getFieldType();
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(1392249600000L, dateMidnight2.getMillis());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateTimeFieldType0);
      
      DateMidnight dateMidnight4 = dateMidnight_Property0.withMinimumValue();
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(1392249600000L, dateMidnight2.getMillis());
      assertEquals((-62131881600000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotNull(dateMidnight4);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.centuryOfEra();
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      Interval interval0 = dateMidnight1.toInterval();
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(81042076800000L, dateMidnight1.getMillis());
      assertEquals(81042163200000L, interval0.getEndMillis());
      assertEquals(81042076800000L, interval0.getStartMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotNull(interval0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths((-4339));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.plusYears(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight1.getMillis());
      assertEquals(11410329600000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      Days days0 = Days.TWO;
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      DateMidnight dateMidnight3 = dateMidnight2.withPeriodAdded(days0, 0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight1.getMillis());
      assertEquals(11410329600000L, dateMidnight2.getMillis());
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(11410329600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      // Undeclared exception!
      try { 
        dateMidnight3.withDayOfMonth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight(478L, dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMinimumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-9223372016611200000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      DateMidnight dateMidnight2 = dateMidnight1.withFieldAdded(durationFieldType0, 1626);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-9223372016611200000L), dateMidnight1.getMillis());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals((-9223372016611200000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      Duration duration0 = new Duration((long) 1);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertNotNull(duration0);
      
      DateMidnight dateMidnight3 = dateMidnight2.minus((ReadableDuration) duration0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-9223372016611200000L), dateMidnight1.getMillis());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals((-9223372016611200000L), dateMidnight2.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-9223372016697600000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight3.era();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-9223372016611200000L), dateMidnight1.getMillis());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals((-9223372016611200000L), dateMidnight2.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-9223372016697600000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(":*]cg[_r5IQUuNi");
      assertNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Weeks weeks0 = Weeks.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) weeks0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(Integer.MIN_VALUE, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals((-1298796717974400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.withWeekyear(66);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(Integer.MIN_VALUE, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals((-1298796717974400000L), dateMidnight1.getMillis());
      assertEquals((-60070464000000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.minusMonths(66);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(Integer.MIN_VALUE, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals((-1298796717974400000L), dateMidnight1.getMillis());
      assertEquals((-60070464000000L), dateMidnight2.getMillis());
      assertEquals((-60243955200000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(uTCDateTimeZone0);
      
      long long0 = uTCDateTimeZone0.convertLocalToUTC(1775L, true);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1775L, long0);
      
      DateMidnight dateMidnight0 = new DateMidnight(1L, (DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plus(1L);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.plusDays((-1382));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals((-119404800000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight1.minus((ReadableDuration) null);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals(0L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, 0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      Interval interval0 = new Interval(168L, 2444L, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2444L, interval0.getEndMillis());
      assertEquals(168L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      Seconds seconds0 = Seconds.secondsIn(interval0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2444L, interval0.getEndMillis());
      assertEquals(168L, interval0.getStartMillis());
      assertEquals(2, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Duration duration0 = seconds0.toStandardDuration();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2444L, interval0.getEndMillis());
      assertEquals(168L, interval0.getStartMillis());
      assertEquals(2, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(2L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(2000L, duration0.getMillis());
      assertNotNull(duration0);
      
      DateMidnight dateMidnight2 = dateMidnight1.plus((ReadableDuration) duration0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2444L, interval0.getEndMillis());
      assertEquals(168L, interval0.getStartMillis());
      assertEquals(2, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(2L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(2000L, duration0.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone((String) null);
      assertNull(dateTimeZone0);
      
      DateTimeZone dateTimeZone1 = zoneInfoProvider0.getZone("millisOfDay");
      assertNull(dateTimeZone1);
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundCeilingCopy();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(9223372036828800000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.withZoneRetainFields((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(9223372036828800000L, dateMidnight1.getMillis());
      assertEquals(9223372036828800000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight1.era();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(9223372036828800000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      String string0 = dateMidnight_Property0.getAsShortText(locale0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertTrue(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertEquals("\u897F\u66A6", string0);
      assertNotNull(string0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateMidnight1.withYearOfEra(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      boolean boolean0 = dateMidnight0.equals(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(boolean0);
      
      DateTime dateTime0 = DateTime.now();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      DateTime.Property dateTime_Property0 = dateTime0.year();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime_Property0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(2214);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1583625600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = dateMidnight0.compareTo((ReadableInstant) dateTime0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals((-1), int0);
      
      boolean boolean1 = dateMidnight0.isEqual(1L);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertFalse(boolean1);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfEra();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.getDateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      int int1 = dateMidnight2.getDayOfWeek();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(int1 == int0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertEquals(5, int1);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight2.yearOfCentury();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      DateMidnight dateMidnight3 = dateMidnight_Property0.addWrapFieldToCopy(2214);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(71259350400000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Duration duration0 = Duration.standardDays(0L);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded(duration0, (-18));
      assertEquals(4, localDateTime1.size());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      
      LocalDateTime localDateTime2 = localDateTime1.minusMonths(0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime1, localDateTime2);
      assertSame(localDateTime2, localDateTime0);
      assertSame(localDateTime2, localDateTime1);
      assertSame(localDateTime0, localDateTime2);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime2);
      
      // Undeclared exception!
      try { 
        localDateTime2.withSecondOfMinute((-2561));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2561 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("");
      assertNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight(0L, (DateTimeZone) null);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      boolean boolean0 = dateMidnight0.isEqual(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertTrue(boolean0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.centuryOfEra();
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DividedDateTimeField dividedDateTimeField0 = (DividedDateTimeField)dateMidnight_Property0.getField();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(100, dividedDateTimeField0.getDivisor());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2922789, dividedDateTimeField0.getMaximumValue());
      assertNotNull(dividedDateTimeField0);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfWeek(28181250);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 28181250 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(uTCDateTimeZone0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(ethiopicChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, uTCDateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      Chronology chronology0 = zonedChronology0.withZone(uTCDateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertSame(zonedChronology0, chronology0);
      assertSame(chronology0, zonedChronology0);
      assertNotNull(chronology0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(chronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(zonedChronology0, chronology0);
      assertSame(chronology0, zonedChronology0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.getDateMidnight();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.dayOfWeek();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      DateMidnight.Property dateMidnight_Property2 = dateMidnight2.dayOfMonth();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property0));
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property2);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property1);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property2);
      
      // Undeclared exception!
      try { 
        dateMidnight_Property2.setCopy("org.joda.time.format.messages");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.format.messages\" for dayOfMonth is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      int int0 = dateTimeZone0.getStandardOffset(1648L);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, int0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withEra(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-125719084800000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) iSOChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      // Undeclared exception!
      try { 
        DateMidnight.parse("dayOfWeek");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"dayOfWeek\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Months months0 = Months.ZERO;
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) months0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      DateMidnight dateMidnight2 = dateMidnight1.withFieldAdded(durationFieldType0, 0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight2.dayOfWeek();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(1579L, 0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(ethiopicChronology0);
      
      long long0 = dateMidnight0.checkInstant(1579L, ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertEquals(0L, long0);
      
      YearMonth yearMonth0 = new YearMonth(dateMidnight0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      DateMidnight dateMidnight2 = dateMidnight1.withFields(yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.minusDays(0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      Duration duration0 = Duration.standardDays(0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Period period0 = new Period(dateMidnight0, duration0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(period0);
      
      DateMidnight dateMidnight4 = dateMidnight3.withPeriodAdded(period0, 0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392336000000L, dateMidnight4.getMillis());
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight1);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = dateMidnight4.minusYears(2000);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392336000000L, dateMidnight4.getMillis());
      assertEquals((-61721568000000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertSame(dateMidnight4, dateMidnight1);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotNull(dateMidnight5);
      
      DateMidnight dateMidnight6 = dateMidnight5.withYear(984);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392336000000L, dateMidnight4.getMillis());
      assertEquals((-61721568000000L), dateMidnight5.getMillis());
      assertEquals((-31111344000000L), dateMidnight6.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertSame(dateMidnight4, dateMidnight1);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotNull(dateMidnight6);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight4.dayOfMonth();
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392336000000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight6));
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertSame(dateMidnight4, dateMidnight1);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight7 = dateMidnight_Property0.roundHalfFloorCopy();
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392336000000L, dateMidnight4.getMillis());
      assertEquals(1392336000000L, dateMidnight7.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight7);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight7);
      assertSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertSame(dateMidnight4, dateMidnight1);
      assertSame(dateMidnight4, dateMidnight7);
      assertSame(dateMidnight4, dateMidnight0);
      assertSame(dateMidnight7, dateMidnight3);
      assertSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertSame(dateMidnight7, dateMidnight0);
      assertSame(dateMidnight7, dateMidnight1);
      assertSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotNull(dateMidnight7);
      
      DateMidnight dateMidnight8 = dateMidnight_Property0.withMaximumValue();
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1392336000000L, dateMidnight3.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392336000000L, dateMidnight4.getMillis());
      assertEquals(1393545600000L, dateMidnight8.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight6));
      assertFalse(dateMidnight8.equals((Object)dateMidnight7));
      assertFalse(dateMidnight8.equals((Object)dateMidnight0));
      assertFalse(dateMidnight8.equals((Object)dateMidnight1));
      assertFalse(dateMidnight8.equals((Object)dateMidnight2));
      assertFalse(dateMidnight8.equals((Object)dateMidnight3));
      assertFalse(dateMidnight8.equals((Object)dateMidnight5));
      assertFalse(dateMidnight8.equals((Object)dateMidnight6));
      assertFalse(dateMidnight8.equals((Object)dateMidnight4));
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertNotSame(dateMidnight2, dateMidnight8);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight2, dateMidnight7);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight4);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight7);
      assertNotSame(dateMidnight3, dateMidnight8);
      assertSame(dateMidnight4, dateMidnight2);
      assertSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight8);
      assertSame(dateMidnight4, dateMidnight7);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight8, dateMidnight7);
      assertNotSame(dateMidnight8, dateMidnight0);
      assertNotSame(dateMidnight8, dateMidnight1);
      assertNotSame(dateMidnight8, dateMidnight2);
      assertNotSame(dateMidnight8, dateMidnight3);
      assertNotSame(dateMidnight8, dateMidnight5);
      assertNotSame(dateMidnight8, dateMidnight6);
      assertNotSame(dateMidnight8, dateMidnight4);
      assertNotNull(dateMidnight8);
      
      // Undeclared exception!
      try { 
        dateMidnight2.withFieldAdded((DurationFieldType) null, 1106);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology2 = (EthiopicChronology)ethiopicChronology0.withZone(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology0));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology1));
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology0, ethiopicChronology2);
      assertNotSame(ethiopicChronology2, ethiopicChronology0);
      assertNotSame(ethiopicChronology2, ethiopicChronology1);
      assertNotNull(ethiopicChronology2);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology2, dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology2));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology0));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology1));
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology0, ethiopicChronology2);
      assertNotSame(ethiopicChronology2, ethiopicChronology0);
      assertNotSame(ethiopicChronology2, ethiopicChronology1);
      assertNotNull(zonedChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)zonedChronology0.getZone();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+01:01", fixedDateTimeZone0.getID());
      assertEquals("+01:01", fixedDateTimeZone0.toString());
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology2));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology0));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology1));
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology0, ethiopicChronology2);
      assertSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(ethiopicChronology2, ethiopicChronology0);
      assertNotSame(ethiopicChronology2, ethiopicChronology1);
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+01:01", fixedDateTimeZone0.getID());
      assertEquals("+01:01", fixedDateTimeZone0.toString());
      assertEquals(1392332340000L, dateMidnight0.getMillis());
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology2));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology0));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology1));
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology0, ethiopicChronology2);
      assertSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(ethiopicChronology2, ethiopicChronology0);
      assertNotSame(ethiopicChronology2, ethiopicChronology1);
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadableDuration) null);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+01:01", fixedDateTimeZone0.getID());
      assertEquals("+01:01", fixedDateTimeZone0.toString());
      assertEquals(1392332340000L, dateMidnight0.getMillis());
      assertEquals(1392332340000L, dateMidnight1.getMillis());
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology2));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology0));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology1));
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology0, ethiopicChronology2);
      assertSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(ethiopicChronology2, ethiopicChronology0);
      assertNotSame(ethiopicChronology2, ethiopicChronology1);
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.minus((ReadablePeriod) null);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+01:01", fixedDateTimeZone0.getID());
      assertEquals("+01:01", fixedDateTimeZone0.toString());
      assertEquals(1392332340000L, dateMidnight0.getMillis());
      assertEquals(1392332340000L, dateMidnight1.getMillis());
      assertEquals(1392332340000L, dateMidnight2.getMillis());
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology2));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology0));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology1));
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology0, ethiopicChronology2);
      assertSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(ethiopicChronology2, ethiopicChronology0);
      assertNotSame(ethiopicChronology2, ethiopicChronology1);
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight0.plus((ReadableDuration) null);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+01:01", fixedDateTimeZone0.getID());
      assertEquals("+01:01", fixedDateTimeZone0.toString());
      assertEquals(1392332340000L, dateMidnight0.getMillis());
      assertEquals(1392332340000L, dateMidnight3.getMillis());
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology2));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology0));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology1));
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology0, ethiopicChronology2);
      assertSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(ethiopicChronology2, ethiopicChronology0);
      assertNotSame(ethiopicChronology2, ethiopicChronology1);
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = Duration.millis(1689L);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1689L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertNotNull(duration0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      
      int int0 = dateTime0.getMillisOfSecond();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(320, int0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, dateTimeZone1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(320);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2233785600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = null;
      try {
        dateMidnight2 = new DateMidnight(1, 1, 320, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 320 for dayOfMonth must be in the range [1,31]: year: 1 month: 1
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = (-3770);
      int int1 = 334;
      int int2 = 829;
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((-3770), 334, 829);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 334 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&z aQG1R{");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(uTCDateTimeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = uTCDateTimeZone0.getName(741L, locale0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("Tempo universale coordinato", string0);
      assertNotNull(string0);
      
      DateTimeZone.setDefault(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(597, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(13);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61753104000000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.centuryOfEra();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61753104000000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.withMaximumValue();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61753104000000L), dateMidnight1.getMillis());
      assertEquals(9223369464787200000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      // Undeclared exception!
      try { 
        dateMidnight2.withField((DateTimeFieldType) null, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = (-3479);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Chronology chronology0 = julianChronology0.withUTC();
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(548, 548, (-3479), chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 548 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = 4511L;
      System.setCurrentTimeMillis(4511L);
      DateMidnight dateMidnight0 = new DateMidnight(4511L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1410));
      assertEquals("-00:00:01.410", dateTimeZone0.toString());
      assertEquals("-00:00:01.410", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals("-00:00:01.410", dateTimeZone0.toString());
      assertEquals("-00:00:01.410", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1410L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = 2112278998;
      // Undeclared exception!
      try { 
        dateMidnight1.withEra(2112278998);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2112278998 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      boolean boolean2 = dateMidnight0.isBeforeNow();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", unsupportedDurationField0.getName());
      assertTrue(unsupportedDurationField0.isPrecise());
      assertFalse(unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertNotNull(unsupportedDurationField0);
      
      DurationFieldType durationFieldType1 = unsupportedDurationField0.getType();
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", unsupportedDurationField0.getName());
      assertTrue(unsupportedDurationField0.isPrecise());
      assertFalse(unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("centuries", durationFieldType1.getName());
      assertEquals("centuries", durationFieldType1.toString());
      assertSame(durationFieldType0, durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      assertNotNull(durationFieldType1);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotNull(buddhistChronology1);
      
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", unsupportedDurationField0.getName());
      assertTrue(unsupportedDurationField0.isPrecise());
      assertFalse(unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("centuries", durationFieldType1.getName());
      assertEquals("centuries", durationFieldType1.toString());
      assertEquals(4548009600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(durationFieldType0, durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.minus((long) 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", unsupportedDurationField0.getName());
      assertTrue(unsupportedDurationField0.isPrecise());
      assertFalse(unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("centuries", durationFieldType1.getName());
      assertEquals("centuries", durationFieldType1.toString());
      assertEquals(4548009600000L, dateMidnight1.getMillis());
      assertEquals(4547923200000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(durationFieldType0, durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight0.withFieldAdded(durationFieldType1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", unsupportedDurationField0.getName());
      assertTrue(unsupportedDurationField0.isPrecise());
      assertFalse(unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("centuries", durationFieldType1.getName());
      assertEquals("centuries", durationFieldType1.toString());
      assertEquals(4548009600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertTrue(dateMidnight3.equals((Object)dateMidnight1));
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(durationFieldType0, durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      Weeks weeks0 = Weeks.TWO;
      assertEquals(2, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      PeriodType periodType0 = weeks0.getPeriodType();
      assertEquals(2, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearDay();
      assertEquals(2, periodType1.size());
      assertEquals("YearDay", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      DateMidnight dateMidnight4 = dateMidnight3.withMonthOfYear(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(4545331200000L, dateMidnight4.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", unsupportedDurationField0.getName());
      assertTrue(unsupportedDurationField0.isPrecise());
      assertFalse(unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("centuries", durationFieldType1.getName());
      assertEquals("centuries", durationFieldType1.toString());
      assertEquals(4548009600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertTrue(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(durationFieldType0, durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotNull(dateMidnight4);
      
      // Undeclared exception!
      try { 
        dateMidnight3.withYear((-1008));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(uTCDateTimeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = uTCDateTimeZone0.getName(741L, locale0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("Tempo universale coordinato", string0);
      assertNotNull(string0);
      
      DateTimeZone.setDefault(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertFalse(set0.isEmpty());
      assertEquals(597, set0.size());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(13);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61753104000000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.withMaximumValue();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1419984000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.minusDays(1);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1419984000000L, dateMidnight2.getMillis());
      assertEquals(1419897600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertNotNull(gJChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L, (Chronology) gJChronology0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withMillisOfSecond(13);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      
      LocalTime localTime2 = localTime1.withMillisOfDay(13);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotNull(localTime2);
      
      LocalTime localTime3 = localTime2.withHourOfDay(13);
      assertEquals(4, localTime3.size());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotNull(localTime3);
      
      Interval interval0 = new Interval((ReadablePeriod) null, dateMidnight3);
      assertEquals(1419897600000L, interval0.getStartMillis());
      assertEquals(1419897600000L, interval0.getEndMillis());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1419984000000L, dateMidnight2.getMillis());
      assertEquals(1419897600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotNull(interval0);
      
      Period period0 = interval0.toPeriod();
      assertEquals(1419897600000L, interval0.getStartMillis());
      assertEquals(1419897600000L, interval0.getEndMillis());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1419984000000L, dateMidnight2.getMillis());
      assertEquals(1419897600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(period0);
      
      Days days0 = period0.toStandardDays();
      assertEquals(1419897600000L, interval0.getStartMillis());
      assertEquals(1419897600000L, interval0.getEndMillis());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1419984000000L, dateMidnight2.getMillis());
      assertEquals(1419897600000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(days0);
      
      LocalTime localTime4 = localTime3.plus(days0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1419984000000L, dateMidnight2.getMillis());
      assertEquals(1419897600000L, dateMidnight3.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(1419897600000L, interval0.getStartMillis());
      assertEquals(1419897600000L, interval0.getEndMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(4, localTime4.size());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime1, localTime4);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertSame(localTime3, localTime4);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime2);
      assertNotNull(localTime4);
      
      DateMidnight dateMidnight4 = dateMidnight0.withFields(localTime4);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1419984000000L, dateMidnight2.getMillis());
      assertEquals(1419897600000L, dateMidnight3.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(1419897600000L, interval0.getStartMillis());
      assertEquals(1419897600000L, interval0.getEndMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(4, localTime4.size());
      assertEquals(1392336000000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime1, localTime4);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertSame(localTime3, localTime4);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight0);
      assertNotNull(dateMidnight4);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      DateMidnight dateMidnight5 = dateMidnight0.withFieldAdded(durationFieldType0, (-2083));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1212364800000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotNull(dateMidnight5);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.yearOfEra();
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths((-4339));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      Days days0 = Days.TWO;
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      DateMidnight dateMidnight2 = dateMidnight1.withPeriodAdded(days0, 0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(11410329600000L, dateMidnight1.getMillis());
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(11410329600000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfWeek((-4339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4339 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = (-4339);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears((-4339));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-136925596800000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int1 = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateMidnight dateMidnight2 = dateMidnight1.plusYears(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-136925596800000L), dateMidnight1.getMillis());
      assertEquals((-136925596800000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      Days days0 = Days.TWO;
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      DateMidnight dateMidnight3 = dateMidnight0.minusWeeks(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotNull(dateMidnight3);
      
      try { 
        DateTimeZone.forOffsetHoursMinutes((-4339), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -4339
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Period period0 = new Period(165, (-867), (-1), (-867), 292278993, 165, (-867), 292278993);
      assertNotNull(period0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(period0, 4682);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4939773910992000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight0.minusYears((-1410));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      Period period1 = Period.months((-867));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      DateMidnight dateMidnight3 = dateMidnight2.withFields((ReadablePartial) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      int int0 = dateMidnight3.getSecondOfMinute();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertEquals(0, int0);
      
      boolean boolean0 = dateMidnight2.isEqualNow();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertFalse(boolean0);
      
      MutableDateTime mutableDateTime0 = dateMidnight2.toMutableDateTime((DateTimeZone) null);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotNull(mutableDateTime0);
      
      DateMidnight dateMidnight4 = dateMidnight2.plus((ReadablePeriod) period0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(1100943532800000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(period0, period1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = dateMidnight2.plusDays(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertSame(dateMidnight5, dateMidnight3);
      assertNotNull(dateMidnight5);
      
      DateMidnight dateMidnight6 = dateMidnight2.minusWeeks(4);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45885139200000L, dateMidnight6.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotNull(dateMidnight6);
      
      Instant instant0 = dateMidnight6.toInstant();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45885139200000L, dateMidnight6.getMillis());
      assertEquals(45885139200000L, instant0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotNull(instant0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight1.monthOfYear();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4939773910992000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(period0, period1);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotNull(dateMidnight_Property0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotNull(mutableDateTime_Property0);
      
      int int1 = dateMidnight0.getMinuteOfDay();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertTrue(int1 == int0);
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertEquals(0, int1);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight5.centuryOfEra();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight3);
      assertSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotNull(dateMidnight_Property1);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      assertNotNull(lenientChronology0);
      
      DateMidnight dateMidnight7 = dateMidnight3.withChronology(lenientChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight7.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(45887558400000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight4));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight6));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight7);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight6);
      assertSame(dateMidnight3, dateMidnight5);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight7);
      assertNotNull(dateMidnight7);
      
      DateMidnight dateMidnight8 = dateMidnight0.withZoneRetainFields((DateTimeZone) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight8.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight8.equals((Object)dateMidnight5));
      assertFalse(dateMidnight8.equals((Object)dateMidnight2));
      assertFalse(dateMidnight8.equals((Object)dateMidnight7));
      assertFalse(dateMidnight8.equals((Object)dateMidnight1));
      assertFalse(dateMidnight8.equals((Object)dateMidnight6));
      assertFalse(dateMidnight8.equals((Object)dateMidnight4));
      assertFalse(dateMidnight8.equals((Object)dateMidnight3));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight8, dateMidnight5);
      assertNotSame(dateMidnight8, dateMidnight2);
      assertNotSame(dateMidnight8, dateMidnight7);
      assertNotSame(dateMidnight8, dateMidnight1);
      assertNotSame(dateMidnight8, dateMidnight6);
      assertSame(dateMidnight8, dateMidnight0);
      assertNotSame(dateMidnight8, dateMidnight4);
      assertNotSame(dateMidnight8, dateMidnight3);
      assertNotNull(dateMidnight8);
      
      DateMidnight dateMidnight9 = dateMidnight_Property0.setCopy(5);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4939773910992000000L, dateMidnight1.getMillis());
      assertEquals(4939773897772800000L, dateMidnight9.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight8));
      assertFalse(dateMidnight9.equals((Object)dateMidnight1));
      assertFalse(dateMidnight9.equals((Object)dateMidnight6));
      assertFalse(dateMidnight9.equals((Object)dateMidnight7));
      assertFalse(dateMidnight9.equals((Object)dateMidnight5));
      assertFalse(dateMidnight9.equals((Object)dateMidnight4));
      assertFalse(dateMidnight9.equals((Object)dateMidnight0));
      assertFalse(dateMidnight9.equals((Object)dateMidnight8));
      assertFalse(dateMidnight9.equals((Object)dateMidnight2));
      assertFalse(dateMidnight9.equals((Object)dateMidnight3));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(period0, period1);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight9);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight9, dateMidnight1);
      assertNotSame(dateMidnight9, dateMidnight6);
      assertNotSame(dateMidnight9, dateMidnight7);
      assertNotSame(dateMidnight9, dateMidnight5);
      assertNotSame(dateMidnight9, dateMidnight4);
      assertNotSame(dateMidnight9, dateMidnight0);
      assertNotSame(dateMidnight9, dateMidnight8);
      assertNotSame(dateMidnight9, dateMidnight2);
      assertNotSame(dateMidnight9, dateMidnight3);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotNull(dateMidnight9);
      
      DateMidnight dateMidnight10 = dateMidnight_Property1.addToCopy(1345L);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals(4290297580800000L, dateMidnight10.getMillis());
      assertEquals(45887558400000L, dateMidnight5.getMillis());
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight2.equals((Object)dateMidnight7));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight9));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight8));
      assertFalse(dateMidnight10.equals((Object)dateMidnight4));
      assertFalse(dateMidnight10.equals((Object)dateMidnight5));
      assertFalse(dateMidnight10.equals((Object)dateMidnight7));
      assertFalse(dateMidnight10.equals((Object)dateMidnight1));
      assertFalse(dateMidnight10.equals((Object)dateMidnight6));
      assertFalse(dateMidnight10.equals((Object)dateMidnight9));
      assertFalse(dateMidnight10.equals((Object)dateMidnight0));
      assertFalse(dateMidnight10.equals((Object)dateMidnight3));
      assertFalse(dateMidnight10.equals((Object)dateMidnight2));
      assertFalse(dateMidnight10.equals((Object)dateMidnight8));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight6));
      assertFalse(dateMidnight5.equals((Object)dateMidnight9));
      assertFalse(dateMidnight5.equals((Object)dateMidnight7));
      assertFalse(dateMidnight5.equals((Object)dateMidnight8));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight2, dateMidnight10);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight7);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight9);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight8);
      assertNotSame(dateMidnight10, dateMidnight4);
      assertNotSame(dateMidnight10, dateMidnight5);
      assertNotSame(dateMidnight10, dateMidnight7);
      assertNotSame(dateMidnight10, dateMidnight1);
      assertNotSame(dateMidnight10, dateMidnight6);
      assertNotSame(dateMidnight10, dateMidnight9);
      assertNotSame(dateMidnight10, dateMidnight0);
      assertNotSame(dateMidnight10, dateMidnight3);
      assertNotSame(dateMidnight10, dateMidnight2);
      assertNotSame(dateMidnight10, dateMidnight8);
      assertNotSame(dateMidnight5, dateMidnight10);
      assertSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight6);
      assertNotSame(dateMidnight5, dateMidnight9);
      assertNotSame(dateMidnight5, dateMidnight7);
      assertNotSame(dateMidnight5, dateMidnight8);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotNull(dateMidnight10);
      
      DateMidnight dateMidnight11 = dateMidnight4.withWeekyear(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(45887558400000L, dateMidnight2.getMillis());
      assertEquals((-62150976000000L), dateMidnight11.getMillis());
      assertEquals(1100943532800000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight10));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(period0.equals((Object)period1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight10));
      assertFalse(dateMidnight2.equals((Object)dateMidnight7));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight4));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight9));
      assertFalse(dateMidnight2.equals((Object)dateMidnight6));
      assertFalse(dateMidnight2.equals((Object)dateMidnight8));
      assertFalse(dateMidnight11.equals((Object)dateMidnight5));
      assertFalse(dateMidnight11.equals((Object)dateMidnight9));
      assertFalse(dateMidnight11.equals((Object)dateMidnight4));
      assertFalse(dateMidnight11.equals((Object)dateMidnight10));
      assertFalse(dateMidnight11.equals((Object)dateMidnight8));
      assertFalse(dateMidnight11.equals((Object)dateMidnight2));
      assertFalse(dateMidnight11.equals((Object)dateMidnight3));
      assertFalse(dateMidnight11.equals((Object)dateMidnight0));
      assertFalse(dateMidnight11.equals((Object)dateMidnight1));
      assertFalse(dateMidnight11.equals((Object)dateMidnight6));
      assertFalse(dateMidnight11.equals((Object)dateMidnight7));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight8));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight4.equals((Object)dateMidnight9));
      assertFalse(dateMidnight4.equals((Object)dateMidnight7));
      assertFalse(dateMidnight4.equals((Object)dateMidnight10));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight6));
      assertNotSame(dateMidnight0, dateMidnight11);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(period0, period1);
      assertNotSame(dateMidnight2, dateMidnight11);
      assertNotSame(dateMidnight2, dateMidnight10);
      assertSame(dateMidnight2, dateMidnight5);
      assertNotSame(dateMidnight2, dateMidnight7);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight9);
      assertNotSame(dateMidnight2, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight8);
      assertNotSame(dateMidnight11, dateMidnight5);
      assertNotSame(dateMidnight11, dateMidnight9);
      assertNotSame(dateMidnight11, dateMidnight4);
      assertNotSame(dateMidnight11, dateMidnight10);
      assertNotSame(dateMidnight11, dateMidnight8);
      assertNotSame(dateMidnight11, dateMidnight2);
      assertNotSame(dateMidnight11, dateMidnight3);
      assertNotSame(dateMidnight11, dateMidnight0);
      assertNotSame(dateMidnight11, dateMidnight1);
      assertNotSame(dateMidnight11, dateMidnight6);
      assertNotSame(dateMidnight11, dateMidnight7);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight8);
      assertNotSame(dateMidnight4, dateMidnight11);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertNotSame(dateMidnight4, dateMidnight9);
      assertNotSame(dateMidnight4, dateMidnight7);
      assertNotSame(dateMidnight4, dateMidnight10);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight6);
      assertNotNull(dateMidnight11);
      
      DateMidnight.Property dateMidnight_Property2 = dateMidnight0.year();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight11));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight0.equals((Object)dateMidnight10));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight9));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property0));
      assertFalse(dateMidnight_Property2.equals((Object)dateMidnight_Property1));
      assertNotSame(dateMidnight0, dateMidnight11);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight0, dateMidnight10);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight9);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property0);
      assertNotSame(dateMidnight_Property2, dateMidnight_Property1);
      assertNotNull(dateMidnight_Property2);
      
      // Undeclared exception!
      try { 
        DateMidnight.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = Duration.millis(1);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      DateTime dateTime1 = dateTime0.plus((ReadableDuration) duration0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime1, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      
      int int0 = dateTime1.getMillisOfSecond();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(321, int0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, dateTimeZone1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(321);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2236464000000L, dateMidnight1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.plus((ReadableDuration) duration0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2236464000000L, dateMidnight1.getMillis());
      assertEquals(2236464000000L, dateMidnight2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.plusMonths(0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2236464000000L, dateMidnight1.getMillis());
      assertEquals(2236464000000L, dateMidnight2.getMillis());
      assertEquals(2236464000000L, dateMidnight3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight3.withYearOfCentury(1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2236464000000L, dateMidnight1.getMillis());
      assertEquals(2236464000000L, dateMidnight2.getMillis());
      assertEquals(2236464000000L, dateMidnight3.getMillis());
      assertEquals(1005696000000L, dateMidnight4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = dateMidnight0.plusWeeks(0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotNull(dateMidnight5);
      
      DateMidnight dateMidnight6 = dateMidnight1.plusWeeks(17);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2236464000000L, dateMidnight1.getMillis());
      assertEquals(2246745600000L, dateMidnight6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotNull(dateMidnight6);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight6.year();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2236464000000L, dateMidnight1.getMillis());
      assertEquals(2246745600000L, dateMidnight6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight7 = dateMidnight_Property0.withMinimumValue();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2236464000000L, dateMidnight1.getMillis());
      assertEquals(2246745600000L, dateMidnight6.getMillis());
      assertEquals((-9223372010908800000L), dateMidnight7.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight6));
      assertFalse(dateMidnight7.equals((Object)dateMidnight3));
      assertFalse(dateMidnight7.equals((Object)dateMidnight5));
      assertFalse(dateMidnight7.equals((Object)dateMidnight4));
      assertFalse(dateMidnight7.equals((Object)dateMidnight2));
      assertFalse(dateMidnight7.equals((Object)dateMidnight0));
      assertFalse(dateMidnight7.equals((Object)dateMidnight1));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight7);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight6);
      assertNotSame(dateMidnight7, dateMidnight3);
      assertNotSame(dateMidnight7, dateMidnight5);
      assertNotSame(dateMidnight7, dateMidnight4);
      assertNotSame(dateMidnight7, dateMidnight2);
      assertNotSame(dateMidnight7, dateMidnight0);
      assertNotSame(dateMidnight7, dateMidnight1);
      assertNotNull(dateMidnight7);
      
      DateMidnight dateMidnight8 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1392409281321L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2236464000000L, dateMidnight1.getMillis());
      assertEquals(2246745600000L, dateMidnight6.getMillis());
      assertEquals(2240611200000L, dateMidnight8.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight7));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight6));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight7));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight4));
      assertFalse(dateMidnight1.equals((Object)dateMidnight6));
      assertFalse(dateMidnight6.equals((Object)dateMidnight1));
      assertFalse(dateMidnight6.equals((Object)dateMidnight3));
      assertFalse(dateMidnight6.equals((Object)dateMidnight5));
      assertFalse(dateMidnight6.equals((Object)dateMidnight7));
      assertFalse(dateMidnight6.equals((Object)dateMidnight2));
      assertFalse(dateMidnight6.equals((Object)dateMidnight4));
      assertFalse(dateMidnight6.equals((Object)dateMidnight0));
      assertFalse(dateMidnight8.equals((Object)dateMidnight1));
      assertFalse(dateMidnight8.equals((Object)dateMidnight2));
      assertFalse(dateMidnight8.equals((Object)dateMidnight7));
      assertFalse(dateMidnight8.equals((Object)dateMidnight5));
      assertFalse(dateMidnight8.equals((Object)dateMidnight3));
      assertFalse(dateMidnight8.equals((Object)dateMidnight0));
      assertFalse(dateMidnight8.equals((Object)dateMidnight6));
      assertFalse(dateMidnight8.equals((Object)dateMidnight4));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight7);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight8);
      assertNotSame(dateMidnight0, dateMidnight6);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight7);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight8);
      assertNotSame(dateMidnight1, dateMidnight6);
      assertSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight1);
      assertNotSame(dateMidnight6, dateMidnight3);
      assertNotSame(dateMidnight6, dateMidnight5);
      assertNotSame(dateMidnight6, dateMidnight7);
      assertNotSame(dateMidnight6, dateMidnight2);
      assertNotSame(dateMidnight6, dateMidnight4);
      assertNotSame(dateMidnight6, dateMidnight0);
      assertNotSame(dateMidnight6, dateMidnight8);
      assertNotSame(dateMidnight8, dateMidnight1);
      assertNotSame(dateMidnight8, dateMidnight2);
      assertNotSame(dateMidnight8, dateMidnight7);
      assertNotSame(dateMidnight8, dateMidnight5);
      assertNotSame(dateMidnight8, dateMidnight3);
      assertNotSame(dateMidnight8, dateMidnight0);
      assertNotSame(dateMidnight8, dateMidnight6);
      assertNotSame(dateMidnight8, dateMidnight4);
      assertNotNull(dateMidnight8);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.year();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundFloorCopy();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1388534400000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      LocalDate localDate0 = dateMidnight1.toLocalDate();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1388534400000L, dateMidnight1.getMillis());
      assertEquals(3, localDate0.size());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(localDate0);
      
      long long0 = dateMidnight_Property0.getMillis();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals(1392336000000L, long0);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.getDateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      Months months0 = Months.FOUR;
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      DateMidnight dateMidnight3 = dateMidnight2.withFieldAdded(durationFieldType0, 2146);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(7035724800000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight3.dayOfWeek();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight2.getMillis());
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(7035724800000L, dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      DateMidnight dateMidnight4 = dateMidnight_Property0.roundHalfCeilingCopy();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1388534400000L, dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertTrue(dateMidnight4.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotNull(dateMidnight4);
      
      GregorianCalendar gregorianCalendar0 = dateMidnight4.toGregorianCalendar();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1388534400000L, dateMidnight4.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1388534400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight_Property0.equals((Object)dateMidnight_Property1));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight3));
      assertTrue(dateMidnight4.equals((Object)dateMidnight1));
      assertSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight_Property0, dateMidnight_Property1);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight3);
      assertNotNull(gregorianCalendar0);
      
      // Undeclared exception!
      try { 
        dateMidnight1.withWeekOfWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = 0L;
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 89;
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      boolean boolean0 = dateMidnight1.isBefore(0L);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertTrue(boolean0);
      
      Days days0 = Days.THREE;
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertNotNull(days0);
      
      DateMidnight dateMidnight2 = dateMidnight0.withYearOfCentury(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(599616000000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotNull(dateMidnight2);
      
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertNotNull(mutablePeriod0);
      
      int int1 = (-2931);
      DateMidnight dateMidnight3 = dateMidnight1.withDurationAdded((ReadableDuration) duration0, (-2931));
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-2808518400000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotNull(dateMidnight3);
      
      DateMidnight dateMidnight4 = dateMidnight3.plusWeeks(0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-2808518400000L), dateMidnight3.getMillis());
      assertEquals((-2808518400000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight4.dayOfMonth();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-2808518400000L), dateMidnight3.getMillis());
      assertEquals((-2808518400000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight_Property0);
      
      DateMidnight dateMidnight5 = dateMidnight3.plusMonths(89);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-2808518400000L), dateMidnight3.getMillis());
      assertEquals((-2574547200000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotNull(dateMidnight5);
      
      DateMidnight.Property dateMidnight_Property1 = dateMidnight4.monthOfYear();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-2808518400000L), dateMidnight1.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-2808518400000L), dateMidnight3.getMillis());
      assertEquals((-2808518400000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight5));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      assertFalse(dateMidnight3.equals((Object)dateMidnight5));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight2));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight5));
      assertFalse(dateMidnight_Property1.equals((Object)dateMidnight_Property0));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight5);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertSame(dateMidnight1, dateMidnight3);
      assertSame(dateMidnight3, dateMidnight1);
      assertSame(dateMidnight3, dateMidnight4);
      assertNotSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight5);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight5);
      assertSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight1);
      assertNotSame(dateMidnight_Property1, dateMidnight_Property0);
      assertNotNull(dateMidnight_Property1);
      
      // Undeclared exception!
      try { 
        dateMidnight4.withDayOfMonth(89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 89 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      String string0 = dateMidnight_Property0.toString();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Property[era]", string0);
      assertNotNull(string0);
      
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      int int0 = dateMidnight0.getEra();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals(1, int0);
      
      String string1 = dateMidnight_Property0.getAsText();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals("AD", string1);
      assertNotNull(string1);
      
      DateMidnight dateMidnight2 = dateMidnight1.plusYears(1);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-62104060800000L), dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      DateMidnight dateMidnight3 = dateMidnight2.withMonthOfYear(1);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-62104060800000L), dateMidnight2.getMillis());
      assertEquals((-62104060800000L), dateMidnight3.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight3, dateMidnight2);
      assertNotSame(dateMidnight3, dateMidnight0);
      assertNotSame(dateMidnight3, dateMidnight1);
      assertNotNull(dateMidnight3);
      
      int int1 = 677;
      int int2 = dateMidnight0.compareTo((ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertEquals(0, int2);
      
      DateMidnight dateMidnight4 = dateMidnight2.withCenturyOfEra(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
      assertEquals((-62104060800000L), dateMidnight2.getMillis());
      assertEquals((-62104060800000L), dateMidnight4.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight0));
      assertFalse(dateMidnight4.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight3);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight4);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertSame(dateMidnight2, dateMidnight3);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight4);
      assertSame(dateMidnight4, dateMidnight3);
      assertSame(dateMidnight4, dateMidnight2);
      assertNotSame(dateMidnight4, dateMidnight0);
      assertNotSame(dateMidnight4, dateMidnight1);
      assertNotNull(dateMidnight4);
      
      DateMidnight dateMidnight5 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight5.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight4));
      assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight5.equals((Object)dateMidnight0));
      assertTrue(dateMidnight5.equals((Object)dateMidnight1));
      assertFalse(dateMidnight5.equals((Object)dateMidnight4));
      assertFalse(dateMidnight5.equals((Object)dateMidnight3));
      assertFalse(dateMidnight5.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight0, dateMidnight4);
      assertNotSame(dateMidnight0, dateMidnight3);
      assertNotSame(dateMidnight0, dateMidnight5);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight5, dateMidnight0);
      assertNotSame(dateMidnight5, dateMidnight4);
      assertNotSame(dateMidnight5, dateMidnight1);
      assertNotSame(dateMidnight5, dateMidnight3);
      assertNotSame(dateMidnight5, dateMidnight2);
      assertNotNull(dateMidnight5);
      
      // Undeclared exception!
      try { 
        dateMidnight1.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IPUak5T(EbN`!$RX");
      assertFalse(boolean0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withWeekOfWeekyear(1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1379030400000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight_Property0.roundCeilingCopy();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1410393600000L, dateMidnight2.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotNull(dateMidnight2);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        dateMidnight1.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight_Property0);
      
      int int0 = 0;
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy("Cd;V/B7,raBP53");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Cd;V/B7,raBP53\" for yearOfCentury is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(0);
      DateMidnight dateMidnight2 = dateMidnight1.minusDays(0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight3 = dateMidnight2.withZoneRetainFields(uTCDateTimeZone0);
      dateMidnight3.yearOfEra();
      DateTimeZone.getDefault();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      dateMidnight3.property(dateTimeFieldType0);
      DateMidnight dateMidnight4 = dateMidnight1.plusWeeks(3064);
      Duration duration0 = new Duration(dateMidnight4, dateMidnight0);
      duration0.toStandardSeconds();
      assertEquals((-21448L), duration0.getStandardDays());
      
      Minutes minutes0 = Minutes.THREE;
      minutes0.toStandardHours();
      DateMidnight dateMidnight5 = dateMidnight0.minusYears(3064);
      dateMidnight5.toDateTime((DateTimeZone) uTCDateTimeZone0);
      Interval interval0 = dateMidnight5.toInterval();
      assertEquals((-95298076800000L), interval0.getEndMillis());
      
      DateMidnight dateMidnight6 = dateMidnight5.plus((long) 3064);
      Months months0 = Months.monthsBetween((ReadableInstant) dateMidnight6, (ReadableInstant) dateMidnight1);
      DurationFieldType durationFieldType0 = months0.getFieldType();
      DateMidnight dateMidnight7 = dateMidnight2.withFieldAdded(durationFieldType0, 471);
      assertEquals((-95298163200000L), dateMidnight6.getMillis());
      assertSame(dateMidnight5, dateMidnight6);
      assertSame(dateMidnight2, dateMidnight3);
      assertEquals(2630793600000L, dateMidnight7.getMillis());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(86400L, (DateTimeZone) null);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfMonth();
      dateMidnight0.weekOfWeekyear();
      DateMidnight dateMidnight1 = dateMidnight0.withYear(11);
      dateMidnight0.getCenturyOfEra();
      dateMidnight0.toDate();
      DateMidnight dateMidnight2 = dateMidnight1.withDurationAdded(341L, 11);
      DateMidnight.Property dateMidnight_Property1 = dateMidnight2.weekyear();
      DateMidnight dateMidnight3 = dateMidnight1.withDurationAdded((long) 11, 11);
      DateMidnight dateMidnight4 = dateMidnight3.withZoneRetainFields((DateTimeZone) null);
      dateMidnight3.year();
      DateMidnight dateMidnight5 = dateMidnight3.plusYears(1435);
      dateMidnight3.yearOfCentury();
      dateMidnight5.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DurationField durationField0 = buddhistChronology0.weeks();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      dateMidnight2.withField(dateTimeFieldType1, 0);
      dateMidnight0.yearOfEra();
      DateMidnight dateMidnight6 = dateMidnight5.withCenturyOfEra(0);
      dateMidnight0.plusDays(11);
      dateMidnight_Property0.addWrapFieldToCopy(0);
      Duration duration0 = new Duration(341L);
      dateMidnight3.isAfter(dateMidnight4);
      Duration duration1 = Duration.standardMinutes(0L);
      dateMidnight6.minus((ReadableDuration) duration0);
      dateMidnight_Property1.roundCeilingCopy();
      dateMidnight5.dayOfWeek();
      dateMidnight2.plus((ReadableDuration) duration1);
      // Undeclared exception!
      try { 
        DateMidnight.parse("JrlvW!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"JrlvW!\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
}
