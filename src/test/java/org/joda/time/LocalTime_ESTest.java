/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 19:48:38 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalTime_ESTest extends LocalTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-337L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusHours(2);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      DateTimeUtils.setCurrentMillisFixed(1000L);
      LocalTime localTime2 = localTime0.minusHours(2);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      int int0 = localTime2.MIDNIGHT.getHourOfDay();
      assertEquals(0, int0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      boolean boolean0 = localTime2.MIDNIGHT.equals(localTime0);
      assertFalse(boolean0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      int int1 = localTime2.MIDNIGHT.getValue(2);
      assertEquals(0, int1);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime1));
      assertTrue(int1 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime localTime3 = LocalTime.now();
      assertNotNull(localTime3);
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime3.size());
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      
      DateTime dateTime0 = localTime0.MIDNIGHT.toDateTimeToday();
      assertNotNull(dateTime0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      
      LocalTime localTime4 = localTime3.minusMillis(0);
      assertNotNull(localTime4);
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime3, localTime2);
      assertSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime4, localTime1);
      assertSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = buddhistChronology0.add((long) 0, 84267000L, 7593750);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(639902531250000L, long0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTime dateTime1 = localTime4.toDateTimeToday(dateTimeZone0);
      assertNotNull(dateTime1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1000L, dateTime1.getMillis());
      assertNotSame(localTime3, localTime2);
      assertSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime4, localTime1);
      assertSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(dateTime1, dateTime0);
      
      LocalTime localTime5 = localTime3.MIDNIGHT.plusMinutes(2);
      assertNotNull(localTime5);
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime3));
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime5.size());
      assertNotSame(localTime3, localTime2);
      assertSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime3);
      
      LocalTime localTime6 = localTime0.withHourOfDay(17);
      assertNotNull(localTime6);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime6.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime1);
      
      boolean boolean1 = localTime6.isBefore(localTime4);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime3.equals((Object)localTime6));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime5));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime6));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime6.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime3, localTime6);
      assertNotSame(localTime3, localTime2);
      assertSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime1);
      assertSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime6);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime1);
      
      Chronology chronology0 = localTime3.getChronology();
      assertNotNull(chronology0);
      assertFalse(localTime3.equals((Object)localTime6));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime3.size());
      assertNotSame(localTime3, localTime6);
      assertNotSame(localTime3, localTime2);
      assertSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      
      int int2 = 4144;
      DateTimeUtils.setCurrentMillisOffset(2019);
      LocalTime localTime7 = localTime6.minusSeconds(2019);
      assertNotNull(localTime7);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime7.equals((Object)localTime0));
      assertFalse(localTime7.equals((Object)localTime1));
      assertFalse(localTime7.equals((Object)localTime3));
      assertFalse(localTime7.equals((Object)localTime5));
      assertFalse(localTime7.equals((Object)localTime4));
      assertFalse(localTime7.equals((Object)localTime2));
      assertFalse(localTime7.equals((Object)localTime6));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime7.size());
      assertEquals(4, localTime6.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime7);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime7, localTime0);
      assertNotSame(localTime7, localTime1);
      assertNotSame(localTime7, localTime3);
      assertNotSame(localTime7, localTime5);
      assertNotSame(localTime7, localTime4);
      assertNotSame(localTime7, localTime2);
      assertNotSame(localTime7, localTime6);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime7);
      assertNotSame(localTime6, localTime1);
      
      // Undeclared exception!
      try { 
        localTime4.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      LocalTime localTime0 = new LocalTime((-337L), (Chronology) islamicChronology0);
      assertNotNull(localTime0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      Hours hours0 = Hours.ONE;
      assertNotNull(hours0);
      assertEquals(1, hours0.getHours());
      assertEquals(1, hours0.size());
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertNotNull(timeZone1);
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertEquals("GMT", timeZone1.getID());
      assertNotSame(timeZone1, timeZone0);
      
      Seconds seconds0 = hours0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertEquals(3600, seconds0.getSeconds());
      
      // Undeclared exception!
      try { 
        localTime0.withPeriodAdded(seconds0, (-2147483639));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals("+00:00:01", dateTimeZone0.toString());
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMillisOfDay(2);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LocalTime localTime2 = localTime1.minusMinutes(292272960);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = localTime2.MIDNIGHT.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertEquals(4, dateTimeFieldTypeArray0.length);
      
      LocalTime localTime3 = localTime0.plus((ReadablePeriod) null);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime3, localTime2);
      assertSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      
      int int0 = localTime2.getValue(3);
      assertEquals(2, int0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      LocalTime localTime0 = LocalTime.now((Chronology) copticChronology0);
      assertNotNull(localTime0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(4, localTime0.size());
      
      int int0 = 2144330221;
      // Undeclared exception!
      try { 
        localTime0.minusMinutes(2144330221);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime_Property0.roundHalfEvenCopy();
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      UTCDateTimeZone uTCDateTimeZone1 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone1);
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertTrue(uTCDateTimeZone1.isFixed());
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      
      DateTimeZone.setDefault(uTCDateTimeZone1);
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertTrue(uTCDateTimeZone1.isFixed());
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localDate0);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      Date date0 = localDate0.toDate();
      assertNotNull(date0);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      
      LocalTime localTime2 = LocalTime.fromDateFields(date0);
      assertNotNull(localTime2);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
      assertEquals(4, localTime2.size());
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      localTime0.hashCode();
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      
      LocalTime localTime3 = localTime0.plusMillis(1047);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      
      int int0 = localTime0.getHourOfDay();
      assertEquals(20, int0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      String string0 = localTime_Property0.getAsString();
      assertNotNull(string0);
      assertEquals("21", string0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      
      LocalTime localTime4 = LocalTime.now((Chronology) buddhistChronology0);
      assertNotNull(localTime4);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime4.size());
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      
      long long0 = localTime_Property0.getMillis();
      assertEquals(73281320L, long0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      
      DateTime dateTime0 = localTime3.toDateTimeToday((DateTimeZone) uTCDateTimeZone1);
      assertNotNull(dateTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertEquals(1392409282367L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertTrue(uTCDateTimeZone1.isFixed());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      
      LocalTime.Property localTime_Property1 = localTime2.millisOfDay();
      assertNotNull(localTime_Property1);
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime_Property1, localTime_Property0);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime3);
      
      LocalTime.Property localTime_Property2 = localTime0.minuteOfHour();
      assertNotNull(localTime_Property2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime_Property2.equals((Object)localTime_Property1));
      assertFalse(localTime_Property2.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime_Property2, localTime_Property1);
      assertNotSame(localTime_Property2, localTime_Property0);
      
      LocalTime localTime5 = localTime_Property2.roundHalfCeilingCopy();
      assertNotNull(localTime5);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime_Property2.equals((Object)localTime_Property1));
      assertFalse(localTime_Property2.equals((Object)localTime_Property0));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime5.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime_Property2, localTime_Property1);
      assertNotSame(localTime_Property2, localTime_Property0);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime3);
      
      int int1 = localTime4.getSecondOfMinute();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(21, int1);
      assertFalse(int1 == int0);
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime5));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime4.size());
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      
      LocalTime localTime6 = LocalTime.parse("21");
      assertNotNull(localTime6);
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime3));
      assertEquals(4, localTime6.size());
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime3);
      
      LocalTime localTime7 = localTime_Property2.getLocalTime();
      assertNotNull(localTime7);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime_Property2.equals((Object)localTime_Property1));
      assertFalse(localTime_Property2.equals((Object)localTime_Property0));
      assertFalse(localTime7.equals((Object)localTime5));
      assertFalse(localTime7.equals((Object)localTime2));
      assertFalse(localTime7.equals((Object)localTime4));
      assertFalse(localTime7.equals((Object)localTime3));
      assertFalse(localTime7.equals((Object)localTime1));
      assertFalse(localTime7.equals((Object)localTime6));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime7.size());
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime7);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime_Property2, localTime_Property1);
      assertNotSame(localTime_Property2, localTime_Property0);
      assertNotSame(localTime7, localTime5);
      assertSame(localTime7, localTime0);
      assertNotSame(localTime7, localTime2);
      assertNotSame(localTime7, localTime4);
      assertNotSame(localTime7, localTime3);
      assertNotSame(localTime7, localTime1);
      assertNotSame(localTime7, localTime6);
      
      // Undeclared exception!
      try { 
        localTime5.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(48L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      String string0 = localTime0.toString();
      assertNotNull(string0);
      assertEquals("00:00:00.048", string0);
      assertEquals(4, localTime0.size());
      
      Days days0 = Days.SEVEN;
      assertNotNull(days0);
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      
      Minutes minutes0 = days0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, minutes0.size());
      assertEquals(10080, minutes0.getMinutes());
      
      LocalTime localTime1 = localTime0.withHourOfDay(0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime1.withLocalMillis((-1730964L));
      assertNotNull(localTime2);
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      long long0 = localTime2.getLocalMillis();
      assertEquals(84669036L, long0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Interval interval0 = new Interval(2629746000L, 2629746000L);
      assertNotNull(interval0);
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      
      DateTime dateTime0 = interval0.getEnd();
      assertNotNull(dateTime0);
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      assertEquals(2629746000L, dateTime0.getMillis());
      
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      assertNotNull(gregorianCalendar0);
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      assertEquals(2629746000L, dateTime0.getMillis());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2629746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=29,SECOND=6,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      assertEquals(2629746000L, dateTime0.getMillis());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2629746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=29,SECOND=6,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes(726);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      assertEquals(2629746000L, dateTime0.getMillis());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2629746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=29,SECOND=6,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      boolean boolean1 = localTime1.MIDNIGHT.isSupported((DateTimeFieldType) null);
      assertFalse(boolean1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      assertEquals(2629746000L, dateTime0.getMillis());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2629746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=29,SECOND=6,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime0.minusSeconds(2147288439);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      assertEquals(2629746000L, dateTime0.getMillis());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2629746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=29,SECOND=6,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      // Undeclared exception!
      try { 
        localTime2.withSecondOfMinute(726);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 726 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(48L, (Chronology) gJChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      Chronology chronology0 = gJChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      
      LocalTime.Property localTime_Property0 = localTime0.MIDNIGHT.millisOfDay();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, chronology0);
      
      LocalTime localTime1 = localTime0.plusSeconds((-1731));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      String string0 = localTime_Property0.getAsShortText((Locale) null);
      assertNotNull(string0);
      assertEquals("0", string0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      LocalTime.Property localTime_Property1 = localTime1.property(dateTimeFieldType0);
      assertNotNull(localTime_Property1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1731));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.731", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.731", dateTimeZone0.toString());
      
      DateTime dateTime0 = localTime1.MIDNIGHT.toDateTimeToday(dateTimeZone0);
      assertNotNull(dateTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("-00:00:01.731", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.731", dateTimeZone0.toString());
      assertEquals((-86398269L), dateTime0.getMillis());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime0.minusMillis((-18));
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      DateTime dateTime1 = localTime2.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(66L, dateTime1.getMillis());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(dateTime1, dateTime0);
      
      int int0 = localTime0.getMinuteOfHour();
      assertEquals(0, int0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone1);
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertSame(dateTimeZone1, uTCDateTimeZone0);
      
      LocalTime localTime3 = localTime0.MIDNIGHT.minusMillis(60000);
      assertNotNull(localTime3);
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      LocalTime localTime4 = localTime2.plusSeconds((-18));
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime2.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      
      long long0 = localTime_Property0.getMillis();
      assertEquals(0L, long0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime_Property0, localTime_Property1);
      
      LocalTime localTime5 = LocalTime.now((Chronology) gJChronology0);
      assertNotNull(localTime5);
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime1));
      assertEquals(4, localTime5.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime1);
      
      LocalTime localTime6 = LocalTime.fromMillisOfDay(0L);
      assertNotNull(localTime6);
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime3));
      assertEquals(4, localTime6.size());
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime3);
      
      // Undeclared exception!
      try { 
        localTime2.withField(dateTimeFieldType0, (-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -18 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-337L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusHours(2);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      DateTimeUtils.setCurrentMillisFixed(1000L);
      LocalTime localTime2 = localTime0.minusHours(2);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      int int0 = localTime2.MIDNIGHT.getHourOfDay();
      assertEquals(0, int0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      boolean boolean0 = localTime2.MIDNIGHT.equals(localTime0);
      assertFalse(boolean0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      int int1 = localTime2.MIDNIGHT.getValue(2);
      assertEquals(0, int1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertTrue(int1 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      LocalTime localTime3 = LocalTime.now();
      assertNotNull(localTime3);
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime3.size());
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      
      String string0 = "";
      LocalTime localTime4 = new LocalTime((long) 0);
      assertNotNull(localTime4);
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime4.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTime dateTime0 = localTime4.toDateTimeToday(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime4.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      
      LocalTime localTime5 = localTime3.MIDNIGHT.plusMinutes(2);
      assertNotNull(localTime5);
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime1));
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime5.size());
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime1);
      
      LocalTime localTime6 = localTime0.withHourOfDay(17);
      assertNotNull(localTime6);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime4));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime6.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime4);
      
      boolean boolean1 = localTime6.isBefore(localTime4);
      assertFalse(boolean1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime6));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime4));
      assertTrue(boolean1 == boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime6.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime6);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime4);
      
      Chronology chronology0 = localTime3.getChronology();
      assertNotNull(chronology0);
      assertFalse(localTime3.equals((Object)localTime6));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime3.size());
      assertNotSame(localTime3, localTime6);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      
      int int2 = 2019;
      int int3 = 4144;
      DateTimeUtils.setCurrentMillisOffset(2288L);
      // Undeclared exception!
      try { 
        localTime6.MIDNIGHT.getValue(4144);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 4144
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, uTCDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      MonthDay monthDay0 = new MonthDay((Chronology) zonedChronology0);
      assertNotNull(monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 0;
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      assertArrayEquals(new int[] {0, 1, 1, 1, 1, 0}, intArray0);
      assertNotNull(monthDay1);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(1, monthDay1.getDayOfMonth());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      try { 
        localTime0.withFields(monthDay1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusMillis(157);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      // Undeclared exception!
      try { 
        localTime1.getField(157, (Chronology) gJChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 157
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(buddhistChronology0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.BuddhistChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, (-1581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1581 for halfdayOfDay must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      long long0 = 1000L;
      Period period0 = new Period(1000L);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = (-467);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(2, (-467), (-467), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -467 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("w#Q>C-=ekECqVN");
      assertNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = (-494L);
      LocalTime localTime0 = new LocalTime((-494L), (Chronology) null);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      localTime0.hashCode();
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Chronology chronology0 = gregorianChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime("The addition exceeded the boundaries of LocalTime", chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The addition exceeded the boundar...\" is malformed at \"he addition exceeded the boundar...\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      LocalTime localTime1 = localTime0.withField(dateTimeFieldType0, 0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime1.millisOfSecond();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime_Property0.addCopy((-2599));
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = (-2355);
      int int1 = 0;
      int int2 = 1687;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2355), (-2355), 0, 236548278, 1687);
      assertNotNull(mockGregorianCalendar0);
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=708895102020000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=24433,MONTH=11,WEEK_OF_YEAR=53,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=362,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=7,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      
      int int3 = 1;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      boolean boolean0 = durationFieldType0.isSupported(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(boolean0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      
      LocalTime localTime1 = localTime0.MIDNIGHT.withFieldAdded(durationFieldType0, 1687);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=708895102020000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=24433,MONTH=11,WEEK_OF_YEAR=53,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=362,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=7,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime0.withSecondOfMinute(1);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=708895102020000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=24433,MONTH=11,WEEK_OF_YEAR=53,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=362,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=7,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      int int4 = (-473);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        localTime2.withSecondOfMinute((-473));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -473 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = 0;
      LocalTime localTime1 = localTime0.withMillisOfDay(0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime1.minusHours(0);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      LocalTime localTime3 = LocalTime.now();
      assertNotNull(localTime3);
      assertTrue(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime3.size());
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      
      LocalTime localTime4 = localTime0.withLocalMillis(0L);
      assertNotNull(localTime4);
      assertTrue(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertTrue(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertTrue(localTime4.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalTime localTime5 = LocalTime.now((Chronology) gJChronology0);
      assertNotNull(localTime5);
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime1));
      assertEquals(4, localTime5.size());
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime1);
      
      LocalTime localTime6 = localTime4.MIDNIGHT.withFields(localTime1);
      assertNotNull(localTime6);
      assertTrue(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime5));
      assertTrue(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime5));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertTrue(localTime4.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime3));
      assertTrue(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime5));
      assertTrue(localTime6.equals((Object)localTime4));
      assertTrue(localTime6.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime6.size());
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime1, localTime6);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime4, localTime6);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime5);
      
      int int1 = localTime6.getHourOfDay();
      assertEquals(0, int1);
      assertTrue(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime5));
      assertTrue(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime1.equals((Object)localTime6));
      assertTrue(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime5));
      assertTrue(localTime4.equals((Object)localTime6));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertTrue(localTime4.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime3));
      assertTrue(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime5));
      assertTrue(localTime6.equals((Object)localTime4));
      assertTrue(localTime6.equals((Object)localTime2));
      assertTrue(int1 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime6.size());
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime1, localTime6);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime4, localTime6);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime5);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      LocalTime.Property localTime_Property0 = localTime2.property(dateTimeFieldType0);
      assertNotNull(localTime_Property0);
      assertTrue(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime5));
      assertTrue(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime1.equals((Object)localTime6));
      assertTrue(localTime2.equals((Object)localTime4));
      assertTrue(localTime2.equals((Object)localTime6));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime5));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime1, localTime6);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime2, localTime6);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime0);
      
      LocalTime localTime7 = localTime_Property0.withMinimumValue();
      assertNotNull(localTime7);
      assertTrue(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime5));
      assertTrue(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime1.equals((Object)localTime6));
      assertTrue(localTime2.equals((Object)localTime4));
      assertTrue(localTime2.equals((Object)localTime6));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime5));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime7.equals((Object)localTime2));
      assertFalse(localTime7.equals((Object)localTime3));
      assertFalse(localTime7.equals((Object)localTime1));
      assertFalse(localTime7.equals((Object)localTime6));
      assertFalse(localTime7.equals((Object)localTime4));
      assertFalse(localTime7.equals((Object)localTime5));
      assertFalse(localTime7.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(4, localTime7.size());
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime7);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime7);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime2, localTime7);
      assertNotSame(localTime2, localTime6);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime7, localTime2);
      assertNotSame(localTime7, localTime3);
      assertNotSame(localTime7, localTime1);
      assertNotSame(localTime7, localTime6);
      assertNotSame(localTime7, localTime4);
      assertNotSame(localTime7, localTime5);
      assertNotSame(localTime7, localTime0);
      
      LocalTime localTime8 = localTime7.MIDNIGHT.minusMinutes(int0);
      assertNotNull(localTime8);
      assertTrue(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime7));
      assertFalse(localTime0.equals((Object)localTime5));
      assertTrue(int0 == int1);
      assertFalse(localTime1.equals((Object)localTime7));
      assertTrue(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime1.equals((Object)localTime6));
      assertFalse(localTime2.equals((Object)localTime7));
      assertTrue(localTime2.equals((Object)localTime4));
      assertTrue(localTime2.equals((Object)localTime6));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime5));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime7.equals((Object)localTime2));
      assertFalse(localTime7.equals((Object)localTime3));
      assertFalse(localTime7.equals((Object)localTime1));
      assertFalse(localTime7.equals((Object)localTime6));
      assertFalse(localTime7.equals((Object)localTime4));
      assertFalse(localTime7.equals((Object)localTime5));
      assertFalse(localTime7.equals((Object)localTime0));
      assertFalse(localTime8.equals((Object)localTime3));
      assertTrue(localTime8.equals((Object)localTime4));
      assertFalse(localTime8.equals((Object)localTime7));
      assertFalse(localTime8.equals((Object)localTime5));
      assertTrue(localTime8.equals((Object)localTime1));
      assertFalse(localTime8.equals((Object)localTime0));
      assertTrue(localTime8.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(4, localTime7.size());
      assertEquals(4, localTime8.size());
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime8);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime7);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime1, localTime8);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime7);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime2, localTime7);
      assertNotSame(localTime2, localTime6);
      assertNotSame(localTime2, localTime8);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime7, localTime2);
      assertNotSame(localTime7, localTime3);
      assertNotSame(localTime7, localTime1);
      assertNotSame(localTime7, localTime8);
      assertNotSame(localTime7, localTime6);
      assertNotSame(localTime7, localTime4);
      assertNotSame(localTime7, localTime5);
      assertNotSame(localTime7, localTime0);
      assertNotSame(localTime8, localTime2);
      assertNotSame(localTime8, localTime3);
      assertSame(localTime8, localTime6);
      assertNotSame(localTime8, localTime7);
      assertNotSame(localTime8, localTime5);
      assertNotSame(localTime8, localTime0);
      assertNotSame(localTime8, localTime4);
      assertNotSame(localTime8, localTime1);
      
      long long0 = (-1336L);
      LocalTime localTime9 = LocalTime.fromMillisOfDay(long0);
      assertNotNull(localTime9);
      assertFalse(localTime9.equals((Object)localTime8));
      assertFalse(localTime9.equals((Object)localTime7));
      assertFalse(localTime9.equals((Object)localTime6));
      assertFalse(localTime9.equals((Object)localTime4));
      assertFalse(localTime9.equals((Object)localTime1));
      assertFalse(localTime9.equals((Object)localTime0));
      assertFalse(localTime9.equals((Object)localTime2));
      assertFalse(localTime9.equals((Object)localTime3));
      assertFalse(localTime9.equals((Object)localTime5));
      assertEquals(4, localTime9.size());
      assertNotSame(localTime9, localTime8);
      assertNotSame(localTime9, localTime7);
      assertNotSame(localTime9, localTime6);
      assertNotSame(localTime9, localTime4);
      assertNotSame(localTime9, localTime1);
      assertNotSame(localTime9, localTime0);
      assertNotSame(localTime9, localTime2);
      assertNotSame(localTime9, localTime3);
      assertNotSame(localTime9, localTime5);
      
      int int2 = 1985;
      // Undeclared exception!
      try { 
        localTime0.withMillisOfSecond(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1985 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(2483, 2483, 2483);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2483 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      // Undeclared exception!
      try { 
        LocalTime.parse("Ppl0F", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Ppl0F\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      assertNotNull(yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.MIDNIGHT.getMillisOfSecond();
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
      
      long long0 = localTime_Property0.getMillis();
      assertEquals(73281320L, long0);
      assertEquals(4, localTime0.size());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.withMillisOfSecond(1152);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1152 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      LocalDate localDate0 = new LocalDate(86400L, (Chronology) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withWeekyear(1786);
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      LocalDate localDate2 = localDate1.plusMonths(1786);
      assertNotNull(localDate2);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      
      LocalDate localDate3 = localDate2.withYearOfEra(1786);
      assertNotNull(localDate3);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate3.equals((Object)localDate2));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate0);
      
      LocalDate localDate4 = localDate3.minusYears((-693));
      assertNotNull(localDate4);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate3));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate3));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate3.equals((Object)localDate2));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate0));
      assertFalse(localDate4.equals((Object)localDate1));
      assertFalse(localDate4.equals((Object)localDate0));
      assertFalse(localDate4.equals((Object)localDate2));
      assertFalse(localDate4.equals((Object)localDate3));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertEquals(3, localDate4.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate4);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate4);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate4);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate3, localDate4);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate0);
      assertNotSame(localDate4, localDate1);
      assertNotSame(localDate4, localDate0);
      assertNotSame(localDate4, localDate2);
      assertNotSame(localDate4, localDate3);
      
      // Undeclared exception!
      try { 
        localTime0.compareTo((ReadablePartial) localDate4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) gJChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.MIDNIGHT.getMillisOfDay();
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMinuteOfHour(0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      int int1 = 0;
      LocalTime localTime2 = localTime1.withSecondOfMinute(0);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      Period period0 = Period.fieldDifference(localTime1, localTime0);
      assertNotNull(period0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      
      LocalTime localTime3 = localTime2.withPeriodAdded(period0, 0);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime2);
      assertSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertSame(localTime3, localTime2);
      
      LocalTime localTime4 = localTime1.withSecondOfMinute(0);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertTrue(localTime4.equals((Object)localTime2));
      assertTrue(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime2);
      
      // Undeclared exception!
      try { 
        localTime3.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        LocalTime.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserInternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(48L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      String string0 = localTime0.toString();
      assertNotNull(string0);
      assertEquals("00:00:00.048", string0);
      assertEquals(4, localTime0.size());
      
      Days days0 = Days.SEVEN;
      assertNotNull(days0);
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      
      Minutes minutes0 = days0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(10080, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      LocalTime localTime1 = localTime0.withPeriodAdded(minutes0, 0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(10080, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime1.withLocalMillis((-1730964L));
      assertNotNull(localTime2);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(10080, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 2;
      LocalTime localTime0 = new LocalTime(0, 0, 2);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      int int1 = 11;
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfWeek' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      LocalTime localTime0 = new LocalTime((Chronology) ethiopicChronology0);
      assertNotNull(localTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.MIDNIGHT.getValue(1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusSeconds(1);
      assertNotNull(localTime1);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      int int1 = localTime1.compareTo((ReadablePartial) localTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, int1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(int1 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      int int2 = (-657);
      long long0 = ethiopicChronology0.getDateTimeMillis((long) (-657), 0, 23, 1, 23);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals((-85018977L), long0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      int int3 = localTime0.compareTo((ReadablePartial) localTime1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals((-1), int3);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      int int4 = localTime0.MIDNIGHT.get(dateTimeFieldType0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0, int4);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(4, localTime0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotSame(localTime0, localTime1);
      
      LocalTime localTime2 = localTime1.plusMillis(int2);
      assertNotNull(localTime2);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      int int5 = localTime2.getMinuteOfHour();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(21, int5);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime.Property localTime_Property0 = localTime1.property(dateTimeFieldType0);
      assertNotNull(localTime_Property0);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      
      String string0 = "The calendar must not be null";
      long long1 = 2384L;
      LocalTime localTime3 = LocalTime.fromMillisOfDay(long1, (Chronology) ethiopicChronology0);
      assertNotNull(localTime3);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(long1 == long0);
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime3.size());
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"The calendar must not be null\" for hourOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 1697;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2946, 1178, 1697, 0, 1178, (-2792));
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2946,MONTH=1178,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1697,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1178,SECOND=-2792,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      String string0 = mockGregorianCalendar0.getCalendarType();
      assertNotNull(string0);
      assertEquals("gregory", string0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2946,MONTH=1178,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1697,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1178,SECOND=-2792,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = localTime0.MIDNIGHT.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals(4, localTime0.size());
      assertEquals(4, dateTimeFieldTypeArray0.length);
      
      LocalTime localTime1 = localTime0.withMillisOfSecond(2);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      int[] intArray0 = localTime1.getValues();
      assertArrayEquals(new int[] {20, 21, 21, 2}, intArray0);
      assertNotNull(intArray0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, intArray0.length);
      
      LocalTime.Property localTime_Property0 = localTime1.millisOfDay();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      boolean boolean0 = localTime1.MIDNIGHT.isBefore(localTime0);
      assertTrue(boolean0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime_Property0.withMaximumValue();
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime localTime3 = localTime_Property0.addCopy((long) 2);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      
      boolean boolean1 = localTime3.MIDNIGHT.isAfter(localTime0);
      assertFalse(boolean1);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      
      int int0 = localTime0.compareTo((ReadablePartial) localTime3);
      assertEquals(1, int0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      
      long long0 = localTime3.getLocalMillis();
      assertEquals(73281004L, long0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      
      LocalTime.Property localTime_Property1 = localTime2.millisOfSecond();
      assertNotNull(localTime_Property1);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      int int1 = 58;
      LocalTime localTime4 = localTime2.withSecondOfMinute(58);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int2 = localTime4.MIDNIGHT.indexOf((DateTimeFieldType) null);
      assertEquals((-1), int2);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      
      LocalTime localTime5 = localTime4.plusSeconds(0);
      assertNotNull(localTime5);
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime5.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime1);
      assertSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      
      LocalTime localTime6 = LocalTime.now();
      assertNotNull(localTime6);
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime2));
      assertTrue(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime5));
      assertEquals(4, localTime6.size());
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime5);
      
      String string0 = "Q&fiKiz~Nzds,";
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string1 = locale0.getDisplayVariant((Locale) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = 0;
      LocalTime localTime1 = localTime0.withSecondOfMinute(0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime1.withMillisOfSecond(0);
      assertNotNull(localTime2);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertSame(localTime1, localTime2);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      
      LocalTime localTime3 = localTime2.plusMinutes(0);
      assertNotNull(localTime3);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime3);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertSame(localTime1, localTime3);
      assertSame(localTime1, localTime2);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertSame(localTime2, localTime3);
      assertSame(localTime3, localTime1);
      assertSame(localTime3, localTime0);
      assertSame(localTime3, localTime2);
      
      LocalTime localTime4 = localTime3.withFields(localTime0);
      assertNotNull(localTime4);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime3);
      assertSame(localTime0, localTime4);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertSame(localTime1, localTime3);
      assertSame(localTime1, localTime4);
      assertSame(localTime1, localTime2);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertSame(localTime2, localTime3);
      assertSame(localTime2, localTime4);
      assertSame(localTime3, localTime1);
      assertSame(localTime3, localTime0);
      assertSame(localTime3, localTime2);
      assertSame(localTime3, localTime4);
      assertSame(localTime4, localTime3);
      assertSame(localTime4, localTime0);
      assertSame(localTime4, localTime1);
      assertSame(localTime4, localTime2);
      
      LocalTime.Property localTime_Property0 = localTime4.minuteOfHour();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime3);
      assertSame(localTime0, localTime4);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertSame(localTime1, localTime3);
      assertSame(localTime1, localTime4);
      assertSame(localTime1, localTime2);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertSame(localTime2, localTime3);
      assertSame(localTime2, localTime4);
      assertSame(localTime3, localTime1);
      assertSame(localTime3, localTime0);
      assertSame(localTime3, localTime2);
      assertSame(localTime3, localTime4);
      assertSame(localTime4, localTime3);
      assertSame(localTime4, localTime0);
      assertSame(localTime4, localTime1);
      assertSame(localTime4, localTime2);
      
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("Qb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Qb\" for minuteOfHour is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = localTime0.MIDNIGHT.getFieldType(0);
      assertNotNull(dateTimeFieldType0);
      assertEquals(4, localTime0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      LocalTime localTime1 = localTime0.plusMinutes(0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      int int0 = localTime0.getSecondOfMinute();
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
      assertSame(localTime0, localTime1);
      
      int int1 = localTime1.get(dateTimeFieldType0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(4, localTime0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      assertSame(localTime0, localTime1);
      
      String string0 = "";
      String string1 = "";
      Locale locale0 = new Locale(string0, string1);
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      LocalTime localTime0 = new LocalTime(0, 0, 0, 0, iSOChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      Days days0 = Days.daysBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertNotNull(days0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      
      LocalTime localTime1 = localTime0.minus(days0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      DateTimeField[] dateTimeFieldArray0 = localTime1.getFields();
      assertNotNull(dateTimeFieldArray0);
      assertEquals(4, localTime0.size());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, dateTimeFieldArray0.length);
      
      LocalTime localTime2 = localTime1.minusSeconds(0);
      assertNotNull(localTime2);
      assertEquals(4, localTime0.size());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertSame(localTime1, localTime0);
      assertSame(localTime1, localTime2);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      
      int int0 = 0;
      try { 
        iSOChronology0.getDateTimeMillis(0, 12, 1, (-1264), (-5881), 0, 392);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1264 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 153692453;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(153692453, 153692453, 153692453, 13, copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 153692453 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0, 0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      long long0 = localTime0.getLocalMillis();
      assertEquals(0L, long0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      
      int int1 = 0;
      LocalTime localTime1 = localTime0.withSecondOfMinute(0);
      assertNotNull(localTime1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      long long0 = localTime1.getLocalMillis();
      assertEquals(0L, long0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      int int2 = 321;
      // Undeclared exception!
      try { 
        localTime0.withMinuteOfHour(321);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 321 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = (-1867);
      // Undeclared exception!
      try { 
        localTime0.withMillisOfDay((-1867));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1867 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = (-2858);
      int int1 = (-3946);
      int int2 = 157;
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      
      boolean boolean0 = localTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = localTime0.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals(4, localTime0.size());
      assertEquals(4, dateTimeFieldTypeArray0.length);
      
      DateTimeFieldType[] dateTimeFieldTypeArray1 = localTime0.MIDNIGHT.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray1);
      assertFalse(dateTimeFieldTypeArray1.equals((Object)dateTimeFieldTypeArray0));
      assertEquals(4, localTime0.size());
      assertNotSame(dateTimeFieldTypeArray1, dateTimeFieldTypeArray0);
      assertEquals(4, dateTimeFieldTypeArray1.length);
      
      LocalTime localTime1 = new LocalTime(localTime0);
      assertNotNull(localTime1);
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      String string0 = localTime1.toString();
      assertNotNull(string0);
      assertEquals("00:00:00.000", string0);
      assertTrue(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      boolean boolean1 = localTime1.isBefore(localTime0);
      assertFalse(boolean1);
      assertTrue(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime0));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      DateTimeZone dateTimeZone0 = null;
      DateTime dateTime0 = localTime1.toDateTimeToday(dateTimeZone0);
      assertNotNull(dateTime0);
      assertTrue(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      long long0 = (-1103L);
      int[] intArray0 = julianChronology0.get((ReadablePartial) localTime1, long0);
      assertArrayEquals(new int[] {23, 59, 58, 897}, intArray0);
      assertNotNull(intArray0);
      assertTrue(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, intArray0.length);
      
      LocalTime localTime2 = LocalTime.fromMillisOfDay((long) int1, (Chronology) julianChronology0);
      assertNotNull(localTime2);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(4, localTime2.size());
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime.Property localTime_Property0 = localTime2.millisOfSecond();
      assertNotNull(localTime_Property0);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(4, localTime2.size());
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime.Property localTime_Property1 = localTime0.millisOfSecond();
      assertNotNull(localTime_Property1);
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertFalse(localTime0.equals((Object)localTime2));
      assertTrue(localTime0.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime_Property1, localTime_Property0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      
      LocalTime localTime3 = localTime_Property1.withMinimumValue();
      assertNotNull(localTime3);
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertTrue(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime2));
      assertTrue(localTime0.equals((Object)localTime1));
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime0.size());
      assertNotSame(localTime_Property1, localTime_Property0);
      assertNotSame(localTime3, localTime1);
      assertSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      
      long long1 = localTime_Property0.remainder();
      assertEquals(0L, long1);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(long1 == long0);
      assertEquals(4, localTime2.size());
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime_Property0, localTime_Property1);
      
      Date date0 = null;
      // Undeclared exception!
      try { 
        LocalTime.fromDateFields(date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusMinutes(0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      boolean boolean0 = localTime1.equals(localTime0);
      assertTrue(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      assertSame(localTime0, localTime1);
      
      LocalTime localTime2 = localTime_Property0.getLocalTime();
      assertNotNull(localTime2);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      
      LocalTime localTime3 = localTime2.MIDNIGHT.withLocalMillis(0);
      assertNotNull(localTime3);
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      
      localTime2.MIDNIGHT.hashCode();
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      
      boolean boolean1 = localTime2.isBefore(localTime1);
      assertFalse(boolean1);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      
      int int0 = localTime0.getMillisOfSecond();
      assertEquals(320, int0);
      assertFalse(localTime0.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      
      LocalTime localTime4 = localTime3.MIDNIGHT.withMillisOfDay(116);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime4);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      
      int int1 = localTime4.MIDNIGHT.getValue(0);
      assertEquals(0, int1);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(int1 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime4);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      
      int int2 = localTime2.hashCode();
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime4);
      assertSame(localTime2, localTime1);
      
      int int3 = localTime4.MIDNIGHT.getMinuteOfHour();
      assertEquals(0, int3);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime4);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      
      int int4 = localTime3.getMinuteOfHour();
      assertEquals(0, int4);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime4);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      
      LocalTime localTime5 = localTime0.plusHours(0);
      assertNotNull(localTime5);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime5.size());
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertSame(localTime5, localTime0);
      assertSame(localTime5, localTime1);
      assertSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime3);
      
      String string0 = "/WQkcP_s+JTx^8|s";
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-254));
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-254), dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      
      Integer integer0 = new Integer((-254));
      assertNotNull(integer0);
      assertEquals((-254), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int4));
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-254), dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-254), dateTimeFormatter3.getDefaultYear());
      assertEquals((-254), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1742), "/WQkcP_s+JTx^8|s", 0, (-1695), 0, 1376, 0, 1627, 0, 1634, 2153);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day -1695
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      
      LocalTime localTime0 = LocalTime.parse("", dateTimeFormatter1);
      assertNotNull(localTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(4, localTime0.size());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withPeriodAdded((ReadablePeriod) null, 0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(5, 5);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+05:05", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+05:05", fixedDateTimeZone0.toString());
      
      int int0 = fixedDateTimeZone0.getOffset(1933L);
      assertEquals(18300000, int0);
      assertEquals("+05:05", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+05:05", fixedDateTimeZone0.toString());
      
      LocalTime localTime0 = new LocalTime((-2477L), (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("+05:05", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+05:05", fixedDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMinuteOfHour(0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("+05:05", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+05:05", fixedDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals("+05:05", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+05:05", fixedDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      
      Object object1 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      assertEquals("+05:05", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+05:05", fixedDateTimeZone0.toString());
      
      ISOChronology iSOChronology0 = (ISOChronology)localTime_Property0.getChronology();
      assertNotNull(iSOChronology0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals("+05:05", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+05:05", fixedDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      
      LocalTime localTime2 = null;
      try {
        localTime2 = new LocalTime(object0, iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), (-1));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:01", dateTimeZone0.toString());
      assertEquals("-01:01", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:01", dateTimeZone0.toString());
      assertEquals("-01:01", dateTimeZone0.getID());
      
      Chronology chronology0 = julianChronology0.withZone(dateTimeZone0);
      assertNotNull(chronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:01", dateTimeZone0.toString());
      assertEquals("-01:01", dateTimeZone0.getID());
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      
      LocalTime localTime0 = new LocalTime(chronology0);
      assertNotNull(localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:01", dateTimeZone0.toString());
      assertEquals("-01:01", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      
      boolean boolean0 = localTime0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:01", dateTimeZone0.toString());
      assertEquals("-01:01", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes((-711));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      java.time.Instant instant0 = MockInstant.ofEpochMilli(43200000L);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 12:00:00 GMT 1970", date0.toString());
      
      LocalTime localTime1 = LocalTime.fromDateFields(date0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("Thu Jan 01 12:00:00 GMT 1970", date0.toString());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime1, localTime0);
      
      Chronology chronology0 = localTime0.getChronology();
      assertNotNull(chronology0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      
      LocalTime localTime2 = LocalTime.now();
      assertNotNull(localTime2);
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime2.size());
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      Period period0 = new Period((-1947), 15271875, 15271875, (-1947), 15271875, 0, 0, (-1947));
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        localTime2.withPeriodAdded(period0, 1621);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: 24755709375
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMillis((-1359));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime1.MIDNIGHT.withFields(localTime0);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      int int0 = localTime1.getMillisOfDay();
      assertEquals(73279961, int0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      
      int int1 = localTime2.getSecondOfMinute();
      assertEquals(21, int1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertTrue(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(int1 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      // Undeclared exception!
      try { 
        LocalTime.parse("p6NP|Efa|K8fS_Pt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p6NP|Efa|K8fS_Pt\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(36L, (Chronology) gJChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Chronology chronology0 = gJChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      
      LocalTime.Property localTime_Property0 = localTime0.MIDNIGHT.millisOfDay();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, chronology0);
      
      LocalTime localTime1 = localTime0.plusSeconds((-1731));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      LocalTime.Property localTime_Property1 = localTime1.property(dateTimeFieldType0);
      assertNotNull(localTime_Property1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1731));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.731", dateTimeZone0.getID());
      assertEquals("-00:00:01.731", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTime dateTime0 = localTime1.MIDNIGHT.toDateTimeToday(dateTimeZone0);
      assertNotNull(dateTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("-00:00:01.731", dateTimeZone0.getID());
      assertEquals("-00:00:01.731", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336001731L, dateTime0.getMillis());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime0.minusMillis(0);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime2, localTime0);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      DateTime dateTime1 = localTime2.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336000036L, dateTime1.getMillis());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime2, localTime0);
      assertNotSame(dateTime1, dateTime0);
      
      int int0 = localTime2.getMinuteOfHour();
      assertEquals(0, int0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime2, localTime0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(dateTimeZone1, uTCDateTimeZone0);
      
      LocalTime localTime3 = localTime0.MIDNIGHT.minusMillis(60000);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      
      LocalTime localTime4 = localTime2.plusSeconds(0);
      assertNotNull(localTime4);
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime4, localTime1);
      assertSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      assertSame(localTime4, localTime2);
      assertSame(gJChronology0, chronology0);
      assertSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime2, localTime4);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      
      int int1 = localTime4.compareTo((ReadablePartial) localTime0);
      assertEquals(0, int1);
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertTrue(int1 == int0);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime4, localTime1);
      assertSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      assertSame(localTime4, localTime2);
      assertSame(gJChronology0, chronology0);
      assertSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime2, localTime4);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      
      long long0 = localTime_Property0.getMillis();
      assertEquals(0L, long0);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, chronology0);
      assertSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime_Property0, localTime_Property1);
      
      LocalTime localTime5 = localTime2.withField(dateTimeFieldType0, 0);
      assertNotNull(localTime5);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime5.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(4, localTime2.size());
      assertSame(gJChronology0, chronology0);
      assertSame(localTime0, localTime5);
      assertSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertSame(localTime5, localTime2);
      assertSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime1);
      assertSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime2, localTime4);
      assertSame(localTime2, localTime5);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      
      LocalTime localTime6 = localTime3.minusMillis(0);
      assertNotNull(localTime6);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime6.size());
      assertEquals(4, localTime3.size());
      assertSame(gJChronology0, chronology0);
      assertSame(localTime0, localTime5);
      assertSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime6);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime0);
      assertSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertSame(localTime3, localTime6);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime2);
      
      LocalTime.Property localTime_Property2 = localTime5.minuteOfHour();
      assertNotNull(localTime_Property2);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime5.equals((Object)localTime6));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime_Property2.equals((Object)localTime_Property0));
      assertFalse(localTime_Property2.equals((Object)localTime_Property1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime6));
      assertFalse(localTime2.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime5.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(4, localTime2.size());
      assertSame(gJChronology0, chronology0);
      assertSame(localTime0, localTime5);
      assertSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime6);
      assertSame(localTime0, localTime2);
      assertSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime6);
      assertSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime1);
      assertSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime_Property2, localTime_Property0);
      assertNotSame(localTime_Property2, localTime_Property1);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime2, localTime4);
      assertSame(localTime2, localTime5);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime6);
      assertNotSame(localTime2, localTime3);
      
      // Undeclared exception!
      try { 
        LocalTime.parse("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Days days0 = Days.THREE;
      assertNotNull(days0);
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy((-1445));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeUtils.setCurrentMillisSystem();
      String string0 = localTime0.toString((String) null);
      assertNotNull(string0);
      assertEquals("20:21:21.320", string0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.size();
      assertEquals(4, int0);
      assertEquals(4, localTime0.size());
      
      long long0 = localTime0.getLocalMillis();
      assertEquals(73281320L, long0);
      assertEquals(4, localTime0.size());
      
      int int1 = (-279);
      // Undeclared exception!
      try { 
        localTime0.withMillisOfSecond((-279));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -279 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMillisOfSecond(11);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      String string0 = localTime1.MIDNIGHT.toString((String) null);
      assertNotNull(string0);
      assertEquals("00:00:00.000", string0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      int int0 = localTime1.compareTo((ReadablePartial) localTime0);
      assertEquals((-1), int0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      
      LocalTime localTime2 = localTime_Property0.roundHalfFloorCopy();
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      // Undeclared exception!
      try { 
        localTime2.getField(11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 11
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null, (DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusMinutes(3206);
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392601641320L, dateTime1.getMillis());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      
      DateTime dateTime2 = dateTime1.minusYears(3206);
      assertNotNull(dateTime2);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392601641320L, dateTime1.getMillis());
      assertEquals((-99779033558680L), dateTime2.getMillis());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      
      Date date0 = dateTime2.toDate();
      assertNotNull(date0);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392601641320L, dateTime1.getMillis());
      assertEquals((-99779033558680L), dateTime2.getMillis());
      assertEquals("Sun Feb 28 01:47:21 GMT 1193", date0.toString());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      
      LocalTime localTime0 = LocalTime.fromDateFields(date0);
      assertNotNull(localTime0);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392601641320L, dateTime1.getMillis());
      assertEquals((-99779033558680L), dateTime2.getMillis());
      assertEquals("Sun Feb 28 01:47:21 GMT 1193", date0.toString());
      assertEquals(4, localTime0.size());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      
      // Undeclared exception!
      try { 
        localTime0.toString("\")o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMinuteOfHour(11);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime1.MIDNIGHT.millisOfDay();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime_Property0.addNoWrapToCopy(11);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      boolean boolean0 = localTime2.MIDNIGHT.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      int int0 = new Integer(11);
      assertEquals(11, int0);
      
      LocalTime.Property localTime_Property1 = localTime1.MIDNIGHT.hourOfDay();
      assertNotNull(localTime_Property1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      int int1 = localTime1.getMinuteOfHour();
      assertEquals(11, int1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertTrue(int1 == int0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      
      LocalTime localTime3 = localTime0.minusHours(11);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      boolean boolean1 = localTime1.isSupported(dateTimeFieldType0);
      assertTrue(boolean1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(boolean1 == boolean0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        localTime3.MIDNIGHT.get(dateTimeFieldType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyear' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Interval interval0 = new Interval(2629746000L, 2629746000L, (DateTimeZone) null);
      assertNotNull(interval0);
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      
      DateTime dateTime0 = interval0.getEnd();
      assertNotNull(dateTime0);
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      assertEquals(2629746000L, dateTime0.getMillis());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null, 5);
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      boolean boolean0 = dateTime0.isAfter(mutableDateTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertFalse(boolean0);
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      assertEquals(2629746000L, dateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      assertNotNull(gregorianCalendar0);
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      assertEquals(2629746000L, dateTime0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2629746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=29,SECOND=6,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      assertEquals(2629746000L, dateTime0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2629746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=29,SECOND=6,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      
      boolean boolean1 = localTime0.isSupported(dateTimeFieldType0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      assertEquals(2629746000L, dateTime0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2629746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=29,SECOND=6,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localTime0.size());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      LocalTime localTime0 = new LocalTime(0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime_Property0.setCopy(0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime_Property0.roundHalfFloorCopy();
      assertNotNull(localTime2);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      LocalTime localTime3 = new LocalTime(0, 0, 0);
      assertNotNull(localTime3);
      assertTrue(localTime3.equals((Object)localTime2));
      assertTrue(localTime3.equals((Object)localTime0));
      assertTrue(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime3.size());
      
      LocalTime.Property localTime_Property1 = localTime2.MIDNIGHT.millisOfSecond();
      assertNotNull(localTime_Property1);
      assertTrue(localTime0.equals((Object)localTime3));
      assertTrue(localTime2.equals((Object)localTime3));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      LocalTime localTime4 = localTime2.withMinuteOfHour(0);
      assertNotNull(localTime4);
      assertTrue(localTime0.equals((Object)localTime3));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertTrue(localTime2.equals((Object)localTime3));
      assertTrue(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime4.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime4);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertSame(localTime2, localTime4);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      assertSame(localTime4, localTime2);
      assertSame(localTime4, localTime0);
      
      int int1 = localTime4.MIDNIGHT.compareTo((ReadablePartial) localTime2);
      assertEquals(0, int1);
      assertTrue(localTime0.equals((Object)localTime3));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertTrue(localTime2.equals((Object)localTime3));
      assertTrue(localTime4.equals((Object)localTime3));
      assertTrue(int1 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime4.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime4);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertSame(localTime2, localTime4);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      assertSame(localTime4, localTime2);
      assertSame(localTime4, localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      LocalTime localTime5 = localTime0.MIDNIGHT.plusHours((-2769));
      assertNotNull(localTime5);
      assertTrue(localTime0.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime4));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime5.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime5);
      assertSame(localTime0, localTime4);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime4);
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertNotNull(unsupportedDurationField0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertFalse(unsupportedDurationField0.isSupported());
      assertEquals("days", unsupportedDurationField0.getName());
      assertTrue(unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      
      DecoratedDurationField decoratedDurationField0 = null;
      try {
        decoratedDurationField0 = new DecoratedDurationField(unsupportedDurationField0, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must be supported
         //
         verifyException("org.joda.time.field.DecoratedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      // Undeclared exception!
      try { 
        LocalTime.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      boolean boolean0 = localTime0.MIDNIGHT.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localTime0.withMillisOfSecond((-1783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1783 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      ZonedDateTime zonedDateTime0 = mockGregorianCalendar0.toZonedDateTime();
      assertNotNull(zonedDateTime0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertNotNull(gregorianCalendar0);
      assertFalse(gregorianCalendar0.equals((Object)mockGregorianCalendar0));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertNotSame(mockGregorianCalendar0, gregorianCalendar0);
      assertNotSame(gregorianCalendar0, mockGregorianCalendar0);
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      assertNotNull(localTime0);
      assertFalse(mockGregorianCalendar0.equals((Object)gregorianCalendar0));
      assertFalse(gregorianCalendar0.equals((Object)mockGregorianCalendar0));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localTime0.size());
      assertNotSame(mockGregorianCalendar0, gregorianCalendar0);
      assertNotSame(gregorianCalendar0, mockGregorianCalendar0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyear' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(4, 4);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusMinutes(85);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {4}, intArray0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, dateTimeFieldTypeArray0.length);
      assertEquals(1, intArray0.length);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertNotNull(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(buddhistChronology1.equals((Object)buddhistChronology0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertNotSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(buddhistChronology1, buddhistChronology0);
      
      // Undeclared exception!
      try { 
        partial0.getField(85, (Chronology) buddhistChronology1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 85
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Date date0 = dateTime0.toDate();
      assertNotNull(date0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      LocalTime localTime0 = LocalTime.fromDateFields(date0);
      assertNotNull(localTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, localTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      
      int int0 = 23;
      boolean boolean0 = localTime0.MIDNIGHT.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, localTime0.size());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded(durationFieldType0, 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weeks' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Date date0 = dateTime0.toDate();
      assertNotNull(date0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      LocalTime localTime0 = LocalTime.fromDateFields(date0);
      assertNotNull(localTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, localTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      
      int int0 = 23;
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded(durationFieldType0, 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weeks' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      int int0 = dateTime0.getDayOfMonth();
      assertEquals(14, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Date date0 = dateTime0.toDate();
      assertNotNull(date0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      
      String string0 = localTime0.toString((String) null, locale0);
      assertNotNull(string0);
      assertEquals("00:00:00.000", string0);
      assertEquals(4, localTime0.size());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      
      LocalTime localTime1 = new LocalTime();
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime1.size());
      
      LocalTime localTime2 = localTime0.withFields(localTime1);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withUTC();
      assertNotNull(ethiopicChronology1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      
      LocalTime localTime0 = new LocalTime((Chronology) ethiopicChronology1);
      assertNotNull(localTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, localTime0.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      
      LocalTime localTime1 = localTime_Property0.roundFloorCopy();
      assertNotNull(localTime1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = LocalTime.fromMillisOfDay((long) 1, (Chronology) ethiopicChronology0);
      assertNotNull(localTime2);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime2.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime localTime3 = localTime2.minusMillis(1);
      assertNotNull(localTime3);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      
      DateTimeUtils.setCurrentMillisSystem();
      LocalTime localTime4 = localTime1.withMillisOfSecond(1);
      assertNotNull(localTime4);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime4.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime2);
      
      LocalTime.Property localTime_Property1 = localTime1.millisOfSecond();
      assertNotNull(localTime_Property1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      LocalTime localTime5 = localTime4.plusHours(85);
      assertNotNull(localTime5);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime5.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime1);
      
      LocalTime.Property localTime_Property2 = localTime5.hourOfDay();
      assertNotNull(localTime_Property2);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime5));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime_Property2.equals((Object)localTime_Property1));
      assertFalse(localTime_Property2.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime5.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime_Property0, localTime_Property2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime_Property2, localTime_Property1);
      assertNotSame(localTime_Property2, localTime_Property0);
      
      Days days0 = Days.MAX_VALUE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      
      Days days1 = Days.days((-2683));
      assertNotNull(days1);
      assertFalse(days1.equals((Object)days0));
      assertEquals(1, days1.size());
      assertEquals((-2683), days1.getDays());
      assertNotSame(days1, days0);
      
      // Undeclared exception!
      try { 
        localTime2.minus(days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(36L, (Chronology) gJChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Chronology chronology0 = gJChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      
      LocalTime.Property localTime_Property0 = localTime0.MIDNIGHT.millisOfDay();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, chronology0);
      
      LocalTime localTime1 = localTime0.plusSeconds((-1731));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      LocalTime localTime2 = localTime0.MIDNIGHT.minusSeconds((-1489));
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime.Property localTime_Property1 = localTime1.property(dateTimeFieldType0);
      assertNotNull(localTime_Property1);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1731));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.731", dateTimeZone0.toString());
      assertEquals("-00:00:01.731", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTime dateTime0 = localTime1.MIDNIGHT.toDateTimeToday(dateTimeZone0);
      assertNotNull(dateTime0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("-00:00:01.731", dateTimeZone0.toString());
      assertEquals("-00:00:01.731", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336001731L, dateTime0.getMillis());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      
      LocalTime localTime3 = localTime0.minusMillis(0);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime3, localTime1);
      assertSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      
      int int0 = localTime3.getMinuteOfHour();
      assertEquals(0, int0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime3, localTime1);
      assertSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone1);
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      
      LocalTime localTime4 = localTime0.MIDNIGHT.minusMillis(0);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime2);
      
      LocalTime localTime5 = localTime4.minusMillis((-1731));
      assertNotNull(localTime5);
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime5.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      
      long long0 = localTime_Property0.getMillis();
      assertEquals(0L, long0);
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime_Property0, localTime_Property1);
      
      boolean boolean0 = localTime3.isSupported(dateTimeFieldType0);
      assertTrue(boolean0);
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, localTime3.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime4);
      assertSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      
      LocalTime localTime6 = localTime_Property1.withMaximumValue();
      assertNotNull(localTime6);
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime6.size());
      assertEquals(4, localTime1.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      String string0 = localTime1.toString();
      assertNotNull(string0);
      assertEquals("23:31:09.036", string0);
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime1.equals((Object)localTime6));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime2);
      
      DateTime dateTime1 = localTime0.toDateTimeToday();
      assertNotNull(dateTime1);
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(4, localTime0.size());
      assertEquals(1392336000036L, dateTime1.getMillis());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime6);
      assertNotSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withUTC();
      assertNotNull(ethiopicChronology1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      
      LocalTime localTime0 = new LocalTime((Chronology) ethiopicChronology1);
      assertNotNull(localTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, localTime0.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      
      LocalTime localTime1 = localTime_Property0.roundFloorCopy();
      assertNotNull(localTime1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = LocalTime.fromMillisOfDay((long) 1, (Chronology) ethiopicChronology0);
      assertNotNull(localTime2);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime2.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime localTime3 = localTime1.MIDNIGHT.withSecondOfMinute(1);
      assertNotNull(localTime3);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      
      LocalTime localTime4 = localTime2.minusMillis(1);
      assertNotNull(localTime4);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime4.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      
      int int0 = localTime4.MIDNIGHT.compareTo((ReadablePartial) localTime1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals((-1), int0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime4.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      
      DateTimeUtils.setCurrentMillisSystem();
      LocalTime localTime5 = localTime1.withMillisOfSecond(1);
      assertNotNull(localTime5);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime5.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime3);
      
      LocalTime.Property localTime_Property1 = localTime1.millisOfSecond();
      assertNotNull(localTime_Property1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      LocalTime localTime6 = localTime5.plusHours(85);
      assertNotNull(localTime6);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime5.size());
      assertEquals(4, localTime6.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime6);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime2);
      
      LocalTime.Property localTime_Property2 = localTime6.hourOfDay();
      assertNotNull(localTime_Property2);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime6));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime6));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime_Property2.equals((Object)localTime_Property0));
      assertFalse(localTime_Property2.equals((Object)localTime_Property1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime5.size());
      assertEquals(4, localTime6.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime_Property0, localTime_Property2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime6);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime_Property2, localTime_Property0);
      assertNotSame(localTime_Property2, localTime_Property1);
      
      Days days0 = Days.MAX_VALUE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      
      Days days1 = Days.days((-2683));
      assertNotNull(days1);
      assertFalse(days1.equals((Object)days0));
      assertEquals((-2683), days1.getDays());
      assertEquals(1, days1.size());
      assertNotSame(days1, days0);
      
      LocalTime localTime7 = localTime3.minus(days0);
      assertNotNull(localTime7);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime7.equals((Object)localTime5));
      assertFalse(localTime7.equals((Object)localTime6));
      assertFalse(localTime7.equals((Object)localTime0));
      assertFalse(localTime7.equals((Object)localTime1));
      assertFalse(localTime7.equals((Object)localTime4));
      assertFalse(localTime7.equals((Object)localTime2));
      assertTrue(localTime7.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime_Property0.equals((Object)localTime_Property2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime6));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime6));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(days0.equals((Object)days1));
      assertEquals(4, localTime7.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertNotSame(localTime7, localTime5);
      assertNotSame(localTime7, localTime6);
      assertNotSame(localTime7, localTime3);
      assertNotSame(localTime7, localTime0);
      assertNotSame(localTime7, localTime1);
      assertNotSame(localTime7, localTime4);
      assertNotSame(localTime7, localTime2);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime7);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime_Property0, localTime_Property2);
      assertNotSame(localTime1, localTime7);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime6);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime7);
      assertNotSame(localTime3, localTime2);
      assertNotSame(days0, days1);
      
      LocalTime localTime8 = localTime_Property2.withMinimumValue();
      assertNotNull(localTime8);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime8.equals((Object)localTime7));
      assertFalse(localTime8.equals((Object)localTime3));
      assertFalse(localTime8.equals((Object)localTime5));
      assertFalse(localTime8.equals((Object)localTime0));
      assertFalse(localTime8.equals((Object)localTime1));
      assertFalse(localTime8.equals((Object)localTime4));
      assertFalse(localTime8.equals((Object)localTime6));
      assertFalse(localTime8.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime7));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime_Property0.equals((Object)localTime_Property2));
      assertFalse(localTime1.equals((Object)localTime7));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime6));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime6));
      assertFalse(localTime5.equals((Object)localTime7));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime7));
      assertFalse(localTime_Property2.equals((Object)localTime_Property0));
      assertFalse(localTime_Property2.equals((Object)localTime_Property1));
      assertEquals(4, localTime8.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime5.size());
      assertEquals(4, localTime6.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(localTime8, localTime7);
      assertNotSame(localTime8, localTime3);
      assertNotSame(localTime8, localTime5);
      assertNotSame(localTime8, localTime0);
      assertNotSame(localTime8, localTime1);
      assertNotSame(localTime8, localTime4);
      assertNotSame(localTime8, localTime6);
      assertNotSame(localTime8, localTime2);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime7);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime8);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime_Property0, localTime_Property2);
      assertNotSame(localTime1, localTime7);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime8);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime8);
      assertNotSame(localTime5, localTime6);
      assertNotSame(localTime5, localTime7);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime8);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime7);
      assertNotSame(localTime_Property2, localTime_Property0);
      assertNotSame(localTime_Property2, localTime_Property1);
      
      long long0 = (-2494L);
      LocalTime localTime9 = LocalTime.fromMillisOfDay((-2494L));
      assertNotNull(localTime9);
      assertFalse(localTime9.equals((Object)localTime8));
      assertFalse(localTime9.equals((Object)localTime7));
      assertFalse(localTime9.equals((Object)localTime5));
      assertFalse(localTime9.equals((Object)localTime1));
      assertFalse(localTime9.equals((Object)localTime4));
      assertFalse(localTime9.equals((Object)localTime3));
      assertFalse(localTime9.equals((Object)localTime0));
      assertFalse(localTime9.equals((Object)localTime2));
      assertFalse(localTime9.equals((Object)localTime6));
      assertEquals(4, localTime9.size());
      assertNotSame(localTime9, localTime8);
      assertNotSame(localTime9, localTime7);
      assertNotSame(localTime9, localTime5);
      assertNotSame(localTime9, localTime1);
      assertNotSame(localTime9, localTime4);
      assertNotSame(localTime9, localTime3);
      assertNotSame(localTime9, localTime0);
      assertNotSame(localTime9, localTime2);
      assertNotSame(localTime9, localTime6);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      LocalTime localTime10 = localTime7.withField(dateTimeFieldType0, 11);
      assertNotNull(localTime10);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime7.equals((Object)localTime5));
      assertFalse(localTime7.equals((Object)localTime6));
      assertFalse(localTime7.equals((Object)localTime8));
      assertFalse(localTime7.equals((Object)localTime0));
      assertFalse(localTime7.equals((Object)localTime9));
      assertFalse(localTime7.equals((Object)localTime1));
      assertFalse(localTime7.equals((Object)localTime4));
      assertFalse(localTime7.equals((Object)localTime2));
      assertTrue(localTime7.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime7));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime9));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime8));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime_Property0.equals((Object)localTime_Property2));
      assertFalse(localTime1.equals((Object)localTime7));
      assertFalse(localTime1.equals((Object)localTime9));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime6));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime8));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime10.equals((Object)localTime0));
      assertFalse(localTime10.equals((Object)localTime1));
      assertFalse(localTime10.equals((Object)localTime4));
      assertFalse(localTime10.equals((Object)localTime8));
      assertFalse(localTime10.equals((Object)localTime3));
      assertFalse(localTime10.equals((Object)localTime5));
      assertFalse(localTime10.equals((Object)localTime7));
      assertFalse(localTime10.equals((Object)localTime6));
      assertFalse(localTime10.equals((Object)localTime9));
      assertFalse(localTime10.equals((Object)localTime2));
      assertTrue(localTime3.equals((Object)localTime7));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime6));
      assertFalse(localTime3.equals((Object)localTime8));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime9));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(days0.equals((Object)days1));
      assertEquals(4, localTime7.size());
      assertEquals(4, localTime0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime10.size());
      assertEquals(4, localTime3.size());
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertNotSame(localTime7, localTime5);
      assertNotSame(localTime7, localTime6);
      assertNotSame(localTime7, localTime10);
      assertNotSame(localTime7, localTime3);
      assertNotSame(localTime7, localTime8);
      assertNotSame(localTime7, localTime0);
      assertNotSame(localTime7, localTime9);
      assertNotSame(localTime7, localTime1);
      assertNotSame(localTime7, localTime4);
      assertNotSame(localTime7, localTime2);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime7);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime9);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime8);
      assertNotSame(localTime0, localTime10);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime_Property0, localTime_Property2);
      assertNotSame(localTime1, localTime7);
      assertNotSame(localTime1, localTime9);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime8);
      assertNotSame(localTime1, localTime10);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime10, localTime0);
      assertNotSame(localTime10, localTime1);
      assertNotSame(localTime10, localTime4);
      assertNotSame(localTime10, localTime8);
      assertNotSame(localTime10, localTime3);
      assertNotSame(localTime10, localTime5);
      assertNotSame(localTime10, localTime7);
      assertNotSame(localTime10, localTime6);
      assertNotSame(localTime10, localTime9);
      assertNotSame(localTime10, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime6);
      assertNotSame(localTime3, localTime8);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime10);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime7);
      assertNotSame(localTime3, localTime9);
      assertNotSame(localTime3, localTime2);
      assertNotSame(days0, days1);
      
      LocalTime.Property localTime_Property3 = localTime8.property(dateTimeFieldType0);
      assertNotNull(localTime_Property3);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime8.equals((Object)localTime7));
      assertFalse(localTime8.equals((Object)localTime10));
      assertFalse(localTime8.equals((Object)localTime3));
      assertFalse(localTime8.equals((Object)localTime5));
      assertFalse(localTime8.equals((Object)localTime0));
      assertFalse(localTime8.equals((Object)localTime1));
      assertFalse(localTime8.equals((Object)localTime4));
      assertFalse(localTime8.equals((Object)localTime6));
      assertFalse(localTime8.equals((Object)localTime9));
      assertFalse(localTime8.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime7));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime9));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime8));
      assertFalse(localTime0.equals((Object)localTime10));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime_Property0.equals((Object)localTime_Property2));
      assertFalse(localTime1.equals((Object)localTime7));
      assertFalse(localTime1.equals((Object)localTime9));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime6));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime8));
      assertFalse(localTime1.equals((Object)localTime10));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime_Property3.equals((Object)localTime_Property1));
      assertFalse(localTime_Property3.equals((Object)localTime_Property0));
      assertFalse(localTime_Property3.equals((Object)localTime_Property2));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime10));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime8));
      assertFalse(localTime5.equals((Object)localTime9));
      assertFalse(localTime5.equals((Object)localTime6));
      assertFalse(localTime5.equals((Object)localTime7));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime10));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime8));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime9));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime7));
      assertFalse(localTime_Property2.equals((Object)localTime_Property0));
      assertFalse(localTime_Property2.equals((Object)localTime_Property1));
      assertEquals(4, localTime8.size());
      assertEquals(4, localTime0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime5.size());
      assertEquals(4, localTime6.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(localTime8, localTime7);
      assertNotSame(localTime8, localTime10);
      assertNotSame(localTime8, localTime3);
      assertNotSame(localTime8, localTime5);
      assertNotSame(localTime8, localTime0);
      assertNotSame(localTime8, localTime1);
      assertNotSame(localTime8, localTime4);
      assertNotSame(localTime8, localTime6);
      assertNotSame(localTime8, localTime9);
      assertNotSame(localTime8, localTime2);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime7);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime9);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime8);
      assertNotSame(localTime0, localTime10);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime_Property0, localTime_Property3);
      assertNotSame(localTime_Property0, localTime_Property2);
      assertNotSame(localTime1, localTime7);
      assertNotSame(localTime1, localTime9);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime8);
      assertNotSame(localTime1, localTime10);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime_Property3, localTime_Property1);
      assertNotSame(localTime_Property3, localTime_Property0);
      assertNotSame(localTime_Property3, localTime_Property2);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime10);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime8);
      assertNotSame(localTime5, localTime9);
      assertNotSame(localTime5, localTime6);
      assertNotSame(localTime5, localTime7);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime10);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime8);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime9);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime7);
      assertNotSame(localTime_Property2, localTime_Property3);
      assertNotSame(localTime_Property2, localTime_Property0);
      assertNotSame(localTime_Property2, localTime_Property1);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      try { 
        localTime10.toString("Field must not be null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1000L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      try { 
        localTime0.toString("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(279L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Chronology chronology0 = null;
      LocalTime localTime1 = new LocalTime(localTime0, (Chronology) null);
      assertNotNull(localTime1);
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      LocalTime.Property localTime_Property0 = localTime1.minuteOfHour();
      assertNotNull(localTime_Property0);
      assertTrue(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime_Property0.withMinimumValue();
      assertNotNull(localTime2);
      assertTrue(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      String string0 = "";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      
      int int0 = 86400000;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 86400000 for monthOfYear must not be larger than 12
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusHours(3600);
      assertNotNull(localTime1);
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime1.minusSeconds(3600);
      assertNotNull(localTime2);
      assertTrue(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        localTime2.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'era' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.MIDNIGHT.minusSeconds(0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime0.minusHours((-2218));
      assertNotNull(localTime2);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime.Property localTime_Property0 = localTime2.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime localTime3 = localTime_Property0.roundHalfCeilingCopy();
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertSame(localTime3, localTime2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withFields((ReadablePartial) null);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int int0 = localTime1.get(dateTimeFieldType0);
      assertEquals(320, int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      int int1 = (-890);
      int int2 = (-1306);
      LocalTime localTime2 = null;
      try {
        localTime2 = new LocalTime((-890), (-1306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -890 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusHours((-1277));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime1.minusMillis(1000);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      Years years0 = Years.MIN_VALUE;
      assertNotNull(years0);
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      
      // Undeclared exception!
      try { 
        localTime2.minus(years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMinuteOfHour(11);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime1.MIDNIGHT.millisOfDay();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime_Property0.addNoWrapToCopy(11);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      LocalTime.Property localTime_Property1 = localTime1.MIDNIGHT.hourOfDay();
      assertNotNull(localTime_Property1);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      int int0 = localTime1.getMinuteOfHour();
      assertEquals(11, int0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      
      LocalTime localTime3 = localTime0.minusHours(11);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      
      LocalTime localTime4 = localTime3.plusHours(11);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertTrue(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      boolean boolean0 = localTime3.equals(localTime_Property0);
      assertFalse(boolean0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime0.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime0);
      
      LocalTime localTime5 = localTime4.withFields(localTime2);
      assertNotNull(localTime5);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime0.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertTrue(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertTrue(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime3));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime5.size());
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime3);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      LocalTime localTime6 = LocalTime.fromMillisOfDay(1089L);
      assertNotNull(localTime6);
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime1));
      assertEquals(4, localTime6.size());
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime1);
      
      Period period1 = period0.minusWeeks((-2146601723));
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      Period period2 = period1.withHours((-1584));
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      
      // Undeclared exception!
      try { 
        localTime5.MIDNIGHT.withPeriodAdded(period2, (-1584));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -3400217129232 * 604800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      assertFalse(boolean0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(36L, (Chronology) gJChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertNotNull(gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      
      LocalTime.Property localTime_Property0 = localTime0.MIDNIGHT.millisOfDay();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, gJChronology1);
      
      LocalTime localTime1 = localTime0.plusSeconds((-1731));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      LocalTime.Property localTime_Property1 = localTime1.property(dateTimeFieldType0);
      assertNotNull(localTime_Property1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1731));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.731", dateTimeZone0.getID());
      assertEquals("-00:00:01.731", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTime dateTime0 = localTime1.MIDNIGHT.toDateTimeToday(dateTimeZone0);
      assertNotNull(dateTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("-00:00:01.731", dateTimeZone0.getID());
      assertEquals("-00:00:01.731", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336001731L, dateTime0.getMillis());
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime0.minusMillis(0);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(gJChronology0, gJChronology1);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      DateTime dateTime1 = localTime2.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336000036L, dateTime1.getMillis());
      assertSame(gJChronology0, gJChronology1);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(dateTime1, dateTime0);
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(dateTimeZone1, uTCDateTimeZone0);
      
      LocalTime localTime3 = localTime0.MIDNIGHT.minusMillis(60000);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertSame(gJChronology0, gJChronology1);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      LocalTime localTime4 = localTime2.plusSeconds(0);
      assertNotNull(localTime4);
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime1);
      assertSame(localTime4, localTime0);
      assertSame(localTime4, localTime2);
      assertSame(gJChronology0, gJChronology1);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime4);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime4);
      
      long long0 = localTime_Property0.getMillis();
      assertEquals(0L, long0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, gJChronology1);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime4);
      assertNotSame(localTime_Property0, localTime_Property1);
      
      LocalTime localTime5 = localTime2.withField(dateTimeFieldType0, 0);
      assertNotNull(localTime5);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime5.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(4, localTime2.size());
      assertSame(gJChronology0, gJChronology1);
      assertSame(localTime0, localTime5);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime4);
      assertSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime3);
      assertSame(localTime5, localTime4);
      assertSame(localTime5, localTime0);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime4);
      
      DurationFieldType durationFieldType1 = DurationFieldType.MILLIS_TYPE;
      assertNotNull(durationFieldType1);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertEquals("millis", durationFieldType1.getName());
      assertEquals("millis", durationFieldType1.toString());
      assertNotSame(durationFieldType1, durationFieldType0);
      
      boolean boolean1 = localTime4.isSupported(durationFieldType1);
      assertTrue(boolean1);
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertFalse(boolean1 == boolean0);
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime0.size());
      assertEquals("millis", durationFieldType1.getName());
      assertEquals("millis", durationFieldType1.toString());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime1);
      assertSame(localTime4, localTime0);
      assertSame(localTime4, localTime2);
      assertSame(localTime4, localTime5);
      assertSame(gJChronology0, gJChronology1);
      assertSame(localTime0, localTime5);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime4);
      assertNotSame(durationFieldType1, durationFieldType0);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime4);
      
      // Undeclared exception!
      try { 
        LocalTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localTime0.size());
      
      Years years0 = Years.MIN_VALUE;
      assertNotNull(years0);
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      
      // Undeclared exception!
      try { 
        localTime0.plus(years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481678 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Interval interval0 = new Interval(2629746000L, 2629746000L, (DateTimeZone) null);
      assertNotNull(interval0);
      assertEquals(2629746000L, interval0.getStartMillis());
      assertEquals(2629746000L, interval0.getEndMillis());
      
      DateTime dateTime0 = new DateTime(2629746000L);
      assertNotNull(dateTime0);
      assertEquals(2629746000L, dateTime0.getMillis());
      
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      assertNotNull(gregorianCalendar0);
      assertEquals(2629746000L, dateTime0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2629746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=29,SECOND=6,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals(2629746000L, dateTime0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2629746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=29,SECOND=6,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.MIDNIGHT.withFields((ReadablePartial) null);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(2629746000L, dateTime0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2629746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=29,SECOND=6,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      LocalTime localTime2 = LocalTime.now((Chronology) copticChronology0);
      assertNotNull(localTime2);
      assertEquals(1, CopticChronology.AM);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime2.size());
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded((DurationFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.MIDNIGHT.getHourOfDay();
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMinuteOfHour(12);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime1.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime_Property0.roundHalfCeilingCopy();
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertSame(localTime1, localTime2);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      LocalTime localTime3 = localTime_Property0.roundCeilingCopy();
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime0);
      assertSame(localTime1, localTime3);
      assertSame(localTime1, localTime2);
      assertSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertSame(localTime3, localTime2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-1L), (DateTimeZone) null);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.getHourOfDay();
      assertEquals(23, int0);
      assertEquals(4, localTime0.size());
      
      Chronology chronology0 = localTime0.getChronology();
      assertNotNull(chronology0);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime_Property0.roundHalfEvenCopy();
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      // Undeclared exception!
      try { 
        localTime1.withMillisOfSecond(1450);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1450 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      
      String string0 = dateTimeZone0.getNameKey((-1258L));
      assertNull(string0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalTime localTime1 = localTime0.plusHours(0);
      assertNotNull(localTime1);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime1.minusMillis(0);
      assertNotNull(localTime2);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime2);
      assertSame(localTime1, localTime0);
      assertSame(localTime2, localTime1);
      assertSame(localTime2, localTime0);
      
      LocalTime localTime3 = localTime1.plusMillis(0);
      assertNotNull(localTime3);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertSame(localTime1, localTime2);
      assertSame(localTime1, localTime3);
      assertSame(localTime1, localTime0);
      assertSame(localTime3, localTime2);
      assertSame(localTime3, localTime1);
      assertSame(localTime3, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime1.millisOfDay();
      assertNotNull(localTime_Property0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertSame(localTime1, localTime2);
      assertSame(localTime1, localTime3);
      assertSame(localTime1, localTime0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      
      LocalTime localTime4 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime4);
      assertTrue(localTime4.equals((Object)localTime2));
      assertTrue(localTime4.equals((Object)localTime1));
      assertTrue(localTime4.equals((Object)localTime3));
      assertTrue(localTime4.equals((Object)localTime0));
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-18:00\",offset=-64800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=-64800000,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      
      LocalTime localTime5 = localTime_Property0.addNoWrapToCopy((-240));
      assertNotNull(localTime5);
      assertTrue(localTime0.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime4));
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime5.size());
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime1, localTime4);
      assertSame(localTime1, localTime2);
      assertSame(localTime1, localTime3);
      assertSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime4);
      
      int int0 = localTime3.getValue(0);
      assertEquals(2, int0);
      assertTrue(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime5));
      assertTrue(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime5));
      assertTrue(localTime3.equals((Object)localTime4));
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime1, localTime4);
      assertSame(localTime1, localTime2);
      assertSame(localTime1, localTime3);
      assertSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime5);
      assertSame(localTime3, localTime2);
      assertSame(localTime3, localTime1);
      assertSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime4);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-438L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("v{imHSW");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTime dateTime0 = localTime0.MIDNIGHT.toDateTimeToday(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(4, localTime0.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateTime0.getMillis());
      
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime_Property0.getLocalTime();
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      LocalTime localTime2 = LocalTime.now((Chronology) gregorianChronology0);
      assertNotNull(localTime2);
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      LocalTime localTime3 = localTime_Property0.addCopy((-438L));
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      
      LocalTime localTime4 = localTime3.withMillisOfDay(1179);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime1);
      
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy(1179);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(36L, (Chronology) gJChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Chronology chronology0 = gJChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      
      LocalTime.Property localTime_Property0 = localTime0.MIDNIGHT.millisOfDay();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, chronology0);
      
      LocalTime localTime1 = localTime0.plusSeconds((-1731));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      LocalTime.Property localTime_Property1 = localTime1.property(dateTimeFieldType0);
      assertNotNull(localTime_Property1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1731));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.731", dateTimeZone0.getID());
      assertEquals("-00:00:01.731", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTime dateTime0 = localTime1.MIDNIGHT.toDateTimeToday(dateTimeZone0);
      assertNotNull(dateTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("-00:00:01.731", dateTimeZone0.getID());
      assertEquals("-00:00:01.731", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336001731L, dateTime0.getMillis());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime0.minusMillis(0);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(gJChronology0, chronology0);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      DateTime dateTime1 = localTime2.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336000036L, dateTime1.getMillis());
      assertSame(gJChronology0, chronology0);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(dateTime1, dateTime0);
      
      int int0 = localTime0.getMinuteOfHour();
      assertEquals(0, int0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, chronology0);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone1);
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertSame(dateTimeZone1, uTCDateTimeZone0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      
      LocalTime localTime3 = localTime2.plusSeconds(0);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertSame(gJChronology0, chronology0);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime3);
      assertSame(localTime3, localTime0);
      assertSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      
      long long0 = localTime_Property0.getMillis();
      assertEquals(0L, long0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertEquals(4, localTime0.size());
      assertSame(gJChronology0, chronology0);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime_Property0, localTime_Property1);
      
      LocalTime localTime4 = localTime2.withField(dateTimeFieldType0, 0);
      assertNotNull(localTime4);
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(4, localTime2.size());
      assertSame(gJChronology0, chronology0);
      assertSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime1);
      assertSame(localTime4, localTime0);
      assertSame(localTime4, localTime3);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime4);
      assertSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime3);
      
      // Undeclared exception!
      try { 
        LocalTime.parse("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(12).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("");
      assertNotNull(localTime0);
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusMinutes((-2335));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      Days days0 = Days.THREE;
      assertNotNull(days0);
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      
      LocalTime localTime2 = localTime1.plus(days0);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime localTime3 = localTime0.withMillisOfDay(12);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      
      LocalTime localTime4 = localTime2.withFields(localTime3);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertTrue(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      
      LocalTime.Property localTime_Property0 = localTime4.millisOfDay();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertTrue(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime0));
      assertTrue(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)localTime_Property0.getField();
      assertNotNull(preciseDateTimeField0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertTrue(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime0));
      assertTrue(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertEquals(86400000, preciseDateTimeField0.getRange());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals("millisOfDay", preciseDateTimeField0.getName());
      assertTrue(preciseDateTimeField0.isSupported());
      assertEquals(1L, preciseDateTimeField0.getUnitMillis());
      assertFalse(preciseDateTimeField0.isLenient());
      assertEquals(86399999, preciseDateTimeField0.getMaximumValue());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      
      LocalTime localTime5 = localTime1.minusMinutes((-2335));
      assertNotNull(localTime5);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime1));
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime5.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime1);
      
      String string0 = localTime_Property0.getName();
      assertNotNull(string0);
      assertEquals("millisOfDay", string0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime1));
      assertTrue(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime0));
      assertTrue(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime5));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      
      LocalTime localTime6 = LocalTime.now();
      assertNotNull(localTime6);
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime0));
      assertEquals(4, localTime6.size());
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime0);
      
      // Undeclared exception!
      try { 
        localTime6.withField((DateTimeFieldType) null, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = LocalTime.now();
      assertNotNull(localTime1);
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime1.size());
      assertNotSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      assertNotNull(localTime_Property0);
      assertTrue(localTime0.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      
      LocalTime localTime2 = localTime_Property0.withMaximumValue();
      assertNotNull(localTime2);
      assertTrue(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      LocalTime localTime3 = localTime2.plusHours(20587500);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertTrue(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-337L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusHours(2);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime0.minusHours(2);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      int int0 = localTime2.MIDNIGHT.getHourOfDay();
      assertEquals(0, int0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      boolean boolean0 = localTime2.MIDNIGHT.equals(localTime0);
      assertFalse(boolean0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      int int1 = localTime2.MIDNIGHT.getValue(2);
      assertEquals(0, int1);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertTrue(int1 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      LocalTime localTime3 = LocalTime.now();
      assertNotNull(localTime3);
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime3.size());
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      
      String string0 = "";
      LocalTime localTime4 = new LocalTime((long) 0);
      assertNotNull(localTime4);
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertEquals(4, localTime4.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTime dateTime0 = localTime4.toDateTimeToday(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertEquals(4, localTime4.size());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      
      LocalTime localTime5 = localTime3.MIDNIGHT.plusMinutes(2);
      assertNotNull(localTime5);
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime1));
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime5.size());
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LocalTime localTime6 = localTime0.withHourOfDay(17);
      assertNotNull(localTime6);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime5));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime6.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime5);
      
      boolean boolean2 = localTime6.isBefore(localTime4);
      assertFalse(boolean2);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime4.equals((Object)localTime5));
      assertFalse(localTime4.equals((Object)localTime6));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime5));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime6.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime6);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime5);
      
      Chronology chronology0 = localTime3.getChronology();
      assertNotNull(chronology0);
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime6));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertEquals(4, localTime3.size());
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime6);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      
      int int2 = 2019;
      boolean boolean3 = localTime0.equals(localTime5);
      assertFalse(boolean3);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime5));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime6));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime6));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime5.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime6);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime6);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime1);
      
      int int3 = 4144;
      // Undeclared exception!
      try { 
        localTime6.MIDNIGHT.getValue(4144);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 4144
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withUTC();
      assertNotNull(ethiopicChronology1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      
      LocalTime localTime0 = new LocalTime((Chronology) ethiopicChronology1);
      assertNotNull(localTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, localTime0.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      
      LocalTime localTime1 = localTime_Property0.roundFloorCopy();
      assertNotNull(localTime1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = LocalTime.fromMillisOfDay((long) 1, (Chronology) ethiopicChronology0);
      assertNotNull(localTime2);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime2.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime localTime3 = localTime1.MIDNIGHT.withSecondOfMinute(1);
      assertNotNull(localTime3);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime2);
      
      LocalTime localTime4 = localTime2.minusMillis(1);
      assertNotNull(localTime4);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime4.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      
      DateTimeUtils.setCurrentMillisSystem();
      String string0 = "Field must not be null";
      LocalTime localTime5 = localTime1.withMillisOfSecond(1);
      assertNotNull(localTime5);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime4));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime5.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime4);
      
      LocalTime.Property localTime_Property1 = localTime1.millisOfSecond();
      assertNotNull(localTime_Property1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      // Undeclared exception!
      try { 
        localTime5.plusHours((-2147483580));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-480);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-5094), (-480), (-480));
      assertNotNull(mockGregorianCalendar0);
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-224225625600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=5137,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=251,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = LocalTime.fromMillisOfDay((-4116L));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime1.size());
      assertNotSame(localTime1, localTime0);
      
      boolean boolean1 = localTime1.MIDNIGHT.isEqual(localTime0);
      assertTrue(boolean1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-224225625600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=5137,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=251,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      long long0 = localTime0.getLocalMillis();
      assertEquals(0L, long0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-224225625600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=5137,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=251,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      
      int int1 = localTime0.indexOf((DateTimeFieldType) null);
      assertEquals((-1), int1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(int1 == int0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-224225625600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=5137,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=251,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      
      int int2 = mockGregorianCalendar0.getWeekYear();
      assertEquals((-5136), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-224225625600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=5137,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=251,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      // Undeclared exception!
      try { 
        localTime0.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1745, 1745, 1745, 1745, (-2147483647), 1745);
      assertNotNull(mockDate0);
      
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      assertNotNull(localTime0);
      assertEquals("Wed May 29 15:22:05 GMT 289", mockDate0.toString());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusMillis(1745);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("Wed May 29 15:22:05 GMT 289", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withUTC();
      assertNotNull(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      
      BuddhistChronology buddhistChronology2 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology2);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology2, buddhistChronology0);
      assertSame(buddhistChronology2, buddhistChronology1);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)buddhistChronology2.getZone();
      assertNotNull(uTCDateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertSame(buddhistChronology2, buddhistChronology0);
      assertSame(buddhistChronology2, buddhistChronology1);
      
      DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals("Wed May 29 15:22:05 GMT 289", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392391325000L, dateTime0.getMillis());
      assertNotSame(localTime0, localTime1);
      assertSame(buddhistChronology2, buddhistChronology0);
      assertSame(buddhistChronology2, buddhistChronology1);
      
      LocalTime localTime2 = LocalTime.now((Chronology) buddhistChronology1);
      assertNotNull(localTime2);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime2.size());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertSame(buddhistChronology1, buddhistChronology2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime localTime3 = localTime2.MIDNIGHT.minusHours(1745);
      assertNotNull(localTime3);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertSame(buddhistChronology1, buddhistChronology2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      
      long long0 = MockDate.UTC((-2147483647), 1745, (-2147483050), 2147483612, 2147483612, 1745);
      assertEquals(5839865991675871464L, long0);
      
      String string0 = buddhistChronology0.toString();
      assertNotNull(string0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("BuddhistChronology[UTC]", string0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LocalTime localTime4 = localTime0.minusHours(2147483612);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals("Wed May 29 15:22:05 GMT 289", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      
      int int0 = localTime4.getMinuteOfHour();
      assertEquals(22, int0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals("Wed May 29 15:22:05 GMT 289", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      
      LocalTime localTime5 = localTime4.withMillisOfDay(1745);
      assertNotNull(localTime5);
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime5.size());
      assertEquals("Wed May 29 15:22:05 GMT 289", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      
      int int1 = localTime5.size();
      assertEquals(4, int1);
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(int1 == int0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime4.equals((Object)localTime5));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime5.size());
      assertEquals("Wed May 29 15:22:05 GMT 289", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      
      String string1 = localTime0.toString();
      assertNotNull(string1);
      assertEquals("15:22:05.000", string1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Wed May 29 15:22:05 GMT 289", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime5);
      
      DateTime dateTime1 = localTime0.toDateTimeToday();
      assertNotNull(dateTime1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime5));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertEquals("Wed May 29 15:22:05 GMT 289", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(1392391325000L, dateTime1.getMillis());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime5);
      assertNotSame(dateTime1, dateTime0);
      
      // Undeclared exception!
      try { 
        localTime2.minusHours(2147483612);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(4319L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMillisOfSecond(11);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime1.plusMillis(11);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      LocalTime localTime3 = localTime2.withHourOfDay(11);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      LocalTime localTime0 = new LocalTime((Chronology) iSOChronology0);
      assertNotNull(localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      int int0 = 1553;
      // Undeclared exception!
      try { 
        localTime0.withSecondOfMinute(1553);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1553 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withZone(dateTimeZone0);
      assertNotNull(ethiopicChronology1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L, (Chronology) ethiopicChronology1);
      assertNotNull(localTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      
      DateTimeField dateTimeField0 = StrictDateTimeField.getInstance((DateTimeField) null);
      assertNull(dateTimeField0);
      
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime0, (DateTimeField) null);
      assertNotNull(localTime_Property0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localTime_Property0.roundFloorCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, uTCDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DateTimeZone dateTimeZone0 = zonedChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      
      UTCDateTimeZone uTCDateTimeZone1 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone1);
      assertTrue(uTCDateTimeZone1.equals((Object)dateTimeZone0));
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertTrue(uTCDateTimeZone1.isFixed());
      
      TimeZone timeZone0 = uTCDateTimeZone1.toTimeZone();
      assertNotNull(timeZone0);
      assertTrue(uTCDateTimeZone1.equals((Object)dateTimeZone0));
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertTrue(uTCDateTimeZone1.isFixed());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("UTC", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      assertNotSame(uTCDateTimeZone1, dateTimeZone0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone1);
      assertTrue(uTCDateTimeZone1.equals((Object)dateTimeZone0));
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertTrue(dateTimeZone1.equals((Object)uTCDateTimeZone1));
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertTrue(uTCDateTimeZone1.isFixed());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("UTC", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      assertNotSame(uTCDateTimeZone1, dateTimeZone1);
      assertNotSame(uTCDateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeZone1, uTCDateTimeZone1);
      assertSame(dateTimeZone1, uTCDateTimeZone0);
      
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(buddhistChronology1, buddhistChronology0);
      
      long long0 = dateTimeZone0.getMillisKeepLocal(uTCDateTimeZone0, (-987L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-987L), long0);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      
      long long1 = dateTimeZone0.previousTransition(988L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(988L, long1);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(long1 == long0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      
      LocalTime localTime0 = new LocalTime((Chronology) iSOChronology0);
      assertNotNull(localTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.joda.time.LocalTime");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string0 = localTime0.toString();
      assertNotNull(string0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("20:21:21.320", string0);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      String string1 = uTCDateTimeZone0.getName((long) 1, (Locale) null);
      assertNotNull(string1);
      assertEquals("Coordinated Universal Time", string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      
      LocalTime localTime1 = localTime0.plusMinutes(1);
      assertNotNull(localTime1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime1.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(localTime1, localTime0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      assertNotSame(localTime0, localTime1);
      
      LocalTime localTime2 = localTime0.withFieldAdded(durationFieldType0, 0);
      assertNotNull(localTime2);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(4, localTime2.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime2, localTime0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      
      LocalTime.Property localTime_Property0 = localTime1.property(dateTimeFieldType0);
      assertNotNull(localTime_Property0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime1.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      
      LocalTime localTime3 = localTime0.plusMillis(0);
      assertNotNull(localTime3);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime0.size());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      assertSame(localTime3, localTime0);
      assertSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertSame(localTime0, localTime3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = 173;
      LocalTime localTime1 = localTime0.withMillisOfDay(173);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 12, (-2434), (-2434), 173);
      assertNotNull(mockGregorianCalendar0);
      
      LocalTime localTime2 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime2);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61976214420000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=6,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=21,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=53,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      // Undeclared exception!
      try { 
        localTime1.MIDNIGHT.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1308L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = 3;
      LocalTime localTime1 = localTime0.minusHours(3);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)dateTimeFieldType0.getField((Chronology) null);
      assertNotNull(preciseDateTimeField0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertFalse(preciseDateTimeField0.isLenient());
      assertEquals("secondOfDay", preciseDateTimeField0.getName());
      assertEquals(86399, preciseDateTimeField0.getMaximumValue());
      assertEquals(86400, preciseDateTimeField0.getRange());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(1000L, preciseDateTimeField0.getUnitMillis());
      assertTrue(preciseDateTimeField0.isSupported());
      
      LocalTime localTime2 = localTime1.withField(dateTimeFieldType0, 3);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      LocalTime localTime3 = localTime2.withFields(localTime1);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime0));
      assertTrue(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime2);
      
      PreciseDateTimeField preciseDateTimeField1 = (PreciseDateTimeField)localTime2.MIDNIGHT.getField(int0);
      assertNotNull(preciseDateTimeField1);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime1.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(preciseDateTimeField1.equals((Object)preciseDateTimeField0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(4, localTime2.size());
      assertEquals(0, preciseDateTimeField1.getMinimumValue());
      assertEquals("millisOfSecond", preciseDateTimeField1.getName());
      assertEquals(1000, preciseDateTimeField1.getRange());
      assertTrue(preciseDateTimeField1.isSupported());
      assertEquals(999, preciseDateTimeField1.getMaximumValue());
      assertFalse(preciseDateTimeField1.isLenient());
      assertEquals(1L, preciseDateTimeField1.getUnitMillis());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(preciseDateTimeField1, preciseDateTimeField0);
      
      LocalTime localTime4 = localTime1.MIDNIGHT.plusSeconds(int0);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime1.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("secondOfMinute", dateTimeFieldType1.toString());
      assertEquals("secondOfMinute", dateTimeFieldType1.getName());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      boolean boolean0 = localTime1.isSupported(dateTimeFieldType1);
      assertTrue(boolean0);
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime3));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("secondOfMinute", dateTimeFieldType1.toString());
      assertEquals("secondOfMinute", dateTimeFieldType1.getName());
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      int int1 = 44;
      LocalTime localTime5 = localTime2.MIDNIGHT.withField(dateTimeFieldType0, int1);
      assertNotNull(localTime5);
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime3));
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(int1 == int0);
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime5.size());
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime0);
      
      String string0 = localTime5.MIDNIGHT.toString();
      assertNotNull(string0);
      assertEquals("00:00:00.000", string0);
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime3));
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime5));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(int1 == int0);
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime5.size());
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime0);
      
      LocalTime localTime6 = localTime4.plusMinutes(int1);
      assertNotNull(localTime6);
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(int0 == int1);
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime5));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(int1 == int0);
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime6.size());
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime6);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime2);
      
      int int2 = 28;
      LocalTime localTime7 = localTime4.minusHours(int2);
      assertNotNull(localTime7);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime7.equals((Object)localTime0));
      assertFalse(localTime7.equals((Object)localTime3));
      assertFalse(localTime7.equals((Object)localTime6));
      assertFalse(localTime7.equals((Object)localTime4));
      assertFalse(localTime7.equals((Object)localTime1));
      assertFalse(localTime7.equals((Object)localTime5));
      assertFalse(localTime7.equals((Object)localTime2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime6));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime4.equals((Object)localTime5));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime6));
      assertFalse(localTime4.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime7.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime7);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime7, localTime0);
      assertNotSame(localTime7, localTime3);
      assertNotSame(localTime7, localTime6);
      assertNotSame(localTime7, localTime4);
      assertNotSame(localTime7, localTime1);
      assertNotSame(localTime7, localTime5);
      assertNotSame(localTime7, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime7);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime4, localTime7);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime6);
      assertNotSame(localTime4, localTime0);
      
      int int3 = localTime3.getMinuteOfHour();
      assertEquals(0, int3);
      assertFalse(localTime0.equals((Object)localTime7));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime6));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime7));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime6));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime5));
      assertFalse(localTime2.equals((Object)localTime7));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime6));
      assertFalse(localTime3.equals((Object)localTime0));
      assertTrue(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime7));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime7);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime7);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime6);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime7);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime3, localTime6);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime7);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      long long0 = localTime_Property0.getMillis();
      assertEquals(73281320L, long0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusMillis((-4381));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(48L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      String string0 = localTime0.toString();
      assertNotNull(string0);
      assertEquals("00:00:00.048", string0);
      assertEquals(4, localTime0.size());
      
      Days days0 = Days.SEVEN;
      assertNotNull(days0);
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      
      Minutes minutes0 = days0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, minutes0.size());
      assertEquals(10080, minutes0.getMinutes());
      
      LocalTime localTime1 = localTime0.withPeriodAdded(minutes0, 6);
      assertNotNull(localTime1);
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, minutes0.size());
      assertEquals(10080, minutes0.getMinutes());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime1.withLocalMillis((-1730964L));
      assertNotNull(localTime2);
      assertTrue(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, minutes0.size());
      assertEquals(10080, minutes0.getMinutes());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      long long0 = new Integer(6);
      assertEquals(6, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate(0L, dateTimeZone0);
      assertNotNull(localDate0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      Date date0 = localDate0.toDate();
      assertNotNull(date0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      LocalTime localTime0 = LocalTime.fromDateFields(date0);
      assertNotNull(localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      LocalTime localTime0 = new LocalTime((Object) null, uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      LocalTime localTime1 = localTime0.withField(dateTimeFieldType0, 5631);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      long long0 = 140100000L;
      LocalTime localTime2 = localTime1.withLocalMillis(long0);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      int int0 = (-495);
      // Undeclared exception!
      try { 
        localTime2.withHourOfDay(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -495 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(4701L);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(localDate0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusSeconds((-2133));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime1.millisOfSecond();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime_Property0.addWrapFieldToCopy((-2133));
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      Period period0 = new Period((long) (-2133));
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      LocalTime localTime3 = localTime2.minus(hours0);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      
      int int0 = localTime2.compareTo((ReadablePartial) localTime0);
      assertEquals((-1), int0);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime localTime4 = localTime1.plusMinutes(292272992);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withUTC();
      assertNotNull(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone((String) null);
      assertNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology2 = (BuddhistChronology)buddhistChronology0.withZone((DateTimeZone) null);
      assertNotNull(buddhistChronology2);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology2, buddhistChronology1);
      assertSame(buddhistChronology2, buddhistChronology0);
      
      // Undeclared exception!
      try { 
        localTime0.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-337L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = 2;
      LocalTime localTime1 = LocalTime.fromMillisOfDay((long) 2);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime1.size());
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime0.minusHours((-2434));
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      int int1 = localTime2.MIDNIGHT.getHourOfDay();
      assertEquals(0, int1);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(int1 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      boolean boolean0 = localTime2.MIDNIGHT.equals(localTime1);
      assertFalse(boolean0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      int int2 = localTime2.MIDNIGHT.getValue(2);
      assertEquals(0, int2);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime localTime3 = LocalTime.now();
      assertNotNull(localTime3);
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime3.size());
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        LocalTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      LocalTime localTime0 = new LocalTime((Chronology) islamicChronology0);
      assertNotNull(localTime0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      
      DateTimeField dateTimeField0 = localTime0.getField(1, (Chronology) islamicChronology0);
      assertNotNull(dateTimeField0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      
      boolean boolean0 = localTime0.equals(dateTimeField0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.getHourOfDay();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(20, int0);
      assertEquals(4, localTime0.size());
      
      Weeks weeks0 = Weeks.THREE;
      assertNotNull(weeks0);
      assertEquals(3, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      
      LocalTime localTime1 = localTime0.withPeriodAdded(weeks0, 1);
      assertNotNull(localTime1);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(3, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime0.plusMillis(810);
      assertNotNull(localTime2);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      assertNotNull(localTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider(uTCProvider0);
      LocalTime localTime1 = localTime0.plusMinutes(1);
      assertNotNull(localTime1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime1.minusMinutes(0);
      assertNotNull(localTime2);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.getValue((-405));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -405
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      assertNotNull(localTime0);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      assertNotNull(localTime_Property0);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      
      LocalTime localTime1 = localTime_Property0.roundHalfFloorCopy();
      assertNotNull(localTime1);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime0.plusMillis(1);
      assertNotNull(localTime2);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertNotSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      DateTime dateTime0 = localTime2.toDateTimeToday();
      assertNotNull(dateTime0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(1392409281321L, dateTime0.getMillis());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertNotSame(localTime0, localTime2);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(26607895200000L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withHourOfDay(4);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime1.plusHours(4);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime.Property localTime_Property0 = localTime1.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime3 = localTime_Property0.getLocalTime();
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime3, localTime2);
      assertSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 0;
      LocalTime localTime0 = new LocalTime(0, 0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMinuteOfHour(11);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime1.MIDNIGHT.millisOfDay();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime_Property0.addNoWrapToCopy(11);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime.Property localTime_Property1 = localTime1.MIDNIGHT.hourOfDay();
      assertNotNull(localTime_Property1);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      int int0 = localTime1.getMinuteOfHour();
      assertEquals(11, int0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      
      LocalTime localTime3 = localTime0.minusHours(11);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      
      LocalTime localTime4 = localTime3.plusHours(11);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertTrue(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      boolean boolean0 = localTime3.equals(localTime_Property0);
      assertFalse(boolean0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      
      LocalTime localTime5 = localTime4.withFields(localTime2);
      assertNotNull(localTime5);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime_Property0.equals((Object)localTime_Property1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime3));
      assertTrue(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime4));
      assertTrue(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime3));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime5.size());
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime_Property0, localTime_Property1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime3);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      LocalTime localTime6 = LocalTime.fromMillisOfDay(1089L);
      assertNotNull(localTime6);
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime0));
      assertEquals(4, localTime6.size());
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime0);
      
      Period period1 = period0.minusWeeks((-2146601723));
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      Period period2 = period1.withHours((-1584));
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      
      // Undeclared exception!
      try { 
        localTime3.MIDNIGHT.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyear' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      LimitChronology limitChronology0 = LimitChronology.getInstance(gregorianChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      assertNotNull(limitChronology0);
      
      Chronology chronology0 = limitChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      
      LimitChronology limitChronology1 = LimitChronology.getInstance(limitChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      assertNotNull(limitChronology1);
      assertFalse(limitChronology1.equals((Object)chronology0));
      assertFalse(limitChronology1.equals((Object)limitChronology0));
      assertNotSame(limitChronology0, limitChronology1);
      assertSame(limitChronology0, chronology0);
      assertNotSame(limitChronology1, chronology0);
      assertNotSame(limitChronology1, limitChronology0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LocalTime localTime0 = LocalTime.now(chronology0);
      assertNotNull(localTime0);
      assertFalse(limitChronology0.equals((Object)limitChronology1));
      assertFalse(chronology0.equals((Object)limitChronology1));
      assertEquals(4, localTime0.size());
      assertNotSame(limitChronology0, limitChronology1);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      assertNotSame(chronology0, limitChronology1);
      
      int int0 = localTime0.getMillisOfDay();
      assertEquals(73281320, int0);
      assertFalse(limitChronology0.equals((Object)limitChronology1));
      assertFalse(chronology0.equals((Object)limitChronology1));
      assertEquals(4, localTime0.size());
      assertNotSame(limitChronology0, limitChronology1);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      assertNotSame(chronology0, limitChronology1);
      
      LocalTime localTime1 = localTime0.minusMillis(4);
      assertNotNull(localTime1);
      assertFalse(limitChronology0.equals((Object)limitChronology1));
      assertFalse(chronology0.equals((Object)limitChronology1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(limitChronology0, limitChronology1);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      assertNotSame(chronology0, limitChronology1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime0);
      assertFalse(limitChronology0.equals((Object)limitChronology1));
      assertFalse(chronology0.equals((Object)limitChronology1));
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotSame(limitChronology0, limitChronology1);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      assertNotSame(chronology0, limitChronology1);
      assertNotSame(localTime0, localTime1);
      
      LocalTime localTime2 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime2);
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      boolean boolean1 = localTime2.isSupported((DateTimeFieldType) null);
      assertFalse(boolean1);
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertTrue(boolean1 == boolean0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      assertNotNull(localTime_Property0);
      assertFalse(limitChronology0.equals((Object)limitChronology1));
      assertFalse(chronology0.equals((Object)limitChronology1));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertNotSame(limitChronology0, limitChronology1);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      assertNotSame(chronology0, limitChronology1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMillisOfSecond(30);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      String string0 = localTime1.MIDNIGHT.toString((String) null);
      assertNotNull(string0);
      assertEquals("00:00:00.000", string0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      int int0 = localTime1.compareTo((ReadablePartial) localTime0);
      assertEquals((-1), int0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      
      LocalTime localTime2 = localTime_Property0.roundHalfFloorCopy();
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      // Undeclared exception!
      try { 
        localTime2.getField(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 30
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(485L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      Partial partial0 = new Partial(ethiopicChronology0);
      assertNotNull(partial0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0, partial0.size());
      
      LocalTime localTime1 = localTime0.withFields(partial0);
      assertNotNull(localTime1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, localTime0.size());
      assertEquals(0, partial0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      int int0 = localTime0.MIDNIGHT.getMillisOfDay();
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
      assertSame(localTime0, localTime1);
      
      LocalTime localTime2 = localTime0.MIDNIGHT.minusMinutes((-2340));
      assertNotNull(localTime2);
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) null);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(partial0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusMinutes(0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      boolean boolean0 = localTime1.equals(localTime0);
      assertTrue(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      assertSame(localTime0, localTime1);
      
      LocalTime localTime2 = localTime_Property0.getLocalTime();
      assertNotNull(localTime2);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      
      LocalTime localTime3 = localTime2.MIDNIGHT.withLocalMillis(0);
      assertNotNull(localTime3);
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      
      localTime2.MIDNIGHT.hashCode();
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      
      boolean boolean1 = localTime2.isBefore(localTime1);
      assertFalse(boolean1);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime2);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      
      int int0 = localTime0.getMillisOfSecond();
      assertEquals(320, int0);
      assertFalse(localTime0.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertSame(localTime0, localTime2);
      
      LocalTime localTime4 = localTime3.MIDNIGHT.withMillisOfDay(116);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime2);
      
      int int1 = localTime4.MIDNIGHT.getValue(0);
      assertEquals(0, int1);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(int1 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime2);
      
      int int2 = localTime2.hashCode();
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      
      int int3 = localTime4.MIDNIGHT.getMinuteOfHour();
      assertEquals(0, int3);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime4.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime2);
      
      int int4 = localTime3.getMinuteOfHour();
      assertEquals(0, int4);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime3);
      assertSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime2);
      
      LocalTime localTime5 = localTime0.plusHours(0);
      assertNotNull(localTime5);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime5.size());
      assertSame(localTime0, localTime5);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertSame(localTime0, localTime2);
      assertSame(localTime5, localTime0);
      assertSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime3);
      assertSame(localTime5, localTime2);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-254));
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-254), dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      
      Locale locale1 = new Locale("/WQkcP_s+JTx^8|s");
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("/wqkcp_s+jtx^8|s", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("/wqkcp_s+jtx^8|s", locale1.toString());
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string0);
      assertEquals("English", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("/wqkcp_s+jtx^8|s", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("/wqkcp_s+jtx^8|s", locale1.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      Integer integer0 = new Integer((-254));
      assertNotNull(integer0);
      assertEquals((-254), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int4));
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-254), dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-254), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-254), dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(locale0, locale1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      
      LocalTime localTime6 = localTime0.plusMillis(0);
      assertNotNull(localTime6);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime4));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime6.size());
      assertSame(localTime0, localTime5);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertSame(localTime0, localTime6);
      assertSame(localTime0, localTime2);
      assertSame(localTime6, localTime2);
      assertSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime3);
      assertSame(localTime6, localTime0);
      assertSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime4);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1742), "/WQkcP_s+JTx^8|s", 0, (-1695), 0, 1376, 0, 1627, 0, 1634, 2153);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day -1695
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(71148320L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusMinutes((-2147483639));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      // Undeclared exception!
      try { 
        localTime1.withField((DateTimeFieldType) null, (-2147483639));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 23;
      LocalTime localTime0 = new LocalTime(23, 23);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusHours(23);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertNotNull(islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1000L, (Chronology) islamicChronology1);
      assertNotNull(localTime0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, localTime0.size());
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded(durationFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyears' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      DateTimeUtils.setCurrentMillisOffset(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, (-4895));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = LocalTime.fromMillisOfDay(0L);
      assertNotNull(localTime2);
      assertTrue(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime2.size());
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime.Property localTime_Property0 = localTime2.MIDNIGHT.millisOfSecond();
      assertNotNull(localTime_Property0);
      assertTrue(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime2.size());
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      boolean boolean1 = localTime2.MIDNIGHT.isEqual(localTime0);
      assertTrue(boolean1);
      assertTrue(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(boolean1 == boolean0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      LocalTime localTime3 = localTime2.MIDNIGHT.minus((ReadablePeriod) null);
      assertNotNull(localTime3);
      assertTrue(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(localTime3.equals((Object)localTime0));
      assertTrue(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      
      LocalTime localTime4 = localTime2.MIDNIGHT.plusMillis(4144);
      assertNotNull(localTime4);
      assertTrue(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      
      int int0 = localTime0.getMinuteOfHour();
      assertEquals(0, int0);
      assertTrue(localTime0.equals((Object)localTime3));
      assertTrue(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime4));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      
      int int1 = localTime0.getMillisOfSecond();
      assertEquals(0, int1);
      assertTrue(localTime0.equals((Object)localTime3));
      assertTrue(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime4));
      assertTrue(int1 == int0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      
      int int2 = localTime0.getSecondOfMinute();
      assertEquals(0, int2);
      assertTrue(localTime0.equals((Object)localTime3));
      assertTrue(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime4));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Chronology chronology0 = gJChronology0.withZone(uTCDateTimeZone0);
      assertNotNull(chronology0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      
      LocalTime localTime5 = LocalTime.now(chronology0);
      assertNotNull(localTime5);
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime3));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime5.size());
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime3);
      
      LocalTime localTime6 = localTime3.withFields(localTime1);
      assertNotNull(localTime6);
      assertTrue(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime5));
      assertTrue(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime4));
      assertTrue(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime5));
      assertTrue(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime3));
      assertTrue(localTime3.equals((Object)localTime0));
      assertTrue(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime6.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime2, localTime6);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime6);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      
      LocalTime localTime7 = localTime6.plus((ReadablePeriod) null);
      assertNotNull(localTime7);
      assertTrue(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime6));
      assertTrue(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime4));
      assertTrue(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime7.equals((Object)localTime5));
      assertFalse(localTime7.equals((Object)localTime0));
      assertFalse(localTime7.equals((Object)localTime2));
      assertFalse(localTime7.equals((Object)localTime4));
      assertFalse(localTime7.equals((Object)localTime3));
      assertTrue(localTime7.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime6));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime6));
      assertFalse(localTime2.equals((Object)localTime5));
      assertTrue(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime3));
      assertTrue(localTime3.equals((Object)localTime0));
      assertTrue(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime6));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime6.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(4, localTime7.size());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime7);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime0);
      assertSame(localTime6, localTime7);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime7, localTime5);
      assertNotSame(localTime7, localTime1);
      assertNotSame(localTime7, localTime0);
      assertNotSame(localTime7, localTime2);
      assertNotSame(localTime7, localTime4);
      assertNotSame(localTime7, localTime3);
      assertSame(localTime7, localTime6);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime7);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime2, localTime6);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime7);
      assertNotSame(localTime3, localTime7);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime6);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      
      LocalTime localTime8 = localTime4.plus((ReadablePeriod) null);
      assertNotNull(localTime8);
      assertFalse(localTime8.equals((Object)localTime2));
      assertFalse(localTime8.equals((Object)localTime6));
      assertFalse(localTime8.equals((Object)localTime0));
      assertFalse(localTime8.equals((Object)localTime3));
      assertFalse(localTime8.equals((Object)localTime7));
      assertFalse(localTime8.equals((Object)localTime5));
      assertFalse(localTime8.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime6));
      assertFalse(localTime2.equals((Object)localTime5));
      assertTrue(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime7));
      assertFalse(localTime4.equals((Object)localTime5));
      assertFalse(localTime4.equals((Object)localTime6));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime7));
      assertEquals(4, localTime8.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime8, localTime2);
      assertNotSame(localTime8, localTime6);
      assertNotSame(localTime8, localTime0);
      assertNotSame(localTime8, localTime3);
      assertSame(localTime8, localTime4);
      assertNotSame(localTime8, localTime7);
      assertNotSame(localTime8, localTime5);
      assertNotSame(localTime8, localTime1);
      assertNotSame(localTime2, localTime6);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime8);
      assertNotSame(localTime2, localTime7);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime6);
      assertNotSame(localTime4, localTime2);
      assertSame(localTime4, localTime8);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime7);
      
      boolean boolean2 = localTime2.isSupported(dateTimeFieldType0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(localTime2.equals((Object)localTime6));
      assertFalse(localTime2.equals((Object)localTime5));
      assertTrue(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime8));
      assertFalse(localTime2.equals((Object)localTime7));
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime2, localTime6);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime8);
      assertNotSame(localTime2, localTime7);
      
      LocalTime localTime9 = localTime5.plusMillis(0);
      assertNotNull(localTime9);
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime6));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime7));
      assertFalse(localTime5.equals((Object)localTime8));
      assertFalse(localTime9.equals((Object)localTime1));
      assertFalse(localTime9.equals((Object)localTime0));
      assertFalse(localTime9.equals((Object)localTime2));
      assertFalse(localTime9.equals((Object)localTime3));
      assertFalse(localTime9.equals((Object)localTime8));
      assertFalse(localTime9.equals((Object)localTime7));
      assertFalse(localTime9.equals((Object)localTime4));
      assertFalse(localTime9.equals((Object)localTime6));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime5.size());
      assertEquals(4, localTime9.size());
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime6);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime7);
      assertNotSame(localTime5, localTime8);
      assertSame(localTime5, localTime9);
      assertNotSame(localTime9, localTime1);
      assertNotSame(localTime9, localTime0);
      assertNotSame(localTime9, localTime2);
      assertNotSame(localTime9, localTime3);
      assertSame(localTime9, localTime5);
      assertNotSame(localTime9, localTime8);
      assertNotSame(localTime9, localTime7);
      assertNotSame(localTime9, localTime4);
      assertNotSame(localTime9, localTime6);
      
      LocalTime localTime10 = LocalTime.fromMillisOfDay(1325L, (Chronology) gJChronology0);
      assertNotNull(localTime10);
      assertFalse(localTime10.equals((Object)localTime3));
      assertFalse(localTime10.equals((Object)localTime5));
      assertFalse(localTime10.equals((Object)localTime6));
      assertFalse(localTime10.equals((Object)localTime8));
      assertFalse(localTime10.equals((Object)localTime0));
      assertFalse(localTime10.equals((Object)localTime7));
      assertFalse(localTime10.equals((Object)localTime2));
      assertFalse(localTime10.equals((Object)localTime9));
      assertFalse(localTime10.equals((Object)localTime4));
      assertFalse(localTime10.equals((Object)localTime1));
      assertEquals(4, localTime10.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime10, localTime3);
      assertNotSame(localTime10, localTime5);
      assertNotSame(localTime10, localTime6);
      assertNotSame(localTime10, localTime8);
      assertNotSame(localTime10, localTime0);
      assertNotSame(localTime10, localTime7);
      assertNotSame(localTime10, localTime2);
      assertNotSame(localTime10, localTime9);
      assertNotSame(localTime10, localTime4);
      assertNotSame(localTime10, localTime1);
      
      int int3 = localTime10.getMillisOfDay();
      assertEquals(1325, int3);
      assertFalse(localTime10.equals((Object)localTime3));
      assertFalse(localTime10.equals((Object)localTime5));
      assertFalse(localTime10.equals((Object)localTime6));
      assertFalse(localTime10.equals((Object)localTime8));
      assertFalse(localTime10.equals((Object)localTime0));
      assertFalse(localTime10.equals((Object)localTime7));
      assertFalse(localTime10.equals((Object)localTime2));
      assertFalse(localTime10.equals((Object)localTime9));
      assertFalse(localTime10.equals((Object)localTime4));
      assertFalse(localTime10.equals((Object)localTime1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(4, localTime10.size());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime10, localTime3);
      assertNotSame(localTime10, localTime5);
      assertNotSame(localTime10, localTime6);
      assertNotSame(localTime10, localTime8);
      assertNotSame(localTime10, localTime0);
      assertNotSame(localTime10, localTime7);
      assertNotSame(localTime10, localTime2);
      assertNotSame(localTime10, localTime9);
      assertNotSame(localTime10, localTime4);
      assertNotSame(localTime10, localTime1);
      
      DateTime dateTime0 = localTime10.toDateTimeToday();
      assertNotNull(dateTime0);
      assertFalse(localTime10.equals((Object)localTime3));
      assertFalse(localTime10.equals((Object)localTime5));
      assertFalse(localTime10.equals((Object)localTime6));
      assertFalse(localTime10.equals((Object)localTime8));
      assertFalse(localTime10.equals((Object)localTime0));
      assertFalse(localTime10.equals((Object)localTime7));
      assertFalse(localTime10.equals((Object)localTime2));
      assertFalse(localTime10.equals((Object)localTime9));
      assertFalse(localTime10.equals((Object)localTime4));
      assertFalse(localTime10.equals((Object)localTime1));
      assertEquals(4, localTime10.size());
      assertEquals(1392336001325L, dateTime0.getMillis());
      assertSame(gJChronology0, chronology0);
      assertNotSame(localTime10, localTime3);
      assertNotSame(localTime10, localTime5);
      assertNotSame(localTime10, localTime6);
      assertNotSame(localTime10, localTime8);
      assertNotSame(localTime10, localTime0);
      assertNotSame(localTime10, localTime7);
      assertNotSame(localTime10, localTime2);
      assertNotSame(localTime10, localTime9);
      assertNotSame(localTime10, localTime4);
      assertNotSame(localTime10, localTime1);
      
      int int4 = localTime5.compareTo((ReadablePartial) localTime1);
      assertEquals(1, int4);
      assertTrue(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime7));
      assertFalse(localTime0.equals((Object)localTime8));
      assertFalse(localTime0.equals((Object)localTime10));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime6));
      assertTrue(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime9));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime6));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime7));
      assertFalse(localTime5.equals((Object)localTime8));
      assertFalse(localTime5.equals((Object)localTime10));
      assertFalse(localTime1.equals((Object)localTime10));
      assertTrue(localTime1.equals((Object)localTime7));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime9));
      assertFalse(localTime1.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime6));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime8));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime5.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(4, localTime1.size());
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotSame(localTime0, localTime7);
      assertNotSame(localTime0, localTime8);
      assertNotSame(localTime0, localTime10);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime9);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime6);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime7);
      assertNotSame(localTime5, localTime8);
      assertNotSame(localTime5, localTime10);
      assertSame(localTime5, localTime9);
      assertNotSame(localTime1, localTime10);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime9);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime7);
      assertNotSame(localTime1, localTime8);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime3);
      
      LocalTime localTime11 = localTime3.plusSeconds(0);
      assertNotNull(localTime11);
      assertFalse(localTime2.equals((Object)localTime6));
      assertFalse(localTime2.equals((Object)localTime5));
      assertTrue(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime9));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime8));
      assertFalse(localTime2.equals((Object)localTime7));
      assertFalse(localTime2.equals((Object)localTime10));
      assertTrue(localTime3.equals((Object)localTime0));
      assertTrue(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime7));
      assertFalse(localTime3.equals((Object)localTime8));
      assertFalse(localTime3.equals((Object)localTime5));
      assertFalse(localTime3.equals((Object)localTime6));
      assertFalse(localTime3.equals((Object)localTime10));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime9));
      assertFalse(localTime11.equals((Object)localTime9));
      assertFalse(localTime11.equals((Object)localTime4));
      assertFalse(localTime11.equals((Object)localTime1));
      assertTrue(localTime11.equals((Object)localTime0));
      assertFalse(localTime11.equals((Object)localTime5));
      assertFalse(localTime11.equals((Object)localTime6));
      assertTrue(localTime11.equals((Object)localTime2));
      assertFalse(localTime11.equals((Object)localTime10));
      assertFalse(localTime11.equals((Object)localTime8));
      assertFalse(localTime11.equals((Object)localTime7));
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime11.size());
      assertNotSame(localTime2, localTime6);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime9);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime8);
      assertNotSame(localTime2, localTime7);
      assertNotSame(localTime2, localTime11);
      assertNotSame(localTime2, localTime10);
      assertNotSame(localTime3, localTime7);
      assertNotSame(localTime3, localTime8);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime6);
      assertNotSame(localTime3, localTime10);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      assertSame(localTime3, localTime11);
      assertNotSame(localTime3, localTime9);
      assertNotSame(localTime11, localTime9);
      assertNotSame(localTime11, localTime4);
      assertNotSame(localTime11, localTime1);
      assertNotSame(localTime11, localTime5);
      assertNotSame(localTime11, localTime6);
      assertNotSame(localTime11, localTime10);
      assertNotSame(localTime11, localTime8);
      assertSame(localTime11, localTime3);
      assertNotSame(localTime11, localTime2);
      assertNotSame(localTime11, localTime0);
      assertNotSame(localTime11, localTime7);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMillisOfDay(2);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LocalTime localTime2 = localTime1.minusMinutes(292272985);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = localTime2.MIDNIGHT.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertEquals(4, dateTimeFieldTypeArray0.length);
      
      LocalTime localTime3 = localTime2.withMillisOfDay(2);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertTrue(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      
      LocalTime localTime4 = localTime2.plusSeconds(2);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(localTime1.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime1);
      
      LocalTime localTime5 = localTime3.withHourOfDay(2);
      assertNotNull(localTime5);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime4));
      assertTrue(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime0));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime4));
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime5.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime5);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime5, localTime0);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime4);
      
      LocalTime.Property localTime_Property0 = localTime2.millisOfDay();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime5));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime4));
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      
      Chronology chronology0 = localTime_Property0.getChronology();
      assertNotNull(chronology0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime5));
      assertFalse(localTime1.equals((Object)localTime4));
      assertTrue(localTime1.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime5));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime4));
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime2, localTime5);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      
      LocalTime localTime6 = localTime0.plusSeconds(292272985);
      assertNotNull(localTime6);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime5));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime2));
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime6.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime5);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime2);
      
      // Undeclared exception!
      try { 
        LocalTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone("MG");
      assertNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-337L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = LocalTime.fromMillisOfDay((long) 2);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime1.size());
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime0.minusHours((-2434));
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      int int0 = localTime2.MIDNIGHT.getHourOfDay();
      assertEquals(0, int0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      boolean boolean0 = localTime2.MIDNIGHT.equals(localTime1);
      assertFalse(boolean0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      LocalTime localTime3 = LocalTime.now();
      assertNotNull(localTime3);
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertEquals(4, localTime3.size());
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      
      // Undeclared exception!
      try { 
        LocalTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, uTCDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DateTimeZone dateTimeZone0 = zonedChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      
      UTCDateTimeZone uTCDateTimeZone1 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone1);
      assertTrue(uTCDateTimeZone1.equals((Object)dateTimeZone0));
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertTrue(uTCDateTimeZone1.isFixed());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)uTCDateTimeZone1));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, uTCDateTimeZone1);
      assertSame(dateTimeZone1, uTCDateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertSame(buddhistChronology1, buddhistChronology0);
      
      long long0 = dateTimeZone0.getMillisKeepLocal(uTCDateTimeZone0, (-987L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-987L), long0);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      
      long long1 = dateTimeZone0.previousTransition(983L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(983L, long1);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(long1 == long0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      
      LocalTime localTime0 = new LocalTime((Chronology) iSOChronology0);
      assertNotNull(localTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.joda.time.LocalTime");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string0 = localTime0.toString();
      assertNotNull(string0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("20:21:21.320", string0);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      String string1 = uTCDateTimeZone0.getName((long) 1, (Locale) null);
      assertNotNull(string1);
      assertEquals("Coordinated Universal Time", string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      
      LocalTime localTime1 = localTime0.plusMinutes(1);
      assertNotNull(localTime1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime1.size());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(localTime0, localTime1);
      
      LocalTime localTime2 = localTime0.withFieldAdded(durationFieldType0, 0);
      assertNotNull(localTime2);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals(4, localTime2.size());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      
      LocalTime.Property localTime_Property0 = localTime1.property(dateTimeFieldType0);
      assertNotNull(localTime_Property0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime1.size());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      
      LocalTime localTime3 = localTime0.plusMillis(0);
      assertNotNull(localTime3);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(dateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime0.size());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, uTCDateTimeZone1);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(localTime3, localTime0);
      assertSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime0, localTime1);
      assertSame(localTime0, localTime3);
      assertSame(localTime0, localTime2);
      
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-5094), (-480), (-480));
      assertNotNull(mockGregorianCalendar0);
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-224225625600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=5137,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=251,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = LocalTime.fromMillisOfDay((-4116L));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime1.size());
      assertNotSame(localTime1, localTime0);
      
      boolean boolean1 = localTime1.MIDNIGHT.isEqual(localTime0);
      assertTrue(boolean1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(boolean1 == boolean0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-224225625600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=5137,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=251,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      long long0 = localTime0.getLocalMillis();
      assertEquals(0L, long0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-224225625600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=5137,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=251,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      
      LocalTime.Property localTime_Property0 = localTime1.MIDNIGHT.minuteOfHour();
      assertNotNull(localTime_Property0);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime1.size());
      assertNotSame(localTime1, localTime0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology1);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      
      LocalTime localTime2 = LocalTime.now((Chronology) ethiopicChronology1);
      assertNotNull(localTime2);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime2.size());
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      int int0 = localTime0.indexOf((DateTimeFieldType) null);
      assertEquals((-1), int0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-224225625600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=5137,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=251,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      
      int int1 = mockGregorianCalendar0.getWeekYear();
      assertEquals((-5136), int1);
      assertFalse(int1 == int0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-224225625600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=5137,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=251,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      // Undeclared exception!
      try { 
        localTime0.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime_Property0.roundHalfEvenCopy();
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      UTCDateTimeZone uTCDateTimeZone1 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone1);
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertTrue(uTCDateTimeZone1.isFixed());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      
      DateTimeZone.setDefault(uTCDateTimeZone1);
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertTrue(uTCDateTimeZone1.isFixed());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localDate0);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      String string0 = localTime_Property0.getName();
      assertNotNull(string0);
      assertEquals("secondOfMinute", string0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime1);
      
      Date date0 = localDate0.toDate();
      assertNotNull(date0);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      
      LocalTime localTime2 = LocalTime.fromDateFields(date0);
      assertNotNull(localTime2);
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
      assertEquals(4, localTime2.size());
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      localTime0.hashCode();
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      
      int int0 = localTime0.getHourOfDay();
      assertEquals(20, int0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      assertFalse(boolean0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      String string1 = localTime_Property0.getAsString();
      assertNotNull(string1);
      assertEquals("21", string1);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      
      LocalTime localTime3 = LocalTime.now((Chronology) buddhistChronology0);
      assertNotNull(localTime3);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime3.size());
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime2);
      
      DateTime dateTime0 = localTime1.toDateTimeToday((DateTimeZone) uTCDateTimeZone1);
      assertNotNull(dateTime0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertEquals(1392409281000L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertTrue(uTCDateTimeZone1.isFixed());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      
      LocalTime.Property localTime_Property1 = localTime2.millisOfDay();
      assertNotNull(localTime_Property1);
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime_Property1, localTime_Property0);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      
      LocalTime.Property localTime_Property2 = localTime0.minuteOfHour();
      assertNotNull(localTime_Property2);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime_Property2.equals((Object)localTime_Property0));
      assertFalse(localTime_Property2.equals((Object)localTime_Property1));
      assertEquals(4, localTime0.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime_Property2, localTime_Property0);
      assertNotSame(localTime_Property2, localTime_Property1);
      
      LocalTime localTime4 = localTime_Property2.roundHalfCeilingCopy();
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime_Property2.equals((Object)localTime_Property0));
      assertFalse(localTime_Property2.equals((Object)localTime_Property1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime_Property2, localTime_Property0);
      assertNotSame(localTime_Property2, localTime_Property1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime1);
      
      int int1 = localTime3.getSecondOfMinute();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(21, int1);
      assertFalse(int1 == int0);
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime4));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime3.size());
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime4);
      assertNotSame(localTime3, localTime2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        localTime2.withField(dateTimeFieldType0, 778);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = (-2133);
      LocalTime localTime1 = localTime0.plusSeconds((-2133));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime1.millisOfSecond();
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime_Property0.addWrapFieldToCopy((-2133));
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      Period period0 = new Period((long) (-2133));
      assertNotNull(period0);
      
      Period period1 = period0.plusMillis((-2133));
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      int int1 = localTime0.MIDNIGHT.compareTo((ReadablePartial) localTime2);
      assertEquals((-1), int1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(int1 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      
      Hours hours0 = period0.toStandardHours();
      assertNotNull(hours0);
      assertFalse(period0.equals((Object)period1));
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertNotSame(period0, period1);
      
      Hours hours1 = hours0.dividedBy((-2133));
      assertNotNull(hours1);
      assertFalse(period0.equals((Object)period1));
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      
      LocalTime localTime3 = localTime2.minus(hours0);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(4, localTime3.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime1);
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      
      int int2 = localTime2.compareTo((ReadablePartial) localTime0);
      assertEquals(1, int2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime1);
      
      LocalTime localTime4 = localTime1.plusMinutes(292272960);
      assertNotNull(localTime4);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime4.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime2);
      
      LocalTime localTime5 = localTime4.plusHours(1);
      assertNotNull(localTime5);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime5.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        localTime3.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withUTC();
      assertNotNull(ethiopicChronology1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      
      LocalTime localTime0 = new LocalTime((Chronology) ethiopicChronology1);
      assertNotNull(localTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      assertNotNull(localTime_Property0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, localTime0.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      
      LocalTime localTime1 = LocalTime.fromMillisOfDay((long) 1, (Chronology) ethiopicChronology0);
      assertNotNull(localTime1);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime1.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime localTime2 = localTime0.MIDNIGHT.withSecondOfMinute(1);
      assertNotNull(localTime2);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      
      LocalTime localTime3 = localTime1.minusMillis(1);
      assertNotNull(localTime3);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime3.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      
      DateTimeUtils.setCurrentMillisSystem();
      LocalTime.Property localTime_Property1 = localTime0.millisOfSecond();
      assertNotNull(localTime_Property1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime_Property1.equals((Object)localTime_Property0));
      assertEquals(4, localTime0.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime_Property1, localTime_Property0);
      
      LocalTime localTime4 = localTime0.plusHours(85);
      assertNotNull(localTime4);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      
      LocalTime.Property localTime_Property2 = localTime4.hourOfDay();
      assertNotNull(localTime_Property2);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime_Property2.equals((Object)localTime_Property0));
      assertFalse(localTime_Property2.equals((Object)localTime_Property1));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime_Property2, localTime_Property0);
      assertNotSame(localTime_Property2, localTime_Property1);
      
      Days days0 = Days.MAX_VALUE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      
      Days days1 = Days.days((-2683));
      assertNotNull(days1);
      assertFalse(days1.equals((Object)days0));
      assertEquals(1, days1.size());
      assertEquals((-2683), days1.getDays());
      assertNotSame(days1, days0);
      
      LocalTime localTime5 = localTime_Property2.withMinimumValue();
      assertNotNull(localTime5);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime_Property2.equals((Object)localTime_Property0));
      assertFalse(localTime_Property2.equals((Object)localTime_Property1));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime5.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime_Property2, localTime_Property0);
      assertNotSame(localTime_Property2, localTime_Property1);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime0);
      
      long long0 = (-2494L);
      LocalTime localTime6 = LocalTime.fromMillisOfDay((-2494L));
      assertNotNull(localTime6);
      assertFalse(localTime6.equals((Object)localTime0));
      assertFalse(localTime6.equals((Object)localTime4));
      assertFalse(localTime6.equals((Object)localTime2));
      assertFalse(localTime6.equals((Object)localTime1));
      assertFalse(localTime6.equals((Object)localTime3));
      assertFalse(localTime6.equals((Object)localTime5));
      assertEquals(4, localTime6.size());
      assertNotSame(localTime6, localTime0);
      assertNotSame(localTime6, localTime4);
      assertNotSame(localTime6, localTime2);
      assertNotSame(localTime6, localTime1);
      assertNotSame(localTime6, localTime3);
      assertNotSame(localTime6, localTime5);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      LocalTime localTime7 = localTime1.withField(dateTimeFieldType0, 11);
      assertNotNull(localTime7);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime7.equals((Object)localTime4));
      assertFalse(localTime7.equals((Object)localTime0));
      assertFalse(localTime7.equals((Object)localTime5));
      assertFalse(localTime7.equals((Object)localTime3));
      assertFalse(localTime7.equals((Object)localTime6));
      assertFalse(localTime7.equals((Object)localTime1));
      assertFalse(localTime7.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime6));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime4));
      assertFalse(localTime1.equals((Object)localTime5));
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, localTime7.size());
      assertEquals(4, localTime1.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(localTime7, localTime4);
      assertNotSame(localTime7, localTime0);
      assertNotSame(localTime7, localTime5);
      assertNotSame(localTime7, localTime3);
      assertNotSame(localTime7, localTime6);
      assertNotSame(localTime7, localTime1);
      assertNotSame(localTime7, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime6);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime5);
      assertNotSame(localTime1, localTime7);
      
      LocalTime.Property localTime_Property3 = localTime5.property(dateTimeFieldType0);
      assertNotNull(localTime_Property3);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime_Property3.equals((Object)localTime_Property2));
      assertFalse(localTime_Property3.equals((Object)localTime_Property0));
      assertFalse(localTime_Property3.equals((Object)localTime_Property1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime5));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime7));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime0.equals((Object)localTime6));
      assertFalse(localTime4.equals((Object)localTime5));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime7));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime6));
      assertFalse(localTime_Property2.equals((Object)localTime_Property0));
      assertFalse(localTime_Property2.equals((Object)localTime_Property1));
      assertFalse(localTime5.equals((Object)localTime6));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime7));
      assertFalse(localTime5.equals((Object)localTime0));
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertEquals(4, localTime5.size());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(localTime_Property3, localTime_Property2);
      assertNotSame(localTime_Property3, localTime_Property0);
      assertNotSame(localTime_Property3, localTime_Property1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime7);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime6);
      assertNotSame(localTime4, localTime5);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime7);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime6);
      assertNotSame(localTime_Property2, localTime_Property0);
      assertNotSame(localTime_Property2, localTime_Property1);
      assertNotSame(localTime_Property2, localTime_Property3);
      assertNotSame(localTime5, localTime6);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime7);
      assertNotSame(localTime5, localTime0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      try { 
        localTime7.toString("Field must not be null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Chronology chronology0 = ethiopicChronology0.withUTC();
      LocalTime localTime0 = new LocalTime(chronology0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      LocalTime localTime1 = localTime_Property0.roundFloorCopy();
      LocalTime localTime2 = LocalTime.fromMillisOfDay((long) 1, (Chronology) ethiopicChronology0);
      LocalTime localTime3 = localTime1.MIDNIGHT.withSecondOfMinute(1);
      localTime2.minusMillis(1);
      LocalTime localTime4 = localTime1.withMillisOfSecond(1);
      localTime1.millisOfSecond();
      LocalTime localTime5 = localTime4.plusHours(85);
      LocalTime.Property localTime_Property1 = localTime5.hourOfDay();
      Days days0 = Days.MAX_VALUE;
      Days.days((-2683));
      LocalTime localTime6 = localTime3.minus(days0);
      LocalTime localTime7 = localTime_Property1.withMinimumValue();
      long long0 = (-2494L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      LocalTime localTime8 = localTime6.withField(dateTimeFieldType0, 11);
      localTime7.property(dateTimeFieldType0);
      Locale locale0 = Locale.ENGLISH;
      try { 
        localTime8.toString("Field must not be null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0, 0);
      LocalTime localTime1 = localTime0.minusSeconds(0);
      DateTimeFieldType.yearOfCentury();
      LocalTime localTime2 = localTime1.plusHours(0);
      int int0 = 10000;
      MockDate mockDate0 = new MockDate(10000, 0, 2000);
      localTime1.getMinuteOfHour();
      LocalTime localTime3 = localTime2.MIDNIGHT.withSecondOfMinute(0);
      int int1 = 86400;
      DateTimeUtils.setCurrentMillisOffset(0L);
      localTime0.MIDNIGHT.plusHours(86400);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      localTime3.getLocalMillis();
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyearOfCentury' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      LocalTime localTime0 = new LocalTime((Object) null);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, (-632));
      DateTime dateTime0 = new DateTime();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      Period period1 = period0.plusMinutes((-3712));
      LocalTime localTime2 = localTime1.minus(period1);
      int int0 = localTime2.getSecondOfMinute();
      assertNotSame(localTime1, localTime0);
      assertTrue(localTime1.equals((Object)localTime0));
      assertNotSame(localTime2, localTime1);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime1 = localTime0.withMinuteOfHour(11);
      LocalTime.Property localTime_Property0 = localTime1.MIDNIGHT.millisOfDay();
      localTime0.secondOfMinute();
      LocalTime localTime2 = localTime_Property0.addNoWrapToCopy(11);
      LocalTime.Property localTime_Property1 = localTime1.millisOfDay();
      LocalTime localTime3 = localTime2.withHourOfDay(11);
      localTime_Property1.addCopy(73341320L);
      LocalTime.now();
      LocalTime localTime4 = localTime3.plusHours(11);
      localTime_Property1.isLeap();
      localTime_Property0.roundCeilingCopy();
      localTime4.withFields(localTime2);
      localTime0.equals(localTime_Property1);
      localTime_Property0.getLocalTime();
      localTime3.toString();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      localTime0.minusSeconds(1);
      localTime1.toString("CE");
      LocalTime.now((Chronology) copticChronology0);
      localTime_Property0.roundHalfFloorCopy();
      // Undeclared exception!
      try { 
        localTime3.getValue((-1109));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -1109
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-337L));
      localTime0.minusHours(2);
      DateTimeUtils.setCurrentMillisFixed(1000L);
      LocalTime localTime1 = localTime0.minusHours(2);
      localTime1.MIDNIGHT.getHourOfDay();
      localTime1.MIDNIGHT.equals(localTime0);
      localTime1.MIDNIGHT.getValue(2);
      LocalTime localTime2 = LocalTime.now();
      LocalTime localTime3 = localTime2.minusMillis(0);
      LocalTime localTime4 = localTime2.MIDNIGHT.plusMinutes(2);
      localTime4.MIDNIGHT.toDateTimeToday();
      LocalTime localTime5 = localTime0.withHourOfDay(17);
      localTime5.isBefore(localTime3);
      int int0 = 4144;
      DateTimeUtils.setCurrentMillisOffset(2019);
      localTime5.minusSeconds(2019);
      // Undeclared exception!
      try { 
        localTime3.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
}
