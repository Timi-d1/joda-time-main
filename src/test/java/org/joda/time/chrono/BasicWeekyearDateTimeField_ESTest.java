/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 22:06:00 GMT 2025
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BasicWeekyearDateTimeField;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicWeekyearDateTimeField_ESTest extends BasicWeekyearDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean0 = basicWeekyearDateTimeField0.isLeap((-2999L));
      assertFalse(boolean0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      
      long long0 = basicWeekyearDateTimeField0.add((long) (-292269337), (long) (-292269337));
      assertEquals((-9223129438881069337L), long0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      
      long long0 = basicWeekyearDateTimeField0.set(1L, (-796));
      assertEquals((-87256915199999L), long0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      
      long long0 = basicWeekyearDateTimeField0.getDifferenceAsLong(31449600000L, (-35849520000680L));
      assertEquals(1137L, long0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      
      long long0 = basicWeekyearDateTimeField0.set(0L, 1969);
      assertEquals(0L, long0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      
      long long0 = basicWeekyearDateTimeField0.roundFloor(21859200000L);
      assertEquals(950400000L, long0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      
      long long0 = basicWeekyearDateTimeField0.remainder(31795200000L);
      assertEquals(0L, long0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = basicWeekyearDateTimeField0.getMinimumValue();
      assertEquals(1, int0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      
      int int0 = basicWeekyearDateTimeField0.getLeapAmount(0L);
      assertEquals(0, int0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = basicWeekyearDateTimeField0.getLeapAmount(0L);
      assertEquals((-1), int0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = basicWeekyearDateTimeField0.getDifferenceAsLong(30844800001L, 1);
      assertEquals(1L, long0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      
      long long0 = basicWeekyearDateTimeField0.getDifferenceAsLong(879L, 63072000000L);
      assertEquals((-2L), long0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      
      long long0 = basicWeekyearDateTimeField0.addWrapField((long) 0, 0);
      assertEquals(0L, long0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = basicWeekyearDateTimeField0.addWrapField(0L, (-1));
      assertEquals((-31449600000L), long0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(copticChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicWeekyearDateTimeField0.add(0L, 0L);
      assertEquals(0L, long0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      
      long long0 = basicWeekyearDateTimeField0.add((long) 2608, 1L);
      assertEquals(32054402608L, long0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      
      long long0 = basicWeekyearDateTimeField0.add(0L, 0);
      assertEquals(0L, long0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.set(5097600000L, 292271022);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 292271023 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.remainder((-98946403200000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.getDifferenceAsLong(366L, (-179915126400000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.addWrapField((long) 1, (-4844));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.add(30585600000L, 30585600000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 30585600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.add((-529L), (-3299));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = null;
      try {
        basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField((BasicChronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicWeekyearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = basicWeekyearDateTimeField0.roundFloor((-292269337));
      assertEquals((-9936000000L), long0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      
      long long0 = basicWeekyearDateTimeField0.roundFloor(1012L);
      assertEquals((-259200000L), long0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      long long0 = basicWeekyearDateTimeField0.getDifferenceAsLong(22118400000L, 653L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(copticChronology0);
      long long0 = basicWeekyearDateTimeField0.add((long) 1, 1);
      assertEquals(32054400001L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      long long0 = basicWeekyearDateTimeField0.add((-35849520000680L), 0);
      assertEquals((-35849520000680L), long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      int int0 = basicWeekyearDateTimeField0.getMinimumValue();
      assertEquals((-292275054), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      long long0 = basicWeekyearDateTimeField0.remainder(10000000000000L);
      assertEquals(26502400000L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      int int0 = basicWeekyearDateTimeField0.get(604800000L);
      assertEquals(1962, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      boolean boolean0 = basicWeekyearDateTimeField0.isLeap(123L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      boolean boolean0 = basicWeekyearDateTimeField0.isLeap((-680L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      long long0 = basicWeekyearDateTimeField0.set(136L, 1312);
      assertEquals((-20763993599864L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.set(3218L, (-1700));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      long long0 = basicWeekyearDateTimeField0.set(504L, 1969);
      assertEquals(504L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      long long0 = basicWeekyearDateTimeField0.getDifferenceAsLong((-2098L), (-2098L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      long long0 = basicWeekyearDateTimeField0.addWrapField(30617395200001L, 0);
      assertEquals(30617395200001L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      boolean boolean0 = basicWeekyearDateTimeField0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      DurationField durationField0 = basicWeekyearDateTimeField0.getLeapDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.add(1118L, (long) (-4038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(copticChronology0);
      int int0 = basicWeekyearDateTimeField0.getMaximumValue();
      assertEquals(292272708, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      int int0 = basicWeekyearDateTimeField0.getLeapAmount(2608);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(copticChronology0);
      DurationField durationField0 = basicWeekyearDateTimeField0.getRangeDurationField();
      assertNull(durationField0);
  }
}
