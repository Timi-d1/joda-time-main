/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 20:12:30 GMT 2025
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicGJChronology_ESTest extends BasicGJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(5097599967L);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(4818);
      assertNotSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      long long0 = gregorianChronology0.getYearDifference(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Period period0 = new Period(5097600000L, (-1163L));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      long long0 = gregorianChronology0.getYearDifference(3218L, 5097600000L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      int int0 = julianChronology0.getDaysInMonthMaxForSet(30499200000L, 28);
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      int int0 = gregorianChronology0.getDaysInMonthMaxForSet(26607895200000L, 60);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(6, 30);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 6);
      YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
      YearMonth yearMonth1 = yearMonth0.plusYears((-854));
      long long0 = julianChronology0.set(yearMonth1, 0);
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals((-25556342400000L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      int int0 = gregorianChronology0.getDayOfMonth(889270447651200000L);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(5097600000L);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(4818);
      LocalDateTime localDateTime2 = localDateTime1.plusMillis(4818);
      LocalDateTime localDateTime3 = localDateTime2.minusMonths(4818);
      assertNotSame(localDateTime2, localDateTime3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      int int0 = julianChronology0.getMonthOfYear(7593750, 2367);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      boolean boolean0 = gregorianChronology0.isLeapDay((-979L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      long long0 = julianChronology0.setYear(0, 1969);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      long long0 = gregorianChronology0.setYear((-1L), 2244);
      assertEquals(8678188799999L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      long long0 = gregorianChronology0.getTotalMillisByYearMonth(1, 1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      long long0 = julianChronology0.getTotalMillisByYearMonth(5, 5);
      assertEquals(10368000000L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      int int0 = julianChronology0.getDaysInYearMonth(1, 1);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      // Undeclared exception!
      try { 
        julianChronology0.getTotalMillisByYearMonth(366, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      // Undeclared exception!
      try { 
        gregorianChronology0.getDaysInYearMonth(0, 326565);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 326564
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      JulianChronology julianChronology0 = new JulianChronology(islamicChronology0, islamicChronology0.AH, 1);
      int int0 = julianChronology0.getDaysInMonthMax(1);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(5097600000L);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(4818);
      LocalDateTime localDateTime2 = localDateTime1.plusYears(4818);
      assertTrue(localDateTime2.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(5097600000L);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(4818);
      // Undeclared exception!
      try { 
        localDateTime1.withDate((-908), 4818, (-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4818 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      long long0 = julianChronology0.setYear((-292275054), 1);
      assertEquals((-62105649075054L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      long long0 = julianChronology0.getYearDifference((-61758201600000L), 31535997132L);
      assertEquals((-1958L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      long long0 = julianChronology0.getYearDifference(620L, (-62167392000000L));
      assertEquals(1969L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(7678125);
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      YearMonth yearMonth1 = yearMonth0.plusMonths((int) integer0);
      assertEquals(641857, yearMonth1.getYear());
      assertEquals(11, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      int int0 = gregorianChronology0.getDaysInMonthMaxForSet((-12219292800000L), (-2889));
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(268);
      YearMonth yearMonth0 = new YearMonth();
      YearMonth yearMonth1 = yearMonth0.plusMonths((int) integer0);
      YearMonth yearMonth2 = yearMonth1.plusMonths((-2461));
      assertEquals(5, yearMonth2.getMonthOfYear());
      assertEquals(6, yearMonth1.getMonthOfYear());
      assertEquals(1831, yearMonth2.getYear());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(7593750);
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      YearMonth yearMonth1 = yearMonth0.plusMonths((int) integer0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1437), (-879), (-879), 1, (-2461), 0, (-2147483646), 0);
      YearMonth yearMonth2 = yearMonth1.minus(mutablePeriod0);
      assertEquals(11, yearMonth2.getMonthOfYear());
      assertEquals(636336, yearMonth2.getYear());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(7678112);
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      YearMonth yearMonth1 = yearMonth0.plusMonths((int) integer0);
      assertEquals(641856, yearMonth1.getYear());
      assertEquals(10, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      YearMonth yearMonth1 = yearMonth0.plusMonths(366);
      Interval interval0 = yearMonth1.toInterval((DateTimeZone) null);
      assertEquals(2356300800000L, interval0.getEndMillis());
      assertEquals(8, yearMonth1.getMonthOfYear());
      assertEquals(2044, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      YearMonth yearMonth1 = yearMonth0.plusMonths(365);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1437), (-872), (-1260), 1, (-2461), (-2461), (-2147483646), 0);
      mutablePeriod0.setPeriod((-142), (-1437), 1, (-655), 2103, (-655), 2367, 17887500);
      YearMonth yearMonth2 = yearMonth1.minus(mutablePeriod0);
      assertEquals(2044, yearMonth1.getYear());
      assertEquals(4, yearMonth2.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(7593750);
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      YearMonth yearMonth1 = yearMonth0.plusMonths((int) integer0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1437), (-872), (-1260), 1, (-2461), 2853, (-2147483646), 0);
      YearMonth yearMonth2 = yearMonth1.minus(mutablePeriod0);
      assertEquals(4, yearMonth2.getMonthOfYear());
      assertEquals(636336, yearMonth2.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(5097600000L);
      Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(3, monthDay0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(268);
      YearMonth yearMonth0 = new YearMonth();
      YearMonth yearMonth1 = yearMonth0.plusMonths((int) integer0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, (-872), (-1260), 1, (-2461), 2853, (-2147483641), 0);
      YearMonth yearMonth2 = yearMonth1.minus(mutablePeriod0);
      assertEquals(6, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth2.getMonthOfYear());
      assertEquals(2108, yearMonth2.getYear());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(268);
      YearMonth yearMonth0 = new YearMonth();
      YearMonth yearMonth1 = yearMonth0.plusMonths((int) integer0);
      YearMonth yearMonth2 = yearMonth1.minusMonths(1);
      YearMonth yearMonth3 = yearMonth2.minusMonths(638731337);
      assertEquals((-53225576), yearMonth3.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(6, yearMonth1.getMonthOfYear());
      assertEquals(12, yearMonth3.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      boolean boolean0 = gregorianChronology0.isLeapDay(21260793600000L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      // Undeclared exception!
      try { 
        julianChronology0.getDaysInMonthMax((-4253));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4254
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }
}
