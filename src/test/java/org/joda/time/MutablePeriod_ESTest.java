/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 22:56:42 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutablePeriod_ESTest extends MutablePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, (-2116), 1, 1);
      mutablePeriod0.setValue(1, (-2110));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 23034375, 23034375, 23034375);
      mutablePeriod0.setYears(735);
      int int0 = mutablePeriod0.getYears();
      assertEquals(735, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      mutablePeriod0.setSeconds(0);
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1900, 1900, (-3354), (-3354), 1900, (-3354), 1900, (-3354));
      int int0 = mutablePeriod0.getMonths();
      assertEquals(1900, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-825), 2132, 0, 0, 2132, 0, 0);
      int int0 = mutablePeriod0.getMonths();
      assertEquals((-825), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, (-2116), 1, 1);
      int int0 = mutablePeriod0.getMinutes();
      assertEquals((-2116), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      int int0 = mutablePeriod0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, (-2116), 1, 1);
      int int0 = mutablePeriod0.getMillis();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, (-2116), 1, 1);
      int int0 = mutablePeriod0.getHours();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), (-1), (-1), (-1));
      int int0 = mutablePeriod0.getHours();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 23034375, 0, 0);
      int int0 = mutablePeriod0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 23034375, 23034375, 23034375, 23034375, 23034375, 0, 0);
      int int0 = mutablePeriod0.getDays();
      assertEquals(23034375, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-825), 2132, 0, 0, 2132, 0, 0);
      // Undeclared exception!
      try { 
        mutablePeriod0.set((DurationFieldType) null, (-825));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("K^d5Bi2ZfQi", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("Nx{)6>}p&t9)aVVT6q", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Nx{)6>}p&t9)aVVT6q\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      PeriodType.SECOND_INDEX = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        mutablePeriod0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      PeriodType.HOUR_INDEX = 604800;
      // Undeclared exception!
      try { 
        mutablePeriod0.add((-2377), (-2265), 31, (-2377), (-2265), 31, 0, 1900);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 604800
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, periodType0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("Clone error", periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Clone error\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      int int0 = mutablePeriod0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-420), (-2116), (-420), (-420));
      Object object0 = mutablePeriod0.clone();
      assertNotSame(object0, mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.MutablePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      int int0 = mutablePeriod0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3226), 690, (-677), (-3085), 211, (-3085), (-3085), 0, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-420), (-2116), (-420), (-420));
      int int0 = mutablePeriod0.getMillis();
      assertEquals((-420), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1616, 1616, 1616, (-3606), 2060, 1, (-205), 0);
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(1616, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), (-1679));
      mutablePeriod0.setPeriod(21859200000L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-825), 2132, 0, 0, 2132, 0, 0);
      int int0 = mutablePeriod0.getMinutes();
      assertEquals(2132, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      mutablePeriod0.setPeriod(0, (-4595), 1, 717, 717, 1900, 0, 0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1616, 1616, 1616, (-3606), 2060, 1, (-205), 0);
      int int0 = mutablePeriod0.getDays();
      assertEquals((-3606), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      int int0 = mutablePeriod0.getSeconds();
      assertEquals((-3354), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.setPeriod((long) 10125000);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3340), 28265625, (-3340), 1900);
      Duration duration0 = Duration.standardMinutes(1900);
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(31L, duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      mutablePeriod0.add((ReadableDuration) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.add((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.setPeriod((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-825), 2132, 0, 0, 2132, 0, 0);
      mutablePeriod0.addHours(99);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, periodType0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Instant instant0 = new Instant(756L);
      Duration duration0 = new Duration(instant0, instant0);
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, periodType0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2256), (-2256), (-2256), (-2256), (-2256), (-2256), (-2256), (-2256));
      mutablePeriod0.clear();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, (-2116), 1, 1);
      mutablePeriod0.setDays(0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Minutes minutes0 = hours0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod((-3037), (-3037), (-3037), (-2510), (-442), 0, (-672), (-672), periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      mutablePeriod0.add((long) 1900, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-238L));
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2704L, periodType0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2499L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-825), 2132, 0, 0, 2132, 0, 0);
      mutablePeriod0.setHours(2132);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-825), 2132, 0, 0, 2132, 0, 0);
      mutablePeriod0.setMonths(1247);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1616, 1616, 1616, (-3606), 2060, 1, (-205), 0);
      mutablePeriod0.add((long) 2060);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-1));
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), (-1), (-1), (-1));
      mutablePeriod0.add((ReadablePeriod) weeks0);
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.addSeconds(0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, (-2116), 1, 1);
      // Undeclared exception!
      try { 
        mutablePeriod0.setValue(3693, (-2110));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3693
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-825), 2132, 0, 0, 2132, 0, 0);
      mutablePeriod0.addMillis(2132);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      mutablePeriod0.setSeconds(464);
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(464, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), (-1), (-1), (-1));
      mutablePeriod0.setWeeks(0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1616, 1616, 1616, (-3606), 2060, 1, (-205), 0);
      mutablePeriod0.addYears(1616);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-825), 2132, 0, 0, 2132, 0, 0);
      mutablePeriod0.setPeriod(0L, (-1421L));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(31557600000L, 31557600000L);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), (-1), (-1), (-1));
      mutablePeriod0.setPeriod((long) (-1), (-561L), (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), 0, (-2138), (-2138), (-1), 0, (-2138), (-92));
      mutablePeriod0.mergePeriod((ReadablePeriod) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, (-2116), 1, 1);
      mutablePeriod0.addWeeks((-2110));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(30962844000000L, periodType0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-431), (-431), 0, 0, 0, (-431), (-431), (-32));
      mutablePeriod0.setPeriod((ReadableDuration) null);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) null, (ReadableInstant) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      mutablePeriod0.add((-2377), (-2265), 31, (-2377), (-2265), 31, 0, 1900);
      int int0 = mutablePeriod0.getYears();
      assertEquals((-2377), int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      mutablePeriod0.set(durationFieldType0, (-302));
      assertEquals("weeks", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      int int0 = mutablePeriod0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Object object0 = new Object();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, (PeriodType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      Instant instant0 = Instant.ofEpochMilli(3399L);
      mutablePeriod0.setPeriod((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(3399L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3L), (-3L), periodType0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, (-2116), 1, 1);
      mutablePeriod0.addMinutes(1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      mutablePeriod0.addDays(0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.addMonths(0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      mutablePeriod0.setMinutes((-2265));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), (-1), (-1), (-1));
      mutablePeriod0.setPeriod((ReadablePeriod) mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-1444L));
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1616, 1616, 1616, (-3606), 2060, 1, (-205), 0);
      DurationFieldType durationFieldType0 = mutablePeriod0.getFieldType(0);
      mutablePeriod0.add(durationFieldType0, 0);
      assertEquals("years", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Object object0 = new Object();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      mutablePeriod0.setMillis(4356);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3354), (-3354), (-3354), 1900);
      Duration duration0 = Duration.standardHours(0);
      mutablePeriod0.setPeriod((ReadableDuration) duration0, (Chronology) null);
      assertEquals(0L, duration0.getStandardSeconds());
  }
}
