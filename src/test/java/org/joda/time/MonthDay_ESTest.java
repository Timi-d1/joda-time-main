/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 21:48:10 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.Writer;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MonthDay_ESTest extends MonthDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-536), (-536), (-2667), (-536), 2757, (-536));
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(buddhistChronology0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[OtlL$]Z:1W\"uUayC");
      monthDay0.monthOfYear();
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      durationFieldType0.isSupported(buddhistChronology0);
      mockGregorianCalendar0.set(1, 2757, 43, 1888, 1, 0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        monthDay1.plusMonths((-2667));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Builder has created neither a printer nor a parser");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MonthDay monthDay0 = MonthDay.now();
      monthDay0.withChronologyRetainFields((Chronology) null);
      java.time.Instant instant0 = MockInstant.ofEpochSecond((-1L));
      Date.from(instant0);
      MonthDay monthDay1 = monthDay0.withMonthOfYear(1);
      monthDay0.getFieldTypes();
      monthDay1.plus((ReadablePeriod) null);
      monthDay1.monthOfYear();
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      Days days0 = minutes0.toStandardDays();
      monthDay0.minus(days0);
      Locale locale0 = Locale.ROOT;
      monthDay1.toString("z", locale0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      System.setCurrentTimeMillis((-1279L));
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Chronology chronology0 = lenientChronology0.withZone(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now(chronology0);
      // Undeclared exception!
      try { 
        monthDay0.minusDays(1260);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Date date0 = localDateTime0.toDate();
      MonthDay monthDay0 = MonthDay.fromDateFields(date0);
      localDateTime0.withDayOfWeek(1);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      localDateTime0.hourOfDay();
      MonthDay monthDay1 = new MonthDay(monthDay0, (Chronology) ethiopicChronology0);
      monthDay1.monthOfYear();
      MonthDay monthDay2 = MonthDay.now();
      MonthDay monthDay3 = monthDay2.minusDays(1);
      monthDay3.minusDays(1);
      monthDay2.toLocalDate(1870);
      monthDay0.toLocalDate(1);
      // Undeclared exception!
      try { 
        monthDay1.plusDays(2376);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay.now();
      DateTimeField[] dateTimeFieldArray0 = monthDay0.getFields();
      assertEquals(2, dateTimeFieldArray0.length);
      
      MonthDay monthDay1 = monthDay0.minusDays(0);
      MonthDay monthDay2 = new MonthDay(monthDay0, (int[]) null);
      int int0 = monthDay1.getMonthOfYear();
      assertEquals(2, int0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      MonthDay.Property monthDay_Property0 = monthDay1.property(dateTimeFieldType0);
      assertSame(monthDay1, monthDay0);
      assertEquals(14, monthDay_Property0.get());
      
      Period period0 = Period.seconds(1);
      Period period1 = period0.withHours(2);
      Hours hours0 = period1.toStandardHours();
      monthDay0.withPeriodAdded(hours0, 1);
      // Undeclared exception!
      try { 
        monthDay2.toLocalDate(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 1381;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1381);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      MonthDay monthDay1 = MonthDay.now(dateTimeZone0);
      DateTimeZone.getProvider();
      monthDay0.toString((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--02-14");
      monthDay0.monthOfYear();
      monthDay1.getDayOfMonth();
      dateTimeZone0.isStandardOffset((-2147483648L));
      monthDay0.toLocalDate(14);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.getRangeDurationType();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        monthDay0.withField(dateTimeFieldType0, 20587500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekOfWeekyear' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      Locale locale0 = Locale.US;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      // Undeclared exception!
      try { 
        MonthDay.parse("org.joda.time.field.SkipUndoDateTimeField", dateTimeFormatter3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay.now();
      MonthDay monthDay1 = monthDay0.minusDays(0);
      MonthDay monthDay2 = new MonthDay(monthDay0, (int[]) null);
      monthDay1.getMonthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      monthDay1.property(dateTimeFieldType0);
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      monthDay1.plus(days0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay.now();
      MonthDay monthDay1 = monthDay0.minusDays(0);
      monthDay0.dayOfMonth();
      MonthDay monthDay2 = new MonthDay(monthDay0, (int[]) null);
      monthDay1.getMonthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      monthDay1.property(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        monthDay2.withDayOfMonth(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1810), 0, (-423));
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-423);
      intArray0[1] = 0;
      intArray0[2] = (-1810);
      intArray0[3] = (-1810);
      intArray0[4] = 0;
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      MonthDay monthDay1 = monthDay_Property0.addToCopy((-1810));
      Locale locale0 = Locale.UK;
      monthDay1.toString("('+@pUjPzsJ0mK", locale0);
      DateTimeFieldType dateTimeFieldType0 = monthDay0.getFieldType(0);
      MonthDay monthDay2 = new MonthDay();
      Locale locale1 = Locale.JAPANESE;
      monthDay_Property0.getAsShortText();
      monthDay2.withField(dateTimeFieldType0, 4);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      monthDay0.minusDays((-51));
      MonthDay monthDay1 = new MonthDay(monthDay0, (int[]) null);
      // Undeclared exception!
      try { 
        monthDay1.getMonthOfYear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-3403L));
      Locale locale0 = Locale.ITALIAN;
      monthDay0.toString((String) null, locale0);
      Locale locale1 = Locale.ITALY;
      locale1.getDisplayName();
      monthDay0.toString((String) null, locale1);
      monthDay0.getFieldTypes();
      MonthDay monthDay1 = MonthDay.now();
      monthDay1.withDayOfMonth(1);
      monthDay1.dayOfMonth();
      monthDay1.plusMonths(2781);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1810), 0, (-423));
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-423);
      intArray0[1] = 0;
      intArray0[2] = (-1810);
      intArray0[3] = (-1810);
      intArray0[4] = 0;
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      MonthDay monthDay1 = monthDay_Property0.addToCopy((-1810));
      Locale locale0 = Locale.UK;
      monthDay1.toString("('+@pUjPzsJ0mK", locale0);
      DateTimeFieldType dateTimeFieldType0 = monthDay0.getFieldType(0);
      MonthDay monthDay2 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      Locale locale1 = Locale.JAPANESE;
      monthDay_Property0.getAsShortText();
      monthDay2.withField(dateTimeFieldType0, 4);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MonthDay monthDay0 = new MonthDay(24L);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      monthDay0.withFieldAdded(durationFieldType0, (-47));
      // Undeclared exception!
      try { 
        MonthDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Builder has created neither a printer nor a parser");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MonthDay monthDay0 = MonthDay.now();
      monthDay0.withChronologyRetainFields((Chronology) null);
      java.time.Instant instant0 = MockInstant.ofEpochSecond((-1L));
      Date.from(instant0);
      MonthDay monthDay1 = new MonthDay(1, 1, (Chronology) null);
      MonthDay monthDay2 = monthDay1.withMonthOfYear(1);
      monthDay1.getFieldTypes();
      monthDay2.plus((ReadablePeriod) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "ISO";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ISO");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4), (-4), (-4));
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[0];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      // Undeclared exception!
      try { 
        monthDay1.getMonthOfYear();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 292272708;
      intArray0[2] = 2267;
      intArray0[3] = 0;
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      // Undeclared exception!
      monthDay1.plusDays(5);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      monthDay0.toString();
      monthDay0.toString();
      Chronology chronology0 = null;
      MonthDay monthDay1 = monthDay0.minusDays(97);
      monthDay1.compareTo((ReadablePartial) monthDay0);
      MonthDay monthDay2 = monthDay0.withChronologyRetainFields((Chronology) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        monthDay2.getField(1, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay monthDay1 = monthDay0.minusDays(0);
      MonthDay monthDay2 = new MonthDay(monthDay0, (int[]) null);
      monthDay1.getMonthOfYear();
      // Undeclared exception!
      try { 
        monthDay2.withMonthOfYear(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1815), (-1815), (-1815));
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1815);
      intArray0[1] = 0;
      intArray0[2] = (-1815);
      intArray0[3] = (-1815);
      intArray0[2] = 0;
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      MonthDay.Property monthDay_Property0 = new MonthDay.Property(monthDay1, 0);
      monthDay_Property0.addToCopy(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      monthDay1.getFieldType(0);
      Locale locale0 = Locale.JAPANESE;
      monthDay1.getMonthOfYear();
      try { 
        monthDay1.toString("<o^g 8`", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1815), (-1815), (-423));
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      intArray0[0] = (-423);
      intArray0[1] = 0;
      intArray0[2] = (-1815);
      intArray0[3] = (-1815);
      intArray0[2] = 0;
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      MonthDay.Property monthDay_Property0 = new MonthDay.Property(monthDay1, 0);
      monthDay_Property0.addToCopy(0);
      monthDay1.getFieldType(0);
      String string0 = "<o^g 8`";
      // Undeclared exception!
      try { 
        monthDay1.plusDays(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -424
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      monthDay0.minusDays(0);
      MonthDay monthDay1 = new MonthDay(monthDay0, (int[]) null);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(86399999L, chronology0);
      // Undeclared exception!
      try { 
        monthDay1.minus(mutablePeriod0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1593));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 9;
      intArray0[2] = (-1593);
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1;
      ethiopicChronology0.validate(monthDay0, intArray0);
      MonthDay.now((Chronology) ethiopicChronology0);
      MonthDay monthDay1 = MonthDay.now((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        monthDay1.minusMonths(1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      int int0 = 0;
      Period period0 = new Period(monthDay0, monthDay0);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      Period period1 = period0.withField(durationFieldType0, 2160);
      // Undeclared exception!
      monthDay0.withPeriodAdded(period1, (-1270));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      gJChronology0.toString();
      MonthDay monthDay0 = MonthDay.now((Chronology) buddhistChronology0);
      buddhistChronology0.get((ReadablePartial) monthDay0, 0L);
      MonthDay monthDay1 = MonthDay.now(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1);
      monthDay1.withPeriodAdded(mutablePeriod0, 0);
      MonthDay monthDay2 = monthDay0.plusMonths(1);
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(monthDay2, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.MonthDay
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1593));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 9;
      intArray0[2] = (-1593);
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1;
      ethiopicChronology0.validate(monthDay0, intArray0);
      MonthDay monthDay1 = MonthDay.now((Chronology) ethiopicChronology0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 2349).when(dateTimePrinter0).estimatePrintedLength();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(10);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(ethiopicChronology0);
      monthDay1.toString(dateTimeFormatter4);
      monthDay1.dayOfMonth();
      monthDay1.monthOfYear();
      Days days0 = Days.MIN_VALUE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      monthDay0.withFieldAdded(durationFieldType0, 0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      monthDay0.toString();
      monthDay0.toString();
      MonthDay monthDay1 = monthDay0.minusDays(97);
      Locale locale0 = Locale.ITALY;
      monthDay1.toString("--02-14", locale0);
      MonthDay monthDay2 = monthDay0.withChronologyRetainFields((Chronology) null);
      monthDay0.toString("--02-14");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      MonthDay.now(dateTimeZone1);
      dateTimeFieldType0.getField((Chronology) null);
      // Undeclared exception!
      try { 
        monthDay2.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'yearOfEra' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      Locale locale0 = Locale.ENGLISH;
      monthDay_Property0.getMaximumShortTextLength(locale0);
      MonthDay monthDay1 = monthDay_Property0.setCopy(1);
      monthDay1.getFields();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Chronology chronology0 = gregorianChronology0.withUTC();
      MonthDay monthDay2 = MonthDay.now(chronology0);
      // Undeclared exception!
      try { 
        monthDay2.toString("ART");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2648, 2648, 1577, 2648, 0);
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      int[] intArray0 = new int[4];
      intArray0[0] = 2648;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      monthDay1.dayOfMonth();
      monthDay1.getFieldTypes();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      monthDay0.toString();
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      Locale locale0 = Locale.ENGLISH;
      monthDay_Property0.getMaximumShortTextLength(locale0);
      monthDay_Property0.getMaximumTextLength(locale0);
      monthDay0.withPeriodAdded((ReadablePeriod) null, 769);
      // Undeclared exception!
      try { 
        monthDay_Property0.setCopy(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,29]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      Chronology chronology0 = buddhistChronology0.withZone((DateTimeZone) null);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance();
      MonthDay monthDay0 = new MonthDay(chronology0);
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(chronology0);
      monthDay1.getField(1, chronology0);
      Locale locale0 = Locale.ENGLISH;
      monthDay0.toString("s2;", locale0);
      MonthDay.now(chronology0);
      MonthDay monthDay2 = MonthDay.now((Chronology) buddhistChronology1);
      // Undeclared exception!
      try { 
        monthDay2.toString("Subtracting time zone offset caused overflow");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = (-1645);
      int int1 = 30;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 2490, (-1645), 30);
      mockGregorianCalendar0.clone();
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        monthDay0.getFieldType((-1645));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1046));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      MonthDay monthDay0 = MonthDay.parse("", dateTimeFormatter3);
      // Undeclared exception!
      try { 
        monthDay0.withDayOfMonth((-1046));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1046 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try { 
        MonthDay.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try { 
        MonthDay.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("i?w?Iek;vg\"1N");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      dateTimeZone0.getOffsetFromLocal(0);
      monthDay_Property0.getFieldType();
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.KOREAN;
      locale1.getExtensionKeys();
      locale1.stripExtensions();
      locale0.getDisplayName(locale1);
      // Undeclared exception!
      try { 
        monthDay_Property0.setCopy("org.joda.time.MonthDay", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.MonthDay\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(6, 5);
      monthDay0.plusDays(2);
      Months months0 = Months.SEVEN;
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(months0, julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.Months
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)zonedChronology0.getZone();
      uTCDateTimeZone0.writeReplace();
      DateTimeZone.getAvailableIDs();
      MonthDay monthDay0 = new MonthDay((DateTimeZone) uTCDateTimeZone0);
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(zonedChronology0);
      MonthDay monthDay2 = monthDay0.withDayOfMonth(1);
      monthDay1.getField(0, (Chronology) zonedChronology0);
      monthDay0.getField(0, (Chronology) zonedChronology0);
      monthDay2.size();
      monthDay2.minusMonths(0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      MonthDay monthDay0 = MonthDay.now(chronology0);
      monthDay0.toLocalDate(1);
      int int0 = 0;
      Period period0 = Period.days(0);
      Period period1 = period0.plusMillis((-4500));
      Period period2 = period1.minusMinutes((-292275054));
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      PeriodType periodType0 = PeriodType.years();
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType1);
      Locale locale0 = Locale.TAIWAN;
      PeriodFormatter periodFormatter2 = periodFormatter1.withLocale(locale0);
      period1.toString(periodFormatter2);
      Period period3 = period2.minusSeconds(1409);
      monthDay0.withPeriodAdded(period3, 2567);
      try { 
        DateTimeZone.forOffsetHours((-4500));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -4500
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Chronology chronology0 = copticChronology0.withZone(uTCDateTimeZone0);
      MonthDay monthDay0 = new MonthDay(chronology0);
      monthDay0.dayOfMonth();
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period(monthDay0, monthDay0, periodType0);
      Duration duration0 = period0.toStandardDuration();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Period period1 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      Period period2 = period0.withFields(period1);
      Period.seconds(1969);
      MonthDay monthDay1 = monthDay0.minus(period2);
      monthDay1.isBefore(monthDay0);
      // Undeclared exception!
      try { 
        monthDay0.toLocalDate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, uTCDateTimeZone0);
      MonthDay monthDay0 = new MonthDay((Object) null, zonedChronology0);
      monthDay0.getFieldType(1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Object) null);
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      monthDay_Property0.getField();
      monthDay0.getMonthOfYear();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.parse((String) null, (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1579L));
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        monthDay0.withMonthOfYear(993);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 993 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((Chronology) iSOChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      MonthDay.Property monthDay_Property0 = monthDay0.property(dateTimeFieldType0);
      Days days0 = Days.days(2055);
      Duration duration0 = days0.toStandardDuration();
      MutableDateTime mutableDateTime0 = new MutableDateTime(1664L);
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.withEarlierOffsetAtOverlap();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime1);
      iSOChronology0.get((ReadablePeriod) period0, (long) 5, (long) 0);
      // Undeclared exception!
      try { 
        monthDay_Property0.setCopy((-1492));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1492 for dayOfMonth must be in the range [1,29]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      int int0 = (-2007);
      String string0 = "America/Indiana/Indianapolis";
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      dateTimeZone0.getOffsetFromLocal(0L);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      DateTimeZone.forOffsetMillis(60000);
      // Undeclared exception!
      try { 
        monthDay0.getField((-2007), (Chronology) iSOChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2007
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      buddhistChronology0.getZone();
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay(dateTimeFieldType0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay.Property monthDay_Property0 = new MonthDay.Property(monthDay0, 1);
      monthDay_Property0.addToCopy(0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 7678125;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 32;
      intArray0[4] = (-3476);
      intArray0[5] = (-86399999);
      intArray0[6] = (-1);
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay((MonthDay) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      Chronology chronology0 = lenientChronology0.withUTC();
      lenientChronology0.getDateTimeMillis(0L, 0, 0, 0, 617);
      MonthDay monthDay0 = new MonthDay(0L, chronology0);
      monthDay0.toString();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      monthDay0.isSupported(dateTimeFieldType0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      // Undeclared exception!
      try { 
        MonthDay.parse("--04-23", dateTimeFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"--04-23\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay((-42), (-509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -42 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) copticChronology0);
      Date date0 = localDateTime0.toDate();
      MonthDay monthDay0 = MonthDay.fromDateFields(date0);
      MonthDay monthDay1 = new MonthDay(monthDay0, (Chronology) copticChronology0);
      MonthDay.Property monthDay_Property0 = new MonthDay.Property(monthDay1, (-2814));
      // Undeclared exception!
      try { 
        monthDay_Property0.addToCopy(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2814
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      MonthDay monthDay1 = monthDay0.minusMonths(595);
      monthDay1.compareTo(monthDay0);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      // Undeclared exception!
      try { 
        monthDay_Property0.setCopy("DBM=y<DlE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"DBM=y<DlE\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MonthDay monthDay0 = new MonthDay(3083L, (Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.getDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfMonth();
      // Undeclared exception!
      try { 
        monthDay0.withField(dateTimeFieldType1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,30]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.CANADA_FRENCH;
      try { 
        monthDay0.toString("#w3qO=F&;D.", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      JulianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, uTCDateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(zonedChronology0);
      MonthDay monthDay0 = MonthDay.now((Chronology) lenientChronology0);
      Locale locale0 = Locale.CHINA;
      try { 
        monthDay0.toString("The calendar must not be null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-2087L));
      monthDay0.getValue(0);
      monthDay0.plusDays(0);
      // Undeclared exception!
      try { 
        monthDay0.withDayOfMonth((-292275054));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292275054 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = ethiopicChronology0.withZone(dateTimeZone0);
      monthDay0.withChronologyRetainFields(chronology0);
      monthDay0.getFieldTypes();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Chronology) null);
      monthDay0.plusMonths(0);
      MonthDay monthDay1 = monthDay0.withMonthOfYear(1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      // Undeclared exception!
      try { 
        monthDay1.withField(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'centuryOfEra' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(65);
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.parse("65nP]f`T3}G+PH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"65nP]f`T3}G+PH\" is malformed at \"nP]f`T3}G+PH\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      MonthDay monthDay0 = MonthDay.fromCalendarFields(calendar0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      monthDay0.minus(weeks0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(83, "4,6L3+m4}}HmS", 1872, 0, 0, 0, (-2204), (-896), 0, 17971875, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month -2204
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-393L));
      String string0 = "|n4;nVf?i3s";
      monthDay0.dayOfMonth();
      Locale locale0 = Locale.FRANCE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedHashSet0);
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period((ReadableInstant) null, duration0);
      Period period1 = period0.withYears(2346);
      Period period2 = period1.normalizedStandard();
      monthDay0.plus(period2);
      Locale.lookup(linkedList0, list0);
      // Undeclared exception!
      try { 
        locale0.getDisplayName((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.parse("");
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = new Period(monthDay0, monthDay0);
      Minutes minutes0 = period0.toStandardMinutes();
      monthDay0.plus(minutes0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      Chronology chronology0 = copticChronology0.withZone(uTCDateTimeZone0);
      durationFieldType0.getField(chronology0);
      // Undeclared exception!
      try { 
        monthDay0.withFieldAdded(durationFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyears' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      dateTimeFieldType0.getField((Chronology) null);
      monthDay0.isSupported(dateTimeFieldType0);
      monthDay0.minusMonths(1497);
      monthDay0.getMonthOfYear();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(168L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.getDurationType();
      // Undeclared exception!
      try { 
        monthDay0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekOfWeekyear' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      UTCDateTimeZone uTCDateTimeZone1 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      uTCDateTimeZone1.getOffsetFromLocal(0L);
      uTCDateTimeZone0.getMillisKeepLocal(uTCDateTimeZone1, 0L);
      MonthDay monthDay0 = MonthDay.now((DateTimeZone) uTCDateTimeZone0);
      MonthDay monthDay1 = null;
      try {
        monthDay1 = new MonthDay(monthDay0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      // Undeclared exception!
      try { 
        monthDay0.withFieldAdded(durationFieldType0, 10080);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay(0, (-881), chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MonthDay monthDay0 = new MonthDay(0L, (Chronology) gregorianChronology0);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      MonthDay monthDay1 = monthDay_Property0.addWrapFieldToCopy(0);
      monthDay1.toString();
      monthDay0.getDayOfMonth();
      // Undeclared exception!
      try { 
        monthDay0.withMonthOfYear(7411);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 7411 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      // Undeclared exception!
      try { 
        monthDay0.withField(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      monthDay0.property(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-1146L));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try { 
        MonthDay.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        monthDay0.toString("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      monthDay_Property0.get();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(975, 0, (-899), (-899), 975);
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      monthDay0.plusMonths(1217);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      MonthDay monthDay0 = new MonthDay((DateTimeZone) uTCDateTimeZone0);
      monthDay0.withMonthOfYear(2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      MonthDay monthDay0 = MonthDay.now(chronology0);
      MonthDay.Property monthDay_Property0 = new MonthDay.Property(monthDay0, 0);
      monthDay_Property0.getReadablePartial();
      monthDay0.minusDays(0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.parse("");
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      monthDay_Property0.getField();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      MonthDay monthDay0 = MonthDay.now((Chronology) islamicChronology0);
      monthDay0.withChronologyRetainFields(islamicChronology0);
      MockDate mockDate0 = new MockDate(0);
      MonthDay.fromDateFields(mockDate0);
      monthDay0.size();
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      monthDay_Property0.getMonthDay();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1810), 0, (-423));
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-423);
      intArray0[1] = 0;
      intArray0[2] = (-1810);
      intArray0[3] = (-1810);
      intArray0[4] = 0;
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      monthDay_Property0.addToCopy((-1810));
      Locale locale0 = Locale.UK;
      monthDay_Property0.getAsString();
      DateTimeFieldType dateTimeFieldType0 = monthDay0.getFieldType(0);
      MonthDay monthDay1 = new MonthDay();
      Locale locale1 = Locale.JAPANESE;
      monthDay_Property0.getAsShortText();
      monthDay1.withField(dateTimeFieldType0, 4);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      MonthDay monthDay0 = new MonthDay(0L);
      String string0 = null;
      Locale locale0 = Locale.ITALIAN;
      String string1 = null;
      monthDay0.toString();
      // Undeclared exception!
      try { 
        monthDay0.getField(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 30
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try { 
        MonthDay.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Locale locale0 = Locale.KOREA;
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay(locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.util.Locale
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        MonthDay.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = ethiopicChronology0.withZone(dateTimeZone0);
      Period period0 = Period.ZERO;
      Period period1 = period0.plusWeeks((-3282));
      Days days0 = period1.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      chronology0.add((ReadablePeriod) seconds0, (long) 0, 2);
      monthDay0.withChronologyRetainFields(chronology0);
      monthDay0.getFieldTypes();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay(dateTimeFieldType0, lenientChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      System.setCurrentTimeMillis(26607895200000L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Builder has created neither a printer nor a parser");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MonthDay monthDay0 = MonthDay.now();
      monthDay0.withChronologyRetainFields((Chronology) null);
      MockInstant.ofEpochSecond((-1L));
      MockDate mockDate0 = new MockDate();
      MonthDay monthDay1 = MonthDay.fromDateFields(mockDate0);
      MonthDay monthDay2 = monthDay1.withMonthOfYear(1);
      monthDay1.getFieldTypes();
      monthDay2.plus((ReadablePeriod) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      BuddhistChronology.getInstance(dateTimeZone0);
      gJChronology0.toString();
      MonthDay.now(dateTimeZone0);
      int int0 = MonthDay.MONTH_OF_YEAR;
      PeriodType.years();
      MonthDay.now(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      gJChronology0.toString();
      MonthDay monthDay0 = MonthDay.now((Chronology) buddhistChronology0);
      buddhistChronology0.get((ReadablePartial) monthDay0, 0L);
      MonthDay monthDay1 = MonthDay.now(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1);
      monthDay1.withPeriodAdded(mutablePeriod0, 0);
      MonthDay monthDay2 = monthDay0.plusMonths(1);
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(monthDay2, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.MonthDay
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1810), 0, (-423));
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-423);
      intArray0[1] = 0;
      intArray0[2] = (-1810);
      intArray0[3] = (-1810);
      intArray0[4] = 0;
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      MonthDay monthDay1 = monthDay_Property0.addToCopy((-1810));
      Locale locale0 = Locale.UK;
      monthDay1.toString("('+@pUjPzsJ0mK", locale0);
      DateTimeFieldType dateTimeFieldType0 = monthDay0.getFieldType(0);
      MonthDay monthDay2 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      Locale locale1 = Locale.JAPANESE;
      monthDay2.toString((String) null);
      monthDay_Property0.getAsShortText();
      MonthDay monthDay3 = monthDay2.withField(dateTimeFieldType0, 4);
      monthDay3.monthOfYear();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(435);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Locale locale1 = Locale.FRENCH;
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string0 = locale1.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      
      String string1 = locale0.getDisplayScript(locale1);
      assertEquals("", string1);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string1);
      
      MonthDay monthDay0 = MonthDay.fromCalendarFields(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertNotSame(locale0, locale1);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(monthDay0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)timeZone0.clone();
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(timeZone0, zoneInfo0);
      assertNotSame(zoneInfo0, timeZone0);
      assertTrue(zoneInfo0.equals((Object)timeZone0));
      assertNotNull(zoneInfo0);
      
      MonthDay monthDay1 = monthDay0.plusDays(0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(14, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertNotSame(timeZone0, zoneInfo0);
      assertNotSame(locale0, locale1);
      assertSame(monthDay0, monthDay1);
      assertSame(monthDay1, monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertTrue(timeZone0.equals((Object)zoneInfo0));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(monthDay1);
      
      Weeks weeks0 = Weeks.THREE;
      assertEquals(1, weeks0.size());
      assertEquals(3, weeks0.getWeeks());
      assertNotNull(weeks0);
      
      Weeks weeks1 = Weeks.ONE;
      assertEquals(1, weeks1.getWeeks());
      assertEquals(1, weeks1.size());
      assertNotSame(weeks1, weeks0);
      assertFalse(weeks1.equals((Object)weeks0));
      assertNotNull(weeks1);
      
      Duration duration0 = weeks1.toStandardDuration();
      assertEquals(1, weeks1.getWeeks());
      assertEquals(1, weeks1.size());
      assertEquals(168L, duration0.getStandardHours());
      assertEquals(604800000L, duration0.getMillis());
      assertEquals(7L, duration0.getStandardDays());
      assertEquals(10080L, duration0.getStandardMinutes());
      assertEquals(604800L, duration0.getStandardSeconds());
      assertNotSame(weeks1, weeks0);
      assertFalse(weeks1.equals((Object)weeks0));
      assertNotNull(duration0);
      
      Weeks weeks2 = weeks0.plus(weeks1);
      assertEquals(1, weeks0.size());
      assertEquals(3, weeks0.getWeeks());
      assertEquals(1, weeks1.getWeeks());
      assertEquals(1, weeks1.size());
      assertEquals(4, weeks2.getWeeks());
      assertEquals(1, weeks2.size());
      assertNotSame(weeks0, weeks1);
      assertNotSame(weeks0, weeks2);
      assertNotSame(weeks1, weeks0);
      assertNotSame(weeks1, weeks2);
      assertNotSame(weeks2, weeks1);
      assertNotSame(weeks2, weeks0);
      assertFalse(weeks0.equals((Object)weeks1));
      assertFalse(weeks1.equals((Object)weeks0));
      assertFalse(weeks2.equals((Object)weeks1));
      assertFalse(weeks2.equals((Object)weeks0));
      assertNotNull(weeks2);
      
      MonthDay monthDay2 = monthDay0.minus(weeks1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(1, weeks1.getWeeks());
      assertEquals(1, weeks1.size());
      assertEquals(2, monthDay2.size());
      assertEquals(14, monthDay2.getDayOfMonth());
      assertEquals(2, monthDay2.getMonthOfYear());
      assertNotSame(timeZone0, zoneInfo0);
      assertNotSame(locale0, locale1);
      assertSame(monthDay0, monthDay1);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(weeks1, weeks0);
      assertNotSame(weeks1, weeks2);
      assertNotSame(monthDay2, monthDay1);
      assertNotSame(monthDay2, monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertTrue(timeZone0.equals((Object)zoneInfo0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(weeks1.equals((Object)weeks0));
      assertFalse(weeks1.equals((Object)weeks2));
      assertTrue(monthDay2.equals((Object)monthDay0));
      assertTrue(monthDay2.equals((Object)monthDay1));
      assertNotNull(monthDay2);
      
      MonthDay monthDay3 = monthDay0.minus(weeks0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(1, weeks0.size());
      assertEquals(3, weeks0.getWeeks());
      assertEquals(14, monthDay3.getDayOfMonth());
      assertEquals(2, monthDay3.getMonthOfYear());
      assertEquals(2, monthDay3.size());
      assertNotSame(timeZone0, zoneInfo0);
      assertNotSame(locale0, locale1);
      assertSame(monthDay0, monthDay1);
      assertNotSame(monthDay0, monthDay3);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(weeks0, weeks1);
      assertNotSame(weeks0, weeks2);
      assertNotSame(monthDay3, monthDay1);
      assertNotSame(monthDay3, monthDay2);
      assertNotSame(monthDay3, monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertTrue(timeZone0.equals((Object)zoneInfo0));
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(monthDay0.equals((Object)monthDay2));
      assertFalse(weeks0.equals((Object)weeks1));
      assertFalse(weeks0.equals((Object)weeks2));
      assertTrue(monthDay3.equals((Object)monthDay1));
      assertTrue(monthDay3.equals((Object)monthDay2));
      assertTrue(monthDay3.equals((Object)monthDay0));
      assertNotNull(monthDay3);
      
      MonthDay.Property monthDay_Property0 = new MonthDay.Property(monthDay3, (-3295));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(1, weeks0.size());
      assertEquals(3, weeks0.getWeeks());
      assertEquals(14, monthDay3.getDayOfMonth());
      assertEquals(2, monthDay3.getMonthOfYear());
      assertEquals(2, monthDay3.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertTrue(timeZone0.equals((Object)zoneInfo0));
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(monthDay0.equals((Object)monthDay2));
      assertTrue(monthDay0.equals((Object)monthDay3));
      assertFalse(weeks0.equals((Object)weeks1));
      assertFalse(weeks0.equals((Object)weeks2));
      assertTrue(monthDay3.equals((Object)monthDay1));
      assertTrue(monthDay3.equals((Object)monthDay2));
      assertTrue(monthDay3.equals((Object)monthDay0));
      assertNotNull(monthDay_Property0);
      
      ZoneOffset zoneOffset1 = ZoneOffset.from(zoneOffset0);
      assertSame(zoneOffset0, zoneOffset1);
      assertSame(zoneOffset1, zoneOffset0);
      assertNotNull(zoneOffset1);
      
      MonthDay monthDay4 = monthDay3.minusMonths(0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(2, monthDay4.getMonthOfYear());
      assertEquals(14, monthDay4.getDayOfMonth());
      assertEquals(2, monthDay4.size());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(1, weeks0.size());
      assertEquals(3, weeks0.getWeeks());
      assertEquals(14, monthDay3.getDayOfMonth());
      assertEquals(2, monthDay3.getMonthOfYear());
      assertEquals(2, monthDay3.size());
      assertSame(zoneOffset0, zoneOffset1);
      assertNotSame(timeZone0, zoneInfo0);
      assertNotSame(monthDay4, monthDay2);
      assertNotSame(monthDay4, monthDay1);
      assertNotSame(monthDay4, monthDay0);
      assertSame(monthDay4, monthDay3);
      assertNotSame(locale0, locale1);
      assertNotSame(monthDay0, monthDay4);
      assertSame(monthDay0, monthDay1);
      assertNotSame(monthDay0, monthDay3);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(weeks0, weeks1);
      assertNotSame(weeks0, weeks2);
      assertSame(monthDay3, monthDay4);
      assertNotSame(monthDay3, monthDay1);
      assertNotSame(monthDay3, monthDay2);
      assertNotSame(monthDay3, monthDay0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertTrue(timeZone0.equals((Object)zoneInfo0));
      assertTrue(monthDay4.equals((Object)monthDay2));
      assertTrue(monthDay4.equals((Object)monthDay1));
      assertTrue(monthDay4.equals((Object)monthDay0));
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(monthDay0.equals((Object)monthDay2));
      assertTrue(monthDay0.equals((Object)monthDay3));
      assertFalse(weeks0.equals((Object)weeks1));
      assertFalse(weeks0.equals((Object)weeks2));
      assertTrue(monthDay3.equals((Object)monthDay1));
      assertTrue(monthDay3.equals((Object)monthDay2));
      assertTrue(monthDay3.equals((Object)monthDay0));
      assertNotNull(monthDay4);
      
      // Undeclared exception!
      try { 
        monthDay0.withDayOfMonth((-3295));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3295 for dayOfMonth must be in the range [1,29]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(435);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      Locale locale1 = Locale.FRENCH;
      locale1.getDisplayVariant(locale0);
      locale0.getDisplayScript(locale1);
      MonthDay monthDay0 = MonthDay.fromCalendarFields(calendar0);
      timeZone0.clone();
      monthDay0.plusDays(0);
      Weeks weeks0 = Weeks.THREE;
      Weeks weeks1 = Weeks.ONE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      weeks1.toStandardDuration();
      MonthDay monthDay1 = new MonthDay();
      MonthDay.Property monthDay_Property0 = new MonthDay.Property(monthDay1, (-3295));
      String string0 = "";
      ZoneOffset.from(zoneOffset0);
      // Undeclared exception!
      try { 
        monthDay_Property0.setCopy("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -3295
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      monthDay0.toString();
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      Locale locale0 = Locale.ENGLISH;
      monthDay_Property0.getMaximumShortTextLength(locale0);
      monthDay_Property0.setCopy(2);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Chronology chronology0 = gregorianChronology0.withUTC();
      MonthDay monthDay1 = MonthDay.now(chronology0);
      // Undeclared exception!
      try { 
        monthDay1.toString("ART");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = 0L;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay(0L, (Chronology) gregorianChronology0);
      monthDay0.getDayOfMonth();
      Locale locale0 = Locale.KOREAN;
      monthDay0.toString((String) null, locale0);
      // Undeclared exception!
      try { 
        monthDay0.withMonthOfYear(7411);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 7411 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay monthDay1 = monthDay0.minusDays(97);
      monthDay1.compareTo((ReadablePartial) monthDay0);
      // Undeclared exception!
      try { 
        monthDay0.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.parse("PRT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"PRT\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      MonthDay monthDay0 = new MonthDay((DateTimeZone) null);
      MonthDay monthDay1 = monthDay0.plusMonths(0);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      monthDay_Property0.addWrapFieldToCopy(1);
      Period period0 = Period.seconds(1135);
      Period period1 = period0.withYears(0);
      monthDay1.minus(period1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 1, 0, 0, 1, 1, 0, 0);
      DurationFieldType.days();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        monthDay_Property0.setCopy("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-20L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1593));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      MonthDay monthDay1 = MonthDay.now((Chronology) ethiopicChronology0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      monthDay1.dayOfMonth();
      // Undeclared exception!
      try { 
        monthDay1.toLocalDate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
}
