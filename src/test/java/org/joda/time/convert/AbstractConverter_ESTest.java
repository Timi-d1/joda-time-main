/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 23:18:51 GMT 2025
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.convert.CalendarConverter;
import org.joda.time.convert.DateConverter;
import org.joda.time.convert.LongConverter;
import org.joda.time.convert.NullConverter;
import org.joda.time.convert.ReadableInstantConverter;
import org.joda.time.convert.ReadableIntervalConverter;
import org.joda.time.convert.ReadablePartialConverter;
import org.joda.time.convert.ReadablePeriodConverter;
import org.joda.time.format.DateTimeFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractConverter_ESTest extends AbstractConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPeriodType((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPeriodType(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.joda.time.ReadablePeriod
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      // Undeclared exception!
      try { 
        readableInstantConverter0.getPartialValues((ReadablePartial) null, (Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadableInstantConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      // Undeclared exception!
      try { 
        longConverter0.getInstantMillis((Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.LongConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      Integer integer0 = Integer.getInteger("_n}Kg:J", (-1));
      // Undeclared exception!
      try { 
        readableInstantConverter0.getInstantMillis(integer0, (Chronology) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.joda.time.ReadableInstant
         //
         verifyException("org.joda.time.convert.ReadableInstantConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      // Undeclared exception!
      try { 
        readablePartialConverter0.getChronology((Object) null, dateTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      // Undeclared exception!
      try { 
        readablePartialConverter0.getChronology((Object) longConverter0, (DateTimeZone) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.convert.LongConverter cannot be cast to org.joda.time.ReadablePartial
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      // Undeclared exception!
      try { 
        readablePartialConverter0.getChronology((Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        readablePartialConverter0.getChronology(object0, (Chronology) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.joda.time.ReadablePartial
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      Object object0 = new Object();
      boolean boolean0 = readablePartialConverter0.isReadableInterval(object0, (Chronology) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = ReadableIntervalConverter.INSTANCE;
      Integer integer0 = new Integer(5);
      Chronology chronology0 = readableIntervalConverter0.getChronology((Object) integer0, (Chronology) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      long long0 = readablePartialConverter0.getInstantMillis("C/Nd`F}LM", (Chronology) null);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NullConverter nullConverter0 = new NullConverter();
      String string0 = nullConverter0.toString();
      assertEquals("Converter[null]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      String string0 = calendarConverter0.toString();
      assertEquals("Converter[java.util.Calendar]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      Object object0 = new Object();
      Chronology chronology0 = dateConverter0.getChronology(object0, (DateTimeZone) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      PeriodType periodType0 = calendarConverter0.getPeriodType("Converter[java.util.Calendar]");
      assertEquals("Standard", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPartialValues((ReadablePartial) null, (Object) "Style '--' is invalid", (Chronology) null, (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.AbstractConverter", e);
      }
  }
}
