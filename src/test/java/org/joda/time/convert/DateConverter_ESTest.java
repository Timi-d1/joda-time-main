/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 23:23:26 GMT 2025
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.convert.DateConverter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateConverter_ESTest extends DateConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateConverter dateConverter0 = DateConverter.INSTANCE;
      MockDate mockDate0 = new MockDate(0L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      long long0 = dateConverter0.getInstantMillis(mockDate0, buddhistChronology0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      Date date0 = localDate0.toDate();
      long long0 = dateConverter0.getInstantMillis(date0, (Chronology) null);
      assertEquals(1392336000000L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      MockDate mockDate0 = new MockDate((-2669), 887, 887);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      long long0 = dateConverter0.getInstantMillis(mockDate0, copticChronology0);
      assertEquals((-84025987200000L), long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      // Undeclared exception!
      try { 
        dateConverter0.getInstantMillis((Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.DateConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      Class<?> class0 = dateConverter0.getSupportedType();
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateConverter dateConverter0 = DateConverter.INSTANCE;
      Chronology chronology0 = dateConverter0.getChronology((Object) "", (Chronology) null);
      // Undeclared exception!
      try { 
        dateConverter0.getInstantMillis("", chronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Date
         //
         verifyException("org.joda.time.convert.DateConverter", e);
      }
  }
}
