/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 19:34:04 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalDate_ESTest extends LocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 6;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      LocalDate localDate0 = new LocalDate(6, 6, 6, lenientChronology0);
      LocalDate localDate1 = localDate0.minusMonths(6);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      int int1 = 2147483623;
      // Undeclared exception!
      try { 
        localDate1.withField(dateTimeFieldType0, 2147483623);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 214748362200
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, 1);
      long long0 = 0L;
      localDate0.getValues();
      localDate1.getField(0, (Chronology) islamicChronology0);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      localDate0.size();
      Chronology chronology0 = localDate_Property0.getChronology();
      LocalDate localDate2 = localDate0.withWeekyear(3);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      localDate_Property0.withMaximumValue();
      mockGregorianCalendar0.toZonedDateTime();
      LocalDate localDate3 = localDate0.plusDays(1);
      localDate1.withYear(3);
      localDate0.toString((String) null);
      LocalDate.now(chronology0);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      localDate1.plusWeeks(1);
      LocalDate localDate4 = localDate2.withFields(localDate3);
      localDate4.property(dateTimeFieldType0);
      LocalDate localDate5 = localDate3.plusWeeks(392);
      localDate3.toDate();
      // Undeclared exception!
      try { 
        localDate5.minusWeeks(86400);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      MonthDay monthDay0 = new MonthDay(10000L, (Chronology) islamicChronology0);
      int int0 = 14;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pscvT>:");
      LocalDate localDate0 = monthDay0.toLocalDate(14);
      // Undeclared exception!
      try { 
        localDate0.minusMonths(4277);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8Sq)pw2u;p B0Uw");
      LocalDate localDate0 = new LocalDate((-1317L));
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      TimeZone timeZone0 = TimeZone.getTimeZone("8Sq)pw2u;p B0Uw");
      timeZone0.clone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      timeZone0.setID("org/joda/time/tz/data");
      localDate_Property0.getMillis();
      localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      localDate0.toDateTimeAtMidnight(dateTimeZone0);
      localDate0.getYearOfEra();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.GERMAN;
      localDate0.toString((String) null, locale0);
      localDate0.getEra();
      localDate0.minusWeeks(3704);
      LocalDate localDate1 = LocalDate.now();
      localDate1.era();
      int int0 = (-4521);
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      // Undeclared exception!
      try { 
        localDate1.withFieldAdded(durationFieldType0, 1969);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hours' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      LocalDate localDate0 = new LocalDate(635L);
      int int0 = 352;
      // Undeclared exception!
      try { 
        localDate0.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Chronology chronology0 = copticChronology0.withUTC();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LocalDate localDate0 = new LocalDate(chronology0);
      localDate0.toDateTime((LocalTime) null, (DateTimeZone) uTCDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 6;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      LocalDate localDate0 = new LocalDate(6, 6, 6, lenientChronology0);
      LocalDate localDate1 = localDate0.withMonthOfYear(6);
      DateTimeFieldType.secondOfDay();
      int int1 = 2147483623;
      // Undeclared exception!
      try { 
        localDate1.withCenturyOfEra(2147483623);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 214748362200
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeFieldType.dayOfYear();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.toZonedDateTime();
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      System.setCurrentTimeMillis(0L);
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      LocalDate localDate0 = new LocalDate(chronology0);
      localDate0.toDateTimeAtCurrentTime();
      PeriodType periodType0 = PeriodType.time();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0, (Chronology) strictChronology0);
      localDate0.withPeriodAdded(mutablePeriod0, 392);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.toDateTimeAtStartOfDay();
      LocalDate localDate1 = localDate0.withCenturyOfEra(28);
      LocalDate localDate2 = localDate1.withYear(28);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalDate localDate3 = localDate2.withCenturyOfEra(1900);
      localDate0.withEra(0);
      localDate2.withYear(28);
      localDate1.getFieldTypes();
      localDate0.getDayOfMonth();
      LocalDate localDate4 = localDate2.minusWeeks((-2941));
      localDate4.getYear();
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      localDate2.dayOfMonth();
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      localDate0.getWeekOfWeekyear();
      localDate2.getYearOfCentury();
      localDate1.getCenturyOfEra();
      MutablePeriod mutablePeriod0 = new MutablePeriod(31083597720000L);
      mutablePeriod0.getYears();
      mutablePeriod0.setPeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      localDate0.plus(mutablePeriod0);
      LocalDate localDate5 = localDate4.minusDays(1183);
      localDate2.toString();
      localDate_Property0.getChronology();
      localDate_Property0.roundFloorCopy();
      localDate2.yearOfEra();
      localDate5.toInterval((DateTimeZone) null);
      // Undeclared exception!
      try { 
        localDate3.withFieldAdded((DurationFieldType) null, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Chronology chronology0 = iSOChronology0.withUTC();
      LocalDate localDate0 = new LocalDate(chronology0);
      localDate0.yearOfCentury();
      LocalDate localDate1 = LocalDate.now(chronology0);
      localDate0.dayOfMonth();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z(D/WW");
      int int0 = 2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalDate localDate2 = localDate0.withYearOfEra(2);
      localDate2.withYearOfEra(2);
      localDate1.getValue(2);
      int int1 = 353;
      try { 
        iSOChronology0.getDateTimeMillis(2, (-2675), (-2675), (-2675), 292272992, (-2675), 353);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2675 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8vq)pw2u;p B0Uw");
      LocalDate localDate0 = new LocalDate((-1317L));
      localDate0.yearOfEra();
      TimeZone timeZone0 = TimeZone.getTimeZone("8vq)pw2u;p B0Uw");
      timeZone0.clone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      localDate0.toInterval(dateTimeZone0);
      timeZone0.setID("org/joda/time/tz/data");
      dateTimeZone0.nextTransition((-1317L));
      localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      localDate0.toDateTimeAtMidnight(dateTimeZone0);
      localDate0.getYearOfEra();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      localDate0.toString((String) null, locale0);
      localDate0.getEra();
      localDate0.minusWeeks(3704);
      LocalDate localDate1 = LocalDate.now();
      localDate1.era();
      localDate0.plusWeeks((-4521));
      localDate1.toDateTimeAtCurrentTime(dateTimeZone0);
      localDate1.toString();
      localDate1.equals(locale0);
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek((-4521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4521 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, 1);
      islamicChronology1.get((ReadablePartial) localDate0, 0L);
      localDate1.getField(0, (Chronology) islamicChronology0);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      localDate0.size();
      localDate_Property0.getChronology();
      LocalDate localDate2 = localDate0.withWeekyear(3);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.toZonedDateTime();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalDate localDate3 = localDate0.plusDays(1);
      localDate1.withYear(3);
      localDate0.toString((String) null);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      localDate1.plusWeeks(1);
      LocalDate localDate4 = localDate2.withFields(localDate3);
      localDate4.property(dateTimeFieldType0);
      localDate3.plusWeeks(392);
      localDate3.toDate();
      System.setCurrentTimeMillis(0L);
      localDate0.toDateTimeAtStartOfDay();
      // Undeclared exception!
      try { 
        localDate2.plusMonths((-2147483621));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.toDateTimeAtStartOfDay();
      LocalDate localDate1 = localDate0.withCenturyOfEra(28);
      LocalDate localDate2 = localDate0.plusDays(3214);
      localDate2.equals(localDate1);
      LocalDate.now();
      LocalDate localDate3 = localDate1.minusWeeks(1900);
      LocalDate localDate4 = localDate2.withYear(28);
      localDate1.getFieldTypes();
      localDate0.getDayOfMonth();
      LocalDate localDate5 = localDate2.minusWeeks((-2941));
      localDate5.getYear();
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      localDate2.dayOfMonth();
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      localDate0.getWeekOfWeekyear();
      localDate2.getYearOfCentury();
      localDate1.getCenturyOfEra();
      MutablePeriod mutablePeriod0 = new MutablePeriod(31083597720000L);
      mutablePeriod0.getYears();
      mutablePeriod0.setPeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      localDate0.plus(mutablePeriod0);
      LocalDate localDate6 = localDate5.minusDays(1183);
      localDate2.toString();
      localDate_Property0.getChronology();
      localDate1.minusDays(1900);
      localDate5.compareTo((ReadablePartial) localDate4);
      localDate2.yearOfEra();
      localDate6.toInterval((DateTimeZone) null);
      LocalDate localDate7 = localDate1.withYearOfEra(28);
      localDate4.getCenturyOfEra();
      localDate7.getDayOfWeek();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      localDate3.isSupported(durationFieldType0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      LocalDate localDate1 = localDate0.plusMonths((-2485));
      localDate0.dayOfYear();
      localDate0.getDayOfMonth();
      localDate1.weekyear();
      Date date0 = localDate1.toDate();
      localDate0.getYearOfCentury();
      LocalDate localDate2 = localDate1.withFields(localDate0);
      localDate2.dayOfWeek();
      LocalDate.fromDateFields(date0);
      LocalDate localDate3 = localDate2.withFields(localDate1);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      localDate3.toDateTimeAtStartOfDay(dateTimeZone0);
      localDate2.toDateTimeAtStartOfDay();
      localDate0.getEra();
      localDate0.hashCode();
      localDate0.toInterval();
      localDate1.weekOfWeekyear();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, 1);
      islamicChronology1.get((ReadablePartial) localDate0, 0L);
      localDate1.getField(0, (Chronology) islamicChronology0);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      localDate_Property0.getChronology();
      int int0 = new Integer(0);
      localDate_Property0.getChronology();
      // Undeclared exception!
      try { 
        localDate0.withWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekyear must be in the range [1,292271022]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-2L));
      LocalDate localDate1 = localDate0.plusMonths((-2485));
      localDate0.dayOfYear();
      localDate0.getDayOfMonth();
      localDate1.weekyear();
      localDate1.toDate();
      localDate0.getYearOfCentury();
      LocalDate localDate2 = localDate1.withFields(localDate0);
      localDate2.dayOfWeek();
      LocalDate localDate3 = localDate2.withFields(localDate1);
      localDate2.toDateTimeAtStartOfDay();
      localDate0.getEra();
      localDate0.hashCode();
      localDate0.toInterval();
      localDate1.weekOfWeekyear();
      localDate3.withLocalMillis(31);
      localDate3.toString();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, 1);
      islamicChronology1.get((ReadablePartial) localDate0, 0L);
      localDate1.getField(0, (Chronology) islamicChronology0);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      localDate_Property0.getChronology();
      localDate0.size();
      localDate_Property0.getChronology();
      LocalDate localDate2 = localDate0.withWeekyear(3);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.toZonedDateTime();
      LocalDate localDate3 = localDate0.plusDays(1);
      LocalDate localDate4 = new LocalDate();
      localDate0.toString((String) null);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      localDate1.plusWeeks(1);
      DateTimeUtils.setCurrentMillisFixed((-2734387200000L));
      LocalDate localDate5 = localDate2.withFields(localDate3);
      localDate5.property(dateTimeFieldType0);
      localDate3.plusWeeks(392);
      localDate3.toDate();
      System.setCurrentTimeMillis(26637897600000L);
      LocalDate.parse("1435-04-13");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8vq)pw2u;p B0Uw");
      LocalDate localDate0 = new LocalDate((-1317L));
      localDate0.yearOfEra();
      TimeZone timeZone0 = TimeZone.getTimeZone("8vq)pw2u;p B0Uw");
      timeZone0.clone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      timeZone0.setID("org/joda/time/tz/data");
      dateTimeZone0.nextTransition((-1317L));
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      DateTime dateTime1 = localDate0.toDateTimeAtMidnight(dateTimeZone0);
      localDate0.getYearOfEra();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.GERMAN;
      localDate0.toString((String) null, locale0);
      localDate0.getEra();
      dateTime1.withCenturyOfEra(193);
      localDate0.minusWeeks(3704);
      LocalDate localDate1 = LocalDate.now();
      localDate1.era();
      int int0 = (-4521);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Chronology chronology0 = gregorianChronology0.withUTC();
      LimitChronology limitChronology0 = LimitChronology.getInstance(chronology0, dateTime1, dateTime0);
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) limitChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is above the supported maximum of 1969-12-31T20:21:21.320Z (GregorianChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      LocalDate localDate1 = localDate0.plusMonths((-2485));
      localDate0.dayOfYear();
      localDate0.getDayOfMonth();
      localDate1.toDate();
      localDate0.getYearOfCentury();
      LocalDate localDate2 = localDate1.withFields(localDate0);
      localDate2.dayOfWeek();
      localDate2.withFields(localDate1);
      localDate2.compareTo((ReadablePartial) localDate0);
      // Undeclared exception!
      try { 
        LocalDate.parse("The calendar must not be null", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 6;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      LocalDate localDate0 = new LocalDate(6, 6, 6, lenientChronology0);
      // Undeclared exception!
      try { 
        localDate0.withEra(6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 6;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      LocalDate localDate0 = new LocalDate(6, 6, 6, lenientChronology0);
      LocalDate localDate1 = localDate0.minusMonths(6);
      DateTimeFieldType.secondOfDay();
      int int1 = 2147483623;
      // Undeclared exception!
      try { 
        localDate1.plusYears(2147483623);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483628 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8vq)pw2u;p B0Uw");
      LocalDate localDate0 = new LocalDate((-1317L));
      localDate0.yearOfEra();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      timeZone0.clone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      timeZone0.setID("org/joda/time/tz/data");
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      dateTimeZone0.nextTransition((-1317L));
      localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      localDate0.toDateTimeAtMidnight(dateTimeZone0);
      localDate0.getYearOfEra();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.GERMAN;
      localDate0.toString((String) null, locale0);
      localDate0.getEra();
      localDate0.minusWeeks(3704);
      LocalDate localDate1 = LocalDate.now();
      localDate1.era();
      localDate0.plusWeeks((-4521));
      localDate1.toDateTimeAtCurrentTime(dateTimeZone0);
      LocalDate.now();
      localDate1.toString();
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek((-4521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4521 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate((-61279804800000L), (Chronology) strictChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.toString((String) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) gregorianChronology0);
      LocalDate localDate0 = monthDay0.toLocalDate(3);
      LocalDate localDate1 = localDate0.withCenturyOfEra(376);
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        localDate1.minus(weeks0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.withYear(1973);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      localDate0.toDateTimeAtCurrentTime((DateTimeZone) uTCDateTimeZone0);
      LocalDate localDate1 = localDate0.minusWeeks((-211));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      LocalDate localDate2 = localDate0.minusYears(0);
      localDate0.plusWeeks(0);
      LocalTime localTime0 = new LocalTime((DateTimeZone) uTCDateTimeZone0);
      localTime0.plusSeconds(153692453);
      localTime0.plusHours(0);
      localDate1.toLocalDateTime(localTime0);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      localDate1.isSupported(durationFieldType0);
      localDate2.getDayOfYear();
      localDate1.toDate();
      localDate2.size();
      localDate2.toDateTime(localTime0, (DateTimeZone) uTCDateTimeZone0);
      localDate1.isSupported((DateTimeFieldType) null);
      localDate2.toDateTimeAtMidnight((DateTimeZone) uTCDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      Period period0 = Period.millis(13);
      Period.weeks(13);
      Period period1 = period0.plusWeeks(13);
      int int0 = (-487);
      Period period2 = period1.minusHours((-487));
      Period period3 = period2.plusDays(5062500);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      period3.indexOf(durationFieldType0);
      LocalDate localDate1 = localDate0.plus(period3);
      localDate1.equals(localDate_Property0);
      localDate1.minus(period2);
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy((-1590));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1590 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      TimeZone timeZone0 = TimeZone.getTimeZone("d#ptsVCM%$,1qeM DQI");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      Chronology chronology0 = copticChronology0.withZone(dateTimeZone0);
      LocalDate localDate0 = LocalDate.now(chronology0);
      int int0 = 86400000;
      // Undeclared exception!
      try { 
        localDate0.minusDays(86400000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = lenientChronology0.withZone(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      LocalDate localDate0 = new LocalDate(689L, dateTimeZone1);
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      LocalDate localDate1 = localDate_Property0.addToCopy(1);
      LocalDate localDate2 = localDate1.minusMonths(1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        localDate2.withYearOfEra(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDate localDate0 = new LocalDate((Object) null);
      localDate0.getDayOfMonth();
      int int0 = 1;
      LocalDate localDate1 = localDate0.withDayOfMonth(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      localDate1.getYearOfEra();
      localDate0.withYear(1);
      LocalDate localDate2 = localDate1.minusDays(1);
      Period period0 = Period.weeks(2014);
      Days days0 = period0.toStandardDays();
      localDate2.minus(days0);
      localDate2.minusDays(1);
      localDate1.centuryOfEra();
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        localDate1.plusYears(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gregorianChronology0);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 1608;
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(1608, 1608, (-5101), buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1608 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 2;
      int int1 = 571;
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(2, 2, 571);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 571 for dayOfMonth must be in the range [1,28]: year: 2 month: 2
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      dateTimeZone0.equals((Object) null);
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(yearMonth0, dateTimeZone1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded(durationFieldType0, (-491));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'halfdays' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.getWeekOfWeekyear();
      LocalDate localDate1 = localDate0.minusMonths((-2627));
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTimeZone.getProvider();
      uTCDateTimeZone0.getOffset((long) (-2627));
      localDate1.monthOfYear();
      uTCDateTimeZone0.isStandardOffset(7);
      localDate1.toDateTimeAtMidnight((DateTimeZone) uTCDateTimeZone0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      try { 
        localDate0.toString("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.dayOfWeek();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimePrinter0).estimatePrintedLength();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(4545);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(4545);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      localDate0.toString(dateTimeFormatter4);
      LocalDate localDate1 = localDate0.withDayOfWeek(1);
      Locale locale0 = Locale.forLanguageTag("");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      timeZone0.setID("Field '");
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      localDate0.toString((String) null, locale0);
      // Undeclared exception!
      try { 
        localDate1.getValue(4545);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 4545
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.minusMonths(37);
      // Undeclared exception!
      try { 
        localDate0.getValue(307);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 307
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(ethiopicChronology0, ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.EthiopicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Object) null);
      localDate0.plusYears(76);
      localDate0.withWeekyear(1023);
      // Undeclared exception!
      try { 
        localDate0.withEra(2558);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2558 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      Instant instant0 = Instant.EPOCH;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      dateTimeZone0.getOffset(259200000L);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(gJChronology0);
      LocalDate localDate0 = LocalDate.parse("", dateTimeFormatter1);
      localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      LocalDate.now(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("Zone must not be null");
      // Undeclared exception!
      try { 
        LocalDate.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDate localDate0 = new LocalDate((Chronology) null);
      LocalDate localDate1 = localDate0.minusWeeks((-624));
      // Undeclared exception!
      try { 
        localDate1.withDayOfYear((-624));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -624 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = (-43);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-43));
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, 518);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 518 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LocalDate localDate0 = new LocalDate(1440L, (Chronology) buddhistChronology0);
      LocalDate localDate1 = localDate0.minusWeeks(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      localDate1.get(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localDate1.withMonthOfYear((-2821));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2821 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(916);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      LocalDate localDate0 = LocalDate.now(dateTimeZone1);
      LocalDate localDate1 = localDate0.plusMonths(916);
      LocalDate.Property localDate_Property0 = localDate1.era();
      Locale locale0 = new Locale("", "org/joda/time/tz/data");
      Locale.getISOCountries();
      Locale locale1 = new Locale("org.joda.time.LocalDate");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.lookupTag(linkedList0, set0);
      locale0.getDisplayVariant(locale1);
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy("PeriodFormat.months.list", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"PeriodFormat.months.list\" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((Object) null, julianChronology0);
      localDate0.toDateTimeAtStartOfDay((DateTimeZone) null);
      LocalDate localDate1 = new LocalDate(1000L);
      LocalDate.Property localDate_Property0 = localDate1.monthOfYear();
      localDate_Property0.getField();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Partial partial0 = new Partial();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(partial0, islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      int int0 = 157;
      LocalDate localDate1 = localDate0.withCenturyOfEra(157);
      int int1 = 15;
      LocalDate localDate2 = localDate1.withYearOfCentury(15);
      LocalDate.Property localDate_Property0 = localDate2.yearOfCentury();
      localDate0.withDayOfWeek(5);
      localDate_Property0.getField();
      localDate2.hashCode();
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        MockCalendar.getInstance((TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Minutes minutes0 = Minutes.ONE;
      localDate0.minus(minutes0);
      int int0 = 39;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        localDate0.getField(39, (Chronology) copticChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 39
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse((String) null, (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDate localDate0 = new LocalDate((Chronology) null);
      int int0 = 10125000;
      // Undeclared exception!
      try { 
        localDate0.withCenturyOfEra(10125000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 10125000 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        LocalDate.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      int int0 = 0;
      LocalDate localDate1 = localDate0.minusDays(0);
      localDate1.plusWeeks(0);
      Minutes minutes0 = Minutes.ZERO;
      // Undeclared exception!
      try { 
        localDate1.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 3253;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2446, 3253, 2446, 3253, 2446, 2446);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      // Undeclared exception!
      try { 
        localDate0.getField(2446);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 2446
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(8, 8, 8);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("HEI^/48Nzo;Y2");
      // Undeclared exception!
      try { 
        LocalDate.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(2256, 76, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 76 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      localDate0.getYearOfEra();
      localDate0.withMonthOfYear(1);
      String string0 = "";
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \"/ZoneInfoMap\" ClassLoader: org.evosuite.instrumentation.InstrumentingClassLoader@0000000005
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      timeZone0.observesDaylightTime();
      int int0 = 1;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0, 1);
      Locale locale0 = Locale.PRC;
      timeZone0.getDisplayName(locale0);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      dateTimeZone0.getNameKey(863L);
      localDate0.getEra();
      // Undeclared exception!
      try { 
        localDate0.withYearOfEra((-644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -644 for yearOfEra must be in the range [1,292272984]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
      localDate0.toDateTimeAtCurrentTime((DateTimeZone) uTCDateTimeZone0);
      islamicChronology0.add(3024L, 3600000L, (-78));
      LocalDate.now((DateTimeZone) uTCDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      localDate0.property(dateTimeFieldType0);
      Partial partial0 = new Partial(dateTimeFieldType0, 1);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        LocalDate.parse("The chronology of the time does not match", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The chronology of the time does ...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-1L));
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-2116));
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      localDate1.toDateTimeAtMidnight((DateTimeZone) uTCDateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate1.year();
      localDate_Property0.getLocalDate();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      LocalDate localDate1 = localDate0.withYearOfEra(98);
      LocalDate localDate2 = localDate1.withYear(98);
      localDate2.yearOfCentury();
      // Undeclared exception!
      try { 
        localDate2.withMonthOfYear(98);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 98 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1130));
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate(0L, (Chronology) copticChronology0);
      LocalDate localDate1 = localDate0.plusWeeks(627);
      Minutes minutes0 = Minutes.THREE;
      LocalDate localDate2 = localDate1.minus(minutes0);
      LocalDate localDate3 = localDate2.withLocalMillis(627);
      LocalDate localDate4 = localDate3.plus(minutes0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      // Undeclared exception!
      try { 
        localDate4.withField(dateTimeFieldType0, (-3651));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) uTCDateTimeZone0);
      uTCDateTimeZone0.getOffset((ReadableInstant) dateTime0);
      islamicChronology0.add(3024L, 3600000L, (-78));
      LocalDate.now((DateTimeZone) uTCDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      localDate0.property(dateTimeFieldType0);
      String string0 = "The chronology of the time does not match";
      Partial partial0 = new Partial(dateTimeFieldType0, 1);
      partial0.getFormatter();
      // Undeclared exception!
      try { 
        localDate0.minusYears(6719);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -5284 for year must be in the range [1,292271022]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      LocalDate localDate1 = localDate0.withEra(0);
      LocalDate localDate2 = localDate1.plusWeeks(918);
      LocalDate.Property localDate_Property0 = localDate2.dayOfWeek();
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.getAvailableIDs();
      dateTimeZone0.nextTransition(2338L);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      localDate0.plusWeeks((-1349));
      localDate_Property0.roundHalfCeilingCopy();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      MockDate mockDate0 = new MockDate(3459, 39, 3459, (-3704), (-3103), 486);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      LocalDate localDate0 = yearMonth0.toLocalDate(4);
      LocalDate localDate1 = localDate0.withYear(0);
      localDate1.getChronology();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        localDate0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1413).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Integer integer0 = new Integer(1447);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1447);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      LocalDate localDate0 = dateTimeFormatter3.parseLocalDate("");
      LocalDate localDate1 = localDate0.minusYears(1447);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      dateTimeFormatter2.printTo((Writer) bufferedWriter0, (long) 1447);
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      localDate1.isSupported(durationFieldType0);
      localDate1.toInterval();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1413, 1447, 1447, 41, 1447, 57);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalDate.fromDateFields(date0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      // Undeclared exception!
      try { 
        localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusYears(608);
      Hours hours0 = Hours.EIGHT;
      LocalDate localDate2 = localDate1.withPeriodAdded(hours0, 608);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      LocalDate localDate3 = localDate2.withFieldAdded(durationFieldType0, 2026);
      localDate3.getYearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      localDate2.weekyear();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      hours0.toPeriod();
      localDate2.compareTo((ReadablePartial) localDate1);
      dateTimeFieldType0.isSupported(iSOChronology0);
      LocalDate.Property localDate_Property0 = localDate3.property(dateTimeFieldType0);
      dateTimeFieldType0.isSupported(iSOChronology0);
      LocalDate localDate4 = localDate_Property0.roundHalfEvenCopy();
      localDate1.isSupported(durationFieldType0);
      localDate4.centuryOfEra();
      localDate4.toDateTimeAtStartOfDay();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1265));
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(uTCDateTimeZone0);
      localDate4.dayOfWeek();
      // Undeclared exception!
      try { 
        LocalDate.parse("zl", dateTimeFormatter3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusYears(608);
      Hours hours0 = Hours.EIGHT;
      LocalDate localDate2 = localDate1.withPeriodAdded(hours0, 608);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      LocalDate localDate3 = localDate2.withFieldAdded(durationFieldType0, 2026);
      localDate3.getYearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      localDate2.weekyear();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      hours0.toPeriod();
      localDate2.compareTo((ReadablePartial) localDate1);
      dateTimeFieldType0.isSupported(iSOChronology0);
      LocalDate.Property localDate_Property0 = localDate3.property(dateTimeFieldType0);
      dateTimeFieldType0.isSupported(iSOChronology0);
      LocalDate localDate4 = localDate_Property0.roundHalfEvenCopy();
      localDate4.centuryOfEra();
      localDate4.toDateTimeAtStartOfDay();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1265));
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        LocalDate.parse("zl", dateTimeFormatter3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusYears(608);
      Hours hours0 = Hours.EIGHT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-635), 608, (-932));
      LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate2 = localDate1.withPeriodAdded(hours0, 608);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      LocalDate localDate3 = localDate2.withFieldAdded(durationFieldType0, 2026);
      localDate3.getYearOfCentury();
      localDate2.weekyear();
      ISOChronology.getInstanceUTC();
      hours0.toPeriod();
      localDate2.compareTo((ReadablePartial) localDate1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1265));
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        LocalDate.parse("zl", dateTimeFormatter3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      dateTimeZone0.getShortName(21600000L);
      LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone0);
      LocalDate localDate1 = localDate0.plusDays(1);
      localDate1.minusMonths(1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-830));
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(strictChronology0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.StrictChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      LocalDate localDate0 = LocalDate.now(chronology0);
      localDate0.getYearOfCentury();
      localDate0.getYear();
      localDate0.getDayOfMonth();
      localDate0.getDayOfMonth();
      Years years0 = Years.years(763);
      years0.toString();
      localDate0.withPeriodAdded(years0, (-1349));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      // Undeclared exception!
      try { 
        localDate0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfHalfday' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      LocalTime localTime0 = new LocalTime(0L);
      localDate0.withFields(localTime0);
      localDate_Property0.compareTo((ReadablePartial) localDate0);
      LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
      localDate1.toDateTime((LocalTime) null);
      localDate_Property0.getFieldType();
      LocalDate localDate2 = localDate_Property0.roundCeilingCopy();
      TimeZone.getDefault();
      localDate2.getDayOfMonth();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      JulianChronology.getInstanceUTC();
      LocalTime localTime1 = new LocalTime(1, 0, 0);
      JulianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      localDate0.toLocalDateTime(localTime1);
      localDate0.toInterval((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime0 = localDate2.toDateTime(localTime1, (DateTimeZone) uTCDateTimeZone0);
      localDate1.toDateTime(dateTime0);
      localDate2.getDayOfYear();
      LocalDate.Property localDate_Property1 = localDate1.dayOfMonth();
      localDate_Property1.getName();
      String string0 = "ho";
      // Undeclared exception!
      try { 
        JulianChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 2147483644);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 2147483644
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 6;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      LocalDate localDate0 = new LocalDate(6, 6, 6, lenientChronology0);
      LocalDate localDate1 = localDate0.minusMonths(6);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      int int1 = 2147483623;
      // Undeclared exception!
      try { 
        localDate1.withField(dateTimeFieldType0, 2147483623);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(604800, 604800, 3, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 604800 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.getDayOfMonth();
      localDate0.minusYears(0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.toDateTimeAtStartOfDay();
      LocalDate localDate1 = localDate0.withCenturyOfEra(28);
      LocalDate localDate2 = localDate0.plusDays(3214);
      localDate2.equals(localDate1);
      LocalDate localDate3 = localDate2.withCenturyOfEra(1900);
      localDate3.withWeekOfWeekyear(28);
      localDate2.withYear(28);
      localDate1.getFieldTypes();
      localDate0.getDayOfMonth();
      LocalDate localDate4 = localDate2.minusWeeks((-2941));
      localDate4.getYear();
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      localDate2.dayOfMonth();
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      localDate0.getWeekOfWeekyear();
      localDate2.getYearOfCentury();
      localDate1.getCenturyOfEra();
      MutablePeriod mutablePeriod0 = new MutablePeriod(31083597720000L);
      mutablePeriod0.getYears();
      mutablePeriod0.setPeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      localDate0.plus(mutablePeriod0);
      LocalDate localDate5 = localDate4.minusDays(1183);
      localDate2.toString();
      localDate_Property0.getChronology();
      localDate_Property0.roundFloorCopy();
      localDate2.yearOfEra();
      localDate5.toInterval((DateTimeZone) null);
      localDate4.equals(localDate0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      LocalTime localTime0 = new LocalTime(0L);
      localDate0.withFields(localTime0);
      LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
      localDate1.toDateTime(localTime0);
      localDate_Property0.getFieldType();
      LocalDate localDate2 = localDate_Property0.roundCeilingCopy();
      TimeZone.getDefault();
      localDate2.getDayOfMonth();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      JulianChronology.getInstanceUTC();
      localDate0.toLocalDateTime(localTime0);
      DateTime dateTime0 = localDate2.toDateTime(localTime0, (DateTimeZone) uTCDateTimeZone0);
      localDate1.toDateTime(dateTime0);
      localDate2.getDayOfYear();
      // Undeclared exception!
      try { 
        localDate2.withWeekOfWeekyear(89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 89 for weekOfWeekyear must be in the range [1,53]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDate localDate0 = new LocalDate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instant instant0 = Instant.EPOCH;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      FileSystemHandling.shouldAllThrowIOExceptions();
      dateTimeFieldType0.getDurationType();
      instant0.toMutableDateTime();
      localDate0.isSupported(dateTimeFieldType0);
      localDate0.toDateTime(instant0);
      localDate0.era();
      FileSystemHandling.shouldAllThrowIOExceptions();
      localDate0.getYearOfEra();
      localDate0.getLocalMillis();
      localDate0.weekOfWeekyear();
      localDate0.getMonthOfYear();
      localDate0.dayOfWeek();
      localDate0.getDayOfWeek();
      localDate0.monthOfYear();
      localDate0.plusYears(0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Chronology chronology0 = copticChronology0.withUTC();
      LocalDate localDate1 = LocalDate.now(chronology0);
      // Undeclared exception!
      try { 
        localDate1.withYear((-5469));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1447);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      MockDate mockDate0 = new MockDate(1447);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.plusYears(1447);
      Period period0 = Period.weeks(1447);
      Seconds seconds0 = period0.toStandardSeconds();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      localDate0.isSupported(dateTimeFieldType0);
      localDate1.getYearOfCentury();
      Seconds seconds1 = Seconds.seconds(1447);
      seconds0.minus(seconds1);
      localDate0.toDateTimeAtStartOfDay();
      // Undeclared exception!
      try { 
        localDate1.withPeriodAdded(seconds0, 37);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 875145600 * 37
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8vq)pw2u;p B0Uw");
      LocalDate localDate0 = new LocalDate((-1317L));
      localDate0.yearOfEra();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      timeZone0.clone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      timeZone0.setID("org/joda/time/tz/data");
      dateTimeZone0.nextTransition((-1317L));
      localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      localDate0.toDateTimeAtMidnight(dateTimeZone0);
      localDate0.getYearOfEra();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.GERMAN;
      localDate0.toString((String) null, locale0);
      localDate0.getEra();
      localDate0.minusWeeks(3704);
      LocalDate localDate1 = LocalDate.now();
      localDate1.era();
      localDate0.plusWeeks((-4521));
      localDate1.toDateTimeAtCurrentTime(dateTimeZone0);
      localDate1.toString();
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek((-4521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4521 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTimeZone.getAvailableIDs();
      uTCDateTimeZone0.nextTransition(2338L);
      LocalDate localDate0 = new LocalDate((DateTimeZone) uTCDateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.era();
      Chronology chronology0 = localDate_Property0.getChronology();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, uTCDateTimeZone0);
      LocalDate.now((Chronology) zonedChronology0);
      localDate0.weekOfWeekyear();
      LocalDate localDate1 = localDate0.plusWeeks((-1349));
      String string0 = "PeriodFormat.milliseconds";
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      int[] intArray0 = new int[3];
      dateTimeFieldType1.getRangeDurationType();
      intArray0[0] = (-1349);
      intArray0[1] = (-1349);
      intArray0[2] = (-1349);
      Partial partial0 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, intArray0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.forLanguageTag("org/joda/time/tz/data");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      dateTimeFormatter2.withOffsetParsed();
      // Undeclared exception!
      try { 
        localDate1.compareTo((ReadablePartial) partial0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      Weeks weeks0 = Weeks.THREE;
      LocalDate localDate1 = localDate0.withPeriodAdded(weeks0, 358);
      LocalDate localDate2 = localDate1.minusWeeks(1);
      LocalDate localDate3 = localDate2.minusYears(1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      // Undeclared exception!
      try { 
        localDate3.withField(dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfHalfday' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(0L);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      localDate_Property0.compareTo((ReadablePartial) localDate0);
      localDate_Property0.roundHalfFloorCopy();
      localDate0.toDateTimeAtMidnight();
      localDate_Property0.getFieldType();
      localDate_Property0.roundCeilingCopy();
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        JulianChronology.getInstance(dateTimeZone0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Object) null);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      localDate_Property0.addWrapFieldToCopy(0);
      localDate_Property0.roundCeilingCopy();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(670L);
      int int0 = 1;
      LocalDate localDate1 = localDate0.withDayOfMonth(1);
      Locale locale0 = Locale.TAIWAN;
      localDate1.toString((String) null, locale0);
      LocalDate localDate2 = LocalDate.now();
      localDate2.plusDays(1);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      // Undeclared exception!
      try { 
        localDate2.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millisOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.minusDays(1886);
      LocalDate.Property localDate_Property0 = localDate1.monthOfYear();
      localDate_Property0.roundFloorCopy();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDate localDate0 = new LocalDate(581L, (Chronology) iSOChronology0);
      LocalDate localDate1 = localDate0.withYearOfCentury(0);
      localDate1.isAfter(localDate0);
      localDate0.dayOfYear();
      localDate0.getYearOfCentury();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      Locale locale0 = Locale.US;
      Locale.getISOLanguages();
      locale0.getDisplayScript();
      uTCDateTimeZone0.getName(6569L, locale0);
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-688)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      localDate0.toInterval();
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseDateTime("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\" is too short
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("weekyear");
      LocalDate localDate0 = new LocalDate(1300L, (DateTimeZone) null);
      LocalDate localDate1 = localDate0.minusWeeks((-2147483638));
      localDate1.getWeekyear();
      localDate1.weekOfWeekyear();
      localDate0.getDayOfYear();
      DateTime.now();
      localDate1.era();
      localDate0.getLocalMillis();
      localDate0.toDate();
      DateTimeZone.setProvider(uTCProvider0);
      localDate1.toString();
      LocalDate localDate2 = localDate0.withYear(350);
      Locale locale0 = Locale.ENGLISH;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      Locale locale1 = locale0.stripExtensions();
      localDate2.getLocalMillis();
      try { 
        localDate1.toString("org/joda/time/tz/data", locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDate localDate0 = new LocalDate(581L, (Chronology) iSOChronology0);
      LocalDate localDate1 = localDate0.withYearOfCentury(0);
      localDate0.isEqual(localDate1);
      localDate1.isAfter(localDate0);
      localDate0.dayOfYear();
      localDate0.getYearOfCentury();
      Locale locale0 = Locale.US;
      Locale.getISOLanguages();
      locale0.getDisplayScript();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
      dateTimeFormatter2.withLocale(locale0);
      localDate1.toDateTimeAtCurrentTime();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 2971;
      MockDate mockDate0 = new MockDate(2971, (-1), (-1));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.withLocalMillis(3790713600000L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Chronology must not be null");
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      LocalDate localDate2 = localDate1.withFieldAdded(durationFieldType0, 608);
      LocalDate localDate3 = localDate2.minusDays((-2494));
      LocalDate localDate4 = localDate3.minusWeeks(3);
      localDate4.compareTo((ReadablePartial) localDate2);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      localDate4.isSupported(dateTimeFieldType0);
      localDate0.dayOfYear();
      LocalDate localDate5 = localDate2.plusWeeks((-1349));
      LocalDate localDate6 = localDate5.plusMonths(1);
      // Undeclared exception!
      try { 
        localDate6.withDayOfWeek(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 10 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now(chronology0);
      LocalDate localDate0 = monthDay0.toLocalDate(1);
      // Undeclared exception!
      try { 
        localDate0.plusDays((-954));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, 1);
      islamicChronology1.get((ReadablePartial) localDate0, 0L);
      localDate1.getField(0, (Chronology) islamicChronology0);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      localDate_Property0.getChronology();
      localDate0.size();
      localDate_Property0.getChronology();
      LocalDate localDate2 = localDate0.withWeekyear(3);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate3 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      mockGregorianCalendar0.toZonedDateTime();
      LocalDate localDate4 = localDate0.plusDays(1);
      localDate3.withYear(3);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      localDate3.plusWeeks(1);
      LocalDate localDate5 = localDate2.withFields(localDate4);
      localDate5.property(dateTimeFieldType0);
      localDate4.plusWeeks(392);
      localDate4.toDate();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      MockDate mockDate0 = new MockDate(2, 2, 2);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.plusYears(2);
      localDate1.toDateTimeAtMidnight();
      Period.months(2);
      Seconds seconds0 = Seconds.ZERO;
      Seconds seconds1 = Seconds.seconds(2);
      seconds0.minus(seconds1);
      localDate1.withPeriodAdded(seconds0, 37);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, 1);
      islamicChronology1.get((ReadablePartial) localDate0, 0L);
      localDate1.getField(0, (Chronology) islamicChronology0);
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localDate1, (ReadablePartial) localDate1);
      islamicChronology0.add((ReadablePeriod) hours0, 2041891200000L, 7593750);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      localDate_Property0.getChronology();
      localDate0.size();
      localDate_Property0.getChronology();
      LocalDate localDate2 = localDate0.withWeekyear(3);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate3 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      islamicChronology1.withZone((DateTimeZone) null);
      LocalDate localDate4 = localDate0.plusDays(1);
      LocalDate localDate5 = localDate3.withYear(3);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      localDate3.plusWeeks(1);
      localDate2.withFields(localDate4);
      LocalTime localTime0 = new LocalTime();
      localDate5.toDateTime(localTime0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("weekyear");
      LocalDate localDate0 = new LocalDate(1300L, (DateTimeZone) null);
      LocalDate localDate1 = localDate0.minusWeeks(2147483645);
      localDate1.getWeekyear();
      localDate1.weekOfWeekyear();
      localDate0.getDayOfYear();
      localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
      localDate0.centuryOfEra();
      localDate0.getLocalMillis();
      localDate0.toDate();
      DateTimeZone.setProvider(uTCProvider0);
      localDate1.toString();
      localDate0.withYear(350);
      Locale locale0 = Locale.ENGLISH;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      Locale locale1 = locale0.stripExtensions();
      try { 
        localDate1.toString("org/joda/time/tz/data", locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDate localDate0 = new LocalDate(581L, (Chronology) iSOChronology0);
      LocalDate localDate1 = localDate0.withYearOfCentury(0);
      localDate1.isAfter(localDate0);
      localDate0.dayOfYear();
      localDate0.getYearOfCentury();
      Locale locale0 = Locale.US;
      Locale.getISOLanguages();
      locale0.getDisplayScript();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
      dateTimeFormatter2.withLocale(locale0);
      localDate1.getYearOfCentury();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<9g");
      MockDate mockDate0 = new MockDate(1000L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.withWeekyear((-2874));
      LocalDate localDate2 = localDate1.minusWeeks((-2874));
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      localDate1.toDateTimeAtCurrentTime((DateTimeZone) null);
      localDate2.withFields(localDate1);
      localDate2.getValue(1);
      localDate1.plusMonths(1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.hashCode();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      localDate0.property(dateTimeFieldType0);
      localDate0.getValue(0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, 1);
      islamicChronology1.get((ReadablePartial) localDate0, 0L);
      localDate1.getField(0, (Chronology) islamicChronology0);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      localDate_Property0.getChronology();
      localDate0.size();
      localDate_Property0.getChronology();
      LocalDate localDate2 = localDate0.withWeekyear(3);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate3 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate4 = localDate0.plusDays(1);
      localDate3.withYear(3);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      localDate3.plusWeeks(1);
      LocalDate localDate5 = localDate2.withFields(localDate4);
      Months months0 = Months.FIVE;
      localDate5.withPeriodAdded(months0, 0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("weekyear");
      LocalDate localDate0 = new LocalDate(1300L, (DateTimeZone) null);
      LocalDate localDate1 = localDate0.minusWeeks((-2147483638));
      localDate1.getWeekyear();
      localDate1.weekOfWeekyear();
      localDate0.getDayOfYear();
      localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
      localDate1.era();
      localDate0.getLocalMillis();
      localDate0.toDate();
      DateTimeZone.setProvider(uTCProvider0);
      localDate1.toString();
      localDate0.withYear(350);
      Locale locale0 = Locale.ENGLISH;
      EvoSuiteFile evoSuiteFile0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(350);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 1);
      LocalTime localTime0 = new LocalTime(localDateTime1, copticChronology0);
      LocalTime localTime1 = localTime0.minusMinutes(350);
      // Undeclared exception!
      try { 
        localDate1.toDateTime(localTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = (-2977);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2977), 839, (-3360));
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      localDate0.getEra();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      iSOChronology0.getZone();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(839, 0, 486, (-2977), iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 839 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Chronology chronology0 = islamicChronology0.withUTC();
      LocalDate localDate0 = new LocalDate(chronology0);
      localDate0.size();
      localDate0.weekyear();
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      LocalDate localDate1 = new LocalDate((DateTimeZone) uTCDateTimeZone0);
      localDate0.dayOfWeek();
      IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      localDate0.toDateTimeAtCurrentTime((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime((LocalTime) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The time must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDate localDate0 = new LocalDate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instant instant0 = Instant.EPOCH;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      FileSystemHandling.shouldAllThrowIOExceptions();
      dateTimeFieldType0.getRangeDurationType();
      instant0.toMutableDateTime();
      localDate0.isSupported(dateTimeFieldType0);
      localDate0.toDateTime(instant0);
      localDate0.era();
      FileSystemHandling.shouldAllThrowIOExceptions();
      localDate0.getYearOfEra();
      localDate0.getLocalMillis();
      localDate0.weekOfWeekyear();
      localDate0.getMonthOfYear();
      localDate0.weekyear();
      localDate0.getDayOfWeek();
      localDate0.dayOfYear();
      localDate0.plusYears(0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Chronology chronology0 = copticChronology0.withUTC();
      LocalDate localDate1 = LocalDate.now(chronology0);
      // Undeclared exception!
      try { 
        localDate1.withYear((-5469));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(42);
      LocalDate localDate0 = localDateTime1.toLocalDate();
      localDateTime0.withMillisOfDay(42);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L, (Chronology) islamicChronology0);
      int int0 = 22;
      localTime0.withHourOfDay(22);
      LocalTime localTime1 = localTime0.withSecondOfMinute(42);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)buddhistChronology0.getZone();
      uTCDateTimeZone0.writeReplace();
      // Undeclared exception!
      try { 
        localDate0.toDateTime(localTime1, (DateTimeZone) uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withDayOfYear(3);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      dateTimeFieldType0.getRangeDurationType();
      localDate1.withField(dateTimeFieldType0, 3);
      localDate1.dayOfWeek();
      LocalTime localTime0 = new LocalTime(3, 3);
      localTime0.millisOfDay();
      int int0 = (-1511);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
      localTime0.indexOf(dateTimeFieldType1);
      localTime0.getField(0);
      localTime0.get(dateTimeFieldType1);
      localTime0.plusHours(int0);
      localDate0.toDateTime(localTime0);
      localDate0.getYear();
      localDate0.toDateTimeAtMidnight();
      int int1 = 0;
      // Undeclared exception!
      try { 
        localDate0.withWeekOfWeekyear(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      int int0 = (-1206);
      LocalDateTime localDateTime0 = new LocalDateTime((long) (-1206));
      LocalDateTime localDateTime1 = localDateTime0.minusHours((-1206));
      LocalDateTime localDateTime2 = localDateTime1.minusWeeks((-1206));
      LocalDateTime localDateTime3 = localDateTime2.withMonthOfYear(5);
      // Undeclared exception!
      try { 
        localDate0.isEqual(localDateTime3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      Chronology chronology0 = lenientChronology0.withUTC();
      LocalDate localDate0 = new LocalDate(chronology0);
      lenientChronology0.withUTC();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      uTCDateTimeZone0.getMillisKeepLocal(dateTimeZone0, 1);
      localDate0.toDateTimeAtMidnight((DateTimeZone) uTCDateTimeZone0);
      localDate0.equals(chronology0);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      LocalDate localDate1 = localDate_Property0.withMinimumValue();
      localDate1.withDayOfYear(61);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2971, (-1), 2143);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.withLocalMillis(3790713600000L);
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      LocalDate localDate2 = localDate1.withFieldAdded(durationFieldType0, 608);
      LocalDate localDate3 = localDate2.minusDays((-2494));
      LocalDate localDate4 = localDate3.minusWeeks(3);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      localDate4.isSupported(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.toDateTimeAtStartOfDay();
      LocalDate localDate1 = localDate0.withCenturyOfEra(28);
      localDate1.equals(localDate1);
      LocalDate localDate2 = localDate1.withCenturyOfEra(1900);
      localDate2.withWeekOfWeekyear(28);
      LocalDate localDate3 = localDate1.withYear(28);
      localDate1.getFieldTypes();
      LocalDate localDate4 = localDate1.minusWeeks((-2941));
      localDate4.getYear();
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      localDate1.dayOfMonth();
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      localDate0.getWeekOfWeekyear();
      localDate0.getYearOfCentury();
      localDate1.getCenturyOfEra();
      MutablePeriod mutablePeriod0 = new MutablePeriod(31083597720000L);
      mutablePeriod0.getYears();
      mutablePeriod0.setPeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      localDate0.plus(mutablePeriod0);
      LocalDate localDate5 = localDate4.minusDays(1183);
      localDate0.toString();
      localDate_Property0.getChronology();
      localDate0.yearOfEra();
      localDate5.toInterval((DateTimeZone) null);
      localDate0.plusMonths(28);
      localDate3.toString("2014-02-14");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(2698L, (Chronology) null);
      LocalDate localDate1 = localDate0.withCenturyOfEra(785);
      LocalDate localDate2 = localDate1.minusMonths(785);
      LocalDate localDate3 = localDate2.minusDays((-1976));
      LocalDate localDate4 = localDate3.withYearOfEra(1113);
      localDate4.withCenturyOfEra(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      localDate1.property(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MonthDay monthDay0 = MonthDay.now((DateTimeZone) uTCDateTimeZone0);
      LocalDate localDate0 = monthDay0.toLocalDate(58);
      LocalDate localDate1 = localDate0.withEra(1);
      LocalDate localDate2 = localDate1.plusMonths(623158436);
      int int0 = 85;
      // Undeclared exception!
      try { 
        localDate2.withDayOfMonth(85);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 85 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("weekyear");
      LocalDate localDate0 = new LocalDate(1300L, (DateTimeZone) null);
      localDate0.getWeekyear();
      localDate0.weekOfWeekyear();
      localDate0.getDayOfYear();
      localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
      localDate0.centuryOfEra();
      localDate0.getLocalMillis();
      localDate0.toDate();
      DateTimeZone.setProvider(uTCProvider0);
      localDate0.toString();
      LocalDate localDate1 = localDate0.withYear(350);
      Locale locale0 = Locale.ENGLISH;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LocalTime localTime0 = LocalTime.now();
      uTCProvider0.getZone("tCZMl\"!^(0$}>d,");
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      localDate1.toDateTime(localTime0, (DateTimeZone) null);
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      Locale locale1 = locale0.stripExtensions();
      try { 
        localDate0.toString("org/joda/time/tz/data", locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDate localDate0 = new LocalDate(581L, (Chronology) iSOChronology0);
      LocalDate localDate1 = localDate0.withYearOfCentury(0);
      localDate1.isAfter(localDate0);
      localDate0.dayOfYear();
      localDate0.getYearOfCentury();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      Locale locale0 = Locale.US;
      Locale.getISOLanguages();
      locale0.getDisplayScript();
      uTCDateTimeZone0.getName(6569L, locale0);
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(70).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      localDate0.toDateTimeAtMidnight((DateTimeZone) uTCDateTimeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      DateTime dateTime0 = dateTimeFormatter3.parseDateTime("org/joda/time/tz/data");
      uTCDateTimeZone0.getOffset((ReadableInstant) dateTime0);
      LocalDate localDate2 = localDate1.plusMonths(0);
      localDate2.dayOfMonth();
      // Undeclared exception!
      try { 
        localDate1.toString("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate(0L, (Chronology) copticChronology0);
      Seconds seconds0 = Seconds.ZERO;
      seconds0.minus((Seconds) null);
      seconds0.toStandardDuration();
      copticChronology0.add((ReadablePeriod) seconds0, 365L, 0);
      localDate0.hashCode();
      localDate0.hashCode();
      // Undeclared exception!
      try { 
        localDate0.withYearOfCentury(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfCentury must be in the range [1,100]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(50L);
      localDate0.weekOfWeekyear();
      localDate0.getMonthOfYear();
      localDate0.getWeekyear();
      LocalDate localDate1 = LocalDate.now();
      LocalDate localDate2 = localDate0.plusWeeks(677);
      localDate0.withYearOfEra(1013);
      localDate1.withWeekyear(367);
      LocalDate.Property localDate_Property0 = localDate2.weekOfWeekyear();
      Chronology chronology0 = localDate_Property0.getChronology();
      localDate0.getField(1, chronology0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
      LocalDate localDate1 = localDate0.withYear(1);
      LocalDate localDate2 = localDate1.withYearOfEra(1);
      int int0 = 0;
      LocalDate localDate3 = localDate2.plusWeeks(0);
      int int1 = 121;
      localDate0.yearOfEra();
      localDate1.dayOfWeek();
      // Undeclared exception!
      try { 
        localDate3.withDayOfWeek(121);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 121 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.withWeekOfWeekyear(37);
      int int0 = new Integer(37);
      localDate0.plusMonths((-2068));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeZone0.convertLocalToUTC(0L, false);
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight(dateTimeZone0);
      localDate0.getWeekOfWeekyear();
      dateTimeZone0.equals(dateTime0);
      localDate0.toDateTimeAtStartOfDay();
      // Undeclared exception!
      try { 
        LocalDate.parse("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(5, 13);
      LocalDate localDate0 = new LocalDate(10L, dateTimeZone0);
      localDate0.dayOfYear();
      localDate0.getCenturyOfEra();
      localDate0.getCenturyOfEra();
      localDate0.weekyear();
      localDate0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, 5, gJChronology0);
      int int0 = 1310;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-683), "", 0, 1310, 5, 19, 5, 6719, 19, (-683), 5, 1115, 1310);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week in month 1310
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      Months months0 = Months.THREE;
      LocalDate localDate1 = localDate0.plus(months0);
      // Undeclared exception!
      try { 
        localDate1.withDayOfMonth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusWeeks((-340));
      Locale locale0 = Locale.ITALIAN;
      DateTimeFieldType dateTimeFieldType0 = null;
      localDate1.minusYears((-340));
      localDate0.toInterval();
      localDate1.toInterval();
      // Undeclared exception!
      try { 
        localDate1.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.minusDays(1886);
      localDate0.getFields();
      localDate1.monthOfYear();
      localDate1.plusDays(1886);
      localDate0.toDateTimeAtMidnight();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.equals(localDate0);
      DateTimeZone.forOffsetHours(0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = new LocalDate((DateTimeZone) uTCDateTimeZone0);
      localDate0.toDateTimeAtMidnight((DateTimeZone) uTCDateTimeZone0);
      uTCDateTimeZone0.toTimeZone();
      LocalDate localDate1 = localDate0.plusWeeks((-30));
      localDate1.toDateTimeAtStartOfDay((DateTimeZone) uTCDateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate1.monthOfYear();
      localDate_Property0.withMaximumValue();
      DateTimeZone.forOffsetMillis((-30));
      LocalDate localDate2 = localDate1.withYear((-30));
      localDate2.dayOfYear();
      localDate2.getYear();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DurationFieldType.days();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(0L, (DateTimeZone) uTCDateTimeZone0);
      LocalDate localDate1 = localDate0.withYear((-1200));
      localDate1.toDateTimeAtStartOfDay();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = (-2941);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2941), 0, 0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.minusMonths(0);
      LocalDate localDate2 = localDate1.plusYears((-2941));
      localDate2.plusYears(0);
      LocalDate localDate3 = localDate2.plusDays(0);
      Locale locale0 = Locale.GERMANY;
      try { 
        localDate3.toString("Zone must not be null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Chronology chronology0 = gJChronology0.withZone((DateTimeZone) null);
      LocalDate localDate0 = new LocalDate(chronology0);
      LocalDate localDate1 = localDate0.plusYears(1044);
      localDate1.centuryOfEra();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@*z}7n4'$[\"\"");
      DurationFieldType.millis();
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusWeeks(1510);
      localDate1.getWeekyear();
      localDate1.withPeriodAdded((ReadablePeriod) null, 1985);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) gregorianChronology0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1392940800000L, (Chronology) gregorianChronology0);
      LocalTime localTime1 = localTime0.minusMinutes(1088);
      LocalTime localTime2 = localTime1.plusHours(1252);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1252);
      localDate0.toDateTime(localTime2, dateTimeZone0);
      LocalDate.now();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTimeZone.getAvailableIDs();
      uTCDateTimeZone0.nextTransition(2338L);
      LocalDate localDate0 = new LocalDate((DateTimeZone) uTCDateTimeZone0);
      localDate0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      localDate0.indexOf(dateTimeFieldType0);
      LocalDate localDate1 = localDate0.plusWeeks((-1349));
      localDate1.toDateTimeAtCurrentTime();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      locale0.toLanguageTag();
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      localDate0.toString();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      LocalDate localDate0 = new LocalDate(0L, (DateTimeZone) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2143L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        localDate0.withPeriodAdded(years0, 584);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * 584
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      localDate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      Weeks weeks0 = Weeks.ZERO;
      LocalDate localDate1 = localDate0.withPeriodAdded(weeks0, 358);
      LocalDate localDate2 = localDate1.withCenturyOfEra(358);
      LocalDate localDate3 = localDate2.minusYears(1);
      DateTimeFieldType.hourOfHalfday();
      // Undeclared exception!
      try { 
        localDate3.withField((DateTimeFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withDayOfMonth(14);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      int int0 = 508;
      // Undeclared exception!
      try { 
        localDate1.withField(dateTimeFieldType0, 508);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 508 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDate localDate0 = LocalDate.now((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.withEra(2187);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2187 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      LocalTime localTime0 = new LocalTime(0L);
      localDate0.withFields((ReadablePartial) null);
      TimeZone.getDefault();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalTime localTime1 = LocalTime.fromMillisOfDay(0L, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime(localTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      LocalTime localTime0 = new LocalTime(0L);
      localDate0.withFields(localTime0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalTime localTime1 = LocalTime.fromMillisOfDay(0L, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime(localTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Chronology chronology0 = ethiopicChronology0.withUTC();
      LocalDate.now(chronology0);
      // Undeclared exception!
      try { 
        localDate0.toString("VdP%c!_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDate localDate0 = new LocalDate((-538L), (Chronology) gJChronology0);
      int int0 = 1446;
      LocalDate localDate1 = localDate0.minusWeeks(1446);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      LocalDate localDate2 = localDate1.withFieldAdded(durationFieldType0, 1446);
      LocalDate localDate3 = localDate2.withYear(1446);
      LocalDate localDate4 = localDate3.withYearOfCentury(24);
      // Undeclared exception!
      try { 
        localDate4.withEra(24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 24 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      LocalDate localDate1 = localDate0.plusMonths((-2485));
      localDate0.dayOfYear();
      localDate0.getDayOfMonth();
      localDate1.toDate();
      localDate0.getYearOfCentury();
      LocalDate localDate2 = localDate1.withFields(localDate0);
      localDate2.dayOfWeek();
      localDate2.withFields(localDate1);
      // Undeclared exception!
      try { 
        LocalDate.parse("The calendar must not be null", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withYear(2053);
      DateTimeFieldType.minuteOfHour();
      localDate0.compareTo((ReadablePartial) localDate1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 2971;
      MockDate mockDate0 = new MockDate(2971, (-1), (-1));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.withLocalMillis(3790713600000L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Chronology must not be null");
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      LocalDate localDate2 = localDate1.withFieldAdded(durationFieldType0, 608);
      LocalDate localDate3 = localDate2.minusDays(2971);
      LocalDate localDate4 = localDate3.minusWeeks(3);
      localDate4.compareTo((ReadablePartial) localDate2);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      localDate4.isSupported(dateTimeFieldType0);
      localDate0.dayOfYear();
      LocalDate localDate5 = localDate2.plusWeeks((-1349));
      LocalDate localDate6 = localDate5.plusMonths(1);
      // Undeclared exception!
      try { 
        localDate6.withDayOfWeek(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 10 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      dateTimeZone0.getStandardOffset(3600000L);
      Chronology chronology0 = lenientChronology0.withUTC();
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      zoneInfoProvider0.getZone("`");
      DateTimeZone.setProvider(zoneInfoProvider0);
      LocalDate localDate0 = new LocalDate((-3860L), chronology0);
      localDate0.toDateTimeAtMidnight(dateTimeZone0);
      int int0 = 1;
      LocalDate localDate1 = localDate0.plusDays(1);
      LocalDate localDate2 = localDate0.plusWeeks(1);
      localDate0.getDayOfWeek();
      localDate0.yearOfEra();
      localDate2.getWeekyear();
      localDate1.toDateTimeAtCurrentTime();
      localDate1.dayOfMonth();
      LocalDate localDate3 = localDate0.withDayOfMonth(1970);
      localDate3.toDateTimeAtCurrentTime(dateTimeZone0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalTime localTime0 = new LocalTime((-62106739200000L), dateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.toDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate((DateTimeZone) uTCDateTimeZone0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(localDate0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millisOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
      LocalDate localDate1 = localDate0.minusDays(1);
      int int0 = 2147483623;
      // Undeclared exception!
      try { 
        localDate1.withDayOfYear(2147483623);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483623 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.plusMonths((-1));
      localDate1.equals(localDate0);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      LocalDate localDate2 = localDate_Property0.addWrapFieldToCopy(0);
      Locale locale0 = new Locale("PNT", "PNT");
      localDate_Property0.getMaximumShortTextLength(locale0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      localDate2.toDateTimeAtMidnight(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(uTCProvider0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.tz.UTCProvider
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try { 
        LocalDate.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      int int0 = 0;
      LocalDate localDate1 = localDate0.plusMonths(0);
      localDate1.withCenturyOfEra(0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      localDate_Property0.remainder();
      LocalDate localDate2 = localDate_Property0.getLocalDate();
      localDate2.weekOfWeekyear();
      int int1 = 0;
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 1750, (-1), 1750, 0, (-7200));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1750 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = lenientChronology0.withZone(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      LocalDate localDate0 = new LocalDate(689L, dateTimeZone1);
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      LocalDate localDate1 = localDate_Property0.addToCopy(1);
      LocalDate localDate2 = localDate1.minusMonths(1);
      int int0 = 0;
      localDate_Property0.getAsString();
      // Undeclared exception!
      try { 
        localDate2.withYearOfEra(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("2*<u<Y1'=rm1XZ*");
      // Undeclared exception!
      try { 
        LocalDate.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusYears(608);
      Hours hours0 = Hours.EIGHT;
      LocalDate localDate2 = localDate1.withPeriodAdded(hours0, 608);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      LocalDate localDate3 = localDate2.withFieldAdded(durationFieldType0, 2026);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      localDate2.weekyear();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      hours0.toPeriod();
      localDate2.compareTo((ReadablePartial) localDate1);
      dateTimeFieldType0.isSupported(iSOChronology0);
      LocalDate.Property localDate_Property0 = localDate3.property(dateTimeFieldType0);
      dateTimeFieldType0.isSupported(iSOChronology0);
      LocalDate localDate4 = localDate_Property0.roundHalfEvenCopy();
      localDate1.isSupported(durationFieldType0);
      localDate4.centuryOfEra();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(122, "The chronology of the time does not match");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      LocalDate.fromCalendarFields(calendar0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1265));
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(uTCDateTimeZone0);
      localDate4.dayOfWeek();
      // Undeclared exception!
      try { 
        LocalDate.parse("zl", dateTimeFormatter2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.yearOfCentury();
      LocalDate localDate1 = localDate0.withMonthOfYear(3);
      DateTimeZone.setNameProvider((NameProvider) null);
      dateTimeZone0.nextTransition(3);
      localDate0.getDayOfMonth();
      localDate1.yearOfEra();
      LocalDate localDate2 = localDate0.withYear(14);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      localDate2.getDayOfYear();
      dateTimeFieldType0.getRangeDurationType();
      localDate2.hashCode();
      localDate0.toString();
      localDate2.getChronology();
      // Undeclared exception!
      try { 
        localDate1.getValue(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 14
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
      localDate0.toDateTimeAtCurrentTime((DateTimeZone) uTCDateTimeZone0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      islamicChronology0.add(3024L, 3600000L, (-78));
      LocalDate localDate1 = LocalDate.now((DateTimeZone) uTCDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      localDate1.withDayOfMonth(1);
      localDate0.property(dateTimeFieldType0);
      Partial partial0 = new Partial(dateTimeFieldType0, 1);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        LocalDate.parse("The chronology of the time does not match", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The chronology of the time does ...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1173), 292272708, 292272708, 80, 5, (-672));
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.minusYears((-1409));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Minutes out of range: ");
      DateTimeUtils.setCurrentMillisOffset(80);
      localDate1.getYear();
      localDate0.toString();
      localDate0.getEra();
      localDate0.getYearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      localDate0.isSupported(dateTimeFieldType0);
      mockGregorianCalendar0.getWeekYear();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "25155601-08-10");
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      durationFieldType0.isSupported(julianChronology0);
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded(durationFieldType0, (-1821));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'eras' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withYear(1973);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      localDate0.toDateTimeAtCurrentTime((DateTimeZone) uTCDateTimeZone0);
      LocalDate localDate2 = localDate0.minusWeeks((-211));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      LocalDate localDate3 = localDate0.minusYears(0);
      LocalDate localDate4 = localDate0.plusWeeks(0);
      LocalTime localTime0 = new LocalTime((DateTimeZone) uTCDateTimeZone0);
      localTime0.plusSeconds(153692453);
      localTime0.plusHours(0);
      localDate2.toLocalDateTime(localTime0);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      localDate2.isSupported(durationFieldType0);
      localDate3.getDayOfYear();
      localDate2.toDate();
      Integer integer0 = new Integer(0);
      localDate3.toDateTime(localTime0, (DateTimeZone) uTCDateTimeZone0);
      localDate4.toDate();
      localDate2.toDateTimeAtCurrentTime((DateTimeZone) uTCDateTimeZone0);
      localDate1.getCenturyOfEra();
      localDate3.plusMonths(2990);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 6;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Zone must not be null");
      LocalDate localDate0 = new LocalDate(6, 6, 6, lenientChronology0);
      LocalDate localDate1 = localDate0.minusMonths(6);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      int int1 = 2147483623;
      // Undeclared exception!
      try { 
        localDate1.withField(dateTimeFieldType0, 2147483623);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 6;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/3TTO(");
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      DateTimeFieldType.secondOfDay();
      String string0 = "system";
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate((Object) lenientChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.LenientChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      LocalDate localDate1 = localDate0.plusMonths((-2486));
      localDate0.dayOfYear();
      localDate0.getDayOfMonth();
      localDate1.weekyear();
      localDate1.toDate();
      localDate0.getYearOfCentury();
      LocalDate localDate2 = localDate1.withFields(localDate0);
      localDate2.dayOfWeek();
      LocalDate localDate3 = localDate2.withFields(localDate1);
      localDate2.toDateTimeAtStartOfDay();
      localDate0.getEra();
      localDate0.toString();
      localDate0.hashCode();
      localDate0.toInterval();
      localDate1.weekOfWeekyear();
      localDate3.plusDays(3000);
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = locale0.stripExtensions();
      localDate1.toString("1970-01-01", locale1);
      localDate3.toDateTimeAtCurrentTime();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.toDateTimeAtStartOfDay();
      LocalDate localDate1 = localDate0.withCenturyOfEra(28);
      LocalDate localDate2 = localDate1.withYear(28);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalDate localDate3 = localDate2.withCenturyOfEra(1900);
      localDate0.withEra(0);
      localDate2.withYear(28);
      localDate1.getFieldTypes();
      localDate0.getDayOfMonth();
      LocalDate localDate4 = localDate2.minusWeeks((-2941));
      localDate4.getYear();
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      localDate2.dayOfMonth();
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      localDate2.getYearOfCentury();
      localDate1.getCenturyOfEra();
      MutablePeriod mutablePeriod0 = new MutablePeriod(31083597720000L);
      mutablePeriod0.getYears();
      mutablePeriod0.setPeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      LocalDate localDate5 = localDate0.plus(mutablePeriod0);
      localDate5.minusWeeks(0);
      LocalDate localDate6 = localDate4.minusDays(1183);
      localDate2.toString();
      localDate_Property0.getChronology();
      localDate_Property0.roundFloorCopy();
      localDate2.yearOfEra();
      localDate6.toInterval((DateTimeZone) null);
      localDate1.toInterval();
      localDate3.getWeekyear();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      LocalTime localTime0 = new LocalTime(0L);
      localDate0.withFields(localTime0);
      LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
      DateTime dateTime0 = localDate1.toDateTime(localTime0);
      DateTimeFieldType.minuteOfDay();
      LocalDate localDate2 = localDate_Property0.roundCeilingCopy();
      TimeZone.getDefault();
      localDate2.getDayOfMonth();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1, (DateTimeZone) uTCDateTimeZone0);
      localDate0.toLocalDateTime(localTime0);
      localDate1.toDateTime(dateTime0);
      localDate2.getDayOfYear();
      int int0 = 89;
      // Undeclared exception!
      try { 
        localDate1.getField((-749), (Chronology) julianChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -749
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDate localDate0 = new LocalDate();
      Instant instant0 = Instant.EPOCH;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      instant0.toMutableDateTime();
      localDate0.isSupported(dateTimeFieldType0);
      DateTime dateTime0 = new DateTime(0, 2, 2, 0, 2, 3, 2);
      localDate0.era();
      FileSystemHandling.shouldAllThrowIOExceptions();
      localDate0.getYearOfEra();
      localDate0.getLocalMillis();
      localDate0.weekOfWeekyear();
      localDate0.getMonthOfYear();
      localDate0.dayOfWeek();
      localDate0.getDayOfWeek();
      LocalDate localDate1 = localDate0.plusYears(0);
      localDate1.year();
      localDate1.minus((ReadablePeriod) null);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Chronology chronology0 = copticChronology0.withUTC();
      LocalDate.now(chronology0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LocalDate localDate2 = localDate0.withFieldAdded(durationFieldType0, (-5469));
      localDate0.minusWeeks(1);
      Locale locale0 = Locale.UK;
      Calendar calendar0 = dateTime0.toCalendar(locale0);
      LocalDate localDate3 = LocalDate.fromCalendarFields(calendar0);
      localDate2.compareTo((ReadablePartial) localDate1);
      localDate3.plusWeeks(3);
      // Undeclared exception!
      try { 
        localDate2.toString("IQQ.SRuIy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1447);
      MockDate mockDate0 = new MockDate(1447);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.plusYears(1447);
      DateTimeFieldType.clockhourOfDay();
      localDate1.getYearOfCentury();
      localDate0.toDateTimeAtStartOfDay();
      localDate0.withWeekyear(17);
      localDate0.withDayOfYear(17);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8vq)pw2u;p B0Uw");
      LocalDate localDate0 = new LocalDate((-1317L));
      localDate0.yearOfEra();
      TimeZone timeZone0 = TimeZone.getTimeZone("8vq)pw2u;p B0Uw");
      timeZone0.clone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      timeZone0.setID("org/joda/time/tz/data");
      dateTimeZone0.nextTransition((-1317L));
      localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      localDate0.toDateTimeAtMidnight(dateTimeZone0);
      localDate0.getYearOfEra();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.GERMAN;
      localDate0.toString((String) null, locale0);
      localDate0.getEra();
      localDate0.minusWeeks(3704);
      LocalDate localDate1 = LocalDate.now();
      localDate1.era();
      localDate0.plusWeeks((-4521));
      localDate1.toDateTimeAtCurrentTime(dateTimeZone0);
      localDate1.toString();
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek((-4521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4521 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.toDateTimeAtStartOfDay();
      LocalDate localDate1 = localDate0.withCenturyOfEra(33);
      LocalDate localDate2 = localDate0.plusDays(3214);
      localDate2.equals(localDate1);
      LocalDate localDate3 = localDate2.withCenturyOfEra(1900);
      localDate3.withWeekOfWeekyear(33);
      LocalDate localDate4 = localDate2.withYear(33);
      LocalDate localDate5 = localDate4.withWeekyear(11);
      localDate5.weekyear();
      localDate1.getFieldTypes();
      localDate0.getDayOfMonth();
      LocalDate localDate6 = localDate2.minusWeeks((-2941));
      localDate6.getYear();
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      localDate2.weekyear();
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      Integer integer0 = new Integer(1900);
      localDate2.getYearOfCentury();
      localDate1.getCenturyOfEra();
      MutablePeriod mutablePeriod0 = new MutablePeriod(31083597720000L);
      mutablePeriod0.getYears();
      LocalDate localDate7 = localDate2.withYear((-1288));
      localDate7.dayOfWeek();
      mutablePeriod0.setPeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      LocalDate localDate8 = localDate0.plus(mutablePeriod0);
      localDate8.withPeriodAdded(mutablePeriod0, 0);
      localDate2.toString();
      localDate_Property0.getChronology();
      // Undeclared exception!
      try { 
        localDate1.withYearOfCentury(3214);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3214 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.toDateTimeAtStartOfDay();
      LocalDate localDate1 = localDate0.withCenturyOfEra(28);
      LocalDate localDate2 = localDate0.plusDays(3214);
      localDate2.equals(localDate1);
      LocalDate localDate3 = localDate2.withCenturyOfEra(1900);
      localDate3.withWeekOfWeekyear(28);
      LocalDate localDate4 = LocalDate.now();
      localDate1.getFieldTypes();
      localDate0.getDayOfMonth();
      LocalDate localDate5 = localDate2.minusWeeks((-2941));
      localDate5.getYear();
      localDate0.toDateTimeAtMidnight();
      localDate2.dayOfMonth();
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      localDate0.getWeekOfWeekyear();
      localDate2.getYearOfCentury();
      localDate1.getCenturyOfEra();
      MutablePeriod mutablePeriod0 = new MutablePeriod(31083597720000L);
      mutablePeriod0.getYears();
      localDate0.plus(mutablePeriod0);
      LocalDate localDate6 = localDate5.minusDays(14);
      localDate2.toString();
      LocalDate localDate7 = localDate_Property0.roundFloorCopy();
      localDate5.compareTo((ReadablePartial) localDate4);
      localDate0.dayOfMonth();
      localDate6.toInterval((DateTimeZone) null);
      localDate1.withYearOfEra(28);
      localDate7.centuryOfEra();
      // Undeclared exception!
      try { 
        localDate2.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, 1);
      islamicChronology1.get((ReadablePartial) localDate0, 0L);
      localDate1.getField(0, (Chronology) islamicChronology0);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      localDate0.size();
      Chronology chronology0 = localDate_Property0.getChronology();
      LocalDate localDate2 = localDate0.withWeekyear(3);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      localDate_Property0.withMaximumValue();
      mockGregorianCalendar0.toZonedDateTime();
      LocalDate localDate3 = localDate0.plusDays(1);
      localDate1.withYear(3);
      localDate0.toString((String) null);
      LocalDate.now(chronology0);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      localDate1.plusWeeks(1);
      LocalDate localDate4 = localDate2.withFields(localDate3);
      localDate4.property(dateTimeFieldType0);
      localDate3.plusWeeks(392);
      localDate3.toDate();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        LocalDate.parse("I6j:i}l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"I6j:i}l\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
}
