/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 21:41:56 GMT 2025
 */

package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.URI;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.DateTimeZone;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZoneInfoProvider_ESTest extends ZoneInfoProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone("]r.!:");
      assertNull(dateTimeZone0);
      
      DateTimeZone dateTimeZone1 = zoneInfoProvider0.getZone((String) null);
      assertNull(dateTimeZone1);
      
      DateTimeZone dateTimeZone2 = zoneInfoProvider0.getZone("org/joda/time/tz/data");
      assertNull(dateTimeZone2);
      
      Set<String> set0 = zoneInfoProvider0.getAvailableIDs();
      assertFalse(set0.contains("]r.!:"));
      assertNotNull(set0);
      assertEquals(597, set0.size());
      assertFalse(set0.isEmpty());
      
      DateTimeZone dateTimeZone3 = zoneInfoProvider0.getZone("org/joda/time/tz/data");
      assertNull(dateTimeZone3);
      
      DateTimeZone dateTimeZone4 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone4);
      assertEquals("UTC", dateTimeZone4.getID());
      assertEquals("UTC", dateTimeZone4.toString());
      
      DateTimeZone dateTimeZone5 = zoneInfoProvider0.getZone("Pacific/Honolulu");
      assertNotNull(dateTimeZone5);
      assertEquals("Pacific/Honolulu", dateTimeZone5.toString());
      assertEquals("Pacific/Honolulu", dateTimeZone5.getID());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ZoneInfoMap");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)80;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-91), (byte)125, (byte) (-88), (byte)47, (byte)81, (byte)16, (byte)53, (byte)80}, byteArray0);
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      MockException mockException0 = new MockException((String) null);
      assertNotNull(mockException0);
      
      mockException0.printStackTrace();
      zoneInfoProvider0.uncaughtException(mockException0);
      Set<String> set0 = zoneInfoProvider0.getAvailableIDs();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(597, set0.size());
      
      Set<String> set1 = zoneInfoProvider0.getAvailableIDs();
      assertSame(set1, set0);
      assertNotNull(set1);
      assertEquals(597, set1.size());
      assertFalse(set1.isEmpty());
      
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone("HST");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Honolulu", dateTimeZone0.toString());
      assertEquals("Pacific/Honolulu", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = zoneInfoProvider0.getZone("HST");
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("Pacific/Honolulu", dateTimeZone1.getID());
      assertEquals("Pacific/Honolulu", dateTimeZone1.toString());
      
      Set<String> set2 = zoneInfoProvider0.getAvailableIDs();
      assertTrue(set2.contains("HST"));
      assertSame(set2, set1);
      assertSame(set2, set0);
      assertNotNull(set2);
      assertEquals(597, set2.size());
      assertFalse(set2.isEmpty());
      
      Set<String> set3 = DateTimeZone.getAvailableIDs();
      assertTrue(set3.contains("HST"));
      assertTrue(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set2));
      assertTrue(set3.equals((Object)set0));
      assertNotSame(set3, set1);
      assertNotSame(set3, set0);
      assertNotSame(set3, set2);
      assertNotNull(set3);
      assertEquals(597, set3.size());
      assertFalse(set3.isEmpty());
      
      DateTimeZone dateTimeZone2 = zoneInfoProvider0.getZone("b6f/");
      assertNull(dateTimeZone2);
      
      DateTimeZone dateTimeZone3 = zoneInfoProvider0.getZone("org/joda/time/tz/data");
      assertNull(dateTimeZone3);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeZone dateTimeZone4 = zoneInfoProvider0.getZone("org/joda/time/tz/data");
      assertNull(dateTimeZone4);
      
      // Undeclared exception!
      try { 
        locale0.getExtension('5');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: 5
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      MockException mockException0 = new MockException((String) null);
      assertNotNull(mockException0);
      
      mockException0.printStackTrace();
      zoneInfoProvider0.uncaughtException(mockException0);
      Set<String> set0 = zoneInfoProvider0.getAvailableIDs();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(597, set0.size());
      
      Set<String> set1 = zoneInfoProvider0.getAvailableIDs();
      assertSame(set1, set0);
      assertNotNull(set1);
      assertEquals(597, set1.size());
      assertFalse(set1.isEmpty());
      
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone("HST");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Honolulu", dateTimeZone0.toString());
      assertEquals("Pacific/Honolulu", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = zoneInfoProvider0.getZone("");
      assertNull(dateTimeZone1);
      
      Set<String> set2 = zoneInfoProvider0.getAvailableIDs();
      assertTrue(set2.contains("HST"));
      assertFalse(set2.contains(""));
      assertSame(set2, set1);
      assertSame(set2, set0);
      assertNotNull(set2);
      assertEquals(597, set2.size());
      assertFalse(set2.isEmpty());
      
      Set<String> set3 = DateTimeZone.getAvailableIDs();
      assertFalse(set3.contains(""));
      assertTrue(set3.contains("HST"));
      assertTrue(set3.equals((Object)set2));
      assertTrue(set3.equals((Object)set0));
      assertTrue(set3.equals((Object)set1));
      assertNotSame(set3, set0);
      assertNotSame(set3, set1);
      assertNotSame(set3, set2);
      assertNotNull(set3);
      assertFalse(set3.isEmpty());
      assertEquals(597, set3.size());
      
      DateTimeZone dateTimeZone2 = zoneInfoProvider0.getZone("b6f/");
      assertNull(dateTimeZone2);
      
      DateTimeZone dateTimeZone3 = zoneInfoProvider0.getZone("org/joda/time/tz/data");
      assertNull(dateTimeZone3);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeZone dateTimeZone4 = zoneInfoProvider0.getZone("org/joda/time/tz/data");
      assertNull(dateTimeZone4);
      
      // Undeclared exception!
      try { 
        locale0.getExtension('5');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: 5
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider("org/joda/time/tz/data/");
      assertNotNull(zoneInfoProvider0);
      
      Set<String> set0 = zoneInfoProvider0.getAvailableIDs();
      assertFalse(set0.contains("org/joda/time/tz/data/"));
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(597, set0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("N5'", false);
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider("org/joda/time/tz/data", classLoader0);
      assertNotNull(zoneInfoProvider0);
      
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone("N5'");
      assertNull(dateTimeZone0);
      
      Set<String> set0 = zoneInfoProvider0.getAvailableIDs();
      assertFalse(set0.contains("org/joda/time/tz/data"));
      assertNotNull(set0);
      assertEquals(597, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      MockException mockException0 = new MockException("9M6,");
      assertNotNull(mockException0);
      
      Throwable throwable0 = mockException0.getCause();
      assertNull(throwable0);
      
      Throwable throwable1 = mockException0.getCause();
      assertNull(throwable1);
      
      zoneInfoProvider0.uncaughtException(mockException0);
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone("9M6,");
      assertNull(dateTimeZone0);
      
      DateTimeZone dateTimeZone1 = zoneInfoProvider0.getZone("@-$m?*:o~8z<");
      assertNull(dateTimeZone1);
      
      Set<String> set0 = zoneInfoProvider0.getAvailableIDs();
      assertFalse(set0.contains("9M6,"));
      assertNotNull(set0);
      assertEquals(597, set0.size());
      assertFalse(set0.isEmpty());
      
      DateTimeZone dateTimeZone2 = zoneInfoProvider0.getZone("UTC");
      assertNotNull(dateTimeZone2);
      assertEquals("UTC", dateTimeZone2.getID());
      assertEquals("UTC", dateTimeZone2.toString());
      
      Set<String> set1 = zoneInfoProvider0.getAvailableIDs();
      assertFalse(set1.contains("9M6,"));
      assertTrue(set1.contains("UTC"));
      assertSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.isEmpty());
      assertEquals(597, set1.size());
      
      Set<String> set2 = zoneInfoProvider0.getAvailableIDs();
      assertFalse(set2.contains("9M6,"));
      assertTrue(set2.contains("UTC"));
      assertSame(set2, set0);
      assertSame(set2, set1);
      assertNotNull(set2);
      assertEquals(597, set2.size());
      assertFalse(set2.isEmpty());
      
      DateTimeZone dateTimeZone3 = zoneInfoProvider0.getZone("No file directory provided");
      assertNull(dateTimeZone3);
      
      DateTimeZone dateTimeZone4 = zoneInfoProvider0.getZone("");
      assertNull(dateTimeZone4);
      
      DateTimeZone dateTimeZone5 = zoneInfoProvider0.getZone("");
      assertNull(dateTimeZone5);
      
      DateTimeZone dateTimeZone6 = zoneInfoProvider0.getZone("E=PkCm([9in:/zU");
      assertNull(dateTimeZone6);
      
      zoneInfoProvider0.uncaughtException(mockException0);
      // Undeclared exception!
      try { 
        zoneInfoProvider0.uncaughtException((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = null;
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No file directory provided
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No file directory provided
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      // Undeclared exception!
      try { 
        zoneInfoProvider0.uncaughtException((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "org.joda.time.chrono.BasicMonthOfYearDateTimeField";
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("org.joda.time.chrono.BasicMonthOfYearDateTimeField", (ClassLoader) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \"org.joda.time.chrono.BasicMonthOfYearDateTimeField/ZoneInfoMap\" ClassLoader: system
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = MockFile.createTempFile("YearDay", "No resource path provided");
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("C:\\Users\\ANUSHA~1\\AppData\\Local\\Temp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("YearDay0No resource path provided", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("C:\\Users\\ANUSHA~1\\AppData\\Local\\Temp\\YearDay0No resource path provided", file0.toString());
      assertEquals(0L, file0.length());
      
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider(file0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // File doesn't refer to a directory: C:\\Users\\ANUSHA~1\\AppData\\Local\\Temp\\YearDay0No resource path provided
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No resource path provided
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // File directory doesn't exist: \\tmp\\foo.bar
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone((String) null);
      assertNull(dateTimeZone0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockException mockException0 = new MockException("J;Z", mockThrowable0);
      assertNotNull(mockException0);
      
      zoneInfoProvider0.uncaughtException(mockException0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("X}e 5H$aZUp5U:qDoWq", "X}e 5H$aZUp5U:qDoWq");
      assertNotNull(mockFile0);
      
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // File directory doesn't exist: C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\X}e 5H$aZUp5U:qDoWq\\X}e 5H$aZUp5U:qDoWq
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setWritable(false);
      assertTrue(boolean0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "Sm";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("Sm", classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \"Sm/ZoneInfoMap\" ClassLoader: sun.misc.Launcher$AppClassLoader@0000000002
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "yKBC{h!R$(j,13";
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("yKBC{h!R$(j,13");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \"yKBC{h!R$(j,13/ZoneInfoMap\" ClassLoader: org.evosuite.instrumentation.InstrumentingClassLoader@0000000002
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider((String) null, classLoader1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No resource path provided
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      zoneInfoProvider0.uncaughtException(mockException0);
      MockException mockException1 = new MockException(mockException0);
      assertFalse(mockException1.equals((Object)mockException0));
      assertNotNull(mockException1);
      
      zoneInfoProvider0.uncaughtException(mockException1);
      assertFalse(mockException0.equals((Object)mockException1));
      assertFalse(mockException1.equals((Object)mockException0));
      assertNotSame(mockException0, mockException1);
      assertNotSame(mockException1, mockException0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      Set<String> set0 = zoneInfoProvider0.getAvailableIDs();
      assertNotNull(set0);
      assertEquals(597, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone("K[{q");
      assertNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("org.joda.time.tz.ZoneInfoProvider");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \"org.joda.time.tz.ZoneInfoProvider/ZoneInfoMap\" ClassLoader: org.evosuite.instrumentation.InstrumentingClassLoader@0000000002
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("UU", classLoader1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \"UU/ZoneInfoMap\" ClassLoader: sun.misc.Launcher$ExtClassLoader@0000000002
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lTWtU?66?&V#%.ll_D", "File doesn't refer to a directory: ");
      assertNotNull(mockFile0);
      
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // File directory doesn't exist: C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\lTWtU?66?&V#%.ll_D\\File doesn't refer to a directory: 
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      MockException mockException0 = new MockException((String) null);
      assertNotNull(mockException0);
      
      mockException0.printStackTrace();
      zoneInfoProvider0.uncaughtException(mockException0);
      Set<String> set0 = zoneInfoProvider0.getAvailableIDs();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(597, set0.size());
      
      Set<String> set1 = zoneInfoProvider0.getAvailableIDs();
      assertSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.isEmpty());
      assertEquals(597, set1.size());
      
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone("HST");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Honolulu", dateTimeZone0.toString());
      assertEquals("Pacific/Honolulu", dateTimeZone0.getID());
      
      String string0 = "";
      DateTimeZone dateTimeZone1 = zoneInfoProvider0.getZone("");
      assertNull(dateTimeZone1);
      
      Set<String> set2 = zoneInfoProvider0.getAvailableIDs();
      assertFalse(set2.contains(string0));
      assertTrue(set2.contains("HST"));
      assertSame(set2, set1);
      assertSame(set2, set0);
      assertNotNull(set2);
      assertFalse(set2.isEmpty());
      assertEquals(597, set2.size());
      
      Set<String> set3 = DateTimeZone.getAvailableIDs();
      assertFalse(set3.contains(string0));
      assertTrue(set3.contains("HST"));
      assertTrue(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set0));
      assertTrue(set3.equals((Object)set2));
      assertNotSame(set3, set2);
      assertNotSame(set3, set1);
      assertNotSame(set3, set0);
      assertNotNull(set3);
      assertFalse(set3.isEmpty());
      assertEquals(597, set3.size());
      
      DateTimeZone dateTimeZone2 = zoneInfoProvider0.getZone("b6f/");
      assertNull(dateTimeZone2);
      
      DateTimeZone dateTimeZone3 = zoneInfoProvider0.getZone("org/joda/time/tz/data");
      assertNull(dateTimeZone3);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeZone dateTimeZone4 = zoneInfoProvider0.getZone("org/joda/time/tz/data");
      assertNull(dateTimeZone4);
      
      // Undeclared exception!
      try { 
        locale0.getExtension('5');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: 5
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      MockException mockException0 = new MockException("9M6,");
      assertNotNull(mockException0);
      
      Throwable throwable0 = mockException0.getCause();
      assertNull(throwable0);
      
      Throwable throwable1 = mockException0.getCause();
      assertNull(throwable1);
      
      zoneInfoProvider0.uncaughtException(mockException0);
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone("9M6,");
      assertNull(dateTimeZone0);
      
      DateTimeZone dateTimeZone1 = zoneInfoProvider0.getZone("@-$m?*:o~8z<");
      assertNull(dateTimeZone1);
      
      Set<String> set0 = zoneInfoProvider0.getAvailableIDs();
      assertFalse(set0.contains("9M6,"));
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(597, set0.size());
      
      DateTimeZone dateTimeZone2 = zoneInfoProvider0.getZone("UTC");
      assertNotNull(dateTimeZone2);
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      
      Set<String> set1 = zoneInfoProvider0.getAvailableIDs();
      assertFalse(set1.contains("9M6,"));
      assertTrue(set1.contains("UTC"));
      assertSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.isEmpty());
      assertEquals(597, set1.size());
      
      Set<String> set2 = zoneInfoProvider0.getAvailableIDs();
      assertFalse(set2.contains("9M6,"));
      assertTrue(set2.contains("UTC"));
      assertSame(set2, set1);
      assertSame(set2, set0);
      assertNotNull(set2);
      assertFalse(set2.isEmpty());
      assertEquals(597, set2.size());
      
      DateTimeZone dateTimeZone3 = zoneInfoProvider0.getZone("org/joda/time/tz/data");
      assertNull(dateTimeZone3);
      
      DateTimeZone dateTimeZone4 = zoneInfoProvider0.getZone("");
      assertNull(dateTimeZone4);
      
      DateTimeZone dateTimeZone5 = zoneInfoProvider0.getZone("");
      assertNull(dateTimeZone5);
      
      DateTimeZone dateTimeZone6 = zoneInfoProvider0.getZone("E=PkCm([9in:/zU");
      assertNull(dateTimeZone6);
      
      // Undeclared exception!
      try { 
        zoneInfoProvider0.uncaughtException((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      zoneInfoProvider0.getAvailableIDs();
      zoneInfoProvider0.getZone("HST");
      zoneInfoProvider0.getZone("HST");
      zoneInfoProvider0.getAvailableIDs();
      zoneInfoProvider0.getZone("b6f/");
      zoneInfoProvider0.getZone("org/joda/time/tz/data");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      MockException mockException0 = new MockException((String) null);
      mockException0.printStackTrace();
      zoneInfoProvider0.uncaughtException(mockException0);
      zoneInfoProvider0.getAvailableIDs();
      zoneInfoProvider0.getAvailableIDs();
      zoneInfoProvider0.getZone("");
      zoneInfoProvider0.getAvailableIDs();
      DateTimeZone.getAvailableIDs();
      zoneInfoProvider0.getZone("b6f/");
      zoneInfoProvider0.getZone("org/joda/time/tz/data");
      Locale locale0 = Locale.CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        locale0.getExtension('5');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: 5
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.getParent();
      String string0 = "diIGO%`{U/";
      String string1 = "!FduWbB";
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("!FduWbB", (ClassLoader) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \"!FduWbB/ZoneInfoMap\" ClassLoader: system
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("*t$ 7/");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \"*t$ 7/ZoneInfoMap\" ClassLoader: org.evosuite.instrumentation.InstrumentingClassLoader@0000000002
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.setWritable(false, false);
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "Builder has crealed neither a printer nor a parser";
      String string1 = "&J5h\\@o.z?f=uf>C\"";
      File file0 = MockFile.createTempFile("Builder has crealed neither a printer nor a parser", "&J5h@o.z?f=uf>C\"");
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider(file0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // File doesn't refer to a directory: C:\\Users\\ANUSHA~1\\AppData\\Local\\Temp\\Builder has crealed neither a printer nor a parser0&J5h@o.z?f=uf>C\"
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = null;
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No resource path provided
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }
}
