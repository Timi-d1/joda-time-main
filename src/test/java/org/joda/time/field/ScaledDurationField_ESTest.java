/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 22:20:29 GMT 2025
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.Seconds;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.DelegatedDurationField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.ScaledDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScaledDurationField_ESTest extends ScaledDurationField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.months();
      Months months0 = Months.FIVE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-3822));
      scaledDurationField0.hashCode();
      assertEquals((-3822), scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-1822));
      ScaledDurationField scaledDurationField1 = new ScaledDurationField(durationField0, durationFieldType0, 32);
      boolean boolean0 = scaledDurationField0.equals(scaledDurationField1);
      assertFalse(scaledDurationField1.equals((Object)scaledDurationField0));
      assertFalse(boolean0);
      assertEquals(32, scaledDurationField1.getScalar());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      Seconds seconds0 = Seconds.seconds(2878);
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(delegatedDurationField0, durationFieldType0, (-25));
      long long0 = scaledDurationField0.getValueAsLong((long) (-2878024), 1L);
      assertEquals(115120L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.millis();
      Minutes minutes0 = Minutes.ONE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-1393));
      long long0 = scaledDurationField0.getValueAsLong(86399999L, (long) 0);
      assertEquals((-62024L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.hours();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 554);
      long long0 = scaledDurationField0.getValueAsLong(31536000000L);
      assertEquals(554, scaledDurationField0.getScalar());
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-212));
      long long0 = scaledDurationField0.getValueAsLong(141829565068800000L);
      assertEquals((-212L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.years();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 2115);
      int int0 = scaledDurationField0.getValue(0L, 0L);
      assertEquals(2115, scaledDurationField0.getScalar());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1273), (-1273), 0, 2275, (-507), 1266, 1963, 1963);
      Instant instant0 = Instant.ofEpochSecond(0L);
      Duration duration0 = mutablePeriod0.toDurationFrom(instant0);
      Days days0 = duration0.toStandardDays();
      DurationFieldType durationFieldType0 = days0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, (-1273));
      int int0 = scaledDurationField0.getValue((long) 1963, (long) (-1273));
      assertEquals((-1), int0);
      assertEquals((-1273), scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, 3683);
      int int0 = scaledDurationField0.getValue((long) 3683);
      assertEquals(3683, scaledDurationField0.getScalar());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      Seconds seconds0 = Seconds.seconds(2878);
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(delegatedDurationField0, durationFieldType0, (-25));
      int int0 = scaledDurationField0.getValue(602L);
      assertEquals((-24), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, (-3305));
      long long0 = scaledDurationField0.getUnitMillis();
      assertEquals(0L, long0);
      assertEquals((-3305), scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.hours();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, 1513);
      long long0 = scaledDurationField0.getUnitMillis();
      assertEquals(5446800000L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.hours();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, 1513);
      int int0 = scaledDurationField0.getScalar();
      assertEquals(1513, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.weeks();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 366);
      scaledDurationField0.getMillis(0L, (long) 366);
      assertEquals(366, scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-212));
      long long0 = scaledDurationField0.getMillis((long) (-212), (long) 1);
      assertEquals(141829565068800000L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DurationField durationField0 = durationFieldType0.getField(gJChronology0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-5062));
      scaledDurationField0.getMillis(0L);
      assertEquals((-5062), scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-205));
      long long0 = scaledDurationField0.getMillis(479L);
      assertEquals((-309873490164000000L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.hours();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, 1513);
      long long0 = scaledDurationField0.getMillis(0, (long) 1);
      assertEquals(1513, scaledDurationField0.getScalar());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.minutes();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-3608));
      long long0 = scaledDurationField0.getMillis(1, 1887L);
      assertEquals((-216480000L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-212));
      long long0 = scaledDurationField0.getMillis(0);
      assertEquals(0L, long0);
      assertEquals((-212), scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.weeks();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 366);
      long long0 = scaledDurationField0.getMillis(1);
      assertEquals(221356800000L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.years();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 2115);
      long long0 = scaledDurationField0.getDifferenceAsLong(0L, 0L);
      assertEquals(2115, scaledDurationField0.getScalar());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 4934L);
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(preciseDurationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, 591);
      long long0 = scaledDurationField0.getDifferenceAsLong(2915994L, 0L);
      assertEquals(1L, long0);
      assertEquals(591, scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.years();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 2115);
      long long0 = scaledDurationField0.getDifferenceAsLong(0L, 141161346604800000L);
      assertEquals((-2115L), long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      Seconds seconds0 = Seconds.seconds(2878);
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(delegatedDurationField0, durationFieldType0, (-25));
      int int0 = scaledDurationField0.getDifference(0L, 398L);
      assertEquals((-25), scaledDurationField0.getScalar());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.millis();
      Minutes minutes0 = Minutes.ONE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-1393));
      int int0 = scaledDurationField0.getDifference(0L, (-1393));
      assertEquals((-1393), scaledDurationField0.getScalar());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, 3683);
      scaledDurationField0.add(0L, 0L);
      assertEquals(3683, scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.hours();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, 1513);
      long long0 = scaledDurationField0.add(1661L, (long) 0);
      assertEquals(1661L, long0);
      assertEquals(1513, scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DurationField durationField0 = durationFieldType0.getField(gJChronology0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-670));
      long long0 = scaledDurationField0.add((long) (-670), 12L);
      assertEquals((-4862592000670L), long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(1);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1246);
      long long0 = scaledDurationField0.add(0L, 0);
      assertEquals(0L, long0);
      assertEquals(1246, scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.millis();
      Minutes minutes0 = Minutes.ONE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-1393));
      long long0 = scaledDurationField0.add((long) (-1393), 0);
      assertEquals((-1393L), long0);
      assertEquals((-1393), scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-212));
      // Undeclared exception!
      try { 
        scaledDurationField0.getValueAsLong((long) (-212), (-669007382400000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, 1282);
      // Undeclared exception!
      try { 
        scaledDurationField0.getValueAsLong(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-212));
      // Undeclared exception!
      try { 
        scaledDurationField0.getValue((-989L), (-2162900867299200000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, 1282);
      // Undeclared exception!
      try { 
        scaledDurationField0.getValue(0L, 1282);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.PreciseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.days();
      Years years0 = Years.years(1);
      DurationFieldType durationFieldType0 = years0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-1290));
      // Undeclared exception!
      try { 
        scaledDurationField0.getValue(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 106751991167
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1000);
      // Undeclared exception!
      try { 
        scaledDurationField0.getMillis(3233L, (long) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 323301970 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.years();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 2115);
      // Undeclared exception!
      try { 
        scaledDurationField0.getMillis(66743049600000L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 141161549904000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1722);
      // Undeclared exception!
      try { 
        scaledDurationField0.getMillis(2592000000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 4463424000000 * 86400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-212));
      // Undeclared exception!
      try { 
        scaledDurationField0.getMillis(0, (-2162900867299200000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-212));
      // Undeclared exception!
      try { 
        scaledDurationField0.getMillis(86399999, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -1831679978800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-212));
      // Undeclared exception!
      try { 
        scaledDurationField0.getDifference((-669007382400000L), 3233L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(delegatedDurationField0, durationFieldType0, 2110);
      // Undeclared exception!
      try { 
        scaledDurationField0.getDifference(2278L, 176L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.PreciseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, 3455);
      // Undeclared exception!
      try { 
        scaledDurationField0.getDifference(259200000L, 31083597720000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -31083338520000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DurationField durationField0 = durationFieldType0.getField(gJChronology0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-670));
      // Undeclared exception!
      try { 
        scaledDurationField0.add(1779L, (-4862592000670L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 3257936640448900 * 604800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(1);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1246);
      // Undeclared exception!
      try { 
        scaledDurationField0.add(0L, (-1800));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.years();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 2082);
      // Undeclared exception!
      try { 
        scaledDurationField0.add((-695L), 292271022);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 608508267804
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-205));
      long long0 = scaledDurationField0.getUnitMillis();
      assertEquals((-646917516000000L), long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-2315));
      ScaledDurationField scaledDurationField1 = new ScaledDurationField(durationField0, durationFieldType0, (-3030));
      boolean boolean0 = scaledDurationField0.equals(scaledDurationField1);
      assertEquals((-3030), scaledDurationField1.getScalar());
      assertFalse(scaledDurationField1.equals((Object)scaledDurationField0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-2315));
      ScaledDurationField scaledDurationField1 = new ScaledDurationField(scaledDurationField0, durationFieldType0, 32);
      boolean boolean0 = scaledDurationField0.equals(scaledDurationField1);
      assertFalse(boolean0);
      assertEquals(32, scaledDurationField1.getScalar());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-2315));
      ScaledDurationField scaledDurationField1 = new ScaledDurationField(durationField0, durationFieldType0, (-2315));
      boolean boolean0 = scaledDurationField0.equals(scaledDurationField1);
      assertTrue(boolean0);
      assertEquals((-2315), scaledDurationField1.getScalar());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-2315));
      boolean boolean0 = scaledDurationField0.equals(scaledDurationField0);
      assertEquals((-2315), scaledDurationField0.getScalar());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-205));
      boolean boolean0 = scaledDurationField0.equals(durationFieldType0);
      assertEquals((-205), scaledDurationField0.getScalar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3287);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weeks();
      ScaledDurationField scaledDurationField0 = null;
      try {
        scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The scalar must not be 0 or 1
         //
         verifyException("org.joda.time.field.ScaledDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      ScaledDurationField scaledDurationField0 = null;
      try {
        scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The scalar must not be 0 or 1
         //
         verifyException("org.joda.time.field.ScaledDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-205));
      long long0 = scaledDurationField0.getValueAsLong(810L, (long) (-205));
      assertEquals((-205), scaledDurationField0.getScalar());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 2104);
      long long0 = scaledDurationField0.getMillis(2104, (long) 1);
      assertEquals(139696820035200000L, long0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-205));
      int int0 = scaledDurationField0.getDifference((-90L), 3233L);
      assertEquals(0, int0);
      assertEquals((-205), scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-205));
      long long0 = scaledDurationField0.getMillis((long) 1, 810L);
      assertEquals((-646917494400000L), long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 2104);
      long long0 = scaledDurationField0.add(139696820035200000L, 1);
      assertEquals(139763215929600000L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-212));
      // Undeclared exception!
      try { 
        scaledDurationField0.add((long) 1, (long) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-205));
      long long0 = scaledDurationField0.getValueAsLong(0L);
      assertEquals(0L, long0);
      assertEquals((-205), scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 2104);
      int int0 = scaledDurationField0.getValue(139696820035200000L, (long) 0);
      assertEquals(2104, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-2315));
      int int0 = scaledDurationField0.getScalar();
      assertEquals((-2315), int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-205));
      int int0 = scaledDurationField0.getValue((long) 0);
      assertEquals((-205), scaledDurationField0.getScalar());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-205));
      // Undeclared exception!
      try { 
        scaledDurationField0.getDifferenceAsLong((-646917516000000L), 479L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-212));
      long long0 = scaledDurationField0.getMillis((long) (-212));
      assertEquals(141829565068800000L, long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-212));
      long long0 = scaledDurationField0.getMillis(1);
      assertEquals((-669007382400000L), long0);
  }
}
