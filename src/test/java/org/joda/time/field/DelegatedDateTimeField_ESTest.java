/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 23:05:16 GMT 2025
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.DelegatedDurationField;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DelegatedDateTimeField_ESTest extends DelegatedDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 2418;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2418);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0);
      dateTimeZone0.isFixed();
      Locale locale0 = Locale.US;
      delegatedDateTimeField0.getAsText(2418, locale0);
      int int1 = 2893;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.add((-3910L), 2893);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      buddhistChronology0.toString();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      // Undeclared exception!
      try { 
        strictDateTimeField0.add(2981L, 1L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2418);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0);
      dateTimeZone0.isFixed();
      Locale locale0 = Locale.US;
      delegatedDateTimeField0.getAsText(1, locale0);
      delegatedDateTimeField0.add((-3910L), 2887);
      delegatedDateTimeField0.add(0L, (-1951));
      delegatedDateTimeField0.isLeap(1);
      Integer integer0 = new Integer(2887);
      delegatedDateTimeField0.getAsShortText(2418, locale0);
      delegatedDateTimeField0.getAsShortText(2418, locale0);
      Integer integer1 = new Integer(2887);
      delegatedDateTimeField0.getAsShortText(91104998396090L, locale0);
      delegatedDateTimeField0.getAsShortText((-1L));
      delegatedDateTimeField0.getName();
      int[] intArray0 = new int[7];
      intArray0[0] = (-2499);
      intArray0[1] = 2887;
      intArray0[2] = (-1951);
      intArray0[3] = 2887;
      intArray0[4] = 2887;
      intArray0[5] = 2418;
      intArray0[6] = 2887;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set((ReadablePartial) null, 1, intArray0, "1", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 1;
      DateTimeZone.forOffsetHours(1);
      Locale locale0 = Locale.KOREAN;
      locale0.getScript();
      int int1 = (-3143);
      DateTimeFieldType.secondOfDay();
      Minutes minutes0 = Minutes.THREE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(unsupportedDateTimeField0, dateTimeFieldType0);
      Locale locale1 = new Locale("org/joda/time/tz/data");
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.getAsText((-3143), locale1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // yearOfCentury field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology1.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      dateTimeZone0.previousTransition(1);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, delegatedDurationField0, dateTimeFieldType0);
      Locale locale0 = new Locale("", "org/joda/time/tz/data");
      locale0.hasExtensions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleAttributes();
      Locale.forLanguageTag("");
      locale0.getDisplayVariant(locale0);
      delegatedDateTimeField0.getAsShortText((-150), locale0);
      dateTimeZone0.isFixed();
      System.setCurrentTimeMillis(1326L);
      String string0 = delegatedDateTimeField0.getAsText(1326L);
      assertEquals("1", string0);
      
      buddhistChronology1.halfdays();
      delegatedDateTimeField0.getType();
      delegatedDateTimeField0.getWrappedField();
      long long0 = delegatedDateTimeField0.roundCeiling(1);
      assertEquals(1000L, long0);
      
      String string1 = delegatedDateTimeField0.getAsShortText((-150), locale0);
      assertEquals("-150", string1);
      
      long long1 = delegatedDateTimeField0.set(0L, 0);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = islamicChronology0.withZone(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      dateTimeZone0.getOffsetFromLocal(1);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0, 0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(skipDateTimeField0, dateTimeFieldType0);
      LocalDate localDate0 = LocalDate.now(chronology0);
      Locale locale0 = Locale.ENGLISH;
      delegatedDateTimeField0.getAsShortText((ReadablePartial) localDate0, locale0);
      delegatedDateTimeField0.getMaximumTextLength(locale0);
      int[] intArray0 = new int[0];
      skipDateTimeField0.add((ReadablePartial) localDate0, (-258), intArray0, 0);
      skipDateTimeField0.getMaximumValue((ReadablePartial) localDate0);
      skipDateTimeField0.getAsShortText(0L, locale0);
      long long0 = delegatedDateTimeField0.set(0L, 57);
      assertEquals((-77503910400000L), long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.GERMANY;
      delegatedDateTimeField0.roundHalfFloor(1);
      BuddhistChronology.getInstance();
      delegatedDateTimeField0.getMaximumTextLength(locale0);
      delegatedDateTimeField0.getLeapAmount(9);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set((-2844L), (String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0, 0);
      int int0 = skipUndoDateTimeField0.getMaximumValue();
      skipUndoDateTimeField0.add((long) 0, (long) 0);
      YearMonth yearMonth0 = new YearMonth();
      int int1 = skipUndoDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0, (int[]) null);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      int int0 = 15271875;
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(islamicChronology0, dateTimeField0, 15271875);
      // Undeclared exception!
      try { 
        skipDateTimeField0.getDifference(1, 15271875);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      Locale locale0 = Locale.TAIWAN;
      long long0 = lenientDateTimeField0.set((long) 1, "7", locale0);
      assertEquals(259200001L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-4817L));
      Date date0 = Date.from(instant0);
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      DateTimeField dateTimeField0 = localDate0.getField(0);
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(dateTimeField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField1);
      strictDateTimeField0.getAsText(0L);
      strictDateTimeField0.getAsText((-4817L));
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int[] intArray0 = new int[1];
      Duration duration0 = Duration.standardMinutes(0L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.joda.time.field.DelegatedDateTimeField");
      localDateTime0.minus((ReadableDuration) duration0);
      intArray0[0] = 0;
      strictDateTimeField0.getMaximumValue((ReadablePartial) localDateTime0, intArray0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      LocalDate localDate1 = new LocalDate((-1182L));
      strictDateTimeField0.getMaximumValue((ReadablePartial) localDate1, intArray0);
      strictDateTimeField0.set((-210L), 832);
      Locale locale0 = new Locale("1969");
      LocalDate localDate2 = localDate1.withCenturyOfEra(2830);
      strictDateTimeField0.getAsShortText((ReadablePartial) localDate2, locale0);
      strictDateTimeField0.getAsShortText((ReadablePartial) localDate0, 832, locale0);
      long long0 = new Integer(292278993);
      strictDateTimeField0.getDurationField();
      strictDateTimeField0.getRangeDurationField();
      DateTimeFieldType dateTimeFieldType1 = strictDateTimeField0.getType();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(ethiopicChronology0, dateTimeField0, 1);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.addWrapPartial((ReadablePartial) null, 1, intArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-1088));
      LocalDateTime localDateTime2 = localDateTime1.withFields(localDateTime0);
      Duration duration0 = Duration.ZERO;
      LocalDateTime localDateTime3 = localDateTime2.plus((ReadableDuration) duration0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      LocalDateTime localDateTime4 = localDateTime3.withField(dateTimeFieldType0, 19);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 19;
      intArray0[4] = (-1088);
      intArray0[5] = (-1088);
      localDateTime1.plus((ReadableDuration) duration0);
      intArray0[6] = 19;
      intArray0[1] = (-1088);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.addWrapPartial(localDateTime4, 1, intArray0, 19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1069 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, delegatedDurationField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(unsupportedDateTimeField0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(15308640144L, dateTimeZone0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 7;
      intArray0[2] = 0;
      intArray0[3] = (-1220);
      intArray0[4] = 0;
      intArray0[5] = 2225;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-1);
      // Undeclared exception!
      try { 
        strictDateTimeField0.getMaximumValue((ReadablePartial) localDateTime0, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // clockhourOfHalfday field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology1.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      dateTimeZone0.previousTransition(1);
      dateTimeFieldType0.getDurationType();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, delegatedDurationField0, dateTimeFieldType0);
      Locale locale0 = new Locale("", "org/joda/time/tz/data");
      locale0.hasExtensions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Locale locale1 = Locale.KOREAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.forLanguageTag("");
      locale0.getDisplayVariant(locale1);
      delegatedDateTimeField0.getAsShortText((-150), locale0);
      dateTimeZone0.isFixed();
      System.setCurrentTimeMillis(1326L);
      String string0 = delegatedDateTimeField0.getAsText(1326L);
      assertEquals("1", string0);
      
      delegatedDateTimeField0.getDurationField();
      delegatedDateTimeField0.getType();
      delegatedDateTimeField0.getWrappedField();
      delegatedDateTimeField0.roundCeiling(1);
      String string1 = delegatedDateTimeField0.getAsShortText((-150), locale1);
      assertEquals("-150", string1);
      
      long long0 = delegatedDateTimeField0.roundCeiling((-3257L));
      assertEquals((-3000L), long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      buddhistChronology0.millis();
      DateTimeFieldType.halfdayOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.plusYears(0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(buddhistChronology0, dateTimeField0);
      skipDateTimeField0.get(0);
      String string0 = skipDateTimeField0.getAsShortText(0L);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(iSOChronology0, dateTimeField0, 1);
      Locale locale0 = new Locale("!:(ma^sOBE2m1X", "org.joda.time.field.DelegatedDateTimeField");
      skipDateTimeField0.getAsText((long) 1, locale0);
      MonthDay monthDay0 = new MonthDay((Chronology) buddhistChronology0);
      MonthDay monthDay1 = monthDay0.minusMonths(0);
      int[] intArray0 = skipDateTimeField0.add((ReadablePartial) monthDay1, 1, (int[]) null, 0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      lenientDateTimeField0.get((-398));
      LocalDateTime localDateTime0 = new LocalDateTime((long) (-398));
      dateTimeFieldType0.getDurationType();
      int[] intArray0 = new int[9];
      intArray0[0] = (-398);
      intArray0[1] = (-398);
      intArray0[2] = (-398);
      intArray0[3] = (-398);
      intArray0[4] = (-398);
      intArray0[5] = (-398);
      intArray0[6] = (-398);
      intArray0[7] = (-398);
      intArray0[8] = (-398);
      boolean boolean1 = lenientDateTimeField0.isLenient();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-4817L));
      Date date0 = Date.from(instant0);
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      DateTimeField dateTimeField0 = localDate0.getField(0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      strictDateTimeField0.getAsText(0L);
      strictDateTimeField0.getAsText((-4817L));
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int[] intArray0 = new int[1];
      Duration duration0 = new Duration(0, (-1007L));
      localDateTime0.minus((ReadableDuration) duration0);
      intArray0[0] = 0;
      strictDateTimeField0.getMaximumValue((ReadablePartial) localDateTime0, intArray0);
      strictDateTimeField0.getType();
      LocalDate localDate1 = new LocalDate((-1186L));
      strictDateTimeField0.getMaximumValue((ReadablePartial) localDate1, intArray0);
      strictDateTimeField0.set((-210L), 832);
      Locale locale0 = new Locale("1969");
      strictDateTimeField0.getAsShortText((ReadablePartial) localDate0, 832, locale0);
      strictDateTimeField0.set((long) 292278993, "832", locale0);
      DateTimeFieldType dateTimeFieldType0 = strictDateTimeField0.getType();
      assertEquals("year", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0, 0);
      skipUndoDateTimeField0.getMaximumValue();
      skipUndoDateTimeField0.add((long) 0, (long) 0);
      YearMonth yearMonth0 = new YearMonth();
      YearMonth yearMonth1 = yearMonth0.minusYears(59);
      int int0 = skipUndoDateTimeField0.getMinimumValue((ReadablePartial) yearMonth1, (int[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2418);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0);
      dateTimeZone0.isFixed();
      Locale locale0 = Locale.US;
      delegatedDateTimeField0.getAsText(2418, locale0);
      delegatedDateTimeField0.add((-3910L), 2887);
      delegatedDateTimeField0.add(0L, (-1951));
      delegatedDateTimeField0.isLeap(1);
      Integer integer0 = new Integer(2887);
      delegatedDateTimeField0.getAsShortText(2418, locale0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      delegatedDateTimeField0.getAsShortText(2418, locale0);
      Integer integer1 = new Integer(2887);
      delegatedDateTimeField0.getAsShortText(91104998396090L, locale0);
      delegatedDateTimeField0.getAsShortText((-1L));
      delegatedDateTimeField0.getAsText(28181250, locale0);
      delegatedDateTimeField0.remainder(0L);
      delegatedDateTimeField0.getType();
      DurationField durationField0 = delegatedDateTimeField0.getRangeDurationField();
      assertTrue(durationField0.isPrecise());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      defaultNameProvider0.getName((Locale) null, "", "org/joda/time/tz/data");
      DateTimeZone.setNameProvider(defaultNameProvider0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(islamicChronology0, dateTimeField0, 15271875);
      skipDateTimeField0.getDifference(1, 15271875);
      skipDateTimeField0.getLeapAmount(1);
      skipDateTimeField0.isLenient();
      DateTimeZone.getNameProvider();
      skipDateTimeField0.roundHalfCeiling(2629800000L);
      skipDateTimeField0.add((long) 15271875, 688L);
      skipDateTimeField0.getDifferenceAsLong(15959875L, (-15271));
      skipDateTimeField0.roundHalfCeiling((-859L));
      skipDateTimeField0.getLeapDurationField();
      skipDateTimeField0.getAsText((-2160L));
      skipDateTimeField0.add((-2561L), (long) 0);
      skipDateTimeField0.roundFloor((-859L));
      skipDateTimeField0.add((long) 1, 2629800000L);
      // Undeclared exception!
      try { 
        skipDateTimeField0.remainder((-9223372036854775800L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000+01:01 (BuddhistChronology[+01:01])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType.weekOfWeekyear();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      Partial partial0 = new Partial();
      strictDateTimeField0.getAsText((ReadablePartial) partial0, 1, (Locale) null);
      strictDateTimeField0.add((long) 1, (long) 1);
      strictDateTimeField0.set(86400001L, 1);
      strictDateTimeField0.getType();
      strictDateTimeField0.getDurationField();
      strictDateTimeField0.roundHalfFloor((-1260L));
      strictDateTimeField0.getMaximumValue();
      partial0.toString();
      int int0 = (-292269337);
      strictDateTimeField0.getName();
      // Undeclared exception!
      try { 
        strictDateTimeField0.addWrapField((ReadablePartial) partial0, 1, (int[]) null, (-2861));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.weeks();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(unsupportedDateTimeField0);
      LocalDate localDate0 = new LocalDate(0L, (Chronology) buddhistChronology0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 292272984;
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        strictDateTimeField0.addWrapPartial(localDate0, 0, intArray0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) null, dateTimeField0, 0);
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        skipDateTimeField0.getAsShortText((ReadablePartial) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      defaultNameProvider0.getName((Locale) null, "", "org/joda/time/tz/data");
      DateTimeZone.setNameProvider(defaultNameProvider0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(islamicChronology0, dateTimeField0, 15271875);
      int int0 = new Integer(1);
      skipDateTimeField0.getLeapAmount(1);
      skipDateTimeField0.isLenient();
      DateTimeZone.getNameProvider();
      skipDateTimeField0.roundHalfCeiling(2629800000L);
      skipDateTimeField0.add((long) 15271875, 688L);
      skipDateTimeField0.getDifferenceAsLong(21711212071875L, 1);
      skipDateTimeField0.getLeapDurationField();
      skipDateTimeField0.add((-2561L), (long) 0);
      skipDateTimeField0.roundFloor((-859L));
      // Undeclared exception!
      try { 
        skipDateTimeField0.add((long) 1, 2629800000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2629800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DurationField durationField0 = buddhistChronology0.millis();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldType0.getRangeDurationType();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, delegatedDurationField0, dateTimeFieldType0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.plusYears(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long long0 = new Integer(1);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.addWrapPartial(localDateTime0, 1, intArray0, (-1211));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      defaultNameProvider0.getName((Locale) null, "", "org/joda/time/tz/data");
      DateTimeZone.setNameProvider(defaultNameProvider0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(islamicChronology0, dateTimeField0, 15271875);
      skipDateTimeField0.getDifference(1, 15271875);
      skipDateTimeField0.getLeapAmount(1);
      skipDateTimeField0.isLenient();
      DateTimeZone.getNameProvider();
      skipDateTimeField0.roundHalfCeiling(2629800000L);
      skipDateTimeField0.add((long) 15271875, 688L);
      skipDateTimeField0.getDifferenceAsLong(15959875L, (-15271));
      skipDateTimeField0.roundHalfCeiling((-859L));
      skipDateTimeField0.getLeapDurationField();
      skipDateTimeField0.getAsText((-2160L));
      skipDateTimeField0.add((-2561L), (long) 0);
      skipDateTimeField0.roundFloor((-859L));
      skipDateTimeField0.add((long) 1, 2629800000L);
      // Undeclared exception!
      try { 
        skipDateTimeField0.remainder(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, delegatedDurationField0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(unsupportedDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.remainder((-2606L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // minuteOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3z(");
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      LocalDate localDate0 = localDateTime0.toLocalDate();
      localDate0.yearOfEra();
      delegatedDateTimeField0.getMinimumValue((ReadablePartial) localDate0);
      int[] intArray0 = new int[3];
      dateTimeFieldType0.getRangeDurationType();
      intArray0[0] = 0;
      intArray0[1] = (-292268511);
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set((ReadablePartial) localDateTime0, 0, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      System.setCurrentTimeMillis(30672000000L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      Chronology chronology0 = buddhistChronology0.withZone(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0);
      int[] intArray0 = new int[9];
      intArray0[0] = 508;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      // Undeclared exception!
      try { 
        skipDateTimeField0.set((ReadablePartial) null, 1, intArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      org.joda.time.Instant instant0 = new org.joda.time.Instant(0L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      org.joda.time.Instant instant1 = instant0.minus((ReadableDuration) null);
      Chronology chronology0 = instant1.getChronology();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0, 1197);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      skipDateTimeField0.addWrapField((-1699L), (-2902));
      Locale locale0 = Locale.PRC;
      skipDateTimeField0.getAsShortText((ReadablePartial) null, 2431, locale0);
      skipDateTimeField0.toString();
      skipDateTimeField0.remainder(0L);
      skipDateTimeField0.getType();
      int int0 = 0;
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(1, (-1), 0, 1, 703);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 703 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DurationField durationField0 = buddhistChronology0.millis();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, delegatedDurationField0, dateTimeFieldType0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusYears(0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.addWrapField((ReadablePartial) localDateTime1, 1, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      lenientDateTimeField0.isSupported();
      long long0 = lenientDateTimeField0.roundCeiling(1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      defaultNameProvider0.getName((Locale) null, "", "org/joda/time/tz/data");
      DateTimeZone.setNameProvider(defaultNameProvider0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(islamicChronology0, dateTimeField0, 15271875);
      skipDateTimeField0.getDifference(1, 15271875);
      skipDateTimeField0.getLeapAmount(1);
      skipDateTimeField0.isLenient();
      DateTimeZone.getNameProvider();
      skipDateTimeField0.roundHalfCeiling(2629800000L);
      skipDateTimeField0.add((long) 15271875, 688L);
      skipDateTimeField0.getDifferenceAsLong(15959875L, (-15271));
      skipDateTimeField0.roundHalfCeiling((-859L));
      skipDateTimeField0.getLeapDurationField();
      skipDateTimeField0.getAsText((-2160L));
      skipDateTimeField0.add((-2561L), (long) 0);
      skipDateTimeField0.roundFloor((-859L));
      skipDateTimeField0.add((long) 1, 2629800000L);
      skipDateTimeField0.add((long) 0, 0);
      boolean boolean0 = skipDateTimeField0.isLeap(1440L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = (-1);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, (-1));
      dateTimeFieldType0.getRangeDurationType();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, scaledDurationField0);
      DateTimeField dateTimeField0 = StrictDateTimeField.getInstance(unsupportedDateTimeField0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Chronology chronology0 = copticChronology0.withUTC();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, chronology0);
      // Undeclared exception!
      try { 
        lenientDateTimeField0.getLeapAmount((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // halfdayOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      dateTimeZone0.getOffsetFromLocal(1);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, buddhistChronology0);
      BuddhistChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.ROOT;
      dateTimeZone0.getName((long) 1, locale0);
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField1, buddhistChronology0);
      lenientDateTimeField0.getMinimumValue(3776L);
      lenientDateTimeField0.getDurationField();
      lenientDateTimeField0.getAsShortText((-824L));
      lenientDateTimeField0.set(1000000000000000000L, 1);
      int[] intArray0 = new int[0];
      int[] intArray1 = lenientDateTimeField0.addWrapPartial((ReadablePartial) null, 0, intArray0, 0);
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.millisOfDay();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, dateTimeField0);
      skipDateTimeField0.getAsShortText((long) 1);
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayVariant();
      skipDateTimeField0.getAsText((long) 1, locale0);
      skipDateTimeField0.roundHalfEven(1);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1264).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(ethiopicChronology0);
      skipDateTimeField0.getMinimumValue((ReadablePartial) null);
      LocalTime.parse("\"9*jzFQsns$Kj+CjH}", dateTimeFormatter2);
      Period period0 = null;
      try {
        period0 = new Period(dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.format.DateTimeFormatter
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Minutes minutes0 = Minutes.TWO;
      Days days0 = minutes0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      Months months0 = Months.SIX;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      days0.isSupported(durationFieldType0);
      int int0 = 0;
      buddhistChronology0.add((ReadablePeriod) seconds0, 0L, 0);
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldType0.getField(buddhistChronology0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0);
      delegatedDateTimeField0.getAsText((long) 1);
      delegatedDateTimeField0.getType();
      Locale locale0 = Locale.KOREA;
      delegatedDateTimeField0.getMaximumShortTextLength(locale0);
      System.setCurrentTimeMillis(0L);
      delegatedDateTimeField0.addWrapField(0L, 0);
      delegatedDateTimeField0.isSupported();
      delegatedDateTimeField0.set(0L, "1");
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDateTime0.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      defaultNameProvider0.getName((Locale) null, "", "org/joda/time/tz/data");
      DateTimeZone.setNameProvider(defaultNameProvider0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(islamicChronology0, dateTimeField0, 15271875);
      int int0 = skipDateTimeField0.getDifference(1, 15271875);
      skipDateTimeField0.getLeapAmount(1);
      skipDateTimeField0.isLenient();
      DateTimeZone.getNameProvider();
      skipDateTimeField0.roundHalfCeiling(2629800000L);
      skipDateTimeField0.add((long) 15271875, 688L);
      skipDateTimeField0.getDifferenceAsLong(15959875L, (-15271));
      skipDateTimeField0.roundHalfCeiling((-859L));
      skipDateTimeField0.getLeapDurationField();
      skipDateTimeField0.getAsText((-2160L));
      skipDateTimeField0.add((-2561L), (long) 0);
      skipDateTimeField0.roundFloor((-859L));
      skipDateTimeField0.add((long) 1, 2629800000L);
      int int1 = skipDateTimeField0.getMinimumValue();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      Locale locale0 = Locale.GERMANY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LocalDate localDate0 = new LocalDate((long) 1);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        lenientDateTimeField0.addWrapPartial(localDate0, 1, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2418);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0);
      dateTimeZone0.isFixed();
      Locale locale0 = Locale.US;
      delegatedDateTimeField0.getAsText(2418, locale0);
      delegatedDateTimeField0.add((-3912L), 2887);
      long long0 = new Integer(2418);
      delegatedDateTimeField0.isLeap(1);
      delegatedDateTimeField0.getDifference(2887, (-1951));
      delegatedDateTimeField0.getAsShortText(0, locale0);
      delegatedDateTimeField0.getAsShortText(2418, locale0);
      delegatedDateTimeField0.set((-3912L), "0");
      delegatedDateTimeField0.roundHalfEven(4);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) 1);
      LocalDateTime localDateTime0 = dateTimeFormatter2.parseLocalDateTime("");
      int[] intArray0 = new int[5];
      intArray0[0] = 93;
      intArray0[1] = 4;
      intArray0[2] = 419;
      intArray0[3] = 2418;
      intArray0[4] = 2887;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.add((ReadablePartial) localDateTime0, 93, intArray0, 2887);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 93
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType.weekOfWeekyear();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      Partial partial0 = new Partial();
      strictDateTimeField0.add((long) 1, (long) 1);
      strictDateTimeField0.isLeap(1);
      strictDateTimeField0.set(86400001L, 1);
      strictDateTimeField0.getType();
      strictDateTimeField0.getDurationField();
      strictDateTimeField0.roundHalfFloor((-1260L));
      strictDateTimeField0.getMaximumValue();
      strictDateTimeField0.getDifference(1L, 1L);
      strictDateTimeField0.roundHalfFloor((-2128L));
      strictDateTimeField0.getDifferenceAsLong((-1L), 86400001L);
      String string0 = strictDateTimeField0.getName();
      assertEquals("dayOfYear", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      strictDateTimeField0.getMaximumValue();
      strictDateTimeField0.getAsText((long) 1);
      buddhistChronology0.toString();
      strictDateTimeField0.getAsText(0L, (Locale) null);
      Locale locale0 = Locale.KOREAN;
      locale0.getDisplayCountry();
      locale0.getScript();
      dateTimeZone0.getShortName((long) 1, locale0);
      strictDateTimeField0.roundHalfFloor(1083L);
      strictDateTimeField0.getMaximumShortTextLength((Locale) null);
      strictDateTimeField0.getMaximumValue((long) 53);
      strictDateTimeField0.addWrapField(2512L, 14);
      strictDateTimeField0.addWrapField(2767L, (-3143));
      strictDateTimeField0.getAsText(159L);
      strictDateTimeField0.roundHalfFloor(0L);
      strictDateTimeField0.getName();
      strictDateTimeField0.getMaximumValue();
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) buddhistChronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(14);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      LocalDateTime localDateTime2 = localDateTime1.withField(dateTimeFieldType0, 2);
      LocalDate localDate0 = localDateTime2.toLocalDate();
      PeriodType periodType0 = PeriodType.dayTime();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(localDate0, periodType0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.LocalDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      buddhistChronology0.add(0L, 0L, 0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      Partial partial0 = new Partial(buddhistChronology0);
      PeriodType periodType0 = PeriodType.days();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 1, periodType0);
      Partial partial1 = partial0.plus(mutablePeriod0);
      Partial partial2 = partial1.withPeriodAdded(mutablePeriod0, 5);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial3 = partial2.with(dateTimeFieldType0, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 5;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 5;
      delegatedDateTimeField0.addWrapField((ReadablePartial) partial0, 2, intArray0, 2651);
      delegatedDateTimeField0.isLenient();
      Partial partial4 = partial3.withChronologyRetainFields(buddhistChronology0);
      buddhistChronology0.get((ReadablePartial) partial4, 1559L);
      LocalDate localDate0 = new LocalDate(1537L, (Chronology) buddhistChronology0);
      int[] intArray1 = new int[2];
      intArray1[0] = 3917;
      intArray1[1] = 1;
      delegatedDateTimeField0.getMaximumValue((ReadablePartial) localDate0, intArray1);
      delegatedDateTimeField0.roundHalfEven(23);
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.getAsText((ReadablePartial) localDate0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = julianChronology0.withZone(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0);
      skipDateTimeField0.getAsText((long) 1);
      Locale locale0 = Locale.KOREAN;
      skipDateTimeField0.getAsText((long) 1, locale0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimePrinter0).estimatePrintedLength();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(2087).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) 1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
      LocalDateTime localDateTime0 = LocalDateTime.parse("0", dateTimeFormatter2);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      StringBuilder stringBuilder2 = stringBuilder1.append(415L);
      dateTimeFormatter2.printTo(stringBuilder2, (-1L));
      intArray0[3] = 1;
      // Undeclared exception!
      try { 
        skipDateTimeField0.set((ReadablePartial) localDateTime0, 1, intArray0, "0", locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.roundHalfFloor(0L);
      delegatedDateTimeField0.roundHalfFloor(0L);
      delegatedDateTimeField0.getName();
      delegatedDateTimeField0.getAsText(23034375, (Locale) null);
      delegatedDateTimeField0.getAsText((long) 23034375);
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      delegatedDateTimeField0.getAsText((ReadablePartial) yearMonth0, (Locale) null);
      Locale locale0 = Locale.KOREAN;
      delegatedDateTimeField0.getMaximumTextLength(locale0);
      int[] intArray0 = new int[8];
      BuddhistChronology.getInstance();
      intArray0[0] = 23034375;
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[4] = 23034375;
      intArray0[5] = 3;
      intArray0[6] = (-1747);
      intArray0[7] = 1;
      int[] intArray1 = delegatedDateTimeField0.add((ReadablePartial) yearMonth0, (-1747), intArray0, 0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L, (Chronology) buddhistChronology0);
      int int0 = delegatedDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray1);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      int int0 = 23034375;
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set(0L, (-614));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -614 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-1088));
      LocalDateTime localDateTime2 = localDateTime1.withFields(localDateTime0);
      Duration duration0 = Duration.ZERO;
      LocalDateTime localDateTime3 = localDateTime2.plus((ReadableDuration) duration0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      LocalDateTime localDateTime4 = localDateTime3.withField(dateTimeFieldType0, 19);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 19;
      intArray0[4] = (-1088);
      intArray0[5] = (-1088);
      intArray0[6] = 19;
      intArray0[7] = (-1088);
      delegatedDateTimeField0.addWrapPartial(localDateTime4, 1, intArray0, 19);
      assertArrayEquals(new int[] {2, 8, 1, 19, (-1088), (-1088), 19, (-1088)}, intArray0);
      assertTrue(localDateTime3.equals((Object)localDateTime0));
      assertTrue(localDateTime0.equals((Object)localDateTime2));
      
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set(4695L, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1L, (Chronology) buddhistChronology0);
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(buddhistChronology0, dateTimeField0);
      int int0 = skipDateTimeField0.getMinimumValue((ReadablePartial) localTime0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType.weekOfWeekyear();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      Partial partial0 = new Partial();
      int[] intArray0 = buddhistChronology0.get((ReadablePartial) partial0, (-1599L));
      strictDateTimeField0.getAsText((ReadablePartial) partial0, 1, (Locale) null);
      strictDateTimeField0.add((long) 1, (long) 1);
      strictDateTimeField0.set(86400001L, 1);
      strictDateTimeField0.getType();
      strictDateTimeField0.getDurationField();
      strictDateTimeField0.roundHalfFloor((-1260L));
      strictDateTimeField0.getMaximumValue();
      partial0.toString();
      strictDateTimeField0.getDifference(1L, 1L);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set((ReadablePartial) partial0, 0, intArray0, 366);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1L, (Chronology) buddhistChronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      int[] intArray1 = delegatedDateTimeField0.add((ReadablePartial) localTime0, 1, intArray0, 1);
      assertArrayEquals(new int[] {1, 2, 1, 1}, intArray1);
      
      delegatedDateTimeField0.add((-1L), 1L);
      delegatedDateTimeField0.isLeap(59999L);
      int int0 = delegatedDateTimeField0.get(59999L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      delegatedDateTimeField0.toString();
      delegatedDateTimeField0.get(0L);
      long long0 = delegatedDateTimeField0.roundHalfEven(0L);
      assertEquals(0L, long0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Locale locale0 = Locale.JAPANESE;
      String string0 = delegatedDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, 13, locale0);
      String string1 = delegatedDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, locale0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-4817L));
      Date date0 = Date.from(instant0);
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      DateTimeField dateTimeField0 = localDate0.getField(0);
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(dateTimeField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField1);
      strictDateTimeField0.getAsText(0L);
      strictDateTimeField0.getAsText((-4817L));
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int[] intArray0 = new int[1];
      Duration duration0 = new Duration(0, (-1007L));
      localDateTime0.minus((ReadableDuration) duration0);
      intArray0[0] = 0;
      strictDateTimeField0.getMaximumValue((ReadablePartial) localDateTime0, intArray0);
      strictDateTimeField0.getType();
      LocalDate localDate1 = new LocalDate((-1186L));
      strictDateTimeField0.getMaximumValue((ReadablePartial) localDate1, intArray0);
      strictDateTimeField0.set((-210L), 832);
      Locale locale0 = new Locale("1969");
      strictDateTimeField0.getAsShortText((ReadablePartial) localDate0, 832, locale0);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set((long) 292278993, "The field must not be null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"The field must not be null\" for year is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gregorianChronology0, dateTimeField0);
      skipUndoDateTimeField0.roundFloor(1000000000000000L);
      skipUndoDateTimeField0.add(1000000000000000L, 259200000L);
      int int0 = skipUndoDateTimeField0.getDifference(779L, 259200000L);
      assertEquals((-2), int0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) gregorianChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusDays(17);
      int[] intArray0 = new int[7];
      intArray0[0] = 17;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 17;
      intArray0[4] = 17;
      intArray0[5] = 1;
      intArray0[6] = (-2);
      int[] intArray1 = skipUndoDateTimeField0.set((ReadablePartial) localDateTime1, 0, intArray0, 1);
      assertArrayEquals(new int[] {1, 1, 1, 17, 17, 1, (-2)}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 17, 17, 1, (-2)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(julianChronology0, delegatedDateTimeField0, 1);
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.set(0L, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology1.days();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = delegatedDateTimeField0.getType();
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      
      int int0 = delegatedDateTimeField0.getMinimumValue(576L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      Chronology chronology0 = strictChronology0.withZone(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, offsetDateTimeField0, 1);
      LocalTime localTime0 = LocalTime.now();
      Locale locale0 = Locale.CHINA;
      String string0 = skipUndoDateTimeField0.getAsShortText((ReadablePartial) localTime0, (-324), locale0);
      assertEquals("-324", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      Chronology chronology0 = iSOChronology0.withZone((DateTimeZone) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0);
      iSOChronology0.add((long) 1, (long) 1, 1);
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(iSOChronology0);
      yearMonth1.year();
      yearMonth0.compareTo((ReadablePartial) yearMonth1);
      Locale locale0 = Locale.forLanguageTag("fUGN@kk-+");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.lookupTag(linkedList0, set0);
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.getAsText((ReadablePartial) yearMonth1, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'era' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      dateTimeZone0.getNameKey((-1791L));
      strictChronology0.withZone(dateTimeZone0);
      Chronology chronology0 = strictChronology0.withUTC();
      Months months0 = Months.MIN_VALUE;
      months0.getValue(0);
      copticChronology0.get((ReadablePeriod) months0, (long) 0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0, 1);
      skipUndoDateTimeField0.getLeapAmount(1);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      skipUndoDateTimeField0.getMaximumValue(0L);
      localDate0.getDayOfWeek();
      localDate0.toInterval(dateTimeZone0);
      skipUndoDateTimeField0.getMinimumValue((ReadablePartial) localDate0);
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.add((ReadablePartial) localDate0, 1, (int[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(dateTimeField0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, dateTimeField1);
      skipDateTimeField0.getAsShortText((long) 1);
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayVariant();
      skipDateTimeField0.getAsText((long) 1, locale0);
      skipDateTimeField0.roundHalfEven(1);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(ethiopicChronology0);
      // Undeclared exception!
      try { 
        LocalTime.parse("\"9*jzFQsns$Kj+CjH}", dateTimeFormatter2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"9*jzFQsns$Kj+CjH}\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      StrictChronology.getInstance(gregorianChronology0);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone(";)#^FM*vmV:,");
      Chronology chronology0 = strictChronology0.withZone((DateTimeZone) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0, (-3737));
      int int0 = (-3463);
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.addWrapField(9223372036854775807L, (-3463));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292275055 for weekyear must be in the range [-292269055,292272992]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      int int0 = 17;
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.hasExtensions();
      delegatedDateTimeField0.getAsShortText(17, locale0);
      delegatedDateTimeField0.getLeapDurationField();
      delegatedDateTimeField0.get(1);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.setDefault(dateTimeZone0);
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      localTime0.plusHours(2513);
      int int1 = (-5315);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded(durationFieldType0, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'days' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 2);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gregorianChronology0, dateTimeField0, 1);
      long long0 = skipDateTimeField0.roundFloor(1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2658);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      Locale locale0 = new Locale("org/joda/time/tz/data", "org/joda/time/tz/data", "Br0bb@$u*o");
      int int0 = delegatedDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DurationField durationField0 = delegatedDateTimeField0.getRangeDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 2418;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2418);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0);
      dateTimeZone0.isFixed();
      Locale locale0 = Locale.US;
      delegatedDateTimeField0.getAsText(2418, locale0);
      int int1 = 2887;
      delegatedDateTimeField0.add((-3912L), 2887);
      delegatedDateTimeField0.add(0L, (-1951));
      delegatedDateTimeField0.isLeap(1);
      delegatedDateTimeField0.getDifference(2887, (-1951));
      delegatedDateTimeField0.getAsShortText(0, locale0);
      delegatedDateTimeField0.getAsShortText(2418, locale0);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set((-3912L), "0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfCentury must be in the range [1,100]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      long long0 = 21260793600000L;
      DateTimeZone.getDefault();
      dateTimeZone0.convertLocalToUTC(21260793600000L, false);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.getMinimumValue();
      Locale locale0 = Locale.CANADA;
      delegatedDateTimeField0.getAsText(0, locale0);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set(2914L, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for clockhourOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.toString();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.plusSeconds((-670));
      Seconds seconds0 = Seconds.ZERO;
      delegatedDateTimeField0.getMaximumValue((ReadablePartial) localTime1);
      Weeks weeks0 = seconds0.toStandardWeeks();
      LocalTime localTime2 = localTime1.minus(weeks0);
      localTime2.hourOfDay();
      int[] intArray0 = new int[4];
      LocalTime.fromMillisOfDay(2683L);
      intArray0[0] = 0;
      intArray0[1] = (-670);
      intArray0[2] = 0;
      intArray0[3] = 1;
      delegatedDateTimeField0.getMaximumValue((ReadablePartial) localTime2, intArray0);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set((ReadablePartial) localTime1, (-1777), intArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1777
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1393);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears((-1153));
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1393;
      intArray0[2] = (-1153);
      intArray0[3] = (-1153);
      intArray0[4] = 1831;
      delegatedDateTimeField0.getMaximumValue((ReadablePartial) localDateTime1, intArray0);
      boolean boolean0 = delegatedDateTimeField0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, lenientChronology0);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(lenientChronology0, dateTimeField1, 1);
      long long0 = skipUndoDateTimeField0.roundHalfCeiling(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      dateTimeZone0.previousTransition(163L);
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(copticChronology0, offsetDateTimeField0, 1);
      dateTimeZone0.isFixed();
      skipUndoDateTimeField0.roundHalfEven(616L);
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.add((-378691200000L), (-2618L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gJChronology0, dateTimeField0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, (-1344), 1686, 0, 0);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[1];
      intArray0[0] = 350;
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.set((ReadablePartial) yearMonth0, (-3130), intArray0, (-3130));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3130 for era must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      defaultNameProvider0.getName((Locale) null, "", "org/joda/time/tz/data");
      DateTimeZone.setNameProvider(defaultNameProvider0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(islamicChronology0, dateTimeField0, 15271875);
      int int0 = skipDateTimeField0.getDifference(1, 15271875);
      assertEquals((-15271), int0);
      
      skipDateTimeField0.getLeapAmount(1);
      skipDateTimeField0.isLenient();
      DateTimeZone.getNameProvider();
      skipDateTimeField0.roundHalfCeiling(2629800000L);
      skipDateTimeField0.add((long) 15271875, 688L);
      long long0 = skipDateTimeField0.getDifferenceAsLong(15959875L, (-15271));
      assertEquals(15975L, long0);
      
      long long1 = skipDateTimeField0.roundHalfCeiling((-859L));
      skipDateTimeField0.getLeapDurationField();
      String string0 = skipDateTimeField0.getAsText((-2127L));
      assertEquals("57", string0);
      
      skipDateTimeField0.add((-2561L), (long) 0);
      long long2 = skipDateTimeField0.roundFloor((-859L));
      assertTrue(long2 == long1);
      
      long long3 = skipDateTimeField0.add((long) 1, 2629800000L);
      assertEquals(2629800000001L, long3);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      BuddhistChronology.getInstance(dateTimeZone0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      delegatedDateTimeField0.getMinimumValue();
      buddhistChronology0.withUTC();
      ReadablePartial readablePartial0 = null;
      long long0 = 26607895200000L;
      // Undeclared exception!
      try { 
        buddhistChronology0.get((ReadablePartial) null, 26607895200000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(julianChronology0, dateTimeField0, 1);
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.getAsText((ReadablePartial) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      IslamicChronology.getInstance(dateTimeZone0);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology1.clockhourOfHalfday();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = delegatedDateTimeField0.getAsShortText(1, locale0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.add((-3017L), (-261L), 0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = null;
      try {
        delegatedDateTimeField0 = new DelegatedDateTimeField((DateTimeField) null, (DurationField) null, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      buddhistChronology0.equals(dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      dateTimeFieldType0.getDurationType();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.getMinimumValue();
      String string0 = "";
      // Undeclared exception!
      try { 
        LocalTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrictDateTimeField.getInstance((DateTimeField) null);
      DelegatedDateTimeField delegatedDateTimeField0 = null;
      try {
        delegatedDateTimeField0 = new DelegatedDateTimeField((DateTimeField) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0, 1);
      long long0 = skipDateTimeField0.add((-1L), 1);
      assertEquals(999L, long0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = skipDateTimeField0.getAsShortText((-571L), locale0);
      assertEquals("86399", string0);
      
      skipDateTimeField0.isLenient();
      skipDateTimeField0.getMaximumShortTextLength(locale0);
      long long1 = skipDateTimeField0.addWrapField(0L, 5);
      assertEquals(5000L, long1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) null, dateTimeField0);
      skipDateTimeField0.roundHalfEven(1);
      skipDateTimeField0.getAsShortText(0L);
      long long0 = skipDateTimeField0.add((-615L), 1);
      long long1 = skipDateTimeField0.roundHalfEven(0L);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) null, dateTimeField0, 1);
      Locale locale0 = Locale.GERMAN;
      String string0 = skipUndoDateTimeField0.getAsShortText((long) 1, locale0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.toString();
      delegatedDateTimeField0.remainder(1);
      String string0 = "-Summer";
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-Summer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-Summer\" is malformed at \"Summer\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 9;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(9, 9);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      YearMonth yearMonth0 = new YearMonth();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 9;
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        lenientDateTimeField0.set((ReadablePartial) yearMonth0, 0, intArray0, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for millisOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      delegatedDateTimeField0.getDifferenceAsLong(0L, 0L);
      delegatedDateTimeField0.roundCeiling(0L);
      delegatedDateTimeField0.getMinimumValue(1289L);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(dateTimeField0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.LimitChronology$LimitDateTimeField
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      dateTimeZone0.isStandardOffset((-1827L));
      buddhistChronology0.withZone(dateTimeZone0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0, durationFieldType0);
      DelegatedDurationField delegatedDurationField1 = new DelegatedDurationField(delegatedDurationField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      preciseDurationField0.compareTo((DurationField) delegatedDurationField0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, delegatedDurationField1, dateTimeFieldType0);
      delegatedDateTimeField0.getMaximumValue();
      Partial partial0 = new Partial(buddhistChronology0);
      Partial partial1 = partial0.without(dateTimeFieldType0);
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.getAsShortText((ReadablePartial) partial1, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0);
      int int0 = skipDateTimeField0.getMinimumValue((-2018L));
      assertEquals((-2922685), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      String string0 = delegatedDateTimeField0.getAsText(1910L);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0);
      skipUndoDateTimeField0.getMaximumValue(0L);
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      skipUndoDateTimeField0.toString();
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.getAsShortText((ReadablePartial) yearMonth0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'era' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.getProvider();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(skipDateTimeField0);
      strictDateTimeField0.getMaximumValue();
      // Undeclared exception!
      try { 
        strictDateTimeField0.set((long) 1, "org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org/joda/time/tz/data\" for era is not supported
         //
         verifyException("org.joda.time.chrono.BasicSingleEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(iSOChronology0, dateTimeField0);
      long long0 = 866L;
      skipDateTimeField0.roundHalfFloor(866L);
      // Undeclared exception!
      try { 
        DateTimeZone.forID(" and ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id ' and ' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(julianChronology0, dateTimeField0);
      skipUndoDateTimeField0.getMaximumShortTextLength((Locale) null);
      skipUndoDateTimeField0.getDifference(1991L, 4081L);
      skipUndoDateTimeField0.getLeapDurationField();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.add((ReadablePartial) null, 1, intArray0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      buddhistChronology0.add(154L, 0L, (-1612));
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 343);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.roundHalfFloor(1);
      Locale locale0 = Locale.TAIWAN;
      dividedDateTimeField0.getAsText(343, locale0);
      Locale locale1 = Locale.ITALY;
      delegatedDateTimeField0.getAsText((-1252L), locale1);
      delegatedDateTimeField0.roundHalfCeiling((-697L));
      delegatedDateTimeField0.isSupported();
      delegatedDateTimeField0.get(1438L);
      DateTimeField dateTimeField1 = delegatedDateTimeField0.getWrappedField();
      assertEquals("clockhourOfDay", dateTimeField1.getName());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      MockDate mockDate0 = new MockDate(1, 1, 1);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      localTime0.getFieldTypes();
      int int0 = delegatedDateTimeField0.getMaximumValue((ReadablePartial) localTime0);
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(delegatedDateTimeField0, gregorianChronology0);
      Locale locale0 = Locale.ROOT;
      int int0 = lenientDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      offsetDateTimeField0.getLeapDurationField();
      offsetDateTimeField0.toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0);
      int int0 = delegatedDateTimeField0.getDifference(1, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      long long0 = (-1L);
      long long1 = 1L;
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1L, (Chronology) buddhistChronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.add((ReadablePartial) localTime0, 1, intArray0, (-1640));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology1.weeks();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, (DateTimeFieldType) null);
      delegatedDateTimeField0.getAsShortText(1424L);
      delegatedDateTimeField0.roundFloor((-604800000L));
      DurationField durationField1 = delegatedDateTimeField0.getDurationField();
      assertNotSame(durationField1, durationField0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0);
      Locale locale0 = Locale.UK;
      String string0 = delegatedDateTimeField0.getAsText(2984L, locale0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DelegatedDateTimeField delegatedDateTimeField0 = null;
      try {
        delegatedDateTimeField0 = new DelegatedDateTimeField((DateTimeField) null, (DurationField) null, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(copticChronology0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      int int0 = delegatedDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, buddhistChronology0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField1);
      String string0 = strictDateTimeField0.getName();
      assertEquals("secondOfMinute", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DelegatedDateTimeField delegatedDateTimeField0 = null;
      try {
        delegatedDateTimeField0 = new DelegatedDateTimeField((DateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      Partial partial0 = new Partial();
      buddhistChronology0.get((ReadablePartial) partial0, (-1599L));
      delegatedDateTimeField0.getAsText((ReadablePartial) partial0, 1, (Locale) null);
      delegatedDateTimeField0.add((long) 1, (long) 1);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set((long) 1, "%$[N`86DiL_", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"%$[N`86DiL_\" for dayOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((long) 1, (Chronology) ethiopicChronology0);
      Weeks weeks0 = Weeks.THREE;
      LocalDate localDate1 = localDate0.withPeriodAdded(weeks0, 1);
      DateTimeField dateTimeField0 = localDate1.getField(1);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, dateTimeField0, 0);
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        skipDateTimeField0.set(0L, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = lenientChronology0.withZone(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0, 1);
      long long0 = skipUndoDateTimeField0.add(0L, (long) 1);
      assertEquals(60000L, long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth yearMonth1 = yearMonth0.minusYears(613);
      org.joda.time.Instant instant0 = org.joda.time.Instant.now();
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period(instant0, instant0, periodType0);
      Period period1 = period0.multipliedBy(1);
      YearMonth yearMonth2 = yearMonth1.minus(period1);
      YearMonth yearMonth3 = yearMonth2.plus(period0);
      String string0 = strictDateTimeField0.getAsText((ReadablePartial) yearMonth3, 0, (Locale) null);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1);
      Period period0 = Period.weeks(93);
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(period0, 1);
      Duration duration0 = period0.toStandardDuration();
      LocalDateTime localDateTime2 = localDateTime1.plus((ReadableDuration) duration0);
      LocalDateTime localDateTime3 = localDateTime2.plusDays(93);
      Locale locale0 = Locale.forLanguageTag("org/joda/time/tz/data");
      String string0 = lenientDateTimeField0.getAsText((ReadablePartial) localDateTime3, locale0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      dateTimeFieldType0.getDurationType();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, delegatedDurationField0, dateTimeFieldType0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      delegatedDateTimeField0.getType();
      delegatedDateTimeField0.getWrappedField();
      delegatedDateTimeField0.roundCeiling(1);
      delegatedDateTimeField0.isLeap(0L);
      Object object0 = new Object();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(object0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      Duration duration0 = Duration.ZERO;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set(4695L, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DurationField durationField0 = buddhistChronology0.millis();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, delegatedDurationField0, dateTimeFieldType0);
      DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.addWrapField((ReadablePartial) localDateTime0, 1, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      strictDateTimeField0.getMaximumValue();
      strictDateTimeField0.getAsText((long) 1);
      buddhistChronology0.toString();
      buddhistChronology0.add((long) 53, 0L, 53);
      Locale locale0 = Locale.KOREAN;
      locale0.getDisplayCountry();
      locale0.getScript();
      dateTimeZone0.getShortName((long) 1, locale0);
      strictDateTimeField0.roundHalfFloor(0L);
      strictDateTimeField0.getMaximumShortTextLength((Locale) null);
      strictDateTimeField0.getMaximumValue((long) 53);
      strictDateTimeField0.addWrapField(2512L, 14);
      long long0 = strictDateTimeField0.addWrapField(2512L, (-3143));
      assertEquals(22377602512L, long0);
      
      strictDateTimeField0.getAsText(136L);
      strictDateTimeField0.getName();
      strictDateTimeField0.getMaximumValue();
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) buddhistChronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(14);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Minutes minutes0 = Minutes.THREE;
      localDateTime1.plus((ReadablePeriod) minutes0);
      LocalDateTime localDateTime2 = localDateTime1.withField(dateTimeFieldType0, 2);
      localDateTime2.toLocalDate();
      long long1 = strictDateTimeField0.remainder(1);
      assertEquals(262800001L, long1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-4817L));
      Date date0 = Date.from(instant0);
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      DateTimeField dateTimeField0 = localDate0.getField(0);
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(dateTimeField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField1);
      strictDateTimeField0.getAsText(0L);
      strictDateTimeField0.getAsText((-4817L));
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int[] intArray0 = new int[1];
      Duration.standardMinutes(0L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.joda.time.field.DelegatedDateTimeField");
      intArray0[0] = 0;
      strictDateTimeField0.getMaximumValue((ReadablePartial) localDateTime0, intArray0);
      DateTimeFieldType.centuryOfEra();
      LocalDate localDate1 = new LocalDate((-1182L));
      strictDateTimeField0.getMaximumValue((ReadablePartial) localDate1, intArray0);
      Locale locale0 = new Locale("1969");
      LocalDate localDate2 = localDate1.withCenturyOfEra(2830);
      strictDateTimeField0.getAsShortText((ReadablePartial) localDate2, locale0);
      strictDateTimeField0.getAsShortText((ReadablePartial) localDate0, 832, locale0);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set((long) 292278993, "The field must not be null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"The field must not be null\" for year is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[9];
      LenientDateTimeField lenientDateTimeField0 = null;
      try {
        lenientDateTimeField0 = new LenientDateTimeField((DateTimeField) null, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType.weekOfWeekyear();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      Partial partial0 = new Partial();
      int[] intArray0 = buddhistChronology0.get((ReadablePartial) partial0, (-1599L));
      Locale locale0 = null;
      strictDateTimeField0.getAsText((ReadablePartial) partial0, 1, (Locale) null);
      strictDateTimeField0.add((long) 1, (long) 1);
      strictDateTimeField0.set(86400001L, 1);
      strictDateTimeField0.getType();
      strictDateTimeField0.roundHalfFloor(1L);
      strictDateTimeField0.getMaximumValue();
      partial0.toString();
      LocalDate localDate0 = new LocalDate("1");
      int int0 = (-2437);
      strictDateTimeField0.getMinimumValue((ReadablePartial) localDate0);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set((ReadablePartial) partial0, 366, intArray0, 366);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 366
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2418);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0);
      dateTimeZone0.isFixed();
      Locale locale0 = Locale.US;
      delegatedDateTimeField0.getAsText(2418, locale0);
      delegatedDateTimeField0.add((-3910L), 2887);
      delegatedDateTimeField0.add(0L, (-1951));
      delegatedDateTimeField0.isLeap(1);
      Integer integer0 = new Integer(2887);
      delegatedDateTimeField0.getAsShortText(2418, locale0);
      delegatedDateTimeField0.getAsShortText(2418, locale0);
      Integer integer1 = new Integer(2887);
      delegatedDateTimeField0.getAsShortText(91104998396090L, locale0);
      delegatedDateTimeField0.getAsShortText((-1L));
      delegatedDateTimeField0.getName();
      int[] intArray0 = new int[7];
      intArray0[0] = (-2499);
      intArray0[1] = 2887;
      intArray0[2] = (-1951);
      intArray0[3] = 2887;
      intArray0[4] = 2887;
      intArray0[5] = 2418;
      intArray0[6] = 2887;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set((ReadablePartial) null, 1, intArray0, "2418", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2418 for yearOfCentury must be in the range [1,100]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(dateTimeField0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, dateTimeField1);
      skipDateTimeField0.getAsShortText((long) 1);
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayVariant();
      skipDateTimeField0.getAsText((long) 1, locale0);
      skipDateTimeField0.roundHalfEven(1);
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      int int0 = 569;
      long long0 = (-259L);
      // Undeclared exception!
      try { 
        skipDateTimeField0.set((long) 1, (-571));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -571 for millisOfDay must be in the range [1,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(1, (-1120), (-1120), (-1120), (-1), (-1397), 24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1120 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      lenientDateTimeField0.getMaximumTextLength(locale0);
      Locale locale1 = Locale.UK;
      lenientDateTimeField0.getAsShortText(1, locale1);
      lenientDateTimeField0.toString();
      lenientDateTimeField0.add((long) 3, (long) 1);
      Locale locale2 = Locale.ENGLISH;
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(locale2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.util.Locale
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(islamicChronology0, dateTimeField0, 15271875);
      skipDateTimeField0.getDifference(1, 15271875);
      skipDateTimeField0.getLeapAmount(1);
      skipDateTimeField0.isLenient();
      DateTimeZone.getNameProvider();
      skipDateTimeField0.roundHalfCeiling(2629800000L);
      skipDateTimeField0.add((long) 15271875, 688L);
      skipDateTimeField0.getDifferenceAsLong(15959875L, (-15271));
      skipDateTimeField0.roundHalfCeiling((-859L));
      skipDateTimeField0.getLeapDurationField();
      skipDateTimeField0.getAsText((-2160L));
      skipDateTimeField0.roundFloor((-859L));
      skipDateTimeField0.getMaximumValue((ReadablePartial) null);
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = (-15271);
      intArray0[5] = 1;
      skipDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      // Undeclared exception!
      try { 
        skipDateTimeField0.addWrapPartial((ReadablePartial) null, (-128), intArray0, 3717);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -128
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Chronology chronology0 = iSOChronology0.withUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0, 1);
      ReadablePartial readablePartial0 = null;
      int[] intArray0 = new int[5];
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.add((ReadablePartial) null, 1, intArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
}
