/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 22:13:06 GMT 2025
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DividedDateTimeField_ESTest extends DividedDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-3231), (-1), (-3231));
      assertNotNull(offsetDateTimeField0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", offsetDateTimeField0.getName());
      assertEquals((-3231), offsetDateTimeField0.getOffset());
      assertEquals((-1), offsetDateTimeField0.getMinimumValue());
      assertEquals((-3231), offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.seconds();
      assertNotNull(durationField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, durationField0, dateTimeFieldType0, 317351877);
      assertNotNull(dividedDateTimeField0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", offsetDateTimeField0.getName());
      assertEquals((-3231), offsetDateTimeField0.getOffset());
      assertEquals((-1), offsetDateTimeField0.getMinimumValue());
      assertEquals((-3231), offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1), dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals((-1), dividedDateTimeField0.getMinimumValue());
      assertEquals(317351877, dividedDateTimeField0.getDivisor());
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = dividedDateTimeField0.get((-1));
      assertEquals((-1), int0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", offsetDateTimeField0.getName());
      assertEquals((-3231), offsetDateTimeField0.getOffset());
      assertEquals((-1), offsetDateTimeField0.getMinimumValue());
      assertEquals((-3231), offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1), dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals((-1), dividedDateTimeField0.getMinimumValue());
      assertEquals(317351877, dividedDateTimeField0.getDivisor());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(julianChronology0);
      assertNotNull(dateTimeField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1L));
      assertNotNull(preciseDurationField0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("millis", preciseDurationField0.getName());
      assertEquals((-1L), preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, preciseDurationField0, dateTimeFieldType0, 3417);
      assertNotNull(remainderDateTimeField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("millis", preciseDurationField0.getName());
      assertEquals((-1L), preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(3417, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(3416, remainderDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, preciseDurationField0, dateTimeFieldType0);
      assertNotNull(dividedDateTimeField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("millis", preciseDurationField0.getName());
      assertEquals((-1L), preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(3417, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(3416, remainderDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(3417, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      
      long long0 = dividedDateTimeField0.set(0L, 0);
      assertEquals(0L, long0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("millis", preciseDurationField0.getName());
      assertEquals((-1L), preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(3417, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(3416, remainderDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(3417, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.eras();
      assertNotNull(durationField0);
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 22);
      assertNotNull(dividedDateTimeField0);
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = dividedDateTimeField0.roundFloor(45142L);
      assertEquals(44000L, long0);
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1347);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      assertNotNull(dateTimeField0);
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1347);
      assertNotNull(offsetDateTimeField0);
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1347, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1406, offsetDateTimeField0.getMaximumValue());
      assertEquals(1347, offsetDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.weekyears();
      assertNotNull(durationField0);
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, durationField0, dateTimeFieldType0, 1347);
      assertNotNull(dividedDateTimeField0);
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1347, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1406, offsetDateTimeField0.getMaximumValue());
      assertEquals(1347, offsetDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, dividedDateTimeField0.getMinimumValue());
      assertEquals(1347, dividedDateTimeField0.getDivisor());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(1, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = dividedDateTimeField0.roundFloor((-607L));
      assertEquals((-1347L), long0);
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1347, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1406, offsetDateTimeField0.getMaximumValue());
      assertEquals(1347, offsetDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, dividedDateTimeField0.getMinimumValue());
      assertEquals(1347, dividedDateTimeField0.getDivisor());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(1, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 762);
      assertNotNull(dividedDateTimeField0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(762, dividedDateTimeField0.getDivisor());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = dividedDateTimeField0.remainder(762);
      assertEquals(762L, long0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(762, dividedDateTimeField0.getDivisor());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 781);
      assertNotNull(dividedDateTimeField0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(781, dividedDateTimeField0.getDivisor());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = dividedDateTimeField0.remainder((-2098L));
      assertEquals((-2098L), long0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(781, dividedDateTimeField0.getDivisor());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.eras();
      assertNotNull(durationField0);
      assertTrue(durationField0.isPrecise());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("eras", durationField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 22);
      assertNotNull(dividedDateTimeField0);
      assertTrue(durationField0.isPrecise());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("eras", durationField0.getName());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = dividedDateTimeField0.getMinimumValue();
      assertEquals(0, int0);
      assertTrue(durationField0.isPrecise());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("eras", durationField0.getName());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1347);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      assertNotNull(dateTimeField0);
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1347);
      assertNotNull(offsetDateTimeField0);
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(1347, offsetDateTimeField0.getOffset());
      assertEquals(1406, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1347, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.weekyears();
      assertNotNull(durationField0);
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, durationField0, dateTimeFieldType0, 1347);
      assertNotNull(dividedDateTimeField0);
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(1347, offsetDateTimeField0.getOffset());
      assertEquals(1406, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1347, offsetDateTimeField0.getMinimumValue());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(1347, dividedDateTimeField0.getDivisor());
      assertEquals(1, dividedDateTimeField0.getMaximumValue());
      assertEquals(1, dividedDateTimeField0.getMinimumValue());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = dividedDateTimeField0.getMinimumValue();
      assertEquals(1, int0);
      assertEquals("+00:00:01.347", dateTimeZone0.getID());
      assertEquals("+00:00:01.347", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(1347, offsetDateTimeField0.getOffset());
      assertEquals(1406, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1347, offsetDateTimeField0.getMinimumValue());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(1347, dividedDateTimeField0.getDivisor());
      assertEquals(1, dividedDateTimeField0.getMaximumValue());
      assertEquals(1, dividedDateTimeField0.getMinimumValue());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 781);
      assertNotNull(dividedDateTimeField0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(781, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = dividedDateTimeField0.getMaximumValue();
      assertEquals(0, int0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(781, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 604800);
      assertNotNull(dividedDateTimeField0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(604800, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(142, dividedDateTimeField0.getMaximumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = dividedDateTimeField0.getDifferenceAsLong(604800, 0L);
      assertEquals(1L, long0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(604800, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(142, dividedDateTimeField0.getMaximumValue());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertNotNull(millisDurationField0);
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(millisDurationField0, durationFieldType0);
      assertNotNull(decoratedDurationField0);
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("weekyears", decoratedDurationField0.getName());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, decoratedDurationField0, dateTimeFieldType0, 29);
      assertNotNull(dividedDateTimeField0);
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("weekyears", decoratedDurationField0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2979310, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = dividedDateTimeField0.getDifferenceAsLong((-1), 86400046L);
      assertEquals((-2979311L), long0);
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("weekyears", decoratedDurationField0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2979310, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 604800);
      assertNotNull(dividedDateTimeField0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(604800, dividedDateTimeField0.getDivisor());
      assertEquals("weekOfWeekyear", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(142, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = dividedDateTimeField0.getDifference(604800, 0);
      assertEquals(1, int0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(604800, dividedDateTimeField0.getDivisor());
      assertEquals("weekOfWeekyear", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(142, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.eras();
      assertNotNull(durationField0);
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertEquals("eras", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 22);
      assertNotNull(dividedDateTimeField0);
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertEquals("eras", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = dividedDateTimeField0.getDifference((-297L), 45145L);
      assertEquals((-2), int0);
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertEquals("eras", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1830);
      assertNotNull(dividedDateTimeField0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1830, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals("yearOfEra", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = dividedDateTimeField0.get(1830);
      assertEquals(0, int0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1830, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals("yearOfEra", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.eras();
      assertNotNull(durationField0);
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 22);
      assertNotNull(dividedDateTimeField0);
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = dividedDateTimeField0.addWrapField((long) 1, 22);
      assertEquals(22001L, long0);
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 604800);
      assertNotNull(dividedDateTimeField0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(142, dividedDateTimeField0.getMaximumValue());
      assertEquals(604800, dividedDateTimeField0.getDivisor());
      assertEquals("weekOfWeekyear", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = dividedDateTimeField0.addWrapField((-746L), 1);
      assertEquals((-85882346L), long0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(142, dividedDateTimeField0.getMaximumValue());
      assertEquals(604800, dividedDateTimeField0.getDivisor());
      assertEquals("weekOfWeekyear", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.years();
      assertNotNull(durationField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 890);
      assertNotNull(dividedDateTimeField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(890, dividedDateTimeField0.getDivisor());
      assertEquals("clockhourOfDay", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = dividedDateTimeField0.add((long) 1, (long) 1);
      assertEquals(3204000001L, long0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(890, dividedDateTimeField0.getDivisor());
      assertEquals("clockhourOfDay", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      assertNotNull(durationFieldType0);
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      
      DurationField durationField0 = durationFieldType0.getField(buddhistChronology0);
      assertNotNull(durationField0);
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals(1, BuddhistChronology.BE);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 39);
      assertNotNull(remainderDateTimeField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(39, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(38, remainderDateTimeField0.getMaximumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      assertNotNull(dividedDateTimeField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(39, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(38, remainderDateTimeField0.getMaximumValue());
      assertEquals(39, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("dayOfMonth", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = dividedDateTimeField0.add((long) (-1275), (-1148L));
      assertEquals((-161179201275L), long0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(39, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(38, remainderDateTimeField0.getMaximumValue());
      assertEquals(39, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("dayOfMonth", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.eras();
      assertNotNull(durationField0);
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 22);
      assertNotNull(dividedDateTimeField0);
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = dividedDateTimeField0.add(1142L, 2);
      assertEquals(45142L, long0);
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertNotNull(millisDurationField0);
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(millisDurationField0, durationFieldType0);
      assertNotNull(decoratedDurationField0);
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("weekyears", decoratedDurationField0.getName());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, decoratedDurationField0, dateTimeFieldType0, 29);
      assertNotNull(dividedDateTimeField0);
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("weekyears", decoratedDurationField0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2979310, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = dividedDateTimeField0.add((-3189L), 0);
      assertEquals((-3189L), long0);
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("weekyears", decoratedDurationField0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2979310, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0, 1);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("minuteOfDay", skipUndoDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.eras();
      assertNotNull(durationField0);
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(skipUndoDateTimeField0, durationField0, dateTimeFieldType0, 2);
      assertNotNull(dividedDateTimeField0);
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("minuteOfDay", skipUndoDateTimeField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", dividedDateTimeField0.getName());
      assertEquals(719, dividedDateTimeField0.getMaximumValue());
      assertEquals(2, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
      try { 
        dividedDateTimeField0.roundFloor(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for minuteOfDay must be in the range [1,1439]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      assertNotNull(dividedDateTimeField0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(12, dividedDateTimeField0.getMaximumValue());
      assertEquals(2, dividedDateTimeField0.getDivisor());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
      try { 
        dividedDateTimeField0.remainder((-2098L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 25 for clockhourOfDay must be in the range [1,24]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 4759);
      assertNotNull(dividedDateTimeField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals(61416, dividedDateTimeField0.getMaximumValue());
      assertEquals(4759, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("dayOfMonth", dividedDateTimeField0.getName());
      assertEquals((-61414), dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapField((long) 1, (-61414));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.years();
      assertNotNull(durationField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 890);
      assertNotNull(dividedDateTimeField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(890, dividedDateTimeField0.getDivisor());
      assertEquals("clockhourOfDay", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapField(7L, 890);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.eras();
      assertNotNull(durationField0);
      assertEquals("eras", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 22);
      assertNotNull(dividedDateTimeField0);
      assertEquals("eras", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dividedDateTimeField0.getName());
      assertEquals(13285433, dividedDateTimeField0.getMaximumValue());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-13284933), dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
      try { 
        dividedDateTimeField0.add(0L, 13285433);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292281496 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.halfdays();
      assertNotNull(durationField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((RemainderDateTimeField) null, durationField0, dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(julianChronology0);
      assertNotNull(dateTimeField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1L));
      assertNotNull(preciseDurationField0);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals((-1L), preciseDurationField0.getUnitMillis());
      assertEquals("millis", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, preciseDurationField0, dateTimeFieldType0, 3417);
      assertNotNull(remainderDateTimeField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals((-1L), preciseDurationField0.getUnitMillis());
      assertEquals("millis", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(3416, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(3417, remainderDateTimeField0.getDivisor());
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, preciseDurationField0, (DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((RemainderDateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 890);
      assertNotNull(remainderDateTimeField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(889, remainderDateTimeField0.getMaximumValue());
      assertEquals(890, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, (DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((DateTimeField) null, dateTimeFieldType0, (-667));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2090);
      assertNotNull(dividedDateTimeField0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dividedDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2090, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(41339, dividedDateTimeField0.getMaximumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = dividedDateTimeField0.get(2090);
      assertEquals(1, int0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dividedDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2090, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(41339, dividedDateTimeField0.getMaximumValue());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 604800);
      assertNotNull(dividedDateTimeField0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals((-484), dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(604800, dividedDateTimeField0.getDivisor());
      assertEquals("weekOfWeekyear", dividedDateTimeField0.getName());
      assertEquals(483, dividedDateTimeField0.getMaximumValue());
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = dividedDateTimeField0.getRangeDurationField();
      assertNull(durationField0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals((-484), dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(604800, dividedDateTimeField0.getDivisor());
      assertEquals("weekOfWeekyear", dividedDateTimeField0.getName());
      assertEquals(483, dividedDateTimeField0.getMaximumValue());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 890);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      DurationField durationField0 = durationFieldType0.getField(buddhistChronology0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.set((long) 890, 1);
      assertEquals((-328392), dividedDateTimeField0.getMinimumValue());
      assertEquals(328403, dividedDateTimeField0.getMaximumValue());
      assertEquals((-28085183999110L), long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(julianChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1L));
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, preciseDurationField0, dateTimeFieldType0, 3417);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, preciseDurationField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.add((long) 0, (long) 0);
      assertEquals(0L, long0);
      assertEquals(3417, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 292272708);
      long long0 = dividedDateTimeField0.set((long) 1, 0);
      assertEquals(292272708, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 22);
      dividedDateTimeField0.getRangeDurationField();
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 890);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals((-328392), dividedDateTimeField0.getMinimumValue());
      assertEquals(328403, dividedDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-3231), 1, (-3231));
      DurationField durationField0 = buddhistChronology0.seconds();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, durationField0, dateTimeFieldType0, 317351877);
      int int0 = dividedDateTimeField0.getMaximumValue();
      assertEquals(317351877, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipDateTimeField0, dateTimeFieldType0, 1);
      DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(skipDateTimeField0, durationField0, dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 604800);
      int int0 = dividedDateTimeField0.getDifference(1, 1);
      assertEquals(604800, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, int0);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 890);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.set((long) 890, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1 for dayOfMonth must be in the range [0,0]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 762);
      long long0 = dividedDateTimeField0.getDifferenceAsLong(762, 1);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0L, long0);
      assertEquals(762, dividedDateTimeField0.getDivisor());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 22);
      long long0 = dividedDateTimeField0.addWrapField((long) 0, 604800);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertEquals(0L, long0);
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 22);
      int int0 = dividedDateTimeField0.getDivisor();
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(22, int0);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 740);
      ScaledDurationField scaledDurationField0 = (ScaledDurationField)dividedDateTimeField0.getDurationField();
      assertEquals((-394958), dividedDateTimeField0.getMinimumValue());
      assertEquals(740, scaledDurationField0.getScalar());
      assertEquals(740, dividedDateTimeField0.getDivisor());
      assertEquals(394972, dividedDateTimeField0.getMaximumValue());
      assertNotNull(scaledDurationField0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 740);
      int int0 = dividedDateTimeField0.getMinimumValue();
      assertEquals((-394958), int0);
      assertEquals(394972, dividedDateTimeField0.getMaximumValue());
      assertEquals(740, dividedDateTimeField0.getDivisor());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 22);
      long long0 = dividedDateTimeField0.remainder(0);
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(0L, long0);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 22);
      int int0 = dividedDateTimeField0.getMaximumValue();
      assertEquals(13285433, int0);
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertEquals((-13284933), dividedDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 740);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.add(628L, 10000000000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 7400000000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 22);
      long long0 = dividedDateTimeField0.roundFloor(0);
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(22, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 22);
      long long0 = dividedDateTimeField0.add((long) 0, 0);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0L, long0);
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(22, dividedDateTimeField0.getDivisor());
  }
}
