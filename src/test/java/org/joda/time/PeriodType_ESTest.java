/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 19:54:58 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodType_ESTest extends PeriodType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[6];
      intArray0[0] = (-212);
      PeriodType periodType0 = new PeriodType("]", durationFieldTypeArray0, intArray0);
      assertEquals("]", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(2, durationFieldTypeArray0.length);
      assertEquals(6, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {(-212), 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withYearsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      PeriodType periodType0 = minutes0.getPeriodType();
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, periodType1.size());
      assertEquals("MinutesNoMinutes", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType1.withYearsRemoved();
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, periodType1.size());
      assertEquals("MinutesNoMinutes", periodType1.getName());
      assertEquals(0, periodType2.size());
      assertEquals("MinutesNoMinutes", periodType2.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType0);
      assertSame(periodType2, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
      assertNotNull(periodType2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("WeeksNoWeeks", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Months months0 = Months.TWELVE;
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("MonthsNoMonths", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("StandardNoMinutes", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals("MillisNoMillis", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoHours", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      PeriodType periodType0 = minutes0.getPeriodType();
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("MinutesNoMinutes", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType1.withDaysRemoved();
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("MinutesNoMinutes", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertEquals(0, periodType2.size());
      assertEquals("MinutesNoMinutes", periodType2.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType2, periodType0);
      assertSame(periodType2, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
      assertNotNull(periodType2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("SecondsNoSeconds", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      int int0 = periodType1.size();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("SecondsNoSeconds", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) null);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertNotNull(seconds0);
      
      Weeks weeks0 = Weeks.standardWeeksIn(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      int[] intArray0 = new int[4];
      boolean boolean0 = periodType0.setIndexedField(weeks0, 0, intArray0, 875);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {875, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("Days", durationFieldTypeArray0, intArray0);
      assertEquals("Days", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(3, durationFieldTypeArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      Minutes minutes0 = Minutes.TWO;
      assertEquals(1, minutes0.size());
      assertEquals(2, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      int int0 = periodType0.getIndexedField(minutes0, 0);
      assertEquals("Days", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1, minutes0.size());
      assertEquals(2, minutes0.getMinutes());
      assertEquals(3, durationFieldTypeArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      assertEquals(1, seconds0.size());
      assertEquals(Integer.MIN_VALUE, seconds0.getSeconds());
      assertNotNull(seconds0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = periodType0.getIndexedField(seconds0, 0);
      assertEquals(1, seconds0.size());
      assertEquals(Integer.MIN_VALUE, seconds0.getSeconds());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = Period.minutes(1);
      assertNotNull(period0);
      
      int[] intArray0 = new int[2];
      boolean boolean0 = periodType0.addIndexedField(period0, 0, intArray0, 2730);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {2730, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      Hours hours0 = Hours.ZERO;
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertNotNull(hours0);
      
      int[] intArray0 = new int[5];
      boolean boolean0 = periodType0.addIndexedField(hours0, (-1458), intArray0, 0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("NoDays", durationFieldTypeArray0, intArray0);
      assertEquals(8, periodType0.size());
      assertEquals("NoDays", periodType0.getName());
      assertEquals(8, durationFieldTypeArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withMonthsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[9];
      intArray0[5] = 799;
      PeriodType periodType0 = new PeriodType(">^84\"[xPt2?x", durationFieldTypeArray0, intArray0);
      assertEquals(1, periodType0.size());
      assertEquals(">^84\"[xPt2?x", periodType0.getName());
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(9, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 799, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withMinutesRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("PeriodFormat.years", (DurationFieldType[]) null, intArray0);
      assertEquals("PeriodFormat.years", periodType0.getName());
      assertEquals(2, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withHoursRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("lD1%Zl;svLr", (DurationFieldType[]) null, intArray0);
      assertEquals("lD1%Zl;svLr", periodType0.getName());
      assertEquals(7, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withDaysRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType(":Q!JjM{M{<", (DurationFieldType[]) null, intArray0);
      assertEquals(":Q!JjM{M{<", periodType0.getName());
      assertEquals(2, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withDaysRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("org.joda.time.chrono.JulianChronology", (DurationFieldType[]) null, intArray0);
      assertEquals("org.joda.time.chrono.JulianChronology", periodType0.getName());
      assertEquals(7, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Hours hours0 = Hours.FIVE;
      assertEquals(5, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(hours0, 1740, intArray0, 236548278);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1740
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      assertEquals("", periodType0.getName());
      assertEquals(1, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        periodType0.getIndexedField((ReadablePeriod) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Seconds seconds0 = Seconds.ONE;
      assertEquals(1, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Weeks weeks0 = seconds0.toStandardWeeks();
      assertEquals(1, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      // Undeclared exception!
      try { 
        periodType0.getIndexedField(weeks0, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertNotNull(months0);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        periodType0.getIndexedField(months0, (-1158));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1158
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      PeriodType periodType0 = minutes0.getPeriodType();
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, periodType1.size());
      assertEquals("MinutesNoMinutes", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      // Undeclared exception!
      try { 
        periodType1.getFieldType(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      Weeks weeks0 = Weeks.TWO;
      assertEquals(1, weeks0.size());
      assertEquals(2, weeks0.getWeeks());
      assertNotNull(weeks0);
      
      Hours hours0 = weeks0.toStandardHours();
      assertEquals(1, weeks0.size());
      assertEquals(2, weeks0.getWeeks());
      assertEquals(336, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(hours0, 0, intArray0, 32);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = Period.days(0);
      assertNotNull(period0);
      
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(period0, 2332, intArray0, (-668));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2332
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      PeriodType periodType0 = minutes0.getPeriodType();
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
      
      periodType0.hashCode();
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(0, periodType1.size());
      assertEquals("SecondsNoSeconds", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      boolean boolean0 = periodType0.equals(periodType1);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(0, periodType1.size());
      assertEquals("SecondsNoSeconds", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      boolean boolean0 = periodType0.equals(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(10080L, (Chronology) islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(mutablePeriod0);
      
      Days days0 = Days.standardDaysIn(mutablePeriod0);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(days0);
      
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      DurationFieldType durationFieldType1 = DurationFieldType.seconds();
      assertEquals("seconds", durationFieldType1.getName());
      assertEquals("seconds", durationFieldType1.toString());
      assertNotSame(durationFieldType1, durationFieldType0);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertNotNull(durationFieldType1);
      
      durationFieldTypeArray0[2] = durationFieldType1;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [days, days]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldType0;
      Period period0 = new Period((-909L));
      assertNotNull(period0);
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      DurationFieldType durationFieldType1 = minutes0.getFieldType();
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals("minutes", durationFieldType1.getName());
      assertEquals("minutes", durationFieldType1.toString());
      assertNotSame(durationFieldType1, durationFieldType0);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertNotNull(durationFieldType1);
      
      durationFieldTypeArray0[4] = durationFieldType1;
      durationFieldTypeArray0[5] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [halfdays, halfdays, halfdays, halfdays, minutes]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.HOURS_TYPE;
      assertEquals("hours", durationFieldType1.getName());
      assertEquals("hours", durationFieldType1.toString());
      assertNotSame(durationFieldType1, durationFieldType0);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertNotNull(durationFieldType1);
      
      durationFieldTypeArray0[2] = durationFieldType1;
      durationFieldTypeArray0[3] = durationFieldType1;
      durationFieldTypeArray0[4] = durationFieldType1;
      durationFieldTypeArray0[5] = durationFieldType1;
      durationFieldTypeArray0[6] = durationFieldTypeArray0[1];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [weekyears, weekyears, hours, hours, hours, weekyears]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.millis();
      assertEquals(1, periodType1.size());
      assertEquals("Millis", periodType1.getName());
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.YEARS_TYPE;
      assertEquals("years", durationFieldType1.toString());
      assertEquals("years", durationFieldType1.getName());
      assertNotSame(durationFieldType1, durationFieldType0);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertNotNull(durationFieldType1);
      
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(2, durationFieldTypeArray0.length);
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.seconds();
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.minutes();
      assertEquals("Minutes", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.hours();
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.days();
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType1.getName());
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.weeks();
      assertEquals(1, periodType1.size());
      assertEquals("Weeks", periodType1.getName());
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.months();
      assertEquals("Months", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.years();
      assertEquals("Years", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.millis();
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType1 = PeriodType.time();
      assertNotSame(periodType1, periodType0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeriodType.dayTime();
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodType.yearDay();
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeriodType.yearDayTime();
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeriodType.yearWeekDay();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Minutes minutes0 = Minutes.TWO;
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(minutes0, 2, (int[]) null, 3060);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeriodType.yearMonthDay();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeriodType.yearMonthDayTime();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PeriodType.standard();
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("'bu?E)T.M4Tl'Nq", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withWeeksRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertNotNull(durationFieldType0);
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertEquals("days", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      
      periodType0.size();
      assertEquals("Months", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      String string0 = periodType0.getName();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      PeriodType periodType0 = minutes0.getPeriodType();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals("Minutes", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertEquals("TimeNoMillis", periodType1.getName());
      assertEquals(3, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      PeriodType periodType0 = minutes0.getPeriodType();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertEquals("Minutes", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      
      Integer integer0 = new Integer((-9));
      boolean boolean0 = periodType0.equals(integer0);
      assertEquals("Seconds", periodType0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertEquals("Millis", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Years years0 = Years.ZERO;
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(years0, 1, intArray0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      PeriodType periodType0 = minutes0.getPeriodType();
      int int0 = periodType0.getIndexedField(minutes0, 6);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals((-1), int0);
      assertEquals("Millis", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      PeriodType periodType0 = minutes0.getPeriodType();
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      PeriodType periodType0 = minutes0.getPeriodType();
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      boolean boolean0 = periodType1.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals("MinutesNoMinutes", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType[] durationFieldTypeArray1 = new DurationFieldType[2];
      durationFieldTypeArray1[0] = durationFieldTypeArray0[0];
      DurationFieldType durationFieldType1 = DurationFieldType.WEEKS_TYPE;
      durationFieldTypeArray1[1] = durationFieldType1;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray1);
      assertEquals("StandardNoYearsNoMonthsNoHoursNoMinutesNoSecondsNoMillis", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldTypeArray0[1] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.months();
      DurationFieldType[] durationFieldTypeArray1 = new DurationFieldType[2];
      durationFieldTypeArray1[0] = durationFieldType1;
      durationFieldTypeArray1[1] = durationFieldTypeArray0[1];
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray1);
      assertEquals("StandardNoYearsNoWeeksNoHoursNoMinutesNoSecondsNoMillis", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.YEARS_TYPE;
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals("YearDay", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.yearWeekDayTime();
      assertNotSame(periodType1, periodType0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.millis();
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals(2, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        PeriodType.forFields((DurationFieldType[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.millis();
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      String string0 = periodType0.toString();
      assertEquals("PeriodType[StandardNoYearsNoMonthsNoWeeksNoHoursNoMinutesNoSeconds]", string0);
  }
}
