/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 19:38:00 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.CharBuffer;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.ZeroIsMaxDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(9223372036854775807L);
      localDateTime0.toLocalTime();
      int int0 = 3;
      LocalDateTime localDateTime1 = localDateTime0.withMinuteOfHour(3);
      localDateTime1.hourOfDay();
      localDateTime0.getHourOfDay();
      localDateTime1.hashCode();
      // Undeclared exception!
      try { 
        localDateTime0.plusHours(7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 9223372036854774411 + 25200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        localDateTime0.minusHours(2147359666);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime(782L, (DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusYears(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      LocalDateTime localDateTime2 = localDateTime_Property0.roundFloorCopy();
      localDateTime2.era();
      LocalDateTime localDateTime3 = localDateTime_Property0.roundHalfEvenCopy();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      localDateTime0.isSupported(dateTimeFieldType0);
      localDateTime3.compareTo((ReadablePartial) localDateTime1);
      LocalDateTime localDateTime4 = localDateTime3.withLocalMillis(0);
      localDateTime3.equals(localDateTime0);
      LocalDateTime localDateTime5 = localDateTime4.withLocalMillis(782L);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 2);
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 2);
      localDateTime5.equals(gregorianChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      durationFieldType0.isSupported(gregorianChronology1);
      durationFieldType0.isSupported(gregorianChronology1);
      localDateTime1.isSupported(durationFieldType0);
      localDateTime0.withTime(0, 2, 2, 0);
      localDateTime0.withMillisOfDay(0);
      localDateTime0.millisOfDay();
      localDateTime3.withYearOfCentury(0);
      // Undeclared exception!
      try { 
        localDateTime4.withDayOfWeek(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 3);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      LocalDateTime localDateTime1 = localDateTime0.withField(dateTimeFieldType0, 0);
      localDateTime0.centuryOfEra();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BuddhistChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTCDateTimeZone0.toTimeZone();
      localDateTime0.getValues();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, uTCDateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(uTCDateTimeZone0);
      LocalDateTime localDateTime2 = LocalDateTime.now(chronology0);
      LocalDateTime localDateTime3 = localDateTime1.plusDays(3);
      localDateTime2.getDayOfWeek();
      localDateTime0.getEra();
      localDateTime1.hashCode();
      localDateTime3.plus((ReadablePeriod) null);
      localDateTime3.getYear();
      // Undeclared exception!
      try { 
        localDateTime2.withMillisOfSecond(2147471717);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147471717 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int int0 = 3;
      Duration.millis(2779L);
      LocalDateTime localDateTime1 = LocalDateTime.now();
      LocalDateTime localDateTime2 = new LocalDateTime(3, 3, 3, 3, 3);
      Integer integer0 = new Integer(3);
      localDateTime1.isAfter(localDateTime0);
      Locale locale0 = Locale.KOREA;
      localDateTime2.getCenturyOfEra();
      localDateTime2.toString((String) null, locale0);
      localDateTime1.equals(localDateTime0);
      // Undeclared exception!
      try { 
        localDateTime0.getField((-165));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -165
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1907), 12, 12);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis((-1907));
      LocalDateTime localDateTime2 = localDateTime0.plusDays(51);
      Duration duration0 = new Duration((long) (-1907));
      localDateTime1.toLocalTime();
      Duration duration1 = Duration.ZERO;
      LocalDateTime localDateTime3 = localDateTime2.minus((ReadableDuration) duration0);
      localDateTime3.yearOfEra();
      LocalDateTime localDateTime4 = localDateTime3.withWeekOfWeekyear(51);
      localDateTime4.getEra();
      localDateTime1.getMonthOfYear();
      localDateTime3.getMonthOfYear();
      duration0.compareTo(duration1);
      localDateTime4.getChronology();
      LocalDateTime localDateTime5 = localDateTime0.withFields(localDateTime4);
      localDateTime5.getFields();
      localDateTime5.getYear();
      LocalDateTime localDateTime6 = localDateTime2.plusYears(3);
      localDateTime6.year();
      MockDate mockDate0 = new MockDate(60000L);
      LocalDateTime.fromDateFields(mockDate0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1392337281320L);
      Duration duration0 = Duration.standardHours(1392409282030L);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
      LocalDateTime localDateTime2 = localDateTime1.withSecondOfMinute(0);
      LocalDateTime localDateTime3 = localDateTime2.withMillisOfDay(7);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        localDateTime3.withDurationAdded(duration0, 3600000);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 5012673415308000000 * 3600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      int int0 = 690562340;
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(690562340);
      localDateTime1.millisOfDay();
      localDateTime1.millisOfSecond();
      localDateTime1.weekyear();
      localDateTime0.getYearOfEra();
      localDateTime1.toLocalTime();
      ReadablePeriod readablePeriod0 = null;
      int int1 = (-801);
      LocalDateTime localDateTime2 = localDateTime1.withPeriodAdded((ReadablePeriod) null, (-801));
      localDateTime2.withPeriodAdded((ReadablePeriod) null, 690562340);
      DateTimeZone dateTimeZone0 = null;
      localDateTime1.toDateTime((DateTimeZone) null);
      // Undeclared exception!
      try { 
        localDateTime2.withDayOfYear(1969);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1969 for dayOfYear must be in the range [1,366]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 14);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      LocalDateTime localDateTime1 = localDateTime0.withField(dateTimeFieldType0, 0);
      localDateTime0.centuryOfEra();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BuddhistChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, uTCDateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(uTCDateTimeZone0);
      LocalDateTime localDateTime2 = LocalDateTime.now(chronology0);
      LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      localDateTime2.getDayOfWeek();
      localDateTime0.getEra();
      localDateTime1.compareTo((ReadablePartial) localDateTime0);
      localDateTime0.getYearOfCentury();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int int0 = 3;
      Duration.millis(2779L);
      LocalDateTime localDateTime1 = new LocalDateTime(3, 3, 3, 3, 3);
      LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
      localDateTime0.getDayOfYear();
      Locale locale0 = Locale.KOREA;
      localDateTime2.getCenturyOfEra();
      localDateTime2.toString((String) null, locale0);
      localDateTime1.equals(localDateTime0);
      // Undeclared exception!
      try { 
        localDateTime0.getField(76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 76
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.toLocalTime();
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds((-378));
      localDateTime1.getYearOfEra();
      localDateTime1.withMillisOfSecond(2);
      localDateTime0.minusMonths((-943));
      LocalDateTime.now();
      Months months0 = Months.MIN_VALUE;
      // Undeclared exception!
      try { 
        localDateTime0.withPeriodAdded(months0, 2147483635);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: -4611685990510100480
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2206);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      Period period0 = Period.months(11);
      period0.getHours();
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(period0, 1000);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      LocalDateTime localDateTime2 = localDateTime1.plusMonths((-590));
      LocalDateTime localDateTime3 = localDateTime1.minusSeconds(2206);
      localDateTime3.toDateTime(dateTimeZone0);
      LocalDateTime localDateTime4 = localDateTime3.minusYears(1000);
      localDateTime2.dayOfWeek();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalDateTime.now((Chronology) copticChronology0);
      localDateTime4.getMillisOfSecond();
      LocalDateTime localDateTime5 = localDateTime4.minusWeeks(1000);
      System.setCurrentTimeMillis(2206);
      LocalDateTime localDateTime6 = localDateTime0.minusHours(20);
      localDateTime6.getYearOfCentury();
      localDateTime5.millisOfDay();
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalDateTime localDateTime7 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      localDateTime7.toDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDateTime2.withSecondOfMinute(2147483635);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483635 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime(782L, (DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusYears(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      LocalDateTime localDateTime2 = localDateTime1.minusMonths(0);
      localDateTime2.era();
      LocalDateTime localDateTime3 = localDateTime_Property0.roundHalfEvenCopy();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      localDateTime0.isSupported(dateTimeFieldType0);
      LocalDateTime localDateTime4 = localDateTime3.withLocalMillis(0);
      localDateTime4.withLocalMillis(782L);
      LocalDateTime localDateTime5 = localDateTime_Property0.setCopy(0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      localDateTime5.isSupported(durationFieldType0);
      localDateTime0.withMillisOfDay(0);
      localDateTime0.millisOfDay();
      localDateTime3.withYearOfCentury(0);
      localDateTime2.plusMillis(0);
      localDateTime_Property0.roundFloorCopy();
      LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(0);
      localDateTime6.hashCode();
      // Undeclared exception!
      try { 
        localDateTime4.withDayOfWeek(14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 14 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1907), 12, 12);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis((-1907));
      LocalDateTime localDateTime2 = localDateTime0.plusDays(51);
      Duration duration0 = new Duration((long) (-1907));
      Duration duration1 = Duration.ZERO;
      LocalDateTime localDateTime3 = localDateTime2.minus((ReadableDuration) duration0);
      LocalDateTime localDateTime4 = localDateTime3.withWeekOfWeekyear(51);
      localDateTime1.getMonthOfYear();
      localDateTime3.getMonthOfYear();
      localDateTime4.getChronology();
      LocalDateTime localDateTime5 = localDateTime0.withFields(localDateTime4);
      localDateTime5.getYear();
      localDateTime2.plusYears(3);
      MockDate mockDate0 = new MockDate(60000L);
      LocalDateTime.fromDateFields(mockDate0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime(1395433281320L, dateTimeZone0);
      localDateTime0.getValue(1);
      LocalDateTime localDateTime1 = localDateTime0.withHourOfDay(3);
      buddhistChronology0.withZone(dateTimeZone0);
      localDateTime1.getMillisOfSecond();
      localDateTime0.minusMillis(1687);
      // Undeclared exception!
      try { 
        localDateTime0.withYearOfEra((-2147483019));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483019 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      LocalDateTime localDateTime1 = localDateTime0.withField(dateTimeFieldType0, 0);
      localDateTime0.centuryOfEra();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BuddhistChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, uTCDateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(uTCDateTimeZone0);
      LocalDateTime localDateTime2 = LocalDateTime.now(chronology0);
      localDateTime2.getDayOfWeek();
      localDateTime0.getEra();
      localDateTime1.withMillisOfSecond(0);
      localDateTime1.get(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime(782L, (DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusYears(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      LocalDateTime localDateTime2 = localDateTime_Property0.roundFloorCopy();
      localDateTime2.era();
      LocalDateTime localDateTime3 = localDateTime_Property0.roundHalfEvenCopy();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      localDateTime0.isSupported(dateTimeFieldType0);
      LocalDateTime localDateTime4 = localDateTime3.withLocalMillis(0);
      localDateTime4.withLocalMillis(782L);
      LocalDateTime localDateTime5 = localDateTime_Property0.setCopy(0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      localDateTime5.isSupported(durationFieldType0);
      localDateTime0.withMillisOfDay(0);
      localDateTime0.millisOfDay();
      localDateTime3.withYearOfCentury(0);
      localDateTime2.plusMillis(0);
      localDateTime_Property0.roundFloorCopy();
      LocalDateTime localDateTime6 = localDateTime2.withMillisOfDay(4148);
      Duration duration0 = new Duration((-1392L), 60000L);
      Duration duration1 = duration0.multipliedBy(0);
      localDateTime6.withDurationAdded(duration1, 0);
      localDateTime6.hashCode();
      // Undeclared exception!
      try { 
        localDateTime4.withDayOfWeek(14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 14 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      localDateTime0.toLocalTime();
      int int0 = 3;
      LocalDateTime localDateTime1 = localDateTime0.withMinuteOfHour(3);
      localDateTime1.hourOfDay();
      localDateTime0.getHourOfDay();
      localDateTime1.hashCode();
      LocalDateTime localDateTime2 = localDateTime0.plusHours(23);
      // Undeclared exception!
      try { 
        localDateTime2.getField(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 23
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      localDateTime0.toLocalTime();
      localDateTime0.getHourOfDay();
      localDateTime0.hashCode();
      LocalDateTime localDateTime1 = localDateTime0.plusHours(23);
      // Undeclared exception!
      try { 
        localDateTime1.getField(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 23
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      minutes0.plus(3);
      minutes0.toString();
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) minutes0);
      LocalDateTime localDateTime2 = localDateTime1.minusMinutes((-2140751723));
      LocalDateTime localDateTime3 = localDateTime1.withMonthOfYear(3);
      localDateTime1.getSecondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      Chronology chronology0 = buddhistChronology0.withZone(uTCDateTimeZone0);
      dateTimeFieldType0.isSupported(chronology0);
      localDateTime1.property(dateTimeFieldType0);
      localDateTime3.withYearOfEra(439);
      LocalDateTime localDateTime4 = localDateTime0.plus((ReadablePeriod) minutes0);
      localDateTime4.withHourOfDay(6);
      localDateTime4.getYearOfEra();
      localDateTime3.millisOfSecond();
      // Undeclared exception!
      try { 
        localDateTime2.withMinuteOfHour(15271875);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 15271875 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      int int0 = 386;
      LocalDateTime localDateTime1 = localDateTime0.minusHours(386);
      int int1 = 5;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      strictChronology0.set(localDateTime1, 5);
      PeriodType.days();
      Period period0 = new Period();
      Days days0 = period0.toStandardDays();
      Duration duration0 = days0.toStandardDuration();
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadableDuration) duration0);
      localDateTime2.weekOfWeekyear();
      LocalDateTime localDateTime3 = localDateTime1.withMinuteOfHour(5);
      localDateTime3.withDayOfWeek(5);
      localDateTime2.era();
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.dayOfYear();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("&4@SddK 4S$q<sn2L;2", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"&4@SddK 4S$q<sn2L;2\" for dayOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2206);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      Period period0 = Period.months(11);
      period0.getHours();
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(period0, 1000);
      localDateTime1.getDayOfWeek();
      localDateTime1.plusMonths((-590));
      LocalDateTime localDateTime2 = localDateTime1.minusSeconds(2206);
      localDateTime2.toDateTime(dateTimeZone0);
      LocalDateTime localDateTime3 = localDateTime2.minusYears(1000);
      localDateTime3.yearOfEra();
      localDateTime3.getMillisOfSecond();
      LocalDateTime localDateTime4 = localDateTime3.minusWeeks(1000);
      System.setCurrentTimeMillis(2206);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-590), "org/joda/time/tz/data");
      localDateTime4.toDate((TimeZone) simpleTimeZone0);
      LocalDateTime localDateTime5 = localDateTime0.minusHours(20);
      localDateTime4.millisOfDay();
      // Undeclared exception!
      try { 
        localDateTime5.withField((DateTimeFieldType) null, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.getMinuteOfHour();
      LocalTime localTime0 = new LocalTime(21, 21, 21, 21);
      // Undeclared exception!
      try { 
        localDateTime0.compareTo((ReadablePartial) localTime0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis((-2236));
      Duration duration0 = new Duration((-2002L), (-2002L));
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadableDuration) duration0);
      LocalDateTime localDateTime3 = localDateTime2.minusMinutes(690562340);
      Period period0 = new Period(localDateTime2, localDateTime0);
      LocalDateTime localDateTime4 = localDateTime3.minus((ReadablePeriod) period0);
      LocalDateTime localDateTime5 = localDateTime4.withWeekyear(0);
      LocalDateTime localDateTime6 = localDateTime5.withLocalMillis(690562340);
      TimeZone timeZone0 = TimeZone.getTimeZone("The datetime zone id '");
      localDateTime2.plusMonths(1061);
      localDateTime5.toDate(timeZone0);
      localDateTime5.toDate();
      localDateTime0.yearOfEra();
      localDateTime6.getValue(0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int int0 = 3;
      Duration duration0 = Duration.millis(2779L);
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration0);
      localDateTime1.getValue(3);
      LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
      localDateTime0.getDayOfYear();
      Locale locale0 = Locale.KOREA;
      localDateTime2.getCenturyOfEra();
      localDateTime2.toString((String) null, locale0);
      // Undeclared exception!
      try { 
        localDateTime0.getField(76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 76
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      MockDate mockDate0 = new MockDate((-1028), 628, (-1028), (-1805), (-1805), (-1704));
      LocalDateTime localDateTime1 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime1.getMillisOfSecond();
      localDateTime0.toLocalTime();
      localDateTime0.getHourOfDay();
      localDateTime0.hashCode();
      LocalDateTime localDateTime2 = localDateTime0.plusHours(23);
      // Undeclared exception!
      try { 
        localDateTime2.getField(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 23
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      DateTime dateTime0 = localDateTime0.toDateTime();
      dateTime0.toGregorianCalendar();
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes((-2806));
      Duration duration0 = new Duration((long) (-2806));
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = duration0.toPeriod(periodType0);
      Period period1 = period0.withHours(297);
      Period period2 = period1.withMillis(297);
      localDateTime1.plus((ReadablePeriod) period2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      int int0 = (-1737);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-1737));
      LocalDateTime localDateTime2 = localDateTime1.plusDays((-1737));
      LocalDateTime localDateTime3 = localDateTime1.plusSeconds(60);
      LocalDate localDate0 = localDateTime3.toLocalDate();
      LocalDateTime localDateTime4 = localDateTime2.minusDays((-1737));
      Date date0 = localDate0.toDate();
      LocalDateTime.fromDateFields(date0);
      Integer integer0 = new Integer((-1737));
      localDateTime4.equals(integer0);
      // Undeclared exception!
      try { 
        localDateTime1.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(1L, (Chronology) buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      localDateTime_Property0.getAsText();
      int int0 = (-292269054);
      LocalDateTime localDateTime1 = localDateTime_Property0.addToCopy((-292269054));
      localDateTime1.isEqual(localDateTime0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-292269054));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-292269054));
      // Undeclared exception!
      try { 
        LocalDateTime.parse("Field '", dateTimeFormatter4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Field '\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-328), (-328), 27, 27, (-328));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = localDate0.toDateTime((LocalTime) null, (DateTimeZone) uTCDateTimeZone0);
      Date date0 = dateTime0.toDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      // Undeclared exception!
      try { 
        localDateTime0.withField(dateTimeFieldType0, (-2677));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2677 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      zoneInfoProvider0.getZone("The date must not be null");
      DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate(0, 12, 14, (-1), 0, 12);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks((-1));
      // Undeclared exception!
      try { 
        localDateTime1.withMonthOfYear((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 11;
      Integer integer0 = new Integer(11);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(iSOChronology0, iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = (-2182);
      int int1 = 999;
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((-2182), 999, 999, 999, 0, (-2182), 999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 999 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      localDateTime0.getCenturyOfEra();
      LocalDateTime localDateTime1 = localDateTime0.withYearOfCentury(20);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.secondOfMinute();
      LocalDateTime localDateTime2 = localDateTime_Property0.roundHalfCeilingCopy();
      localDateTime2.hourOfDay();
      localDateTime1.minusWeeks(20);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime.parse("", dateTimeFormatter0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      islamicChronology0.add(1707L, 0L, 14);
      // Undeclared exception!
      try { 
        localDateTime2.getField(20, (Chronology) islamicChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 20
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gregorianChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = 1327;
      GregorianChronology.getInstance();
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 1327);
      // Undeclared exception!
      try { 
        localDateTime1.withMillisOfSecond(1327);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1327 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      int int0 = (-1762);
      // Undeclared exception!
      try { 
        localDateTime0.withMillisOfDay((-1762));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1762 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(28, 0, 28, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(3600000);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      localDateTime1.get(dateTimeFieldType0);
      LocalDateTime localDateTime2 = localDateTime1.plusYears(3600000);
      LocalDateTime localDateTime3 = localDateTime2.withMillisOfSecond(59);
      // Undeclared exception!
      try { 
        localDateTime3.withDayOfMonth((-1675));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1675 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) uTCDateTimeZone0);
      int int0 = 317351877;
      uTCDateTimeZone0.convertLocalToUTC((long) 2, false);
      localDateTime0.withYearOfCentury(2);
      // Undeclared exception!
      try { 
        localDateTime0.withWeekyear(317351877);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 317351877 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTimeZone.getDefault();
      uTCDateTimeZone0.getOffset(1237L);
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) uTCDateTimeZone0);
      int int0 = 2;
      LocalDateTime localDateTime1 = localDateTime0.withDayOfMonth(2);
      int int1 = 31;
      // Undeclared exception!
      try { 
        localDateTime1.withMonthOfYear(31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 31 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) null);
      int int0 = 0;
      localDateTime0.withTime(0, 0, 0, 0);
      localDateTime0.getYear();
      int int1 = 30;
      Locale locale0 = Locale.ROOT;
      try { 
        localDateTime0.toString("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.hourOfDay();
      int int0 = 5;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LocalDateTime localDateTime1 = localDateTime0.withTime(1, 1, 5, 61);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldType0.getRangeDurationType();
      localDateTime0.get(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localDateTime1.withHourOfDay(61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 61 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(1549);
      Hours hours0 = Hours.FOUR;
      LocalDateTime localDateTime2 = localDateTime1.plus((ReadablePeriod) hours0);
      localDateTime1.getEra();
      localDateTime2.getWeekyear();
      LocalDateTime localDateTime3 = localDateTime2.minusDays(0);
      // Undeclared exception!
      try { 
        localDateTime3.withCenturyOfEra((-2780));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2780 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      int int0 = 4;
      localDateTime0.minuteOfHour();
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(4);
      LocalDateTime localDateTime2 = localDateTime1.withHourOfDay(4);
      localDateTime2.plusSeconds(4);
      Duration.standardDays(4);
      // Undeclared exception!
      try { 
        Instant.parse("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      int int0 = 23;
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(23);
      LocalDateTime localDateTime2 = localDateTime1.minusWeeks(23);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfDay();
      localDateTime2.getDayOfYear();
      LocalDateTime.Property localDateTime_Property1 = localDateTime1.weekyear();
      Days days0 = Days.MAX_VALUE;
      Duration duration0 = days0.toStandardDuration();
      localDateTime1.plus((ReadableDuration) duration0);
      localDateTime2.dayOfYear();
      localDateTime_Property1.addWrapFieldToCopy(23);
      LocalDateTime localDateTime3 = localDateTime_Property0.setCopy(23);
      localDateTime3.compareTo((ReadablePartial) localDateTime0);
      // Undeclared exception!
      try { 
        localDateTime3.withYearOfCentury((-722));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -722 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(uTCDateTimeZone0);
      dateTimeFormatter1.withZoneUTC();
      // Undeclared exception!
      try { 
        LocalDateTime.parse((String) null, dateTimeFormatter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserInternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone1);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-2314));
      localDateTime1.getYearOfEra();
      Locale locale0 = Locale.TAIWAN;
      locale0.getScript();
      dateTimeZone1.isFixed();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Calendar calendar0 = dateTime0.toCalendar(locale0);
      LocalDateTime.fromCalendarFields(calendar0);
      // Undeclared exception!
      try { 
        localDateTime1.withHourOfDay((-2314));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2314 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 49;
      int int1 = 1;
      int int2 = 1900;
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Duration duration0 = Duration.millis(1900);
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded(duration0, 1);
      LocalDateTime localDateTime2 = localDateTime1.withMillisOfDay(22);
      PeriodType periodType0 = PeriodType.hours();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      LocalDateTime localDateTime3 = localDateTime2.withPeriodAdded(mutablePeriod0, 22);
      DateTime dateTime0 = localDateTime3.toDateTime();
      dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      LocalDateTime localDateTime4 = null;
      try {
        localDateTime4 = new LocalDateTime(49, 49, 49, 1, 1900, 49, 1900, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1900 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1874L));
      localDateTime0.getMonthOfYear();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      localDateTime_Property0.addWrapFieldToCopy(0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      int int0 = 0;
      localDateTime0.toLocalDate();
      // Undeclared exception!
      try { 
        localDateTime0.withYearOfEra(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime0 = new LocalDateTime(25L, (Chronology) gJChronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks((-816));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      LocalDateTime localDateTime2 = localDateTime1.withField(dateTimeFieldType0, (-816));
      LocalDateTime localDateTime3 = localDateTime2.minusYears(4);
      int int0 = 500;
      // Undeclared exception!
      try { 
        localDateTime3.withDate(2011, 2011, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2011 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFieldType.millisOfSecond();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Chronology chronology0 = islamicChronology0.withUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, chronology0);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(70);
      LocalDateTime localDateTime2 = localDateTime1.withEra(1);
      // Undeclared exception!
      try { 
        localDateTime2.withCenturyOfEra((-1540));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1540 for centuryOfEra must be in the range [1,2922711]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1391));
      dateTimeZone0.toTimeZone();
      dateTimeZone0.isFixed();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfSecond();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfFloorCopy();
      LocalDateTime localDateTime2 = localDateTime1.withLocalMillis((-1391));
      localDateTime2.getWeekOfWeekyear();
      DateTimeZone.setDefault(dateTimeZone0);
      localDateTime_Property0.getRangeDurationField();
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org/joda/time/tz/data\" for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusDays(3);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldType0.getRangeDurationType();
      localDateTime1.isSupported(dateTimeFieldType0);
      localDateTime1.property(dateTimeFieldType0);
      LocalDateTime localDateTime2 = localDateTime1.withFields(localDateTime0);
      localDateTime2.getMinuteOfHour();
      localDateTime0.weekyear();
      localDateTime0.weekOfWeekyear();
      localDateTime0.getDayOfWeek();
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("s<#4[t>5w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 14);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      localDateTime0.withField(dateTimeFieldType0, 0);
      localDateTime0.centuryOfEra();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BuddhistChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, uTCDateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(uTCDateTimeZone0);
      LocalDateTime localDateTime1 = LocalDateTime.now(chronology0);
      localDateTime1.getDayOfWeek();
      localDateTime0.getEra();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      int int0 = (-76);
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds((-76));
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        localDateTime1.withYear((-506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime(782L, (DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusYears(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      LocalDateTime localDateTime2 = localDateTime_Property0.roundFloorCopy();
      localDateTime2.era();
      LocalDateTime localDateTime3 = localDateTime_Property0.roundHalfEvenCopy();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      localDateTime0.isSupported(dateTimeFieldType0);
      LocalDateTime localDateTime4 = localDateTime3.withLocalMillis(0);
      localDateTime4.withLocalMillis(782L);
      LocalDateTime localDateTime5 = localDateTime_Property0.setCopy(0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      localDateTime5.isSupported(durationFieldType0);
      localDateTime0.withMillisOfDay(0);
      localDateTime0.millisOfDay();
      localDateTime3.withYearOfCentury(0);
      localDateTime2.plusMillis(0);
      localDateTime_Property0.roundFloorCopy();
      LocalDateTime localDateTime6 = localDateTime2.withMillisOfDay(4148);
      localDateTime6.hashCode();
      // Undeclared exception!
      try { 
        localDateTime4.withDayOfWeek(14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 14 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(7L, dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      localDateTime0.isSupported(dateTimeFieldType0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      localDateTime_Property0.roundFloorCopy();
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy(365);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 365 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int int0 = 3;
      Duration.millis(2779L);
      LocalDateTime localDateTime1 = new LocalDateTime(3, 3, 3, 3, 3, 3, 3, (Chronology) null);
      localDateTime1.plusWeeks(3);
      LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
      localDateTime2.plusDays(2989);
      localDateTime0.getDayOfYear();
      Locale locale0 = Locale.ITALY;
      localDateTime2.toString((String) null, locale0);
      // Undeclared exception!
      try { 
        localDateTime0.getField(76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 76
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Chronology chronology0 = iSOChronology0.withZone((DateTimeZone) null);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(0, 0, 0, 0, 11, 0, (-810), chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -810 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2206);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      Period period0 = Period.months(11);
      period0.getHours();
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(period0, 1000);
      localDateTime1.plusMonths((-590));
      LocalDateTime localDateTime2 = localDateTime0.minusYears(1000);
      localDateTime2.toDateTime(dateTimeZone0);
      LocalDateTime localDateTime3 = localDateTime2.minusYears(1000);
      localDateTime3.yearOfEra();
      localDateTime3.getMillisOfSecond();
      localDateTime3.minusWeeks(1000);
      System.setCurrentTimeMillis(2206);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(1538L, dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds((-206));
      LocalDateTime localDateTime2 = localDateTime1.minusHours((-206));
      // Undeclared exception!
      try { 
        localDateTime2.withYearOfEra((-206));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -206 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalDateTime localDateTime0 = new LocalDateTime((-118890905474L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      int int0 = 1;
      islamicChronology0.add((-3533L), 536L, 1);
      dateTimeFieldType0.isSupported(islamicChronology0);
      localDateTime0.get(dateTimeFieldType0);
      localDateTime0.getYear();
      LocalDateTime localDateTime1 = null;
      try {
        localDateTime1 = new LocalDateTime(66, 66, 66, (-1001), 66);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1001 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2712L));
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      localDateTime0.equals(copticChronology0);
      int int0 = 366;
      // Undeclared exception!
      try { 
        localDateTime0.withEra(366);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 366 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 11;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Chronology chronology0 = julianChronology0.withUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, 11, chronology0);
      dateTimeFieldType0.getRangeDurationType();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(partial0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimePrinter0).estimatePrintedLength();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Locale locale0 = new Locale("<>/", "<>/", "<>/");
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(11);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(11);
      localDateTime0.toString(dateTimeFormatter4);
      localDateTime0.withYearOfEra(1603);
      int int0 = 3;
      Duration duration0 = Duration.millis(2779L);
      localDateTime0.plus((ReadableDuration) duration0);
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(3);
      localDateTime0.getDayOfYear();
      Locale locale1 = Locale.KOREA;
      localDateTime1.toString((String) null, locale1);
      // Undeclared exception!
      try { 
        localDateTime1.getField(3, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimePrinter0).estimatePrintedLength();
      int int0 = 100;
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(100).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = LocalDateTime.parse("The DateTimeFieldType must not be null", dateTimeFormatter0);
      int int1 = (-661);
      dateTimeFormatter0.print(700L);
      LocalDateTime localDateTime1 = localDateTime0.minusDays((-661));
      LocalDateTime localDateTime2 = localDateTime1.withYear(100);
      int int2 = 0;
      localDateTime0.withSecondOfMinute(0);
      int int3 = 0;
      LocalDateTime localDateTime3 = localDateTime2.plusMonths(0);
      // Undeclared exception!
      try { 
        localDateTime3.withWeekOfWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-460), (-460), (-460), (-460), 531);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      Hours hours0 = Hours.SEVEN;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 0);
      // Undeclared exception!
      try { 
        localDateTime1.withMonthOfYear((-460));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -460 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AQy~26Z~HY}2y");
      LocalDateTime localDateTime2 = localDateTime0.minusSeconds((-470));
      localDateTime0.toDate();
      localDateTime2.compareTo((ReadablePartial) localDateTime0);
      // Undeclared exception!
      try { 
        localDateTime1.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(604800).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(gregorianChronology0);
      LocalDateTime localDateTime0 = LocalDateTime.parse("^5orw'.,k ", dateTimeFormatter1);
      LocalDateTime localDateTime1 = localDateTime0.plusHours(72);
      GregorianChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime2 = localDateTime1.withLocalMillis(72);
      localDateTime2.getMinuteOfHour();
      localDateTime1.millisOfSecond();
      localDateTime0.yearOfCentury();
      localDateTime2.plusMonths(414);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Date date0 = localDateTime0.toDate();
      LocalDateTime localDateTime1 = LocalDateTime.fromDateFields(date0);
      LocalDateTime localDateTime2 = localDateTime0.plusYears(604800);
      LocalDateTime localDateTime3 = localDateTime2.minusMonths((-492));
      localDateTime0.compareTo((ReadablePartial) localDateTime1);
      localDateTime0.toDate();
      // Undeclared exception!
      try { 
        localDateTime3.withDate(1800, (-492), (-1552));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -492 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(1900);
      Months months0 = Months.FIVE;
      localDateTime1.millisOfSecond();
      LocalDateTime localDateTime2 = localDateTime1.withPeriodAdded(months0, 1900);
      months0.multipliedBy(0);
      int int0 = 500;
      localDateTime2.withCenturyOfEra(500);
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfYear(1900);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1900 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ZoneOffset.ofTotalSeconds((-1698));
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.plusSeconds(48);
      LocalDateTime localDateTime1 = new LocalDateTime();
      LocalDateTime localDateTime2 = localDateTime1.minusWeeks(0);
      LocalDateTime localDateTime3 = localDateTime2.withCenturyOfEra(0);
      // Undeclared exception!
      try { 
        localDateTime3.withTime(833, (-224), 2147483639, 833);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 833 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      LocalTime localTime0 = new LocalTime();
      localDateTime0.getHourOfDay();
      localDateTime0.hashCode();
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(23);
      // Undeclared exception!
      try { 
        localDateTime1.getField(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 23
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      Duration duration0 = Duration.millis(604800L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%# ><");
      localDateTime0.getMillisOfDay();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      localDateTime0.dayOfYear();
      localDateTime0.compareTo((ReadablePartial) localDateTime0);
      localDateTime0.getWeekOfWeekyear();
      duration0.minus((ReadableDuration) duration0);
      localDateTime0.withDate(1076, 7, 7);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) uTCDateTimeZone0);
      localDateTime0.getDayOfMonth();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalDateTime localDateTime1 = localDateTime0.plusDays((-1632));
      int int0 = 1088;
      LocalDateTime localDateTime2 = localDateTime0.minusSeconds(1088);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      localDateTime1.property(dateTimeFieldType0);
      localDateTime2.isSupported(durationFieldType0);
      localDateTime1.weekOfWeekyear();
      localDateTime0.getLocalMillis();
      LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay(1088);
      TimeZone timeZone0 = TimeZone.getTimeZone("ck(nB%h");
      localDateTime3.toDate(timeZone0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        localDateTime0.withEra((-363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -363 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis((-4611L));
      Duration duration0 = Duration.standardHours((-680L));
      LocalDateTime localDateTime2 = localDateTime1.plus((ReadableDuration) duration0);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte) (-35);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      localDateTime2.toLocalTime();
      LocalDateTime localDateTime3 = localDateTime2.withWeekyear(1000);
      LocalDateTime localDateTime4 = localDateTime3.withYearOfEra(1000);
      localDateTime4.minusHours(1000);
      LocalDateTime localDateTime5 = localDateTime4.withYear(1000);
      localDateTime5.getChronology();
      localDateTime4.getSecondOfMinute();
      localDateTime2.getLocalMillis();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis((-4611L));
      Duration duration0 = Duration.standardHours((-680L));
      LocalDateTime localDateTime2 = localDateTime1.plus((ReadableDuration) duration0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      localDateTime2.toLocalTime();
      LocalDateTime localDateTime3 = localDateTime2.withWeekyear(1000);
      LocalDateTime localDateTime4 = localDateTime3.withYearOfEra(1000);
      localDateTime4.minusHours(1000);
      LocalDateTime localDateTime5 = localDateTime4.withYear(1000);
      localDateTime5.getChronology();
      // Undeclared exception!
      try { 
        LocalDateTime.parse("d%>GTC|y8!f?Ca<h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"d%>GTC|y8!f?Ca<h\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      localDateTime0.withDayOfYear(3);
      localDateTime0.toLocalTime();
      localDateTime0.getHourOfDay();
      localDateTime0.hashCode();
      LocalDateTime localDateTime1 = localDateTime0.plusHours(23);
      // Undeclared exception!
      try { 
        localDateTime1.getField(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 23
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Date date0 = localDateTime0.toDate();
      LocalDateTime localDateTime1 = LocalDateTime.fromDateFields(date0);
      LocalDateTime localDateTime2 = localDateTime0.plusYears(604800);
      int int0 = (-492);
      LocalDateTime localDateTime3 = localDateTime2.minusMonths((-492));
      localDateTime0.compareTo((ReadablePartial) localDateTime1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      localDateTime0.toDate();
      int int1 = 1800;
      // Undeclared exception!
      try { 
        localDateTime3.withFieldAdded((DurationFieldType) null, 604800);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      localDateTime0.withDayOfYear(3);
      localDateTime0.toLocalTime();
      localDateTime0.getHourOfDay();
      localDateTime0.hashCode();
      LocalDateTime localDateTime1 = localDateTime0.plusHours(23);
      // Undeclared exception!
      try { 
        localDateTime1.getField(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 23
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2206);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      Period period0 = Period.months(11);
      period0.getHours();
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(period0, 1000);
      LocalDateTime localDateTime2 = localDateTime1.plusMonths((-590));
      LocalDateTime localDateTime3 = localDateTime1.minusSeconds(2206);
      localDateTime3.toDateTime(dateTimeZone0);
      LocalDateTime localDateTime4 = localDateTime3.minusYears(1000);
      localDateTime4.yearOfEra();
      localDateTime4.getMillisOfSecond();
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      localDateTime4.isSupported(durationFieldType0);
      LocalDateTime localDateTime5 = localDateTime4.minusWeeks(1000);
      System.setCurrentTimeMillis(2206);
      LocalDateTime localDateTime6 = localDateTime0.minusHours(20);
      localDateTime5.millisOfDay();
      localDateTime2.minusYears((-2608));
      localDateTime1.toString((String) null);
      localDateTime6.weekyear();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2206);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      Period period0 = Period.months(11);
      period0.getHours();
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(period0, 1000);
      localDateTime1.plusMonths((-590));
      LocalDateTime localDateTime2 = localDateTime1.minusSeconds(2206);
      localDateTime2.toDateTime(dateTimeZone0);
      LocalDateTime localDateTime3 = localDateTime2.minusYears(1000);
      localDateTime3.yearOfEra();
      localDateTime3.getMillisOfSecond();
      LocalDateTime localDateTime4 = localDateTime3.minusWeeks(1000);
      System.setCurrentTimeMillis(2206);
      localDateTime0.minusHours(20);
      localDateTime4.millisOfDay();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Period period0 = Period.years(0);
      Period period1 = period0.withHours(0);
      period0.getPeriodType();
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) period1);
      LocalDateTime localDateTime2 = localDateTime1.minusMillis(0);
      LocalDateTime localDateTime3 = localDateTime2.withFields(localDateTime0);
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      localDateTime3.isSupported(durationFieldType0);
      TimeZone timeZone0 = TimeZone.getDefault();
      localDateTime2.toDate(timeZone0);
      period1.getDays();
      LocalDateTime localDateTime4 = localDateTime0.plusDays(1174);
      // Undeclared exception!
      try { 
        localDateTime4.withSecondOfMinute(1023);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1023 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusHours(386);
      int int0 = 5;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      strictChronology0.set(localDateTime1, 5);
      PeriodType.yearMonthDay();
      Period period0 = new Period();
      Days days0 = period0.toStandardDays();
      Duration duration0 = days0.toStandardDuration();
      Days.days(5);
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadableDuration) duration0);
      localDateTime2.weekOfWeekyear();
      LocalDateTime localDateTime3 = localDateTime1.withMinuteOfHour(5);
      localDateTime3.withDayOfWeek(5);
      localDateTime2.dayOfMonth();
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.dayOfYear();
      localDateTime_Property0.withMinimumValue();
      localDateTime_Property0.getLeapAmount();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      LocalDateTime localDateTime4 = localDateTime0.withFieldAdded(durationFieldType0, 0);
      ISOChronology.getInstanceUTC();
      localDateTime4.plusMillis(5);
      // Undeclared exception!
      try { 
        localDateTime3.withDayOfYear(386);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 386 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      int int0 = (-146);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-146));
      // Undeclared exception!
      try { 
        localDateTime1.toDate((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusHours(386);
      int int0 = 5;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      strictChronology0.set(localDateTime1, 5);
      PeriodType.days();
      Period period0 = new Period();
      Days days0 = period0.toStandardDays();
      Duration duration0 = days0.toStandardDuration();
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadableDuration) duration0);
      localDateTime2.weekOfWeekyear();
      LocalDateTime localDateTime3 = localDateTime1.withMinuteOfHour(5);
      localDateTime3.withDayOfWeek(5);
      localDateTime2.era();
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.dayOfYear();
      localDateTime_Property0.withMinimumValue();
      localDateTime_Property0.getLeapAmount();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      localDateTime0.withFieldAdded(durationFieldType0, 0);
      localDateTime_Property0.getChronology();
      // Undeclared exception!
      try { 
        localDateTime3.withDayOfYear(386);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 386 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      Chronology chronology0 = lenientChronology0.withUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      LocalDateTime.Property localDateTime_Property0 = new LocalDateTime.Property(localDateTime0, dateTimeField0);
      localDateTime_Property0.withMaximumValue();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-4462L));
      LocalDateTime localDateTime1 = localDateTime0.minusDays(2);
      LocalDateTime localDateTime2 = localDateTime1.withCenturyOfEra(2);
      localDateTime2.withWeekOfWeekyear(2);
      localDateTime0.yearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      dateTimeFieldType0.getRangeDurationType();
      LocalDateTime localDateTime3 = new LocalDateTime(2, 2, 2, 2, 2, 2, 2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDateTime localDateTime4 = localDateTime3.plusHours(2163);
      int int0 = new Integer(2163);
      localDateTime4.year();
      localDateTime2.centuryOfEra();
      // Undeclared exception!
      try { 
        localDateTime0.withMinuteOfHour(2163);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2163 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((-164), (-164), (-164), 0, 0, 0, (-164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -164 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 14, 0, 14);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime0.dayOfWeek();
      localDateTime0.monthOfYear();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
      LocalDateTime localDateTime1 = LocalDateTime.now(chronology0);
      MockDate.UTC(0, 0, (-3620), 0, 0, 0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      localDateTime0.property(dateTimeFieldType0);
      localDateTime1.getField(1, (Chronology) zonedChronology0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = 31449600000L;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      iSOChronology0.withUTC();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      Locale locale0 = Locale.forLanguageTag("The calendar must not be null");
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("97dc8c+", dateTimeFormatter1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = (-250);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      TimeZone timeZone0 = TimeZone.getTimeZone("2G+z+Ww2jblG:z");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.plusHours(660);
      LocalDateTime localDateTime2 = localDateTime1.minusYears((-1730));
      LocalDateTime localDateTime3 = localDateTime2.withDurationAdded((ReadableDuration) null, (byte)127);
      localDateTime3.size();
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte) (-44);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(454L);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(773);
      LocalDateTime localDateTime2 = localDateTime1.plusMonths(Integer.MAX_VALUE);
      localDateTime2.minus((ReadableDuration) null);
      localDateTime0.plusHours(2207);
      localDateTime2.minuteOfHour();
      GJChronology gJChronology0 = GJChronology.getInstance();
      localDateTime2.equals(gJChronology0);
      localDateTime2.toDateTime();
      localDateTime2.plusMinutes(14);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(543, 0, 543, 0, 2717, 0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      localDateTime0.withYearOfCentury(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      LocalDateTime localDateTime1 = localDateTime0.plusYears(1);
      localDateTime0.toString();
      LocalDateTime localDateTime2 = localDateTime0.minusHours(0);
      localDateTime2.withYearOfCentury(0);
      localDateTime1.getMillisOfSecond();
      localDateTime0.centuryOfEra();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDateTime localDateTime3 = LocalDateTime.now((Chronology) buddhistChronology0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        localDateTime3.toString("H`I8{]%~p7!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Duration duration0 = new Duration(604800L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%# x<");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      ZonedChronology.getInstance(ethiopicChronology0, uTCDateTimeZone0);
      localDateTime0.monthOfYear();
      EthiopicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(1088);
      localDateTime1.toDate();
      localDateTime1.getWeekyear();
      LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra(2006);
      localDateTime2.plusDays(1);
      // Undeclared exception!
      try { 
        localDateTime1.withSecondOfMinute(2006);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2006 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Seconds seconds0 = Seconds.TWO;
      Duration duration0 = seconds0.toStandardDuration();
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
      int int0 = 2146523664;
      LocalDateTime localDateTime2 = localDateTime1.minusSeconds(2146523664);
      // Undeclared exception!
      try { 
        localDateTime2.minusYears(2146523664);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2146521718 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((-4171L), (Chronology) gJChronology0);
      localDateTime0.toDate();
      localDateTime0.toLocalDate();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusHours(0);
      localDateTime0.withYearOfCentury(7);
      GJChronology.getInstance((DateTimeZone) null);
      PeriodType.days();
      LocalDateTime localDateTime2 = localDateTime1.withMinuteOfHour(5);
      LocalDateTime localDateTime3 = localDateTime2.withDayOfWeek(5);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      localDateTime3.isSupported(dateTimeFieldType0);
      localDateTime0.era();
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.dayOfYear();
      localDateTime_Property0.getChronology();
      // Undeclared exception!
      try { 
        localDateTime2.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(0);
      LocalDateTime localDateTime2 = localDateTime1.minusHours(1);
      localDateTime2.withDayOfMonth(1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockDate mockDate0 = new MockDate((-1667), (-1667), (-2145511669));
      LocalDateTime localDateTime1 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime2 = localDateTime0.minusSeconds(1);
      localDateTime2.getYearOfCentury();
      LocalDateTime localDateTime3 = localDateTime2.withWeekOfWeekyear(1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      mockDate0.toInstant();
      localDateTime3.get(dateTimeFieldType0);
      localDateTime2.getMonthOfYear();
      localDateTime1.getDayOfYear();
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.weekyear();
      mockDate0.toInstant();
      localDateTime_Property0.roundCeilingCopy();
      localDateTime0.plusSeconds(4);
      // Undeclared exception!
      try { 
        localDateTime2.withSecondOfMinute(888);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 888 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      int int0 = 2014;
      MonthDay monthDay0 = new MonthDay((long) 2014);
      // Undeclared exception!
      try { 
        localDateTime0.isBefore(monthDay0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      Duration duration0 = Duration.millis((-1448L));
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
      LocalDateTime localDateTime2 = localDateTime1.withWeekOfWeekyear(14);
      LocalDateTime localDateTime3 = localDateTime2.minusYears((-243));
      localDateTime3.toDateTime(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-4462L));
      LocalDateTime localDateTime1 = localDateTime0.minusDays(2);
      LocalDateTime localDateTime2 = localDateTime1.withCenturyOfEra(2);
      localDateTime2.withWeekOfWeekyear(2);
      localDateTime0.yearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      dateTimeFieldType0.getRangeDurationType();
      LocalDateTime localDateTime3 = new LocalDateTime(2, 2, 2, 2, 2, 2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDateTime localDateTime4 = localDateTime3.plusHours(2163);
      localDateTime1.getYearOfCentury();
      localDateTime4.year();
      localDateTime2.centuryOfEra();
      // Undeclared exception!
      try { 
        localDateTime0.withMinuteOfHour(69);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 69 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      localDateTime0.getWeekyear();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2014);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      zonedChronology0.getZone();
      int int0 = 2;
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      // Undeclared exception!
      try { 
        localDateTime0.withFieldAdded(durationFieldType0, 87);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-4462L));
      LocalDateTime localDateTime1 = localDateTime0.minusDays(2);
      LocalDateTime localDateTime2 = localDateTime1.withCenturyOfEra(2);
      LocalDateTime localDateTime3 = LocalDateTime.now();
      localDateTime0.yearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      LocalDateTime localDateTime4 = localDateTime3.withFieldAdded(durationFieldType0, 2);
      localDateTime3.getValue(2);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      durationFieldType0.isSupported(islamicChronology0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDateTime localDateTime5 = localDateTime4.plusHours(2168);
      localDateTime1.getYearOfCentury();
      localDateTime5.year();
      localDateTime2.centuryOfEra();
      // Undeclared exception!
      try { 
        localDateTime0.withMinuteOfHour(69);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 69 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2206);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      Period period0 = Period.months(11);
      period0.getHours();
      FileSystemHandling.shouldAllThrowIOExceptions();
      localDateTime0.plusMonths((-590));
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(2206);
      localDateTime1.toDateTime(dateTimeZone0);
      LocalDateTime localDateTime2 = localDateTime1.minusYears(0);
      localDateTime2.yearOfEra();
      localDateTime2.getMillisOfSecond();
      localDateTime2.minusWeeks(2206);
      System.setCurrentTimeMillis(2206);
      // Undeclared exception!
      try { 
        localDateTime0.withTime(526, 11, 2206, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 526 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(0);
      LocalDateTime localDateTime2 = localDateTime1.withYearOfCentury(0);
      localDateTime2.withMinuteOfHour(0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis((-2236));
      localDateTime1.plusDays(0);
      Duration duration0 = new Duration((-2002L), (-2002L));
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadableDuration) duration0);
      LocalDateTime localDateTime3 = localDateTime2.minusMinutes(690562340);
      Period period0 = new Period(localDateTime2, localDateTime0);
      LocalDateTime localDateTime4 = localDateTime3.minus((ReadablePeriod) period0);
      LocalDateTime localDateTime5 = localDateTime4.withWeekyear(0);
      localDateTime5.withLocalMillis(60000L);
      TimeZone timeZone0 = TimeZone.getTimeZone("The datetime zone id '");
      localDateTime5.toDate(timeZone0);
      localDateTime5.toDate();
      // Undeclared exception!
      try { 
        LocalDateTime.parse("The datetime zone id '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The datetime zone id '\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse("; 2s!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"; 2s!\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, uTCDateTimeZone0);
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      period0.equals(periodType0);
      Months months0 = Months.MIN_VALUE;
      // Undeclared exception!
      try { 
        period0.plus(months0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("je(9<\"7h)H4");
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(copticChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.CopticChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-4462L));
      LocalDateTime localDateTime1 = localDateTime0.minusDays(2);
      LocalDateTime localDateTime2 = localDateTime1.withMillisOfSecond(2);
      LocalDateTime localDateTime3 = LocalDateTime.now();
      localDateTime0.yearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      localDateTime0.isBefore(localDateTime3);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      LocalDateTime localDateTime4 = localDateTime3.withFieldAdded(durationFieldType0, 2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDateTime localDateTime5 = localDateTime4.plusHours(2168);
      localDateTime1.getYearOfCentury();
      localDateTime5.year();
      localDateTime2.centuryOfEra();
      // Undeclared exception!
      try { 
        localDateTime0.withMinuteOfHour(69);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 69 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int int0 = 3;
      Duration duration0 = Duration.millis(2779L);
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration0);
      LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
      localDateTime0.getDayOfYear();
      Locale locale0 = Locale.KOREA;
      localDateTime2.getCenturyOfEra();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      localDateTime2.toString((String) null, locale0);
      localDateTime1.equals(localDateTime0);
      // Undeclared exception!
      try { 
        localDateTime0.getField(76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 76
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int int0 = 3;
      Duration duration0 = Duration.millis(2779L);
      localDateTime0.plus((ReadableDuration) duration0);
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(3);
      localDateTime0.getDayOfYear();
      Locale locale0 = Locale.KOREA;
      localDateTime1.getCenturyOfEra();
      localDateTime1.toString((String) null, locale0);
      // Undeclared exception!
      try { 
        localDateTime0.getField(76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 76
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      localDateTime0.toLocalTime();
      localDateTime0.getHourOfDay();
      localDateTime0.hashCode();
      LocalDateTime localDateTime1 = localDateTime0.plusHours(23);
      // Undeclared exception!
      try { 
        localDateTime1.getField(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 23
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockDate mockDate0 = new MockDate(60000L);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      MockDate.UTC((-147), 1084, 99, 5, 99, 86400000);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths((-147));
      LocalDateTime localDateTime2 = localDateTime1.withFields((ReadablePartial) null);
      localDateTime2.equals(mockDate0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 14, 0, 14);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime0.dayOfWeek();
      localDateTime0.monthOfYear();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
      LocalDateTime localDateTime1 = LocalDateTime.now(chronology0);
      // Undeclared exception!
      try { 
        localDateTime1.plusMinutes((-2145511669));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2147483645));
      // Undeclared exception!
      try { 
        localDateTime1.plusYears((-2147483645));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147477548 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 14);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime0.dayOfWeek();
      localDateTime0.monthOfYear();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
      LocalDateTime.now(chronology0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes((-2806));
      DateTime dateTime0 = localDateTime1.toDateTime();
      dateTime0.toGregorianCalendar();
      LocalDateTime localDateTime2 = localDateTime1.plusMinutes((-2806));
      Duration duration0 = new Duration((long) (-2806));
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = duration0.toPeriod(periodType0);
      Period period1 = period0.withHours(297);
      Period period2 = period1.withMillis(297);
      localDateTime2.plus((ReadablePeriod) period2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-76), (-76), (-76), (-76), (-76));
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds((-76));
      Minutes minutes0 = Minutes.minutes((-76));
      LocalDateTime localDateTime2 = localDateTime1.withPeriodAdded(minutes0, 0);
      LocalDateTime localDateTime3 = localDateTime2.plusMinutes(0);
      LocalDateTime localDateTime4 = localDateTime3.plusHours((-2119));
      LocalDateTime.Property localDateTime_Property0 = localDateTime4.secondOfMinute();
      localDateTime_Property0.roundHalfEvenCopy();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      localDateTime1.get(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.plusMinutes(0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2487));
      localDateTime1.era();
      // Undeclared exception!
      try { 
        localDateTime0.withMillisOfDay((-2487));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2487 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusYears(11);
      // Undeclared exception!
      try { 
        localDateTime1.withHourOfDay(115);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 115 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      int int0 = (-951);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, (-951), gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -951 for weekyearOfCentury must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = (-2147482576);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2147482576), (-2147482576), (-2147482673));
      Object object0 = new Object();
      mockGregorianCalendar0.before(object0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      localDateTime0.toLocalTime();
      int int1 = (-1201);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      localDateTime0.isSupported((DateTimeFieldType) null);
      // Undeclared exception!
      try { 
        CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 1527);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1527
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((-1698L), (DateTimeZone) null);
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, (-956));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalDateTime localDateTime2 = localDateTime1.minusDays(1388);
      localDateTime1.plusDays((-956));
      localDateTime2.yearOfCentury();
      localDateTime2.era();
      System.setCurrentTimeMillis((-2274L));
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try { 
        localDateTime1.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int int0 = 3;
      Duration duration0 = Duration.millis(2779L);
      localDateTime0.plus((ReadableDuration) duration0);
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(3);
      localDateTime0.getDayOfYear();
      Locale locale0 = Locale.KOREA;
      localDateTime1.toString((String) null, locale0);
      // Undeclared exception!
      try { 
        localDateTime0.getField(76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 76
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(4291L);
      localDateTime0.toString();
      int int0 = (-1551);
      try { 
        DateTimeZone.forOffsetHours((-1551));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -1551
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      int int0 = 14;
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(14);
      // Undeclared exception!
      try { 
        localDateTime1.withDayOfWeek(14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 14 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.joda.time.Minutes");
      timeZone0.setID("_g*^Ug7ADG#UG@1");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      localDateTime0.getEra();
      localDateTime0.getSecondOfMinute();
      mockGregorianCalendar0.setWeekDate(21, 1687, 1);
      mockGregorianCalendar0.getActualMinimum(1);
      LocalDateTime localDateTime1 = localDateTime0.plusDays(1);
      LocalDateTime localDateTime2 = localDateTime1.withSecondOfMinute(21);
      localDateTime0.withSecondOfMinute(1);
      localDateTime2.getCenturyOfEra();
      localDateTime1.withEra(1);
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.era();
      localDateTime_Property0.getLocalDateTime();
      // Undeclared exception!
      try { 
        localDateTime_Property0.addToCopy(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.toLocalDate();
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(2456);
      Duration duration0 = Duration.standardDays(2456);
      localDateTime1.plus((ReadableDuration) duration0);
      int int0 = 1804;
      // Undeclared exception!
      try { 
        localDateTime0.withHourOfDay(1804);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1804 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime((-1015L), dateTimeZone0);
      Duration duration0 = new Duration((-1015L));
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded(duration0, 1018);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.minuteOfHour();
      localDateTime_Property0.addToCopy(0L);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(32, 32, 32);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.plusHours(212);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.property(dateTimeFieldType0);
      localDateTime_Property0.roundHalfCeilingCopy();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(724);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      localDateTime1.get(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CopticChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1);
      LocalDateTime localDateTime1 = localDateTime0.minusDays(1);
      localDateTime1.withFields(localDateTime0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      uTCDateTimeZone0.getName((long) 623158436);
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 818L, 623158436);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 623158436
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.getFieldTypes();
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.toZoneId();
      localDateTime0.toDate(timeZone0);
      // Undeclared exception!
      try { 
        localDateTime0.getValue(157);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 157
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("System property referred to class that does not implement ");
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        localDateTime0.toString("`P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      zoneInfoProvider0.getZone("(~A5GJe#");
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((Object) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = (-1396);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1396));
      dateTimeZone0.toTimeZone();
      dateTimeZone0.isFixed();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfSecond();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfFloorCopy();
      LocalDateTime localDateTime2 = localDateTime1.withLocalMillis((-1396));
      localDateTime2.getWeekOfWeekyear();
      DateTimeZone.setDefault(dateTimeZone0);
      localDateTime_Property0.getRangeDurationField();
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org/joda/time/tz/data\" for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Duration.millis(2779L);
      Locale locale0 = Locale.ITALY;
      DateTimeFieldType.year();
      Weeks weeks0 = Weeks.MIN_VALUE;
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Seconds seconds0 = Seconds.ONE;
      LocalDateTime localDateTime0 = new LocalDateTime((-1789L));
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(0);
      localDateTime1.plusMillis(1136);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime.now((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        localDateTime1.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.getFieldTypes();
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.toZoneId();
      localDateTime0.toDate();
      // Undeclared exception!
      try { 
        localDateTime0.getValue(157);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 157
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1851L));
      localDateTime0.getMonthOfYear();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      localDateTime_Property0.getLeapAmount();
      localDateTime_Property0.addWrapFieldToCopy(0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1000L);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis(100000L);
      LocalDateTime localDateTime2 = localDateTime1.minusMinutes(0);
      LocalDateTime localDateTime3 = localDateTime2.plus((ReadablePeriod) null);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      localDateTime3.getWeekyear();
      localDateTime3.indexOf(dateTimeFieldType0);
      localDateTime3.withFieldAdded(durationFieldType0, 28181250);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(759L, (DateTimeZone) null);
      int int0 = (-1);
      int int1 = 2147483635;
      // Undeclared exception!
      try { 
        localDateTime0.withDate((-1), 2147483635, 2147483635);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483635 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int int0 = 3;
      Duration duration0 = Duration.millis(2779L);
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration0);
      LocalDateTime localDateTime2 = new LocalDateTime(3, 3, 3, 3, 3);
      Integer integer0 = new Integer(3);
      localDateTime1.isAfter(localDateTime0);
      Locale locale0 = Locale.KOREA;
      localDateTime2.getCenturyOfEra();
      localDateTime2.toString((String) null, locale0);
      localDateTime1.equals(localDateTime0);
      // Undeclared exception!
      try { 
        localDateTime0.getField((-165));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -165
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse("<KT4<bKWcgb|IcK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"<KT4<bKWcgb|IcK\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1907), 12, 12);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis((-1907));
      LocalDateTime localDateTime2 = localDateTime0.plusDays(51);
      Duration duration0 = new Duration((long) (-1907));
      Duration duration1 = Duration.ZERO;
      LocalDateTime localDateTime3 = localDateTime2.minus((ReadableDuration) duration0);
      localDateTime3.yearOfEra();
      LocalDateTime localDateTime4 = localDateTime3.withWeekOfWeekyear(51);
      localDateTime1.getMonthOfYear();
      localDateTime3.getMonthOfYear();
      localDateTime4.getChronology();
      LocalDateTime localDateTime5 = localDateTime0.withFields(localDateTime4);
      localDateTime5.getYear();
      LocalDateTime localDateTime6 = localDateTime2.plusYears(3);
      localDateTime6.year();
      MockDate mockDate0 = new MockDate(60000L);
      LocalDateTime.fromDateFields(mockDate0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 12, 12, (-1907), 12, (-1907));
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis((-1907));
      LocalDateTime localDateTime2 = localDateTime0.plusDays(51);
      Duration duration0 = new Duration((long) (-1907));
      Duration duration1 = Duration.ZERO;
      LocalDateTime localDateTime3 = localDateTime2.minus((ReadableDuration) duration0);
      LocalDateTime localDateTime4 = localDateTime3.withWeekOfWeekyear(51);
      localDateTime1.getMonthOfYear();
      localDateTime3.minus((ReadableDuration) duration1);
      localDateTime4.getChronology();
      LocalDateTime localDateTime5 = localDateTime0.withFields(localDateTime4);
      localDateTime5.getYear();
      localDateTime2.plusYears(12);
      TimeZone timeZone0 = TimeZone.getDefault();
      localDateTime3.toDate(timeZone0);
      localDateTime4.withWeekyear(12);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ZoneOffset.ofTotalSeconds((-1716));
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.plusSeconds(0);
      LocalDateTime localDateTime1 = new LocalDateTime();
      localDateTime1.minusWeeks(0);
      LocalDateTime localDateTime2 = localDateTime1.minusMillis(0);
      // Undeclared exception!
      try { 
        localDateTime2.withTime(833, (-224), 2868, 833);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 833 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-24L));
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes((-2806));
      localDateTime1.toDateTime();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDateTime localDateTime2 = localDateTime1.plusMinutes((-2806));
      Duration duration0 = new Duration((long) (-2806));
      Period period0 = Period.weeks((-2806));
      Period period1 = period0.withHours(297);
      period1.withMillis(297);
      LocalDateTime localDateTime3 = localDateTime0.plusYears(297);
      localDateTime1.dayOfMonth();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      localDateTime2.property(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localDateTime3.toString("z]W,au4z>ilsumx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: W
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-4462L));
      LocalDateTime localDateTime1 = localDateTime0.minusDays(2);
      LocalDateTime localDateTime2 = LocalDateTime.now();
      localDateTime0.yearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      LocalDateTime localDateTime3 = localDateTime2.withFieldAdded(durationFieldType0, 2);
      localDateTime2.getValue(2);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.get((ReadablePartial) localDateTime0, (long) 2);
      durationFieldType0.isSupported(islamicChronology0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDateTime localDateTime4 = localDateTime3.plusHours(2168);
      Integer integer0 = new Integer(2);
      localDateTime4.year();
      localDateTime1.centuryOfEra();
      LocalDateTime localDateTime5 = localDateTime0.withMinuteOfHour((int) integer0);
      localDateTime5.getDayOfYear();
      // Undeclared exception!
      try { 
        localDateTime5.withDayOfMonth((-86399999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -86399999 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime(782L, (DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusYears(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      LocalDateTime localDateTime2 = localDateTime0.minusMonths(0);
      localDateTime2.era();
      LocalDateTime localDateTime3 = localDateTime_Property0.roundHalfEvenCopy();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      localDateTime0.isSupported(dateTimeFieldType0);
      LocalDateTime localDateTime4 = localDateTime3.withLocalMillis(0);
      localDateTime4.withLocalMillis(782L);
      LocalDateTime localDateTime5 = localDateTime_Property0.setCopy(0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      localDateTime5.isSupported(durationFieldType0);
      localDateTime0.withMillisOfDay(0);
      localDateTime0.millisOfDay();
      localDateTime3.withYearOfCentury(0);
      localDateTime2.plusMillis(0);
      localDateTime_Property0.roundFloorCopy();
      LocalDateTime localDateTime6 = localDateTime2.withMillisOfDay(4148);
      localDateTime6.hashCode();
      // Undeclared exception!
      try { 
        localDateTime4.withDayOfWeek(21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 21 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 14);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      LocalDateTime localDateTime1 = localDateTime0.withField(dateTimeFieldType0, 0);
      localDateTime0.centuryOfEra();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BuddhistChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, uTCDateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(uTCDateTimeZone0);
      LocalDateTime localDateTime2 = LocalDateTime.now(chronology0);
      LocalDateTime localDateTime3 = LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      localDateTime2.getDayOfWeek();
      localDateTime0.getEra();
      localDateTime1.compareTo((ReadablePartial) localDateTime0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        localDateTime3.withEra(23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 23 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime(782L, (DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusYears(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      LocalDateTime localDateTime2 = localDateTime_Property0.roundFloorCopy();
      localDateTime2.era();
      LocalDateTime localDateTime3 = localDateTime_Property0.roundHalfEvenCopy();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      localDateTime0.isSupported(dateTimeFieldType0);
      localDateTime3.compareTo((ReadablePartial) localDateTime1);
      LocalDateTime localDateTime4 = localDateTime3.withLocalMillis(0);
      LocalDateTime localDateTime5 = localDateTime4.withLocalMillis(782L);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 2);
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 2);
      localDateTime5.equals(gregorianChronology0);
      LocalDateTime localDateTime6 = localDateTime_Property0.setCopy(0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      durationFieldType0.isSupported(gregorianChronology1);
      durationFieldType0.isSupported(gregorianChronology1);
      localDateTime6.isSupported(durationFieldType0);
      localDateTime0.withTime(0, 2, 2, 0);
      localDateTime0.withMillisOfDay(0);
      localDateTime0.millisOfDay();
      localDateTime3.withYearOfCentury(0);
      // Undeclared exception!
      try { 
        localDateTime4.withDayOfWeek(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      LocalDateTime localDateTime1 = localDateTime0.withField(dateTimeFieldType0, 0);
      localDateTime0.centuryOfEra();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BuddhistChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTCDateTimeZone0.toTimeZone();
      localDateTime0.getValues();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, uTCDateTimeZone0);
      zonedChronology0.withZone(uTCDateTimeZone0);
      LocalDateTime localDateTime2 = localDateTime1.withDate(1, 1, 1);
      LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      localDateTime2.getDayOfWeek();
      localDateTime0.getEra();
      // Undeclared exception!
      try { 
        localDateTime2.withMillisOfSecond(2147471717);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147471717 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.minusSeconds(3);
      LocalDateTime localDateTime1 = localDateTime0.minusDays(3);
      Days days0 = Days.days(3);
      localDateTime1.withPeriodAdded(days0, 604800);
      LocalDateTime localDateTime2 = localDateTime1.withFields(localDateTime0);
      localDateTime2.getMinuteOfHour();
      localDateTime0.weekyear();
      localDateTime0.weekOfWeekyear();
      localDateTime0.getDayOfWeek();
      localDateTime0.monthOfYear();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis((-2195));
      Duration duration0 = new Duration((-2002L), (-2002L));
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadableDuration) duration0);
      LocalDateTime localDateTime3 = localDateTime2.minusMinutes(690562340);
      Period period0 = new Period(localDateTime2, localDateTime0);
      LocalDateTime localDateTime4 = localDateTime3.minus((ReadablePeriod) period0);
      localDateTime4.withLocalMillis(690562340);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      localDateTime4.property(dateTimeFieldType0);
      TimeZone timeZone0 = TimeZone.getTimeZone("The datetime zone id '");
      Date date0 = localDateTime2.toDate(timeZone0);
      assertEquals("Fri Feb 14 20:21:23 GMT 2014", date0.toString());
      
      Date date1 = localDateTime0.toDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusHours(385);
      int int0 = 5;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      StrictChronology.getInstance(gJChronology0);
      PeriodType.days();
      Period period0 = new Period();
      Days days0 = Days.SEVEN;
      Duration duration0 = days0.toStandardDuration();
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadableDuration) duration0);
      localDateTime0.era();
      LocalDateTime localDateTime3 = localDateTime1.withMinuteOfHour(5);
      localDateTime2.era();
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.yearOfCentury();
      localDateTime_Property0.withMinimumValue();
      localDateTime_Property0.getLeapAmount();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      LocalDateTime localDateTime4 = localDateTime0.withFieldAdded(durationFieldType0, 0);
      localDateTime4.getMillisOfDay();
      ISOChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        localDateTime3.withDayOfYear(385);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 385 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Seconds seconds0 = Seconds.TWO;
      LocalDateTime localDateTime0 = new LocalDateTime((-1789L));
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(0);
      localDateTime1.weekyear();
      localDateTime1.getSecondOfMinute();
      localDateTime1.getWeekOfWeekyear();
      localDateTime1.plusMillis(1163);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.toLocalTime();
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds((-378));
      localDateTime1.getYearOfEra();
      LocalDateTime localDateTime2 = localDateTime1.withMillisOfSecond(2);
      localDateTime0.toLocalTime();
      localDateTime0.minusMonths((-943));
      LocalDateTime.now();
      // Undeclared exception!
      try { 
        localDateTime2.withMonthOfYear((-382));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -382 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2206);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      Period period0 = Period.months(11);
      period0.getHours();
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(period0, 1000);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      LocalDateTime localDateTime2 = localDateTime1.plusMonths((-590));
      LocalDateTime localDateTime3 = localDateTime1.minusSeconds(2206);
      localDateTime3.toDateTime(dateTimeZone0);
      LocalDateTime localDateTime4 = localDateTime3.minusYears(1000);
      localDateTime2.dayOfWeek();
      localDateTime4.getMillisOfSecond();
      localDateTime4.minusWeeks(1000);
      System.setCurrentTimeMillis(2206);
      LocalDateTime localDateTime5 = localDateTime0.minusHours(20);
      localDateTime5.getYearOfCentury();
      localDateTime4.minuteOfHour();
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        localDateTime2.withSecondOfMinute(2147483635);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483635 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int int0 = 3;
      Duration duration0 = Duration.millis(2779L);
      Duration duration1 = Duration.standardSeconds((-1L));
      duration0.isLongerThan(duration1);
      LocalDateTime localDateTime1 = localDateTime0.withHourOfDay(3);
      localDateTime1.getYearOfCentury();
      LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
      localDateTime0.getDayOfYear();
      Locale locale0 = Locale.KOREA;
      localDateTime2.getCenturyOfEra();
      localDateTime2.toString((String) null, locale0);
      // Undeclared exception!
      try { 
        localDateTime0.getField(76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 76
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }
}
