/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 22:08:29 GMT 2025
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.joda.time.Chronology;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormatter_ESTest extends PeriodFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("The field must be supported");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("The field must be supported");
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("sS/[qd#Jgh>;e");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("sS/[qd#Jgh>;e");
      Period period0 = Period.minutes(2107);
      periodFormatter0.printTo((Writer) mockFileWriter0, (ReadablePeriod) period0);
      assertTrue(periodFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PeriodType periodType0 = PeriodType.weeks();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, locale0, periodType0);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      assertSame(periodFormatter1, periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("Q;gO]E'ZA$");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Months months0 = Months.FOUR;
      String string0 = periodFormatter0.print(months0);
      assertEquals("Q;gO]E'ZA$", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.ITALY;
      Seconds seconds0 = Seconds.MAX_VALUE;
      PeriodType periodType0 = seconds0.getPeriodType();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      String string0 = periodFormatter0.print(seconds0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Period does not support field '", "Period does not support field '");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(150, 150, 150, false, 150, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_FieldFormatter0);
      Period period0 = periodFormatter0.parsePeriod("");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.ITALY;
      Seconds seconds0 = Seconds.MAX_VALUE;
      PeriodType periodType0 = seconds0.getPeriodType();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(1000000000000000000L, 0L, (Chronology) null);
      int int0 = periodFormatter0.parseInto(mutablePeriod0, "Y}$RoTd<S|a", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(5295L, 5295L, gregorianChronology0);
      int int0 = periodFormatter0.parseInto(mutablePeriod0, "org/joda/time/tz/data", 2698);
      assertEquals((-2699), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodType periodType0 = PeriodType.millis();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, (Locale) null, periodType0);
      PeriodPrinter periodPrinter0 = periodFormatter0.getPrinter();
      assertSame(periodFormatterBuilder_Literal0, periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      PeriodType periodType0 = minutes0.getPeriodType();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null, (Locale) null, periodType0);
      PeriodParser periodParser0 = periodFormatter0.getParser();
      assertNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      PeriodType periodType0 = periodFormatter0.getParseType();
      assertNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Period does not support field '", "Period does not support field '");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(150, 150, 150, false, 150, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_FieldFormatter0);
      PeriodType periodType0 = PeriodType.years();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType1);
      PeriodType periodType2 = periodFormatter1.getParseType();
      assertNotNull(periodType2);
      assertNotSame(periodFormatter0, periodFormatter1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      Locale locale0 = periodFormatter0.getLocale();
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Minutes minutes0 = Minutes.minutes(0);
      Days days0 = minutes0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      // Undeclared exception!
      try { 
        periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) weeks0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased((PeriodFormatter) null);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0);
      StringBuffer stringBuffer0 = new StringBuffer("DateTimeField[");
      Months months0 = Months.ONE;
      // Undeclared exception!
      try { 
        periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) months0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormat$DynamicWordBased", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(">8{NV6HK'^:");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      // Undeclared exception!
      try { 
        periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1334, 1334, 0, true, 1, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      Locale locale0 = Locale.ROOT;
      Months months0 = Months.TWO;
      PeriodType periodType0 = months0.getPeriodType();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org/joda/time/tz/data");
      // Undeclared exception!
      try { 
        periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) months0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Period does not support field '", "Period does not support field '");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(150, 150, 150, false, 150, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_FieldFormatter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        periodFormatter0.printTo((Writer) pipedWriter0, (ReadablePeriod) days0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Yo";
      stringArray0[1] = "Yo";
      stringArray0[2] = "Yo";
      stringArray0[3] = "";
      stringArray0[4] = "Yo";
      stringArray0[5] = "zt-~JZ@X";
      stringArray0[6] = "Yo";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("Yo");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Yo", "Yo", stringArray0, (PeriodPrinter) null, periodFormatterBuilder_Literal0, false, false);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
      MockFile mockFile0 = new MockFile("=f@fyhh#z1 /M");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        periodFormatter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      Duration duration0 = new Duration(30617280288L);
      Minutes minutes0 = duration0.toStandardMinutes();
      // Undeclared exception!
      try { 
        periodFormatter0.print(minutes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("A");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-538), (-538), (-538), false, (-538), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_CompositeAffix0);
      Locale locale0 = Locale.CANADA;
      PeriodType periodType0 = PeriodType.seconds();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      // Undeclared exception!
      try { 
        periodFormatter0.print((ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("BCE");
      Locale locale0 = Locale.UK;
      PeriodType periodType0 = PeriodType.standard();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(17, 17, 17, true, 17, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, (Locale) null, periodType0);
      // Undeclared exception!
      periodFormatter0.parseMutablePeriod("year: ");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(linkedHashSet0);
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("!3<^0y");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal((String) null);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(86399999, (-400), (-400), 0, 0, 0, (-400), (-471));
      // Undeclared exception!
      try { 
        periodFormatter0.parseInto(mutablePeriod0, "DE6^aHi#SYc6i M?$", 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Days days0 = Days.TWO;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      // Undeclared exception!
      try { 
        periodFormatter0.parseInto(mutablePeriod0, (String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.joda.time.format.DateTimeFormat$StyleFormatter";
      stringArray0[1] = "org.joda.time.format.DateTimeFormat$StyleFormatter";
      stringArray0[2] = "org.joda.time.format.DateTimeFormat$StyleFormatter";
      stringArray0[3] = "Lr";
      stringArray0[4] = "org.joda.time.format.DateTimeFormat$StyleFormatter";
      stringArray0[5] = "org.joda.time.format.DateTimeFormat$StyleFormatter";
      stringArray0[6] = "org.joda.time.format.DateTimeFormat$StyleFormatter";
      stringArray0[7] = "org.joda.time.format.DateTimeFormat$StyleFormatter";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.format.DateTimeFormat$StyleFormatter");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Lr", "org.joda.time.format.DateTimeFormat$StyleFormatter", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      Locale locale0 = Locale.ENGLISH;
      PeriodType periodType0 = PeriodType.seconds();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Literal0, locale0, periodType0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("q&S#cI)YR_Uc!D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"q&S#cI)YR_Uc!D\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      Locale locale0 = Locale.CANADA;
      PeriodType periodType0 = PeriodType.minutes();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Composite0, locale0, periodType0);
      PeriodPrinter periodPrinter0 = periodFormatter0.getPrinter();
      assertNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.ITALIAN;
      PeriodType periodType0 = PeriodType.millis();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      PeriodParser periodParser0 = periodFormatter0.getParser();
      assertSame(periodFormatterBuilder_Literal0, periodParser0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      Locale locale0 = Locale.CANADA;
      PeriodType periodType0 = PeriodType.minutes();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Composite0, locale0, periodType0);
      Locale locale1 = periodFormatter0.getLocale();
      assertEquals("CA", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.ENGLISH;
      PeriodType periodType0 = PeriodType.yearMonthDay();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("7J!E;0Bo^o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"7J!E;0Bo^o\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.MutableInterval");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(29, 29, 29, true, 690562340, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("org.joda.time.MutableInterval");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.MutableInterval\" is too short
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("*Yt XZTD/X{{/t3:{'");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-220), 660, true, 660, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.JAPAN;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      Minutes minutes0 = Minutes.minutes((-220));
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.days();
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = DurationFieldType.seconds();
      durationFieldTypeArray0[2] = durationFieldType2;
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType3 = years0.getFieldType();
      durationFieldTypeArray0[3] = durationFieldType3;
      Weeks weeks0 = Weeks.MIN_VALUE;
      DurationFieldType durationFieldType4 = weeks0.getFieldType();
      durationFieldTypeArray0[4] = durationFieldType4;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseInto((ReadWritablePeriod) null, "G8G+1VTD>GgMk", (-1647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      PeriodType periodType0 = PeriodType.years();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null, locale0, periodType0);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      assertSame(periodFormatter1, periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      PeriodType periodType0 = PeriodType.years();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null, locale0, periodType0);
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale((Locale) null);
      assertNotSame(periodFormatter1, periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("*Yt XZTD/X{{/t3:{'");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-220), 660, true, 660, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.JAPAN;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      Minutes minutes0 = Minutes.minutes((-220));
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.days();
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = DurationFieldType.seconds();
      durationFieldTypeArray0[2] = durationFieldType2;
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType3 = years0.getFieldType();
      durationFieldTypeArray0[3] = durationFieldType3;
      Weeks weeks0 = Weeks.MIN_VALUE;
      DurationFieldType durationFieldType4 = weeks0.getFieldType();
      durationFieldTypeArray0[4] = durationFieldType4;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertTrue(periodFormatter1.isPrinter());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.ENGLISH;
      PeriodType periodType0 = PeriodType.yearMonthDay();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      boolean boolean0 = periodFormatter0.isParser();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      Locale locale0 = new Locale("YC%J", "Period must not be null");
      PeriodType periodType0 = PeriodType.seconds();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, (PeriodParser) null, locale0, periodType0);
      boolean boolean0 = periodFormatter0.isParser();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(">8{NV6HK'^:");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      boolean boolean0 = periodFormatter0.isPrinter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Period does not support field '", "Period does not support field '");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(150, 150, 150, false, 150, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_FieldFormatter0);
      boolean boolean0 = periodFormatter0.isPrinter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Period does not support field '", "Period does not support field '");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(150, 150, 150, false, 150, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_FieldFormatter0);
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("");
      // Undeclared exception!
      try { 
        periodFormatter0.print(mutablePeriod0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      PeriodType periodType0 = PeriodType.years();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null, locale0, periodType0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("rFt$hv'Vyi|)5UvK(");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Period does not support field '", "Period does not support field '");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(150, 150, 150, false, 150, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_FieldFormatter0);
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("");
      int int0 = periodFormatter0.parseInto(mutablePeriod0, "", 150);
      assertEquals(150, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      PeriodType periodType0 = PeriodType.years();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null, locale0, periodType0);
      PeriodType periodType1 = periodFormatter0.getParseType();
      assertEquals("Years", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("The field must be supported");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Locale locale0 = Locale.GERMAN;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertNotSame(periodFormatter1, periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("*Yt XZTD/X{{/t3:{'");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-220), 660, true, 660, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.JAPAN;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      Minutes minutes0 = Minutes.minutes((-220));
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.days();
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = DurationFieldType.seconds();
      durationFieldTypeArray0[2] = durationFieldType2;
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType3 = years0.getFieldType();
      durationFieldTypeArray0[3] = durationFieldType3;
      Weeks weeks0 = Weeks.MIN_VALUE;
      DurationFieldType durationFieldType4 = weeks0.getFieldType();
      durationFieldTypeArray0[4] = durationFieldType4;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "*Yt XZTD/X{{/t3:{'");
      periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) years0);
      assertEquals(18, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      Locale locale0 = new Locale("YC%J", "Period must not be null");
      PeriodType periodType0 = PeriodType.seconds();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, (PeriodParser) null, locale0, periodType0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Minutes minutes0 = Minutes.TWO;
      // Undeclared exception!
      try { 
        periodFormatter0.printTo((Writer) pipedWriter0, (ReadablePeriod) minutes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }
}
