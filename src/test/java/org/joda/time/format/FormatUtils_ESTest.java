/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 20:00:45 GMT 2025
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.format.FormatUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FormatUtils_ESTest extends FormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      charArrayWriter0.writeTo(mockPrintWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = new StringBuffer("");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-9223372036854775808L));
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, (-9223372036854775808L));
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 633);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("S,)kd$");
      stringBuffer0.append('y');
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      FormatUtils.appendUnpaddedInteger(stringBuffer1, (-1));
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, (-1));
      stringBuffer0.codePoints();
      long long0 = 9223372036854775805L;
      int int0 = (-457);
      FormatUtils.appendPaddedInteger(stringBuffer0, 9223372036854775805L, (int) 'y');
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("]\"2M)EXM.T1H");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "]\"2M)EXM.T1H", 0, 0);
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      stringBuffer0.append((CharSequence) stringBuffer1);
      stringBuffer0.deleteCharAt(0);
      stringBuffer0.append(0L);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-41));
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-41));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (-41), (-41));
      FormatUtils.createErrorMessage("l%n.", 8);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, (-2791L), 32);
      FormatUtils.createErrorMessage("Invalid format: \"l%n.\" is too short", 0);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, Integer.MIN_VALUE, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) pipedWriter0, 1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("S,)kd$");
      stringBuffer0.append('y');
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      FormatUtils.appendUnpaddedInteger(stringBuffer1, (-1));
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, (-1));
      stringBuffer0.codePoints();
      long long0 = (-9223372036854775808L);
      int int0 = (-457);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-9223372036854775808L), (int) 'y');
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      charArrayWriter0.writeTo(mockPrintWriter0);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 1L);
      mockPrintWriter0.print((String) null);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-9223372036854775808L), (-2305));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("\"idY=+9'KgKprM", "\"idY=+9'KgKprM");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      mockFileWriter0.write("\"idY=+9'KgKprM", 2, 2);
      int int0 = 10;
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, 2573L, 10);
      FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, 2, (-3433));
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      file0.setReadOnly();
      charArray0[1] = 'A';
      charArray0[2] = 'c';
      charArray0[3] = 'f';
      charArray0[4] = '!';
      charArray0[5] = 'u';
      mockFileWriter0.write((-3433));
      charArray0[6] = 'L';
      charArray0[7] = 'd';
      charArray0[8] = 's';
      mockFileWriter0.write(charArray0);
      FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, (long) 10, 10);
      int int1 = 2146745173;
      try { 
        FormatUtils.writePaddedInteger((Writer) mockFileWriter0, 2, 2146745173);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) null, (-9223372036854775808L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      charArrayWriter0.writeTo(mockPrintWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintWriter0.print("9");
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 1L);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, 17);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      charArrayWriter0.writeTo(mockPrintWriter0);
      StringBuffer stringBuffer0 = new StringBuffer();
      charArrayWriter0.append((CharSequence) stringBuffer0);
      FormatUtils.appendPaddedInteger(stringBuffer0, 1L, 633);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 100L);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 100L);
      FormatUtils.calculateDigitCount(1L);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 729, (-770));
      FormatUtils.calculateDigitCount(100L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("]\"2M)EXM.T1H");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "]\"2M)EXM.T1H", 0, 0);
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      stringBuffer0.append((CharSequence) stringBuffer1);
      StringBuffer stringBuffer2 = stringBuffer0.deleteCharAt(0);
      stringBuffer0.append(true);
      stringBuffer0.append(0L);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 1, 1);
      FormatUtils.createErrorMessage("", 8);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, (-2791L), 32);
      FormatUtils.createErrorMessage("Invalid format: \"\" is too short", 0);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, Integer.MIN_VALUE, 0);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer2, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      charArrayWriter0.writeTo(mockPrintWriter0);
      StringBuffer stringBuffer0 = new StringBuffer();
      charArrayWriter0.append((CharSequence) stringBuffer0);
      FormatUtils.appendPaddedInteger(stringBuffer0, 1L, 633);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 100L);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 100L);
      FormatUtils.calculateDigitCount(10000L);
      FormatUtils.appendUnpaddedInteger((Appendable) charArrayWriter0, 633);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("\"idY=+9'KgKprM", "\"idY=+9'KgKprM");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      mockFileWriter0.write("\"idY=+9'KgKprM", 2, 2);
      int int0 = 10;
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, 2573L, 10);
      FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, 2, (-3433));
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'A';
      charArray0[2] = 'c';
      charArray0[3] = 'f';
      charArray0[4] = '!';
      charArray0[5] = 'u';
      charArray0[6] = 'L';
      charArray0[7] = 'd';
      charArray0[8] = 's';
      mockFileWriter0.write(charArray0);
      FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, (long) 10, 10);
      int int1 = 2146745173;
      // Undeclared exception!
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, 2, 2146745173);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer("4WU6ta:~az");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-9223372036854775808L));
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = ":*n'hkl!U6";
      MockPrintStream mockPrintStream0 = new MockPrintStream(":*n'hkl!U6");
      char char0 = 'P';
      PrintStream printStream0 = mockPrintStream0.append('P');
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      mockPrintStream0.printf(locale0, "", objectArray0);
      int int0 = 2146292586;
      // Undeclared exception!
      FormatUtils.appendPaddedInteger((Appendable) printStream0, 2146292586, 2146292586);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 264L, 633);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 264L, 633);
      FormatUtils.calculateDigitCount(0L);
      FormatUtils.parseTwoDigits(stringBuffer0, 1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      charArrayWriter0.writeTo(mockPrintWriter0);
      StringBuffer stringBuffer0 = new StringBuffer();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      mockPrintWriter0.println(true);
      FormatUtils.appendPaddedInteger(stringBuffer0, 1L, 633);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 100L);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 633);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 100L, 633);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 10L);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 100L, 633);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("]\"2M)EXM.T1H");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "]\"2M)EXM.T1H", 0, 0);
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      stringBuffer0.append((CharSequence) stringBuffer1);
      stringBuffer0.deleteCharAt(0);
      StringBuffer stringBuffer2 = stringBuffer0.append(true);
      StringBuffer stringBuffer3 = stringBuffer0.append(0L);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 1, 1);
      FormatUtils.createErrorMessage("", 8);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, (-2791L), 32);
      FormatUtils.createErrorMessage("Invalid format: \"\" is too short", 0);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, Integer.MIN_VALUE, 0);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer2, Integer.MIN_VALUE, 0);
      FormatUtils.appendUnpaddedInteger(stringBuffer3, 0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-13);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) charBuffer0, 2147473657);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q_wP_");
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      locale0.getUnicodeLocaleAttributes();
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "q_wP_";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) locale0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 272L, 32);
      // Undeclared exception!
      FormatUtils.writePaddedInteger((Writer) printWriter0, (long) 32, 2147473684);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedWriter pipedWriter1 = new PipedWriter();
      int int0 = 0;
      FormatUtils.appendPaddedInteger((Appendable) pipedWriter0, 22, 0);
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) pipedWriter1, 22);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      stringBuffer0.insert(0, 'R');
      stringBuffer0.delete(0, 0);
      stringBuffer0.ensureCapacity((-1));
      long long0 = (-1L);
      stringBuffer0.append("");
      int int1 = 10000;
      // Undeclared exception!
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (-1L), 10000);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'Q';
      charArray0[0] = 'Q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) charBuffer0, 10L);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = null;
      int int0 = 1329;
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage((String) null, 1329);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-2939);
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("", (-2939));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FormatUtils.calculateDigitCount((-168L));
      long long0 = 1000L;
      FormatUtils.calculateDigitCount(1000L);
      StringBuffer stringBuffer0 = null;
      long long1 = 0L;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      long long0 = (-1L);
      pipedWriter0.flush();
      try { 
        FormatUtils.appendPaddedInteger((Appendable) pipedWriter0, (-1L), 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1660;
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits((CharSequence) null, 1660);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      int int0 = 3;
      charBuffer0.position(4);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) charBuffer0, 4, 3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) null, (-2259L), 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(",oodC9x");
      String string0 = null;
      stringBuffer0.append((String) null);
      int int0 = 0;
      FormatUtils.parseTwoDigits(stringBuffer0, 0);
      stringBuffer0.ensureCapacity(0);
      stringBuffer0.trimToSize();
      FormatUtils.appendPaddedInteger(stringBuffer0, 1L, 0);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "19) i";
      MockFileWriter mockFileWriter0 = new MockFileWriter("19) i");
      mockFileWriter0.close();
      try { 
        FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, (-1), (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.GERMANY;
      mockPrintWriter0.write("");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      long long0 = 309L;
      FormatUtils.writePaddedInteger((Writer) printWriter0, 309L, 4);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintWriter0, 100L, 86);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, 10000L, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('p');
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      // Undeclared exception!
      try { 
        stringWriter2.write(charArray0, 2916, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FormatUtils.calculateDigitCount(1000L);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FormatUtils.createErrorMessage("8l$,{HWq!@xIx6", 1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = 653L;
      FormatUtils.calculateDigitCount(653L);
      MockFile mockFile0 = new MockFile("1=5`f:=#S=0t-%", "9");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      mockFileWriter0.flush();
      FormatUtils.appendUnpaddedInteger((Appendable) mockFileWriter0, 3);
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      FormatUtils.createErrorMessage("@:+I", 0);
      StringBuffer stringBuffer0 = null;
      int int1 = 45;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = 'u';
      charArray0[2] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) charBuffer0, 3365L, 1000);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-756);
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) null, (-756));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) pipedWriter0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = 0L;
      // Undeclared exception!
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-102L));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$5SA,eu");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "$5SA,eu";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 0, 359);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      File file0 = MockFile.createTempFile("iU,t* Qa4@'Ow", "iU,t* Qa4@'Ow");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 0, 0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, 2491L);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Writer writer0 = null;
      int int0 = 573;
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, 573, 573);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = 1000L;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) null, 1000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 10000, 10000);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      stringWriter1.append((CharSequence) stringBuffer0);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, (-452L), (-1));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (-1), (-1158));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FormatUtils.calculateDigitCount(0L);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 3145;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3145);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      FormatUtils.appendUnpaddedInteger((Appendable) printWriter0, 13421772);
      FormatUtils.calculateDigitCount(13421772);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      int int1 = 20;
      int int2 = 560;
      // Undeclared exception!
      try { 
        stringBuffer0.setLength((-1726));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1726
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-21);
      FormatUtils.createErrorMessage("rBmA9SZ=!m~Nd&+7P", (-21));
      int int1 = 0;
      FormatUtils.parseTwoDigits("rBmA9SZ=!m~Nd&+7P", 0);
      MockFile.createTempFile("rBmA9SZ=!m~Nd&+7P", "rBmA9SZ=!m~Nd&+7P");
      File file0 = MockFile.createTempFile("rBmA9SZ=!m~Nd&+7P", "Invalid format: \"rBmA9SZ=!m~...\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, true, "Invalid format: \"rBmA9SZ=!m~...\"");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Invalid format: \"rBmA9SZ=!m~...\"
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.trimToSize();
      StringBuffer stringBuffer1 = stringBuffer0.reverse();
      FormatUtils.appendPaddedInteger(stringBuffer0, (-3569), (-3569));
      FormatUtils.appendPaddedInteger(stringBuffer1, 0, 0);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer1, (long) 0);
      FormatUtils.parseTwoDigits(stringBuffer0, 0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-592);
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("", (-592));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-16);
      FormatUtils.createErrorMessage("", (-16));
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((CharSequence) "");
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, (long) Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        stringBuffer0.insert(Integer.MIN_VALUE, 'h');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 20, 20);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuffer stringBuffer0 = new StringBuffer(1000);
      stringBuffer0.append((Object) null);
      FormatUtils.appendPaddedInteger(stringBuffer0, 114, 36);
      // Undeclared exception!
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 114, 10000);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 1702;
      FormatUtils.createErrorMessage("`Q7&aU", 1702);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Invalid format: \"`Q7&aU\" is too short");
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) charBuffer0, 1702);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 361;
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(4);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0);
      FormatUtils.createErrorMessage("2147483648", 0);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer1, 361);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 0);
      stringBuffer0.codePoints();
      stringBuffer0.append(false);
      FormatUtils.appendPaddedInteger(stringBuffer0, Integer.MIN_VALUE, 2429);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        stringWriter0.write("", 4, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char char0 = 'z';
      StringBuffer stringBuffer0 = new StringBuffer();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter0.append('z');
      charArrayWriter2.write("");
      charArrayWriter2.append('z');
      FormatUtils.appendUnpaddedInteger((Appendable) charArrayWriter2, (int) 'z');
      charArrayWriter0.reset();
      charArrayWriter0.append('z');
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (-19L), (int) 'z');
      charArrayWriter1.append((CharSequence) stringBuffer0);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, 22);
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter1, (long) 22, (int) 'z');
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits(stringBuffer0, 'z');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char char0 = 'z';
      StringBuffer stringBuffer0 = new StringBuffer();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter0.append('z');
      charArrayWriter2.write("");
      charArrayWriter0.write((-1));
      FormatUtils.appendUnpaddedInteger((Appendable) charArrayWriter2, (int) 'z');
      charArrayWriter0.reset();
      charArrayWriter0.append('z');
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 10L, (-1));
      charArrayWriter1.append((CharSequence) stringBuffer0);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, 22);
      FormatUtils.calculateDigitCount('z');
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter1, (long) 22, (-1));
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits(stringBuffer0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FormatUtils.createErrorMessage("lMsY\">", 44);
      StringBuffer stringBuffer0 = new StringBuffer("lMsY\">");
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 1869L);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 44, 1448);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      stringWriter1.append((CharSequence) stringBuffer0);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, (-452L), 28);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 28, (-1158));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      charArrayWriter0.writeTo(mockPrintWriter0);
      StringBuffer stringBuffer0 = new StringBuffer();
      charArrayWriter0.append((CharSequence) stringBuffer0);
      mockPrintWriter0.println();
      FormatUtils.appendPaddedInteger(stringBuffer0, 1L, 633);
      charArrayWriter0.close();
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 100L);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 6);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-112L));
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 10);
      FormatUtils.calculateDigitCount(1L);
      FormatUtils.appendPaddedInteger(stringBuffer0, 633, 55);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      charArrayWriter0.writeTo(mockPrintWriter0);
      StringBuffer stringBuffer0 = new StringBuffer();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      mockPrintWriter0.println(true);
      FormatUtils.appendPaddedInteger(stringBuffer0, 1L, 633);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 100L);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 633);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 264L, 633);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 10L);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 264L, 633);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 36;
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      FormatUtils.appendPaddedInteger(stringBuffer0, 36, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FormatUtils.createErrorMessage("", 1635);
      FormatUtils.parseTwoDigits("\" is malformed at \"", 1);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) charBuffer0, 1393, 0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "";
      Locale.getISOCountries();
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 6049, 6049);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 32);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, (-25));
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 269L);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(16);
      FormatUtils.appendPaddedInteger(stringBuffer0, 10, 1659);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("0e]#");
      FormatUtils.appendPaddedInteger(stringBuffer0, 26L, 0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-973L));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits(charBuffer0, (-920));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FormatUtils.calculateDigitCount((-767L));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 0);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 0L);
      FormatUtils.calculateDigitCount(4);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter0.print('g');
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 19);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (-9223372036854775808L), 10);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-1038));
      FormatUtils.appendPaddedInteger(stringBuffer0, 969L, (-1038));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, (-560));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuffer stringBuffer0 = new StringBuffer(20);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, (long) 20, 20);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 9983, 9983);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('6');
      FormatUtils.writePaddedInteger((Writer) printWriter0, (-850), 0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, 1078L, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, (-740L), 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("9223372036854775808", true);
      FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, 267, 267);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("(/LgU4`J:)5Jc");
      FormatUtils.appendPaddedInteger(stringBuffer0, (-467L), (-2736));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) null, 2345, (-2514));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 0L, (-1));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 0L, 1131);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) null, (-3465), (-3465));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\" is too short");
      int int0 = 1;
      mockFileWriter0.getEncoding();
      FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, (-1L), 1);
      long long0 = (-1761L);
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = '/';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = '+';
      charArray0[5] = 'G';
      charArray0[6] = 's';
      charArray0[7] = '%';
      charArray0[8] = '+';
      // Undeclared exception!
      try { 
        mockFileWriter0.write(charArray0, 1, 10000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1905);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, (-9223372036854775804L), 0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      charArrayWriter0.writeTo(mockPrintWriter0);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 1L);
      mockPrintWriter0.print((String) null);
      int int0 = 2853;
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-9223372036854775808L), 2853);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("S,)kd$");
      stringBuffer0.append('x');
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      FormatUtils.appendUnpaddedInteger(stringBuffer1, (-1));
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, (-1));
      stringBuffer0.codePoints();
      long long0 = (-9223372036854775808L);
      int int0 = (-457);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-9223372036854775808L), (int) 'x');
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FormatUtils.calculateDigitCount(10000L);
      FormatUtils.calculateDigitCount(1351L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ow9QN5(R&O;O");
      FormatUtils.calculateDigitCount((-2403L));
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)103;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer1.order();
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) charBuffer1, 5);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) "Invalid format: \"";
      FormatUtils.calculateDigitCount(767L);
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) 3);
      FormatUtils.createErrorMessage("3S4`", 3);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      File file0 = MockFile.createTempFile("\"idY=+9'KgKprM", "\"idY=+9'KgKprM");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      mockFileWriter0.write("\"idY=+9'KgKprM", 2, 2);
      int int0 = 10;
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, (long) 2, 10);
      FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, 2, (-3433));
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'A';
      charArray0[2] = 'c';
      charArray0[3] = 'f';
      charArray0[4] = '!';
      charArray0[5] = 'u';
      charArray0[6] = 'L';
      charArray0[7] = 'd';
      charArray0[8] = 's';
      mockFileWriter0.write(charArray0);
      FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, (long) 10, 10);
      int int1 = 2146745173;
      // Undeclared exception!
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, 2, 2146745173);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 36;
      FormatUtils.appendPaddedInteger(stringBuffer0, 36, 36);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      try { 
        pipedOutputStream0.connect(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.newEncoder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'b';
      FormatUtils.calculateDigitCount((-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      FormatUtils.createErrorMessage("lMsY\">", 45);
      StringBuffer stringBuffer0 = new StringBuffer("lMsY\">");
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, (-112L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 45, 1448);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Invalid format: \"lMsY\">\" is too short");
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (long) 45, 45);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      charArrayWriter0.close();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      charArrayWriter0.writeTo(mockPrintWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 1L);
      StringBuffer stringBuffer0 = new StringBuffer("L");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-9223372036854775808L));
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-9223372036854775808L), 614);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\" is malformed at \"");
      FormatUtils.createErrorMessage("", 1635);
      FormatUtils.parseTwoDigits("\" is malformed at \"", 1);
      CharBuffer charBuffer0 = CharBuffer.allocate(1635);
      FormatUtils.appendPaddedInteger((Appendable) charBuffer0, 1393, 0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\" is malformed at \"");
      Object object0 = new Object();
      stringBuffer0.append(object0);
      FormatUtils.appendPaddedInteger(stringBuffer0, 1048L, (-1026));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FormatUtils.calculateDigitCount(767L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\" is malformed at \"");
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-1300L), 1393);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      FormatUtils.calculateDigitCount((-3907L));
      char[] charArray0 = new char[2];
      FormatUtils.calculateDigitCount(10L);
      charArray0[0] = '!';
      charArray0[1] = 'L';
      StringBuffer stringBuffer0 = new StringBuffer(5);
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-984), (-524.0));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -984
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("]\"2M)EXM.T1H");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "]\"2M)EXM.T1H", 0, 0);
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      stringBuffer0.append((CharSequence) stringBuffer1);
      stringBuffer0.append(true);
      stringBuffer0.append(0L);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-41));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (-41), (-41));
      FormatUtils.createErrorMessage("", 8);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, (-2791L), 32);
      FormatUtils.createErrorMessage("Invalid format: \"\" is too short", 0);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, Integer.MIN_VALUE, 0);
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("", (-41));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      charArrayWriter0.writeTo(mockPrintWriter0);
      StringBuffer stringBuffer0 = new StringBuffer();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      charArrayWriter1.write(2699);
      FormatUtils.appendPaddedInteger(stringBuffer0, 1L, 633);
      mockPrintWriter0.print(true);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 1L);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 633);
      charArrayWriter0.write("TN@8DO zY");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 264L, 633);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 10L);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 264L, 633);
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter0, (-9223372036854775808L), 633);
      assertEquals(653, charArrayWriter0.size());
  }
}
