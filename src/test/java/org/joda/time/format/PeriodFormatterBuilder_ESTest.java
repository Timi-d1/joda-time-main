/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 19:52:05 GMT 2025
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("XTXR-n");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-285), (-285), (-285), true, (-285), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XTXR-n";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("=WcfOYbkZuPD6Imq", "{^P2-)W/BysGZlB<Lq", stringArray0);
      String string0 = "";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("_58=_'hBU^ihNGa", "");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Period period0 = periodFormatter0.parsePeriod("");
      Days days0 = period0.toStandardDays();
      Days days1 = Days.standardDaysIn(days0);
      Locale locale0 = Locale.GERMAN;
      periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(days1, locale0);
      int int0 = (-1878);
      Period period1 = new Period((-618), (-618), 4, 4, (-285), (-1878), 543, 4);
      periodFormatterBuilder2.appendMinutes();
      Period period2 = period1.plusSeconds((-618));
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("Illegal instant due to time zone offset transition (daylight savings time 'gap'): ");
      periodFormatterBuilder_FieldFormatter0.getFieldValue(period2);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparatorIfFieldsBefore("");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.append((PeriodPrinter) periodFormatterBuilder_FieldFormatter0, (PeriodParser) periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -285
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(linkedList0.contains(object0));
      assertTrue(linkedList0.contains(object2));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(object0));
      assertTrue(linkedList0.contains(object2));
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotSame(object3, object0);
      assertSame(object3, object2);
      assertNotSame(object3, object1);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder7.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodPrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertEquals(51, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Hours out of range: ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1408);
      assertEquals(40, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 40);
      assertNotNull(mutablePeriod0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTime0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(hours0);
      
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(40));
      assertEquals(0, linkedList0.size());
      assertEquals(158, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literalorg.joda.time.format.PeriodFormatterBuilder$Literal0org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.chrono.AssembledChronology", "org.joda.time.chrono.AssembledChronology");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer("$}'");
      assertEquals(3, stringBuffer0.length());
      assertEquals("$}'", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-49));
      assertEquals(43, stringBuffer0.length());
      assertEquals("$}'org.joda.time.chrono.AssembledChronology", stringBuffer0.toString());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$}'";
      stringArray0[1] = "org.joda.time.chrono.AssembledChronology";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", "$}'", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-49));
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "org.joda.time.chrono.AssembledChronology", (-1628), locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean1 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(linkedList0.contains(object0));
      assertTrue(linkedList0.contains(object2));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object0));
      assertTrue(linkedList0.contains(object2));
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotSame(object3, object1);
      assertNotSame(object3, object0);
      assertSame(object3, object2);
      assertFalse(linkedList0.contains(object3));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMillis();
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder8);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder8.toPrinter();
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodPrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertEquals(51, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Hours out of range: ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1408);
      assertEquals(40, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(40, 1408, 40, 1408, 1408, 1408, 1408, 1408, (PeriodType) null);
      assertNotNull(mutablePeriod0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTime0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1342191L, duration0.getStandardHours());
      assertEquals(4831890689L, duration0.getStandardSeconds());
      assertEquals(4831890689408L, duration0.getMillis());
      assertEquals(55924L, duration0.getStandardDays());
      assertEquals(80531511L, duration0.getStandardMinutes());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1342191L, duration0.getStandardHours());
      assertEquals(4831890689L, duration0.getStandardSeconds());
      assertEquals(4831890689408L, duration0.getMillis());
      assertEquals(55924L, duration0.getStandardDays());
      assertEquals(80531511L, duration0.getStandardMinutes());
      assertEquals(1342191, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(hours0);
      
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(40));
      assertEquals(0, linkedList0.size());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literalorg.joda.time.format.PeriodFormatterBuilder$Literal1342191org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals(164, stringBuffer0.length());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1342191L, duration0.getStandardHours());
      assertEquals(4831890689L, duration0.getStandardSeconds());
      assertEquals(4831890689408L, duration0.getMillis());
      assertEquals(55924L, duration0.getStandardDays());
      assertEquals(80531511L, duration0.getStandardMinutes());
      assertEquals(1342191, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, EthiopicChronology.EE);
      
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(40));
      assertEquals(0, linkedList0.size());
      assertEquals(277, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literalorg.joda.time.format.PeriodFormatterBuilder$Literal1342191org.joda.time.format.PeriodFormatterBuilder$SimpleAffixorg.joda.time.format.PeriodFormatterBuilder$Literal1342191org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1342191L, duration0.getStandardHours());
      assertEquals(4831890689L, duration0.getStandardSeconds());
      assertEquals(4831890689408L, duration0.getMillis());
      assertEquals(55924L, duration0.getStandardDays());
      assertEquals(80531511L, duration0.getStandardMinutes());
      assertEquals(1342191, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, EthiopicChronology.EE);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("FG'");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder9);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(40, 1408, (-612484749), true, (-612484749), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      int int1 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", 2673, locale0);
      assertFalse(int1 == int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(2673, int1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(linkedList0.contains(object0));
      assertTrue(linkedList0.contains(object2));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object0));
      assertTrue(linkedList0.contains(object2));
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotSame(object3, object1);
      assertNotSame(object3, object0);
      assertSame(object3, object2);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMillis();
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder8.toPrinter();
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Locale locale0 = new Locale("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertEquals("ORG.JODA.TIME.FORMAT.PERIODFORMATTERBUILDER$SIMPLEAFFIX", locale0.getCountry());
      assertEquals("org.joda.time.format.periodformatterbuilder$simpleaffix", locale0.getLanguage());
      assertEquals("org.joda.time.format.periodformatterbuilder$simpleaffix_ORG.JODA.TIME.FORMAT.PERIODFORMATTERBUILDER$SIMPLEAFFIX", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Separator0);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      String string1 = "#M1(CwGK:L&-j~T";
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("#M1(CwGK:L&-j~T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"#M1(CwGK:L&-j~T\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotSame(object3, object1);
      assertSame(object3, object2);
      assertNotSame(object3, object0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMillis();
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder8.toPrinter();
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Separator0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.format.PeriodForma...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer("$}'");
      assertEquals(3, stringBuffer0.length());
      assertEquals("$}'", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-49));
      assertEquals(3, stringBuffer0.length());
      assertEquals("$}'", stringBuffer0.toString());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$}'";
      stringArray0[1] = "";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", "$}'", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      int int0 = periodFormatterBuilder_PluralAffix0.scan("$}'", (-1377));
      assertEquals(0, int0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.maximumParsedDigits(4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object1));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotSame(object3, object1);
      assertSame(object3, object2);
      assertNotSame(object3, object0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder5.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodPrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertEquals(51, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Hours out of range: ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1408);
      assertEquals(40, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 40);
      assertNotNull(mutablePeriod0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTime0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(hours0);
      
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal0org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals(107, stringBuffer0.length());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("XTXR-n");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-285), (-285), (-285), true, (-285), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XTXR-n";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("=WcfOYbkZuPD6Imq", "{^P2-)W/BysGZlB<Lq", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("_58=_'hBU^ihNGa", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder2);
      
      Period period0 = new Period((-618), (-618), 4, 4, (-285), (-1878), 543, 4);
      assertNotNull(period0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder3);
      
      Period period1 = period0.plusSeconds((-618));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals(9223372036854775807L, long0);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "{^P2-)W/BysGZlB<Lq";
      stringArray1[1] = "XTXR-n";
      stringArray1[2] = "=WcfOYbkZuPD6Imq";
      stringArray1[3] = "_58=_'hBU^ihNGa";
      boolean boolean1 = periodFormatterBuilder_FieldFormatter0.isZero(period0);
      assertTrue(boolean1 == boolean0);
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period0, period1);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertFalse(boolean1);
      
      stringArray1[4] = "=WcfOYbkZuPD6Imq";
      stringArray1[5] = "XTXR-n";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(linkedList0.contains(object1));
      assertTrue(linkedList0.contains(object2));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object1));
      assertTrue(linkedList0.contains(object2));
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotSame(object3, object1);
      assertSame(object3, object2);
      assertNotSame(object3, object0);
      assertFalse(linkedList0.contains(object3));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMillis();
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder8);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder8.toPrinter();
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodPrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertEquals(51, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Hours out of range: ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1408);
      assertEquals(40, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 40);
      assertNotNull(mutablePeriod0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTime0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(hours0);
      
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertFalse(linkedList0.contains(1408));
      assertEquals(0, linkedList0.size());
      assertEquals(158, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literalorg.joda.time.format.PeriodFormatterBuilder$Literal0org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, EthiopicChronology.EE);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.scan("t separa", 1);
      assertFalse(int1 == int0);
      assertEquals((-2), int1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("nt separ");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("nt separ");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) periodFormatterBuilder_SimpleAffix0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("nt separ", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(5, objectArray0.length);
      assertNotNull(printWriter0);
      
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) printWriter0, (-2428));
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(5, objectArray0.length);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotSame(object3, object0);
      assertSame(object3, object2);
      assertNotSame(object3, object1);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendMillis();
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder9);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder9.toPrinter();
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodPrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertEquals(51, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Hours out of range: ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1408);
      assertEquals(40, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 40);
      assertNotNull(mutablePeriod0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTime0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(hours0);
      
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertEquals(158, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literalorg.joda.time.format.PeriodFormatterBuilder$Literal0org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = new PeriodFormatterBuilder();
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder1));
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object1));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder0));
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertSame(object3, object2);
      assertNotSame(object3, object1);
      assertNotSame(object3, object0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertFalse(periodFormatterBuilder0.equals((Object)periodFormatterBuilder2));
      assertFalse(periodFormatterBuilder0.equals((Object)periodFormatterBuilder3));
      assertFalse(periodFormatterBuilder4.equals((Object)periodFormatterBuilder2));
      assertFalse(periodFormatterBuilder4.equals((Object)periodFormatterBuilder3));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertNotSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "CNT");
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder0));
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder4));
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder7.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder7.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder7.equals((Object)periodFormatterBuilder1));
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertNotSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertNotSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMillis();
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder8.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder8.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder8.equals((Object)periodFormatterBuilder1));
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertNotSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertNotSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder8.toPrinter();
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder8.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder8.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder8.equals((Object)periodFormatterBuilder1));
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertNotSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertNotSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertNotNull(periodPrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "CNT");
      assertEquals("CNT", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Hours out of range: ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1408);
      assertEquals(40, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 40);
      assertNotNull(mutablePeriod0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTime0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(hours0);
      
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder2.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder3.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder5.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder1));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder6.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder8.equals((Object)periodFormatterBuilder4));
      assertFalse(periodFormatterBuilder8.equals((Object)periodFormatterBuilder0));
      assertFalse(periodFormatterBuilder8.equals((Object)periodFormatterBuilder1));
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertNotSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertNotSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertNotSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertEquals(62, stringBuffer0.length());
      assertEquals("CNTCNT0org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tG@bs_?PC:%";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("vIh*#$i7>\t{", "tG@bs_?PC:%", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.append((PeriodPrinter) periodFormatterBuilder_Separator1, (PeriodParser) periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator2 = periodFormatterBuilder_Separator1.finish(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator2);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator2);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator2, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator2, periodFormatterBuilder_Separator0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator2);
      
      StringWriter stringWriter0 = new StringWriter(9);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "vIh*#$i7>\t{");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("vIh*#$i7>\t{", stringWriter0.toString());
      assertEquals("vIh*#$i7>\t{", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      Years years0 = Years.ZERO;
      assertEquals(1, years0.size());
      assertEquals(0, years0.getYears());
      assertNotNull(years0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator1.printTo((Writer) stringWriter1, (ReadablePeriod) years0, locale0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object1));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object1));
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotSame(object3, object0);
      assertSame(object3, object2);
      assertNotSame(object3, object1);
      assertFalse(linkedList0.contains(object3));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder1.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder8.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertNotNull(periodPrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertEquals(51, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Hours out of range: ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1408);
      assertEquals(40, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 40);
      assertNotNull(mutablePeriod0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTime0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(hours0);
      
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertEquals(51, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Kv>r@gg)G<tw");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      String string0 = "}*a`d<E?XM ";
      int int0 = 2324;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan("}*a`d<E?XM ", 2324);
      assertFalse(int1 == int0);
      assertEquals((-2325), int1);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("}*a`d<E?XM ", "}*a`d<E?XM ");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Kv>r@gg)G<tw";
      stringArray0[1] = "Kv>r@gg)G<tw";
      int int2 = periodFormatterBuilder_SimpleAffix0.scan("6D9z]awoT&5Wf7v\"pJ<", 4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-5), int2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 6\r
         // Kv>r@gg)G<tw\r
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer("$}'");
      assertEquals(3, stringBuffer0.length());
      assertEquals("$}'", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-49));
      assertEquals(3, stringBuffer0.length());
      assertEquals("$}'", stringBuffer0.toString());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$}'";
      stringArray0[1] = "";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", "$}'", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-49));
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains((-49)));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains((-49)));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "s3i~/fzh6c/l!", objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals(0, objectArray0.length);
      assertNotNull(printWriter0);
      
      Locale locale1 = Locale.GERMANY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo((Writer) printWriter0, (ReadablePeriod) mutablePeriod0, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertFalse(linkedList0.contains(object1));
      assertTrue(linkedList0.contains(object2));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object1));
      assertTrue(linkedList0.contains(object2));
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotSame(object3, object0);
      assertNotSame(object3, object1);
      assertSame(object3, object2);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder8.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Separator0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertEquals(51, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Separator0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
      assertNotNull(mutablePeriod0);
      
      PeriodFormatter periodFormatter1 = periodFormatterBuilder8.toFormatter();
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertNotNull(periodFormatter1);
      
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "#M1(CwGK:L&-j~T", 43, locale0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals(43, int0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Hours out of range: ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1408);
      assertFalse(int1 == int0);
      assertEquals(40, int1);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod((long) 40);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotNull(mutablePeriod1);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTime0);
      
      Duration duration0 = mutablePeriod1.toDurationTo(dateTime0);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(hours0);
      
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertEquals(158, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literalorg.joda.time.format.PeriodFormatterBuilder$Literal0org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertSame(object3, object2);
      assertNotSame(object3, object0);
      assertNotSame(object3, object1);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder8.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Separator0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertEquals(51, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Years years0 = Years.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      int int0 = periodFormatterBuilder_Separator0.countFieldsToPrint(years0, (-86399999), (Locale) null);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals(0, int0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Separator0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("#M1(CwGK:L&-j~T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"#M1(CwGK:L&-j~T\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotSame(object3, object1);
      assertSame(object3, object2);
      assertNotSame(object3, object0);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendMillis();
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder9);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder9.toPrinter();
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodPrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertEquals(51, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Hours out of range: ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1408);
      assertEquals(40, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 40);
      assertNotNull(mutablePeriod0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTime0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(hours0);
      
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertEquals(158, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literalorg.joda.time.format.PeriodFormatterBuilder$Literal0org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, EthiopicChronology.EE);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_CompositeAffix0.finish((Set<PeriodFormatterBuilder.PeriodFieldAffix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.maximumParsedDigits((-637));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.minimumPrintedDigits(50);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("atP=Y<]qE;@A|a", "zMR%");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-637), 50, (-1300), false, (-86747544), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      Months months0 = Months.ELEVEN;
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertNotNull(months0);
      
      Locale locale0 = new Locale("", "cannot have two adjacenresultingors");
      assertEquals("_CANNOT HAVE TWO ADJACENRESULTINGORS", locale0.toString());
      assertEquals("CANNOT HAVE TWO ADJACENRESULTINGORS", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("_CANNOT HAVE TWO ADJACENRESULTINGORS", locale0.toString());
      assertEquals("CANNOT HAVE TWO ADJACENRESULTINGORS", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("CANNOT HAVE TWO ADJACENRESULTINGORS", locale1.getCountry());
      assertEquals("_CANNOT HAVE TWO ADJACENRESULTINGORS", locale1.toString());
      assertNotNull(locale1);
      
      int int0 = periodFormatterBuilder_FieldFormatter1.calculatePrintedLength(months0, locale1);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals("_CANNOT HAVE TWO ADJACENRESULTINGORS", locale0.toString());
      assertEquals("CANNOT HAVE TWO ADJACENRESULTINGORS", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("CANNOT HAVE TWO ADJACENRESULTINGORS", locale1.getCountry());
      assertEquals("_CANNOT HAVE TWO ADJACENRESULTINGORS", locale1.toString());
      assertEquals(0, int0);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder1.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertNotNull(periodFormatterBuilder7);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeparator("Literal must not be null", "Literal must not be null");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Literal must not be null", "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$Literal");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.parse("o", (-2001));
      assertEquals((-2001), int0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("t");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int1 = periodFormatterBuilder_SimpleAffix0.parse("Literal must not be null", (-2001));
      assertFalse(int1 == int0);
      assertEquals(2000, int1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|V['Ll|`-N]e";
      stringArray0[1] = "|V['Ll|`-N]e";
      stringArray0[2] = "j";
      stringArray0[3] = "|V['Ll|`-N]e";
      stringArray0[4] = "America/Denver";
      stringArray0[5] = "|V['Ll|`-N]e";
      stringArray0[6] = "|V['Ll|`-N]e";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormat_DynamicWordBased0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("|V['Ll|`-N]e", "|V['Ll|`-N]e", stringArray0, periodFormat_DynamicWordBased0, periodFormatterBuilder_Literal0, false, true);
      assertEquals(7, stringArray0.length);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals(7, stringArray0.length);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder_Separator1);
      
      StringBuffer stringBuffer0 = new StringBuffer(1963);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(months0);
      
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) months0, locale0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals(7, stringArray0.length);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "e'";
      stringArray0[2] = "";
      stringArray0[3] = "e'";
      stringArray0[4] = "e'";
      stringArray0[5] = "";
      stringArray0[6] = "Cannot have two adjacent separators";
      stringArray0[7] = "e'";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "e'", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      assertEquals(8, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Period period0 = Period.millis(10);
      assertNotNull(period0);
      
      Period period1 = period0.negated();
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      Period period2 = period1.minusMinutes(0);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertSame(period1, period2);
      assertNotNull(period2);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator0.countFieldsToPrint(period2, 0, locale0);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertSame(period1, period2);
      assertEquals(8, stringArray0.length);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("{7v/y");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.calculatePrintedLength(0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits((-1689));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendLiteral(".&w6_u@fY@");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator(".&w6_u@fY@");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("MxD", "MxD");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1869, 2839, (-1689), true, 1869, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertNotNull(periodType1);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_FieldFormatter0, locale0, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.append(periodFormatter0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder5.toPrinter();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = ")RQmbkf";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(")RQmbkf");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = 3790;
      boolean boolean0 = periodFormatterBuilder_SimpleAffix0.matchesOtherAffix(3790, ")RQmbkf", 3790);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparatorIfFieldsBefore((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Months months0 = Months.THREE;
      assertEquals(3, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      periodFormatterBuilder_Literal0.printTo(stringBuffer0, (ReadablePeriod) months0, locale0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(3, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      MockFile mockFile0 = new MockFile("fwHRh^BijuFBsqe4r", "fwHRh^BijuFBsqe4r");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      periodFormatterBuilder_RegExAffix0.printTo((Writer) mockFileWriter0, 0);
      assertEquals(1, stringArray0.length);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\fwHRh^BijuFBsqe4r", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\fwHRh^BijuFBsqe4r\\fwHRh^BijuFBsqe4r", mockFile0.toString());
      assertEquals("fwHRh^BijuFBsqe4r", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      
      boolean boolean0 = periodFormatterBuilder_RegExAffix0.matchesOtherAffix(0, "WS{%SJB5~tWr<'Q", 0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("ISOChronology");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("WS{%SJB5~tWr<'Q", "ISOChronology");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroIfSupported();
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendPrefix("WS{%SJB5~tWr<'Q");
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendWeeks();
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeparatorIfFieldsBefore("");
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "j`1_i6%|79!";
      stringArray0[1] = "org.joda.time.format.PeriodFormatterBuilder$RegExAffix";
      stringArray0[2] = "U?yQ'ZV";
      stringArray0[3] = "";
      stringArray0[4] = "org.joda.time.format.PeriodFormatterBuilder$Separator";
      stringArray0[5] = "fBX4_U";
      stringArray0[6] = "nPE8#\"";
      stringArray0[7] = "'";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      periodFormatterBuilder_RegExAffix0.printTo((Writer) charArrayWriter0, 0);
      assertEquals(8, stringArray0.length);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("'", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object1));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object1));
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotSame(object3, object1);
      assertNotSame(object3, object0);
      assertSame(object3, object2);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMillis();
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder8.toPrinter();
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Separator0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertEquals(51, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Separator0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      String string1 = "#M1(CwGK:L&-j~T";
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("#M1(CwGK:L&-j~T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"#M1(CwGK:L&-j~T\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 0, true, (-1), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addHours((-1));
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "", Integer.MAX_VALUE, locale0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(Integer.MAX_VALUE, int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains((-1)));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains((-1)));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      boolean boolean0 = linkedList0.add((Object) "");
      assertFalse(linkedList0.contains((-1)));
      assertTrue(linkedList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("?<e9N;XN&oweZ", "", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_Composite0, true, true);
      assertFalse(linkedList0.contains((-1)));
      assertTrue(linkedList0.contains(""));
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertFalse(linkedList0.contains((-1)));
      assertTrue(linkedList0.contains(""));
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Separator1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertFalse(linkedList0.contains((-1)));
      assertTrue(linkedList0.contains(""));
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(1, linkedList0.size());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSuffix("?<e9N;XN&oweZ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-51);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte)36, (byte)92, (byte) (-1), (byte)51, (byte) (-91), (byte) (-51)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("i@jMo`H)^:L9", "i@jMo`H)^:L9", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
      assertFalse(linkedList0.contains((byte)36));
      assertEquals(0, stringArray0.length);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Separator0);
      
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "i@jMo`H)^:L9";
      stringArray1[1] = "X!\"@N@";
      stringArray1[2] = "Bi}Gk7";
      stringArray1[3] = "i@jMo`H)^:L9";
      stringArray1[4] = "i@jMo`H)^:L9";
      stringArray1[5] = "i@jMo`H)^:L9";
      stringArray1[6] = "i@jMo`H)^:L9";
      stringArray1[7] = "i@jMo`H)^:L9";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("i@jMo`H)^:L9", (byte) (-91));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      String string1 = "OMo }1";
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("&j;#S\"{J$0?");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer("&j;#S\"{J$0?");
      assertEquals(11, stringBuffer0.length());
      assertEquals("&j;#S\"{J$0?", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, 0);
      assertEquals("&j;#S\"{J$0?&j;#S\"{J$0?", stringBuffer0.toString());
      assertEquals(22, stringBuffer0.length());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("&j;#S\"{J$0?", "Wf");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendLiteral("&j;#S\"{J$0?");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      String string1 = "$1";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparatorIfFieldsBefore("$1");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendSeparator("AfT-6%vv]LennD", "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      int int0 = 0;
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.maximumParsedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      String string0 = "<]_{#=s";
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSuffix("<]_{#=s", "<]_{#=s");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendPrefix("<]_{#=s");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder7.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertNotNull(periodPrinter0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("r", "<]_{#=s");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.parse("l+9y-HQx", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder7.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 2\r
         // <]_{#=s\r
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Y\\|6&N4By5K/R3!";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("Y|6&N4By5K/R3!");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparator("7D})`Wi=");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSeparatorIfFieldsBefore("Y|6&N4By5K/R3!");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator("", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      int int0 = (-2543);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.minimumPrintedDigits((-2543));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendPrefix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertEquals(9, stringArray0.length);
      assertNotNull(periodFormatterBuilder6);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSeparatorIfFieldsAfter("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("$G^984%Z");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.parse("Corrupt zone info map", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix", "'%+7");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      periodFormatterBuilder_PluralAffix0.finish((Set<PeriodFormatterBuilder.PeriodFieldAffix>) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Prefix not followed by field", true);
      assertNotNull(mockFileWriter0);
      
      periodFormatterBuilder_PluralAffix0.printTo((Writer) mockFileWriter0, 86400000);
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("Prefix not followed by field");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodPrinter0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(true));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(true));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Period period0 = new Period((long) 86400000, (Chronology) null);
      assertNotNull(period0);
      
      Period period1 = period0.withDays(86400000);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      Period period2 = period1.withMillis((-608));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotNull(period2);
      
      Hours hours0 = Hours.standardHoursIn(period2);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertEquals(2073599999, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      Months months0 = Months.ONE;
      assertEquals(1, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Months months1 = Months.months(0);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      linkedList0.push(object0);
      assertTrue(linkedList0.contains(object0));
      assertFalse(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.countFieldsToPrint(months0, (-420), locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      Instant instant0 = Instant.ofEpochSecond((-3253L));
      assertEquals((-3253000L), instant0.getMillis());
      assertNotNull(instant0);
      
      Duration duration0 = Duration.standardSeconds((-3253L));
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-3253000L), duration0.getMillis());
      assertEquals((-54L), duration0.getStandardMinutes());
      assertEquals((-3253L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals((-3253000L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-3253000L), duration0.getMillis());
      assertEquals((-54L), duration0.getStandardMinutes());
      assertEquals((-3253L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-6506000L), instant1.getMillis());
      assertNotNull(instant1);
      
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-3253000L), duration0.getMillis());
      assertEquals((-54L), duration0.getStandardMinutes());
      assertEquals((-3253L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-3253), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      PeriodType periodType0 = seconds0.getPeriodType();
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-3253000L), duration0.getMillis());
      assertEquals((-54L), duration0.getStandardMinutes());
      assertEquals((-3253L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-3253), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant1, duration0, periodType0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals((-3253000L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-3253000L), duration0.getMillis());
      assertEquals((-54L), duration0.getStandardMinutes());
      assertEquals((-3253L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-6506000L), instant1.getMillis());
      assertEquals((-3253), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      PeriodType periodType1 = PeriodType.months();
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType1, periodType0);
      assertEquals("Months", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      
      int int0 = 9;
      String string0 = "{[;pn1,";
      Locale locale0 = Locale.forLanguageTag("{[;pn1,");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.calculatePrintedLength(mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[3];
      String string0 = "d@qJ?.u\\Vt*9f#";
      stringArray0[0] = "d@qJ?.uVt*9f#";
      stringArray0[1] = "";
      stringArray0[2] = "~h3h:^ggm2/A(rJQZ";
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "oM@;a";
      stringArray1[1] = "";
      stringArray1[2] = "d@qJ?.uVt*9f#";
      stringArray1[3] = "";
      stringArray1[4] = "X{h7(1o";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = " _hT<X";
      stringArray0[1] = ",cutover=";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder$Composite";
      stringArray0[3] = "l\"]r,|Cq$GT?tR";
      stringArray0[4] = "I5|;.;0FDJhpus'6wI^";
      String string0 = "u}\"5|>|H";
      stringArray0[5] = "u}\"5|>|H";
      stringArray0[6] = "Instant must not be null";
      stringArray0[7] = "Cannot have two adjacent separators";
      stringArray0[8] = "jHuE-%t>;-*6<Ks9?";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string1 = "PeriodFormat.millisecond";
      String string2 = "F;VCy<[";
      int int0 = 1455;
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.minimumPrintedDigits(1455);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("PeriodFormat.millisecond", "F;VCy<[");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("AYJsK\"p_L?_", "AYJsK\"p_L?_");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "\\t.N3t$u-V_";
      stringArray0[4] = "";
      stringArray0[5] = "";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, false, false);
      assertFalse(linkedList0.contains(""));
      assertEquals(6, stringArray0.length);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      Days days0 = minutes0.toStandardDays();
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1491308, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.calculatePrintedLength(days0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "=2hCst";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("=2hCst");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      int int0 = periodFormatterBuilder_SimpleAffix0.parse("=2hCst", 4);
      assertEquals((-5), int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("jispS+");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.parse("X#M:ZqNN|$", (-13));
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("4/por&QO-:E#,", "4/por&QO-:E#,");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "4/por&QO-:E#,";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "4/por&QO-:E#,";
      stringArray0[5] = "=;|aa(c&;aEWYp";
      stringArray0[6] = "4/por&QO-:E#,";
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSeparator("4/por&QO-:E#,", (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("c", "BHTM(");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.scan("uV&44", (-267));
      assertEquals(266, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(":kI?$M&ux");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Minutes minutes0 = Minutes.TWO;
      assertEquals(2, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Literal0.countFieldsToPrint(minutes0, 25, locale0);
      assertEquals(2, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(0, int0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(".+8fk{UB:y^q}hl", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        periodFormatterBuilder_PluralAffix0.printTo((Writer) pipedWriter0, (-2424));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Days days0 = Days.SIX;
      assertEquals(6, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertFalse(linkedList1.contains(locale0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      assertFalse(linkedList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(linkedList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertFalse(linkedList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      int int0 = periodFormatterBuilder_Literal0.calculatePrintedLength(days0, locale0);
      assertEquals(6, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(0, int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "$cGFWF|\"j=Ht";
      stringArray0[2] = "";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("$cGFWF|\"j=Ht", "", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("");
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMinutes();
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.rejectSignedValues(true);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("year", "year");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.scan("", 37);
      assertEquals((-38), int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("year"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains("year"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      Months months0 = Months.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = new Locale("k;YY ^R7zhi(", "yearOfCentury");
      assertEquals("k;yy ^r7zhi(", locale0.getLanguage());
      assertEquals("YEAROFCENTURY", locale0.getCountry());
      assertEquals("k;yy ^r7zhi(_YEAROFCENTURY", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.parseInto(mutablePeriod0, "C+|K&jbpf", 0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("2&$;f@VcgtJBT4bH]%", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(10000L, 10000L, periodType0, (Chronology) null);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.forLanguageTag("]{%\"Gxf[z7{c)");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.parseInto(mutablePeriod0, "", 17971875, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "Literal must not be null";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Literal must not be null", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet1 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      
      String string1 = "";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix1 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertFalse(periodFormatterBuilder_PluralAffix1.equals((Object)periodFormatterBuilder_PluralAffix0));
      assertNotNull(periodFormatterBuilder_PluralAffix1);
      
      boolean boolean0 = linkedHashSet1.add(periodFormatterBuilder_PluralAffix1);
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(periodFormatterBuilder_PluralAffix1.equals((Object)periodFormatterBuilder_PluralAffix0));
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertNotSame(periodFormatterBuilder_PluralAffix1, periodFormatterBuilder_PluralAffix0);
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertTrue(boolean0);
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet1);
      assertFalse(periodFormatterBuilder_PluralAffix0.equals((Object)periodFormatterBuilder_PluralAffix1));
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertNotSame(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix2 = new PeriodFormatterBuilder.PluralAffix("", "Literal must not be null");
      assertFalse(periodFormatterBuilder_PluralAffix2.equals((Object)periodFormatterBuilder_PluralAffix1));
      assertFalse(periodFormatterBuilder_PluralAffix2.equals((Object)periodFormatterBuilder_PluralAffix0));
      assertNotNull(periodFormatterBuilder_PluralAffix2);
      
      int int0 = periodFormatterBuilder_PluralAffix0.parse("", 0);
      assertFalse(periodFormatterBuilder_PluralAffix0.equals((Object)periodFormatterBuilder_PluralAffix2));
      assertFalse(periodFormatterBuilder_PluralAffix0.equals((Object)periodFormatterBuilder_PluralAffix1));
      assertNotSame(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix2);
      assertNotSame(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix1);
      assertEquals(0, int0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix1, periodFormatterBuilder_PluralAffix1);
      assertFalse(periodFormatterBuilder_PluralAffix1.equals((Object)periodFormatterBuilder_PluralAffix0));
      assertFalse(periodFormatterBuilder_PluralAffix1.equals((Object)periodFormatterBuilder_PluralAffix2));
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_CompositeAffix0.printTo((StringBuffer) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("?ibsBMs", (String) null, (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Months months0 = Months.SIX;
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertNotNull(months0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.calculatePrintedLength(months0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("E\"mt:[:4'V]vX9oGG");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "E\"mt:[:4'V]vX9oGG";
      stringArray0[1] = "E\"mt:[:4'V]vX9oGG";
      stringArray0[2] = "E\"mt:[:4'V]vX9oGG";
      stringArray0[3] = "org.joda.time.DateTimeZone.NameProvider";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      boolean boolean0 = periodFormatterBuilder_CompositeAffix0.matchesOtherAffix((-187), "org.joda.time.field.PreciseDurationDateTimeField", 0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(">78G*h_", ">78G*h_");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ">78G*h_");
      assertEquals(7, stringBuffer0.length());
      assertEquals(">78G*h_", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, 1784);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("1784>78G*h_", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
      assertEquals("1784>78G*h_", stringBuffer1.toString());
      assertEquals(11, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      
      int int0 = (-503);
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, (-503));
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals(25, stringBuffer0.length());
      assertEquals("1784>78G*h_>78G*h_>78G*h_", stringBuffer0.toString());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(751);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparatorIfFieldsBefore("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder";
      stringArray0[3] = ">78G*h_";
      stringArray0[4] = "J]cAjB8/!l9`Uw%|";
      stringArray0[5] = "";
      stringArray0[6] = "org.joda.time.format.PeriodFormatterBuilder";
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSeparator(">78G*h_", "org.joda.time.format.PeriodFormatterBuilder", stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Builder has created neither a printer nor a parser";
      stringArray0[3] = "org.joda.time.format.DateTimeFormat$StyleFormatter";
      stringArray0[4] = "Cnm";
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendSeparator("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = "No formatter supplied";
      stringArray0[2] = "No formatter supplied";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder3);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSeparator("No formatter supplied", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = ";Tq{7 Sj";
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";Tq{7 Sj";
      stringArray0[1] = ";Tq{7 Sj";
      stringArray0[2] = ";Tq{7 Sj";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(";Tq{7 Sj", ";Tq{7 Sj", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, true);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Hours hours0 = minutes0.toStandardHours();
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(35791394, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("null", stringWriter0.toString());
      assertEquals("null", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      periodFormatterBuilder_Literal0.printTo((Writer) stringWriter1, (ReadablePeriod) hours0, locale0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(35791394, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals("null", stringWriter0.toString());
      assertEquals("null", stringWriter1.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.countFieldsToPrint(hours0, 23, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "days";
      stringArray0[1] = "Literal must not be null";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("days"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains("days"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Literal must not be null", "days", stringArray0, (PeriodPrinter) null, periodFormatterBuilder_Composite0, false, false);
      assertFalse(linkedList0.contains("Literal must not be null"));
      assertEquals(2, stringArray0.length);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.countFieldsToPrint((ReadablePeriod) null, (-152), locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")";
      stringArray0[1] = ")";
      stringArray0[2] = ")";
      stringArray0[3] = ")";
      stringArray0[4] = ")";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(")", ")", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(495L, (-1160L));
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      MockFile mockFile0 = new MockFile("org.joda.time.chrono.LimitChronology", ")");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "org.joda.time.chrono.LimitChronology");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", (Object[]) stringArray0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(5, stringArray0.length);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(")", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\org.joda.time.chrono.LimitChronology", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\org.joda.time.chrono.LimitChronology\\)", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\org.joda.time.chrono.LimitChronology\\)", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("org.joda.time.chrono.LimitChronology", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\org.joda.time.chrono.LimitChronology\\)\\org.joda.time.chrono.LimitChronology", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canExecute());
      assertNotNull(printWriter0);
      
      periodFormatterBuilder_Literal0.printTo((Writer) printWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(5, stringArray0.length);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(")", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\org.joda.time.chrono.LimitChronology", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\org.joda.time.chrono.LimitChronology\\)", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\org.joda.time.chrono.LimitChronology\\)", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("org.joda.time.chrono.LimitChronology", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\org.joda.time.chrono.LimitChronology\\)\\org.joda.time.chrono.LimitChronology", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canExecute());
      
      int int0 = periodFormatterBuilder_Separator1.parseInto(mutablePeriod0, ")", 909, locale0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals(5, stringArray0.length);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals((-910), int0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ")");
      assertEquals(")", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Locale locale1 = Locale.JAPAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JPN", locale1.getISO3Country());
      assertNotNull(locale1);
      
      periodFormatterBuilder_Literal0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals(")", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("", locale1.getVariant());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JPN", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("No formatter supplied");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Hours hours0 = Hours.THREE;
      assertEquals(1, hours0.size());
      assertEquals(3, hours0.getHours());
      assertNotNull(hours0);
      
      PeriodType periodType0 = hours0.getPeriodType();
      assertEquals(1, hours0.size());
      assertEquals(3, hours0.getHours());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(1270L, periodType0, (Chronology) iSOChronology0);
      assertEquals(1, hours0.size());
      assertEquals(3, hours0.getHours());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      Locale locale0 = new Locale("No formatter supplied");
      assertEquals("", locale0.getVariant());
      assertEquals("no formatter supplied", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("no formatter supplied", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      periodFormatterBuilder_Literal0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals("No formatter supplied", stringBuffer0.toString());
      assertEquals(21, stringBuffer0.length());
      assertEquals(1, hours0.size());
      assertEquals(3, hours0.getHours());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("no formatter supplied", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("no formatter supplied", locale0.toString());
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "B\u0003}Qt)@1L";
      stringArray0[1] = "B\u0003}Qt)@1L";
      stringArray0[2] = "B\u0003}Qt)@1L";
      stringArray0[3] = "B\u0003}Qt)@1L";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("B\u0003}Qt)@1L"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains("B\u0003}Qt)@1L"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("B\u0003}Qt)@1L", "B\u0003}Qt)@1L", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      assertFalse(linkedList0.contains("B\u0003}Qt)@1L"));
      assertEquals(4, stringArray0.length);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertFalse(linkedList0.contains("B\u0003}Qt)@1L"));
      assertEquals(4, stringArray0.length);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Separator1);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "B\u0003}Qt)@1L");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // B\u0003}Qt)@1L
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = ")o ~\"fds*jFfKP.^";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(")o ~\"fds*jFfKP.^", ")o ~\"fds*jFfKP.^");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      String string1 = "+B57Bv|#ZcdxmUcf+";
      int int0 = 0;
      int int1 = periodFormatterBuilder_PluralAffix0.parse("+B57Bv|#ZcdxmUcf+", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(")o ~\"fds*jFfKP.^");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      periodFormatterBuilder1.clear();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      periodFormatterBuilder3.clear();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      
      String string2 = "Literal must not be null";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendPrefix("Literal must not be null");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparator(")o ~\"fds*jFfKP.^");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("XTXR-n");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-285), (-285), (-285), true, (-285), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "{^P2-)W/BysGZlB<Lq";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XTXR-n";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("=WcfOYbkZuPD6Imq", "{^P2-)W/BysGZlB<Lq", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder1);
      
      String string1 = "_58=_'hBU^ihNGa";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("_58=_'hBU^ihNGa", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparatorIfFieldsBefore("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.append((PeriodPrinter) periodFormatterBuilder_FieldFormatter0, (PeriodParser) periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -285
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder$PluralAffix";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$PluralAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeparator("sd9n;wb\"eat?i", "sd9n;wb\"eat?i", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("=-`THNOpd", "G)|9a]E?~N7N+BP");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.parse("", 5719);
      assertEquals((-5720), int0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_CompositeAffix0.getAffixes();
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparator("", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendSeparator("m3d{&yl):-7\"K@");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = new StringBuilder(stringBuilder0);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0, 0, 0);
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertEquals("", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.append(1095.9517F);
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder3.equals((Object)stringBuilder0));
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", stringBuilder0.toString());
      assertEquals("1095.9517", stringBuilder1.toString());
      assertEquals("1095.9517", stringBuilder2.toString());
      assertEquals("1095.9517", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuilder3);
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(stringBuilder0.equals((Object)stringBuilder3));
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder3.equals((Object)stringBuilder0));
      assertSame(charArrayWriter0, charArrayWriter1);
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(9, charArrayWriter0.size());
      assertEquals("1095.9517", charArrayWriter0.toString());
      assertEquals("", stringBuilder0.toString());
      assertEquals("1095.9517", stringBuilder1.toString());
      assertEquals("1095.9517", stringBuilder2.toString());
      assertEquals("1095.9517", stringBuilder3.toString());
      assertEquals(9, charArrayWriter1.size());
      assertEquals("1095.9517", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      
      Period period0 = Period.weeks(4);
      assertNotNull(period0);
      
      Period period1 = period0.minusSeconds(4);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      periodFormatterBuilder_Literal0.printTo((Writer) charArrayWriter1, (ReadablePeriod) period1, locale0);
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(stringBuilder0.equals((Object)stringBuilder3));
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder3.equals((Object)stringBuilder0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertSame(charArrayWriter0, charArrayWriter1);
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(9, charArrayWriter0.size());
      assertEquals("1095.9517", charArrayWriter0.toString());
      assertEquals("", stringBuilder0.toString());
      assertEquals("1095.9517", stringBuilder1.toString());
      assertEquals("1095.9517", stringBuilder2.toString());
      assertEquals("1095.9517", stringBuilder3.toString());
      assertEquals(9, charArrayWriter1.size());
      assertEquals("1095.9517", charArrayWriter1.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("", "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      int int0 = Integer.MAX_VALUE;
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.maximumParsedDigits(Integer.MAX_VALUE);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendPrefix((String) null, "hCY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-532), 1, 8, false, 1, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      Hours hours0 = Hours.EIGHT;
      assertEquals(8, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals(8, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Duration duration0 = weeks0.toStandardDuration();
      assertEquals(8, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.dividedBy((long) 8);
      assertTrue(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(8, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertNotNull(duration1);
      
      Minutes minutes0 = hours0.toStandardMinutes();
      assertEquals(8, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(480, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      Hours hours1 = duration0.toStandardHours();
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(hours1.equals((Object)hours0));
      assertNotSame(hours0, hours1);
      assertNotSame(duration0, duration1);
      assertNotSame(hours1, hours0);
      assertEquals(8, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertNotNull(hours1);
      
      Hours hours2 = duration1.toStandardHours();
      assertFalse(hours0.equals((Object)hours1));
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(hours2.equals((Object)hours0));
      assertNotSame(hours0, hours1);
      assertNotSame(hours0, hours2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(hours2, hours0);
      assertSame(hours2, hours1);
      assertEquals(8, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0, hours2.getHours());
      assertEquals(1, hours2.size());
      assertNotNull(hours2);
      
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(hours2);
      assertFalse(hours0.equals((Object)hours1));
      assertFalse(hours0.equals((Object)hours2));
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(hours2.equals((Object)hours0));
      assertNotSame(hours0, hours1);
      assertNotSame(hours0, hours2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(hours2, hours0);
      assertSame(hours2, hours1);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals(8, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0, hours2.getHours());
      assertEquals(1, hours2.size());
      assertEquals(9223372036854775807L, long0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMillis3Digit();
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMillis();
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder6);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Days days0 = Days.SIX;
      assertEquals(6, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(6, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Literal0.parseInto(mutablePeriod0, "", 0, locale0);
      assertEquals(6, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals(0, int0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(374);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.maximumParsedDigits(5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.minimumPrintedDigits(5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      String string0 = "7\\gtwYE<";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("7gtwYE<");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = Locale.forLanguageTag("7gtwYE<");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder1.appendSeparator("7gtwYE<");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.maximumParsedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertNotNull(periodFormatter1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix((String[]) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      int int0 = Integer.MAX_VALUE;
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.maximumParsedDigits(Integer.MAX_VALUE);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendPrefix((String) null, "hCY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i~/fZh6C";
      stringArray0[1] = "";
      stringArray0[2] = "Types array must not contain null";
      stringArray0[3] = "D9N;wB\"eaT?I";
      stringArray0[4] = "org.joda.time.format.PeriodFormatterBuilder$Composite";
      stringArray0[5] = "j10OVC^6R*";
      stringArray0[6] = "Cannot have two adjacent separators";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = periodFormatterBuilder_RegExAffix0.scan("", 6);
      assertEquals(7, stringArray0.length);
      assertEquals((-7), int0);
      
      int int1 = periodFormatterBuilder_RegExAffix0.scan("S3c><nygxs/l!", (-7));
      assertFalse(int1 == int0);
      assertEquals(7, stringArray0.length);
      assertEquals(0, int1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, (-1539));
      assertEquals(7, stringArray0.length);
      assertEquals(35, stringBuffer0.length());
      assertEquals("Cannot have two adjacent separators", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "org.joda.time.field.DecoratedDurationField";
      stringArray0[2] = " and ";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      String[] stringArray1 = periodFormatterBuilder_RegExAffix0.getAffixes();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, 0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(" and ", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      
      int int0 = periodFormatterBuilder_RegExAffix0.parse("No formatter supplied", 1237);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals((-1238), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("u*YP1?',m*:$_");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addSeconds(0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Locale locale0 = new Locale("e^sC@{` QD}?a> &@");
      assertEquals("e^sc@{` qd}?a> &@", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("e^sc@{` qd}?a> &@", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Literal0.parseInto(mutablePeriod0, "u*YP1?',m*:$_", 0, locale0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("e^sc@{` qd}?a> &@", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("e^sc@{` qd}?a> &@", locale0.toString());
      assertEquals(13, int0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("e^sC@{` QD}?a> &@", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = (-732);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits((-732));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      periodFormatterBuilder1.clear();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.minimumPrintedDigits((-732));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparatorIfFieldsAfter("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("jfC>n1", "jfC>n1");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.parse("jfC>n1", 0);
      assertEquals(6, int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.joda.time.chrono.ZonedChronology$ZonedDurationField";
      stringArray0[1] = "org.joda.time.chrono.ZonedChronology$ZonedDurationField";
      stringArray0[2] = "KPv@f5Vgza~4I_r|W";
      stringArray0[3] = "org.joda.time.chrono.ZonedChronology$ZonedDurationField";
      stringArray0[4] = "jfC>n1";
      stringArray0[5] = "jfC>n1";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("org.joda.time.chrono.ZonedChronology$ZonedDurationField", "KPv@f5Vgza~4I_r|W", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertEquals(6, stringArray0.length);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("org.joda.time.chrono.ZonedChronology$ZonedDurationField");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertEquals(6, stringArray0.length);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.minimumPrintedDigits((-892));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertEquals(6, stringArray0.length);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendLiteral("=~O/;n|+mP`[,X");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertEquals(6, stringArray0.length);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertEquals(6, stringArray0.length);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendPrefix("jfC>n1", "org.joda.time.chrono.ZonedChronology$ZonedDurationField");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertEquals(6, stringArray0.length);
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      String string0 = ":(tP]e49i@wDLB7+W";
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendPrefix(":(tP]e49i@wDLB7+W", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      String string1 = "O:fA~dV5sGhk24";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(":(tP]e49i@wDLB7+W"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(":(tP]e49i@wDLB7+W"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      int int0 = 970;
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.maximumParsedDigits(970);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter(" < ");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodParser periodParser0 = periodFormatterBuilder1.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertNotNull(periodParser0);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendLiteral("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodParser periodParser1 = periodFormatterBuilder0.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodParser1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = " < ";
      stringArray0[2] = " < ";
      stringArray0[3] = " < ";
      stringArray0[4] = " < ";
      stringArray0[5] = "";
      stringArray0[6] = " < ";
      stringArray0[7] = "";
      stringArray0[8] = "DNra0=*)";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = null;
      try {
        periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 6\r
         // DNra0=*)\r
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("c4sc;nYyJC", "c4sc;nYyJC");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "c4sc;nYyJC";
      stringArray0[1] = "c4sc;nYyJC";
      stringArray0[2] = "c4sc;nYyJC";
      stringArray0[3] = "c4sc;nYyJC";
      stringArray0[4] = "y;e*~iv";
      stringArray0[5] = "c4sc;nYyJC";
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "c4sc;nYyJC";
      stringArray1[1] = "c4sc;nYyJC";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendPrefix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits((-3060));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "The time must not be null";
      stringArray0[3] = "UTC chronology must not be null";
      stringArray0[4] = "";
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.minimumPrintedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendPrefix(stringArray0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "T=z(ae\" p j=8,b^");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      MockFile mockFile0 = new MockFile("T=z(ae\" p j=8,b^");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("*-mW|L", "", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("T=z(ae\" p j=8,b^", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals("T=z(ae\" p j=8,b^", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("*-mW|L0", file0.getName());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\T=z(ae\" p j=8,b^", file0.getParent());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\T=z(ae\" p j=8,b^\\*-mW|L0", file0.toString());
      assertNotNull(file0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockFileWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('x');
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("T=z(ae\" p j=8,b^", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals("T=z(ae\" p j=8,b^", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("*-mW|L0", file0.getName());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\T=z(ae\" p j=8,b^", file0.getParent());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\T=z(ae\" p j=8,b^\\*-mW|L0", file0.toString());
      assertNotNull(printWriter0);
      
      periodFormatterBuilder_PluralAffix0.printTo((Writer) printWriter0, 83);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("T=z(ae\" p j=8,b^", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals("T=z(ae\" p j=8,b^", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("*-mW|L0", file0.getName());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\T=z(ae\" p j=8,b^", file0.getParent());
      assertEquals("C:\\Users\\Anusha Masroor\\Documents\\EECS4313Project2\\joda-time-main\\T=z(ae\" p j=8,b^\\*-mW|L0", file0.toString());
      
      int int0 = periodFormatterBuilder_PluralAffix0.parse("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", 0);
      assertEquals(55, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", (String) null);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_PluralAffix0.parse("", (-1748));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(". .(|3hT -VoyyjyA9", ". .(|3hT -VoyyjyA9");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendPrefix("(>XX*+@-+!wE");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodParser periodParser0 = periodFormatterBuilder4.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodParser0);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.minimumPrintedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendSeparator(". .(|3hT -VoyyjyA9");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendPrefix(". .(|3hT -VoyyjyA9", ". .(|3hT -VoyyjyA9");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertNotNull(periodFormatterBuilder8);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("UnsupportedDurationField[", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.scan("/", 1994);
      assertEquals((-1995), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("![&3@~ )", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('s');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("s", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("s", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      assertNotNull(charArrayWriter1);
      
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) charArrayWriter1, (-2537));
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("s", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("s", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsBefore("![&3@~ )");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendLiteral("):WRX.)UN");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "![&3@~ )";
      stringArray0[1] = "";
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "![&3@~ )";
      stringArray1[1] = "![&3@~ )";
      stringArray1[2] = "![&3@~ )";
      stringArray1[3] = "):WRX.)UN";
      stringArray1[4] = "):WRX.)UN";
      stringArray1[5] = "![&3@~ )";
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSuffix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator("", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      int int0 = (-2543);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.minimumPrintedDigits((-2543));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[1] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("d", "d");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("d");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparatorIfFieldsBefore("d");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSuffix("d");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSuffix("d", "d");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder8);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer("$}'");
      assertEquals("$}'", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-49));
      assertEquals("$}'", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$}'";
      stringArray0[1] = "";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", "$}'", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-49));
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "", (-1642), locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        Weeks.parseWeeks("'R^6K:d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"'R^6K:d\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("*^&SoKT5fAF", "OiqwXxf4x7;c-M<w");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(400, (-999), (-999), true, (-2007), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.finish((PeriodFormatterBuilder.FieldFormatter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "\"CbFm6@TkSFcs-%o_L";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("\"CbFm6@TkSFcs-%o_L");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("\"CbFm6@TkSFcs-%o_L", 0);
      assertEquals(0, int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      String string1 = "9G'a752;Agj";
      String string2 = "jZ.;q";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendSeparator("9G'a752;Agj", "jZ.;q");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder3.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder3.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.minimumPrintedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder9);
      
      PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder9.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder10);
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = "9G'a752;Agj";
      stringArray0[1] = "\"CbFm6@TkSFcs-%o_L";
      stringArray0[2] = "9G'a752;Agj";
      stringArray0[3] = "9G'a752;Agj";
      stringArray0[4] = "as@uI?r[YADqGhG/L";
      stringArray0[5] = "Literal must not be null";
      // Undeclared exception!
      try { 
        periodFormatterBuilder6.appendSeparator("Literal must not be null", "jZ.;q", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("\"CbFm6@TkFcs-%o_L");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("\"CbFm6@TkFcs-%o_L", 0);
      assertEquals(0, int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendSeparator("9G'a752;Agj", "jZ.;q");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder3.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder3.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.minimumPrintedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertNotNull(periodFormatterBuilder9);
      
      PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder9.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder8);
      assertNotNull(periodFormatterBuilder10);
      
      PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder8);
      assertNotNull(periodFormatterBuilder11);
      
      PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder11.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder9);
      assertNotNull(periodFormatterBuilder12);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("\"CbFm6@TkFcs-%o_L", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int1 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder0.maximumParsedDigits(187);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder13);
      
      PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder9.appendWeeks();
      assertSame(periodFormatterBuilder14, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertNotNull(periodFormatterBuilder14);
      
      PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertNotNull(periodFormatterBuilder15);
      
      PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder14.appendMillis3Digit();
      assertSame(periodFormatterBuilder14, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertNotNull(periodFormatterBuilder16);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9G'a752;Agj";
      stringArray0[1] = "";
      stringArray0[2] = "\"CbFm6@TkFcs-%o_L";
      stringArray0[3] = "jZ.;q";
      stringArray0[4] = "";
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, 187);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix1 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertFalse(periodFormatterBuilder_SimpleAffix1.equals((Object)periodFormatterBuilder_SimpleAffix0));
      assertNotNull(periodFormatterBuilder_SimpleAffix1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = stringBuffer0.append('6');
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("6", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals(1, stringBuffer1.length());
      assertEquals("6", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      
      periodFormatterBuilder_SimpleAffix1.printTo(stringBuffer0, 0);
      assertFalse(periodFormatterBuilder_SimpleAffix1.equals((Object)periodFormatterBuilder_SimpleAffix0));
      assertNotSame(periodFormatterBuilder_SimpleAffix1, periodFormatterBuilder_SimpleAffix0);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals("6org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertEquals(52, stringBuffer0.length());
      
      periodFormatterBuilder_SimpleAffix1.finish(linkedHashSet0);
      assertFalse(periodFormatterBuilder_SimpleAffix1.equals((Object)periodFormatterBuilder_SimpleAffix0));
      assertNotSame(periodFormatterBuilder_SimpleAffix1, periodFormatterBuilder_SimpleAffix0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add(periodFormatterBuilder_SimpleAffix1);
      assertFalse(periodFormatterBuilder_SimpleAffix1.equals((Object)periodFormatterBuilder_SimpleAffix0));
      assertNotSame(periodFormatterBuilder_SimpleAffix1, periodFormatterBuilder_SimpleAffix0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      assertFalse(periodFormatterBuilder_SimpleAffix0.equals((Object)periodFormatterBuilder_SimpleAffix1));
      assertNotSame(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_SimpleAffix0.scan("org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix", (-2486));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "vf.G=I/|.Ck";
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNotNull(periodPrinter0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      String string0 = null;
      String string1 = "No field to apply suffix to";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "No field to apply suffix to";
      stringArray0[1] = "No field to apply suffix to";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendPrefix("Partial cannot be null", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("DPF'pl(aml8nwSbHzzT", "DPF'pl(aml8nwSbHzzT");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1411, 60000, 25734375, false, (-2085), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(" and ", false);
      assertNotNull(mockFileWriter0);
      
      Seconds seconds0 = Seconds.THREE;
      assertEquals(3, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      periodFormatterBuilder_FieldFormatter1.printTo((Writer) mockFileWriter0, (ReadablePeriod) seconds0, locale0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertEquals(3, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      
      Days days0 = Days.ZERO;
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      Locale locale2 = locale1.stripExtensions();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zh_TW", locale2.toString());
      assertNotNull(locale2);
      
      int int0 = periodFormatterBuilder_FieldFormatter1.countFieldsToPrint(days0, 44, locale2);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zh_TW", locale2.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("DPF'pl(aml8nwSbHzzT", "DPF'pl(aml8nwSbHzzT");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1411, 60000, 25734375, false, (-2085), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      Days days0 = Days.ZERO;
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertNotNull(days0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertNotNull(locale1);
      
      int int0 = periodFormatterBuilder_FieldFormatter1.countFieldsToPrint(days0, 44, locale1);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Values array must be the same length as the types array");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.calculatePrintedLength(957);
      assertEquals(55, int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("Values array must be the same length as the types array");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder5.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder6);
      
      periodFormatterBuilder6.clear();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      
      String[] stringArray0 = new String[3];
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparator("Values array must be the same length as the types array", "Values array must be the same length as the types array", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder7);
      
      String string0 = "org\u0000joda\u0000time\u0000field\u0000DecoratedDurationField";
      stringArray0[0] = "org\u0000joda\u0000time\u0000field\u0000DecoratedDurationField";
      stringArray0[1] = "Values array must be the same length as the types array";
      stringArray0[2] = "Values array must be the same length as the types array";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int1 = periodFormatterBuilder_RegExAffix0.parse("org\u0000joda\u0000time\u0000field\u0000DecoratedDurationField", 55);
      assertFalse(int1 == int0);
      assertEquals(3, stringArray0.length);
      assertEquals((-56), int1);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder8);
      
      String string1 = "<ro";
      int int2 = periodFormatterBuilder_RegExAffix0.calculatePrintedLength(268);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3, stringArray0.length);
      assertEquals(55, int2);
      
      int int3 = periodFormatterBuilder_RegExAffix0.parse("<ro", 268);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(3, stringArray0.length);
      assertEquals((-269), int3);
      
      // Undeclared exception!
      periodFormatterBuilder_RegExAffix0.scan("<ro", (-3274));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringBuffer stringBuffer0 = new StringBuffer("$}'");
      assertEquals(3, stringBuffer0.length());
      assertEquals("$}'", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix((String) null);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("o", "o");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_CompositeAffix0.calculatePrintedLength((-49));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "PeriodFormat.milliseconds.list";
      stringArray0[2] = "wa\"7`SLwhq0h";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = periodFormatterBuilder_RegExAffix0.calculatePrintedLength(0);
      assertEquals(3, stringArray0.length);
      assertEquals(12, int0);
      
      int int1 = periodFormatterBuilder_RegExAffix0.parse("wa\"7`SLwhq0h", 673);
      assertFalse(int1 == int0);
      assertEquals(3, stringArray0.length);
      assertEquals((-674), int1);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendSuffix("wa\"7`SLwhq0h");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendSuffix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder7.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertEquals(3, stringArray0.length);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      String[] stringArray1 = periodFormatterBuilder_RegExAffix0.getAffixes();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray1);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "wa\"7`SLwhq0h", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      Period period0 = new Period(1732L, (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(period0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, 1781);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      String[] stringArray0 = periodFormatterBuilder_SimpleAffix0.getAffixes();
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = periodFormatterBuilder_RegExAffix0.parse("", 0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.minimumPrintedDigits(43);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendSeparatorIfFieldsAfter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer("$}'");
      assertEquals("$}'", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-49));
      assertEquals("$}'", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "d";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("d", "d");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormat_DynamicWordBased0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("d", "FRz{6{VAx^SueUe3", (String[]) null, periodFormatterBuilder_Literal0, periodFormat_DynamicWordBased0, true, true);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder_Separator0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("d"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains("d"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertFalse(linkedList0.contains("d"));
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.maximumParsedDigits(5062500);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder6);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder6.appendSuffix("d");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertTrue(linkedList0.contains(object2));
      assertFalse(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotSame(object3, object0);
      assertSame(object3, object2);
      assertNotSame(object3, object1);
      assertFalse(linkedList0.contains(object2));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder8);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder8.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodPrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertEquals(51, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Hours out of range: ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1408);
      assertEquals(40, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(40, 40, 1408, 1408, 40, 40, 1408, 40, (PeriodType) null);
      assertNotNull(mutablePeriod0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTime0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(2332947808040L, duration0.getMillis());
      assertEquals(27001L, duration0.getStandardDays());
      assertEquals(2332947808L, duration0.getStandardSeconds());
      assertEquals(38882463L, duration0.getStandardMinutes());
      assertEquals(648041L, duration0.getStandardHours());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(2332947808040L, duration0.getMillis());
      assertEquals(27001L, duration0.getStandardDays());
      assertEquals(2332947808L, duration0.getStandardSeconds());
      assertEquals(38882463L, duration0.getStandardMinutes());
      assertEquals(648041L, duration0.getStandardHours());
      assertEquals(648041, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(hours0);
      
      // Undeclared exception!
      try { 
        periodPrinter0.printTo((StringBuffer) null, (ReadablePeriod) hours0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.minimumPrintedDigits((-478));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSuffix("Millis", "Millis");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendPrefix(";;0OK$zbYKAzV`SE", ";;0OK$zbYKAzV`SE");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder5.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(";t+fvNRe-gHB4:&^a");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer("DateTimeZone.setNameProvider");
      assertEquals(28, stringBuffer0.length());
      assertEquals("DateTimeZone.setNameProvider", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, (-223));
      assertEquals("DateTimeZone.setNameProvider;t+fvNRe-gHB4:&^a;t+fvNRe-gHB4:&^a", stringBuffer0.toString());
      assertEquals(64, stringBuffer0.length());
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsBefore("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ";t+fvNRe-gHB4:&^a";
      stringArray0[3] = "";
      stringArray0[4] = "DateTimeZone.setNameProvider";
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "No field to apply suffix to";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      periodFormatterBuilder_RegExAffix0.finish(linkedHashSet0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      int int0 = periodFormatterBuilder_RegExAffix0.scan("|k", 55);
      assertEquals(1, stringArray0.length);
      assertEquals((-56), int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-582), (-56), (-56), true, 55, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      assertEquals(1, stringArray0.length);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertEquals(1, stringArray0.length);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormat_DynamicWordBased0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter1 = new PeriodFormatter(periodFormat_DynamicWordBased0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(periodFormatter1);
      
      PeriodFormatter periodFormatter2 = periodFormatter1.withLocale(locale0);
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertSame(periodFormatter1, periodFormatter2);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotSame(periodFormatter2, periodFormatter0);
      assertSame(periodFormatter2, periodFormatter1);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter0, periodFormatter2);
      assertEquals(1, stringArray0.length);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter2.isParser());
      assertTrue(periodFormatter2.isPrinter());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(periodFormatter2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.append(periodFormatter2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = "ISO";
      boolean boolean0 = linkedList0.add((Object) "ISO");
      assertTrue(linkedList0.contains("ISO"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) "ISO");
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains("ISO"));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertTrue(linkedList0.contains("ISO"));
      assertEquals(2, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      String string1 = "z}.XetA?)kK5-7`_-";
      int int0 = 0;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertTrue(linkedList0.contains("ISO"));
      assertEquals(2, linkedList0.size());
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertTrue(linkedList0.contains("ISO"));
      assertEquals(2, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertTrue(linkedList0.contains("ISO"));
      assertEquals(2, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = null;
      try {
        periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix((String[]) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = linkedList0.add((Object) locale0);
      assertEquals(1, linkedList0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = null;
      try {
        periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("nt separa");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendLiteral(")TAp/c");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder7);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator("No printer or parser supplied");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.maximumParsedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendPrefix("No printer or parser supplied");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendSeparator("9qfa");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Kv>r@gg)G<tw");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      String string0 = "}*a`d<E?XM ";
      int int0 = 2324;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan("}*a`d<E?XM ", 2324);
      assertFalse(int1 == int0);
      assertEquals((-2325), int1);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("}*a`d<E?XM ", "}*a`d<E?XM ");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Kv>r@gg)G<tw";
      stringArray0[1] = "Kv>r@gg)G<tw";
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 6\r
         // Kv>r@gg)G<tw\r
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "zY\"vk&5]P^Xp06I~_");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_CompositeAffix0.scan((String) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("XTXR-n");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XTXR-n";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("=WcfOYbkZuPD6Imq", "{^P2-)W/BysGZlB<Lq", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder2);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "_58=_'hBU^ihNGa");
      assertEquals(15, stringBuffer0.length());
      assertEquals("_58=_'hBU^ihNGa", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Months months0 = Months.EIGHT;
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertNotNull(months0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      System.setCurrentTimeMillis(354);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(354, 100, (-1511), true, 354, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      boolean boolean0 = periodFormatterBuilder_FieldFormatter0.isZero(months0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      String string0 = null;
      String string1 = "No field to apply suffix to";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "No field to apply suffix to";
      stringArray0[1] = "No field to apply suffix to";
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSeparator((String) null, "No field to apply suffix to", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "org.joda.time.Months");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      periodFormatterBuilder_CompositeAffix0.finish(linkedHashSet0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String[] stringArray1 = periodFormatterBuilder_CompositeAffix0.getAffixes();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength((-1111));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(20, int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("GiF)U3b7=Y+q,vM|");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.maximumParsedDigits((-1111));
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSuffix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(linkedList0.contains(object1));
      assertTrue(linkedList0.contains(object2));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder8.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertNotNull(periodPrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertEquals(51, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Hours out of range: ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1408);
      assertEquals(40, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 40);
      assertNotNull(mutablePeriod0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTime0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(hours0);
      
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertEquals(158, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literalorg.joda.time.format.PeriodFormatterBuilder$Literal0org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(40L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Months months0 = Months.FOUR;
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) months0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("", "P01,");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatter periodFormatter1 = periodFormatterBuilder3.toFormatter();
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertNotNull(periodFormatter1);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMillis();
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendPrefix("org.joda.time.base.AbstractDateTime", "P01,");
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendWeeks();
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Prefix not followed by field";
      stringArray0[1] = "L5CWTe~.+mZADS";
      String string0 = "u\\W,\"`nr@ym_hJ./";
      stringArray0[2] = "uW,\"`nr@ym_hJ./";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add(periodFormatterBuilder_RegExAffix0);
      assertEquals(3, stringArray0.length);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      periodFormatterBuilder_RegExAffix0.finish(linkedHashSet0);
      assertEquals(3, stringArray0.length);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Prefix not followed by field");
      assertNotNull(mockPrintWriter0);
      
      int int0 = periodFormatterBuilder_RegExAffix0.parse("Prefix not followed by field", 25650000);
      assertEquals(3, stringArray0.length);
      assertEquals((-25650001), int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodPrinter periodPrinter0 = null;
      PeriodParser periodParser0 = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer or parser supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("r");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("a'hnh");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "resulting";
      stringArray0[1] = "$5nu\"Ns";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add(periodFormatterBuilder_RegExAffix0);
      assertEquals(2, stringArray0.length);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      periodFormatterBuilder_RegExAffix0.finish(linkedHashSet0);
      assertEquals(2, stringArray0.length);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_RegExAffix0.scan("Cannot have two adjacent separators", 0);
      assertFalse(int1 == int0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int1);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.printZeroNever();
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder7);
      
      periodFormatterBuilder_RegExAffix0.finish(linkedHashSet0);
      assertEquals(2, stringArray0.length);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_RegExAffix0.printTo((StringBuffer) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("H@@`>4-Zj");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer("H@@`>4-Zj");
      assertEquals(9, stringBuffer0.length());
      assertEquals("H@@`>4-Zj", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add(periodFormatterBuilder_SimpleAffix0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      periodFormatterBuilder_CompositeAffix0.finish(linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 400);
      assertEquals("H@@`>4-ZjH@@`>4-ZjH@@`>4-Zj", stringBuffer0.toString());
      assertEquals(27, stringBuffer0.length());
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("H@@`>4-Zj", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("a()]t`n+4$ XzPVDJ", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("zk^s0|tfnJ");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("zk^s0|tfnJ", "W,eMTKHE?iL),j0&i");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.minimumPrintedDigits((-1796));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.minimumPrintedDigits((-1796));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder4.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertNotNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "%4";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("%4");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%4";
      stringArray0[1] = "%4";
      stringArray0[2] = "%4";
      stringArray0[3] = "%4";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      LinkedHashSet<PeriodFormatterBuilder.Separator> linkedHashSet1 = new LinkedHashSet<PeriodFormatterBuilder.Separator>();
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertNotNull(linkedHashSet1);
      
      boolean boolean0 = linkedHashSet0.removeAll(linkedHashSet1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(boolean0);
      
      periodFormatterBuilder_CompositeAffix0.finish(linkedHashSet0);
      assertEquals(4, stringArray0.length);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      int int0 = 1349;
      int int1 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1349);
      assertFalse(int1 == int0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, int1);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix1 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_CompositeAffix0);
      assertFalse(periodFormatterBuilder_CompositeAffix1.equals((Object)periodFormatterBuilder_CompositeAffix0));
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_CompositeAffix1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_SimpleAffix0.printTo((Writer) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "f&oL@4Yv";
      stringArray0[1] = "ZSfC$2TG6~F#K";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = (-435);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_RegExAffix0.printTo((StringBuffer) null, (-435));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodPrinter0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("Prefix not followed by field");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "#n=hB1";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "*";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0\r
         // *\r
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.maximumParsedDigits((-637));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder7);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendLiteral("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("d", "d");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.maximumParsedDigits(5062500);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSuffix("d");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSuffix("d", "d");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("k8`X|Xg1EwdN", "k8`X|Xg1EwdN");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      periodFormatterBuilder_CompositeAffix0.finish(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength((-194));
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsBefore("nl3JMDI67}j3dh&u@@");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendPrefix("*O'x'Grp{?ki;1~8", "nl3JMDI67}j3dh&u@@");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      periodFormatterBuilder0.clear();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSuffix("Value ", ")");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendPrefix((String[]) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("MDR`Z");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MDR`Z";
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder3);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSuffix("org.joda.time.format.ISOPeriodFormat");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      PeriodParser periodParser0 = periodFormatterBuilder1.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodParser0);
      
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1";
      stringArray0[1] = "org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1";
      stringArray0[3] = "org.joda.time.format.ISOPeriodFormat";
      stringArray0[4] = "PeriodFormat.spaceandspace";
      stringArray0[5] = "org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1";
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparator("org.joda.time.format.ISOPeriodFormat", "org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertEquals(6, stringArray0.length);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertEquals(6, stringArray0.length);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(6, stringArray0.length);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(2096);
      assertEquals(6, stringArray0.length);
      assertEquals(112, int0);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.scan("PeriodFormat.spaceandspace", 2096);
      assertFalse(int1 == int0);
      assertEquals(6, stringArray0.length);
      assertEquals((-2097), int1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_CompositeAffix0.printTo((Writer) null, (-2666));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodPrinter0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeparator("Literal must not be null", "Literal must not be null");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Literal must not be null", "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$Literal");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.parse("o", (-2001));
      assertEquals((-2001), int0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("t");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int1 = periodFormatterBuilder_SimpleAffix0.parse("Literal must not be null", (-2001));
      assertFalse(int1 == int0);
      assertEquals(2000, int1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "No field to apply suffix to";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      periodFormatterBuilder_RegExAffix0.finish(linkedHashSet0);
      assertEquals(1, stringArray0.length);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      int int0 = periodFormatterBuilder_RegExAffix0.scan("|k", 55);
      assertEquals(1, stringArray0.length);
      assertEquals((-56), int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      int int1 = (-582);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-582), (-56), (-56), true, 55, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      assertEquals(1, stringArray0.length);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertEquals(1, stringArray0.length);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormat_DynamicWordBased0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter1 = new PeriodFormatter(periodFormat_DynamicWordBased0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertEquals(1, stringArray0.length);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter1);
      
      PeriodFormatter periodFormatter2 = periodFormatter1.withLocale(locale0);
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertNotSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatter1, periodFormatter2);
      assertSame(periodFormatter2, periodFormatter1);
      assertNotSame(periodFormatter2, periodFormatter0);
      assertNotSame(periodFormatter0, periodFormatter2);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertEquals(1, stringArray0.length);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter2.isParser());
      assertTrue(periodFormatter2.isPrinter());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.append(periodFormatter2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("\"CbFm6@TkFcs-%o_L");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("\"CbFm6@TkFcs-%o_L", 0);
      assertEquals(0, int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendSeparator("9G'a752;Agj", "jZ.;q");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder3.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder3.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder2.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder9);
      
      PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder10);
      
      PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder10);
      assertNotNull(periodFormatterBuilder11);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("\"CbFm6@TkFcs-%o_L", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int1 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder0.maximumParsedDigits(187);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertNotNull(periodFormatterBuilder12);
      
      PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder4.appendWeeks();
      assertSame(periodFormatterBuilder13, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder13);
      
      PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder14, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder14);
      
      PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder13.appendMillis3Digit();
      assertSame(periodFormatterBuilder13, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder15);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9G'a752;Agj";
      stringArray0[1] = "";
      stringArray0[2] = "\"CbFm6@TkFcs-%o_L";
      stringArray0[3] = "jZ.;q";
      stringArray0[4] = "";
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, 187);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("KvHr'@g)G<tw");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("}*a`d<E?XM ", 2324);
      assertEquals((-2325), int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("}*a`d<E?XM ", "}*a`d<E?XM ");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "KvHr'@g)G<tw";
      stringArray0[1] = "KvHr'@g)G<tw";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      int int1 = periodFormatterBuilder_SimpleAffix0.scan("6D9z]awoT&5Wf7v\"pJ<", 4);
      assertFalse(int1 == int0);
      assertEquals((-5), int1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 6\r
         // KvHr'@g)G<tw\r
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object1));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean0 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(linkedList0.contains(object0));
      assertTrue(linkedList0.contains(object2));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(object0));
      assertTrue(linkedList0.contains(object2));
      assertEquals(1, linkedList0.size());
      assertNotNull(periodFormatterBuilder3);
      
      Object object3 = linkedList0.remove();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotSame(object3, object1);
      assertNotSame(object3, object0);
      assertSame(object3, object2);
      assertFalse(linkedList0.contains(object3));
      assertEquals(0, linkedList0.size());
      assertNotNull(object3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(object3));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertFalse(linkedList0.contains(object3));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object3));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object3));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder8);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder8.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertFalse(linkedList0.contains(object3));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodPrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      assertEquals(51, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literal", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Hours out of range: ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1408);
      assertEquals(40, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(40, 1408, 40, 1408, 1408, 1408, 1408, 1408, (PeriodType) null);
      assertNotNull(mutablePeriod0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTime0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1342191L, duration0.getStandardHours());
      assertEquals(4831890689L, duration0.getStandardSeconds());
      assertEquals(55924L, duration0.getStandardDays());
      assertEquals(80531511L, duration0.getStandardMinutes());
      assertEquals(4831890689408L, duration0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1342191L, duration0.getStandardHours());
      assertEquals(4831890689L, duration0.getStandardSeconds());
      assertEquals(55924L, duration0.getStandardDays());
      assertEquals(80531511L, duration0.getStandardMinutes());
      assertEquals(4831890689408L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(1342191, hours0.getHours());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(hours0);
      
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$Literal"));
      assertEquals(0, linkedList0.size());
      assertEquals(164, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literalorg.joda.time.format.PeriodFormatterBuilder$Literal1342191org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1342191L, duration0.getStandardHours());
      assertEquals(4831890689L, duration0.getStandardSeconds());
      assertEquals(55924L, duration0.getStandardDays());
      assertEquals(80531511L, duration0.getStandardMinutes());
      assertEquals(4831890689408L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(1342191, hours0.getHours());
      assertEquals(1, EthiopicChronology.EE);
      
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$Literal"));
      assertEquals(0, linkedList0.size());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literalorg.joda.time.format.PeriodFormatterBuilder$Literal1342191org.joda.time.format.PeriodFormatterBuilder$SimpleAffixorg.joda.time.format.PeriodFormatterBuilder$Literal1342191org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals(277, stringBuffer0.length());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1342191L, duration0.getStandardHours());
      assertEquals(4831890689L, duration0.getStandardSeconds());
      assertEquals(55924L, duration0.getStandardDays());
      assertEquals(80531511L, duration0.getStandardMinutes());
      assertEquals(4831890689408L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(1342191, hours0.getHours());
      assertEquals(1, EthiopicChronology.EE);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("FG'");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertNotNull(periodFormatterBuilder9);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      Object object2 = new Object();
      linkedList0.add(object2);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      linkedList0.remove();
      periodFormatterBuilder0.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendHours();
      periodFormatterBuilder5.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder6.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Literal");
      Locale locale0 = Locale.KOREAN;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Hours out of range: ");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1408);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 40);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      Hours hours0 = duration0.toStandardHours();
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, locale0);
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Literalorg.joda.time.format.PeriodFormatterBuilder$Literal0org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("org.joda.time.format.PeriodFormatterBuilder$Literal", 40);
      assertEquals((-41), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("XTXR-n");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-285), (-285), (-285), true, (-285), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XTXR-n";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("&W", "{^P2-)W/BysGZlB<Lq", stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("_58=_'hBU^ihNGa", "");
      Period period0 = new Period((-618), (-618), 4, 4, (-285), (-1878), 543, 4);
      periodFormatterBuilder2.appendMinutes();
      Period period1 = period0.plusSeconds((-618));
      periodFormatterBuilder_FieldFormatter0.getFieldValue(period1);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparatorIfFieldsBefore("");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.append((PeriodPrinter) periodFormatterBuilder_FieldFormatter0, (PeriodParser) periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -285
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("i@jMo`H)^:L9", "i@jMo`H)^:L9", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
      String[] stringArray1 = new String[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray1[0] = "i@jMo`H)^:L9";
      stringArray1[1] = "X!\"@N@";
      stringArray1[2] = "Bi}Gk7";
      stringArray1[3] = "i@jMo`H)^:L9";
      stringArray1[4] = "i@jMo`H)^:L9";
      stringArray1[5] = "i@jMo`H)^:L9";
      stringArray1[6] = "i@jMo`H)^:L9";
      stringArray1[7] = "i@jMo`H)^:L9";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray1);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("i@jMo`H)^:L9", (byte) (-91));
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMillis3Digit();
      periodFormatterBuilder3.printZeroRarelyLast();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendSeparator("");
      periodFormatterBuilder4.appendMinutes();
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("atP=Y<]qE;@A|a", "zMR%");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-637), 50, (-1300), false, (-86747544), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      Months months0 = Months.ELEVEN;
      Locale locale0 = new Locale("", "cannot have two adjacenresultingors");
      Locale locale1 = locale0.stripExtensions();
      periodFormatterBuilder_FieldFormatter1.calculatePrintedLength(months0, locale1);
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder1.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      StringBuffer stringBuffer0 = new StringBuffer("org.joda.time.MonthDay");
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-49));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.joda.time.MonthDay";
      stringArray0[1] = "";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", "org.joda.time.MonthDay", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-49));
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-2131));
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Locale.lookupTag(linkedList1, set0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "", (-1628), locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }
}
