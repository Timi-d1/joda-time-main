/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 20:52:18 GMT 2025
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractInterval_ESTest extends AbstractInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Interval interval0 = new Interval((-67L), (-67L));
      interval0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      Period period0 = Period.days(47);
      Interval interval1 = interval0.withPeriodAfterStart(period0);
      boolean boolean0 = interval1.equals(interval0);
      assertFalse(boolean0);
      assertFalse(interval0.equals((Object)interval1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.standardHours(833L);
      Instant instant0 = new Instant();
      Interval interval0 = duration0.toIntervalTo(instant0);
      Interval interval1 = interval0.withStartMillis(833L);
      boolean boolean0 = interval1.equals(interval0);
      assertFalse(boolean0);
      assertFalse(interval0.equals((Object)interval1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTime dateTime0 = DateTime.now();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, duration0);
      mutableDateTime0.setSecondOfDay(542);
      Interval interval0 = duration0.toIntervalTo(mutableDateTime0);
      boolean boolean0 = mutableInterval0.isAfter((ReadableInterval) interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime(1492L, dateTimeZone0);
      Interval interval0 = new Interval(dateTime0, dateTime0);
      Hours hours0 = Hours.EIGHT;
      Interval interval1 = interval0.withPeriodAfterStart(hours0);
      boolean boolean0 = interval1.isEqual(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Hours hours0 = minutes0.toStandardHours();
      Interval interval0 = new Interval((ReadableInstant) null, hours0);
      MutableInterval mutableInterval0 = new MutableInterval();
      boolean boolean0 = interval0.isEqual(mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Interval interval0 = new Interval(weeks0, (ReadableInstant) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-304));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      Interval interval1 = new Interval(0L, 0L, lenientChronology0);
      boolean boolean0 = interval0.overlaps(interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Months months0 = Months.EIGHT;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      Interval interval0 = new Interval(months0, mutableDateTime0);
      boolean boolean0 = interval0.overlaps((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Interval interval0 = new Interval(21600000L, 21600000L, dateTimeZone0);
      Duration duration0 = interval0.toDuration();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, duration0);
      boolean boolean0 = interval0.contains((ReadableInterval) mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      String string0 = interval0.toString();
      assertEquals("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interval interval0 = new Interval((-67L), (-67L));
      Period period0 = interval0.toPeriod();
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, buddhistChronology0);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      assertNotSame(mutableInterval0, mutableInterval1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      assertNotSame(mutableInterval0, mutableInterval1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = new Interval((-2250L), (-2250L), dateTimeZone0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      assertEquals((-2250L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L, gregorianChronology0);
      Interval interval0 = mutableInterval0.toInterval();
      assertEquals(0L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Interval interval0 = duration0.toIntervalTo(mutableDateTime0);
      Interval interval1 = interval0.toInterval();
      assertEquals(1392409281320L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Interval interval0 = new Interval((-4170L), (-4170L));
      Interval interval1 = interval0.toInterval();
      assertSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.setDurationAfterStart(1L);
      long long0 = mutableInterval0.toDurationMillis();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      Interval interval0 = yearMonth0.toInterval();
      boolean boolean0 = interval0.isBeforeNow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.isAfter((ReadableInterval) interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      DateTime dateTime0 = new DateTime((-1L), (Chronology) null);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, dateTime0);
      boolean boolean0 = mutableInterval0.isAfter((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Interval interval0 = duration0.toIntervalTo(mutableDateTime0);
      mutableDateTime0.setSecondOfDay(542);
      boolean boolean0 = interval0.isAfter((ReadableInstant) mutableDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Interval interval0 = new Interval(0, 0);
      DateTime dateTime0 = interval0.getEnd();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, duration0);
      DateTime dateTime1 = mutableInterval0.getStart();
      assertTrue(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, buddhistChronology0);
      DateTime dateTime0 = mutableInterval0.getStart();
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Interval interval0 = new Interval((-650L), (-650L));
      DateTime dateTime0 = interval0.getEnd();
      assertEquals((-650L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Interval interval0 = duration0.toIntervalTo(mutableDateTime0);
      DateTime dateTime0 = interval0.getEnd();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, duration0);
      boolean boolean0 = interval0.equals(mutableInterval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.withDurationAdded(4L, 317351877);
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration1);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.containsNow();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1968L), 1947L, (Chronology) null);
      DateTime dateTime0 = mutableInterval0.getStart();
      Interval interval0 = new Interval(dateTime0, dateTime0);
      boolean boolean0 = mutableInterval0.contains((ReadableInterval) interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      Interval interval0 = yearMonth0.toInterval(dateTimeZone0);
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        interval0.toPeriod(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2419200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(774L, 774L, (Chronology) null);
      // Undeclared exception!
      try { 
        mutableInterval0.isEqual((ReadableInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      Interval interval0 = new Interval(1007L, 1007L, strictChronology0);
      boolean boolean0 = interval0.isAfter(1007L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      Interval interval0 = new Interval(1007L, 1007L, strictChronology0);
      boolean boolean0 = interval0.isBefore(1007L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = new DateTime((Chronology) copticChronology0);
      Interval interval0 = new Interval(dateTime0, dateTime0);
      boolean boolean0 = interval0.isBefore((long) 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      Period period0 = new Period(duration0, (ReadableInstant) null);
      Period period1 = period0.plusHours(27);
      Interval interval1 = interval0.withPeriodAfterStart(period1);
      boolean boolean0 = interval0.overlaps(interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      Interval interval0 = new Interval(1007L, 1007L, strictChronology0);
      boolean boolean0 = interval0.overlaps(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(10000000L, 10000000L);
      mutableInterval0.setDurationAfterStart(2164L);
      boolean boolean0 = mutableInterval0.contains(10000000L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      boolean boolean0 = mutableInterval0.contains(1L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      Interval interval0 = new Interval((-1793L), 0L, dateTimeZone0);
      Interval interval1 = interval0.overlap((ReadableInterval) null);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-67L), (-67L));
      boolean boolean0 = mutableInterval0.isAfterNow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Interval interval0 = new Interval((-67L), (-67L));
      long long0 = interval0.toDurationMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.containsNow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Interval interval0 = duration0.toIntervalTo(mutableDateTime0);
      DateTime dateTime0 = interval0.getEnd();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, duration0);
      mutableInterval0.setDurationAfterStart((long) 5);
      boolean boolean0 = interval0.equals(mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.withStartMillis(27);
      boolean boolean0 = interval0.equals(interval1);
      assertFalse(interval1.equals((Object)interval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      Object object0 = new Object();
      boolean boolean0 = interval0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Duration duration0 = Duration.standardHours(833L);
      Instant instant0 = Instant.ofEpochMilli(833L);
      Interval interval0 = duration0.toIntervalTo(instant0);
      Interval interval1 = interval0.overlap(interval0);
      assertNotNull(interval1);
      
      boolean boolean0 = interval1.equals(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Duration duration0 = Duration.standardHours(833L);
      Instant instant0 = Instant.ofEpochMilli(833L);
      Interval interval0 = duration0.toIntervalTo(instant0);
      boolean boolean0 = interval0.equals(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      Period period0 = new Period(duration0, (ReadableInstant) null);
      Period period1 = period0.plusHours(27);
      Interval interval1 = interval0.withPeriodAfterStart(period1);
      Duration duration1 = interval1.toDuration();
      assertEquals(97200L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Interval interval0 = duration0.toIntervalTo(mutableDateTime0);
      boolean boolean0 = interval0.isAfter((ReadableInstant) mutableDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Interval interval0 = duration0.toIntervalTo(mutableDateTime0);
      boolean boolean0 = interval0.isAfter(1264L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      boolean boolean0 = mutableInterval0.isBefore((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Interval interval0 = new Interval((Object) null);
      boolean boolean0 = interval0.isBefore((ReadableInstant) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Interval interval0 = yearMonth0.toInterval();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalTime localTime0 = LocalTime.now();
      DateTime dateTime0 = localDate0.toDateTime(localTime0, dateTimeZone0);
      boolean boolean0 = interval0.isBefore((ReadableInstant) dateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Duration duration0 = Duration.standardHours(833L);
      Instant instant0 = Instant.ofEpochMilli(833L);
      Interval interval0 = duration0.toIntervalTo(instant0);
      boolean boolean0 = interval0.isBefore((ReadableInterval) interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Interval interval0 = new Interval((-67L), (-67L));
      MutableInterval mutableInterval0 = new MutableInterval((-67L), (-67L));
      mutableInterval0.setDurationAfterStart(1L);
      boolean boolean0 = interval0.isEqual(mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Duration duration0 = Duration.standardHours(833L);
      Instant instant0 = Instant.ofEpochMilli(833L);
      Interval interval0 = duration0.toIntervalTo(instant0);
      boolean boolean0 = interval0.isEqual(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Interval interval0 = new Interval((Object) null, buddhistChronology0);
      Interval interval1 = interval0.withStartMillis(1);
      boolean boolean0 = interval1.isEqual(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Duration duration0 = Duration.standardHours(833L);
      Instant instant0 = Instant.ofEpochMilli(833L);
      Interval interval0 = duration0.toIntervalTo(instant0);
      boolean boolean0 = interval0.overlaps(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Interval interval0 = yearMonth0.toInterval();
      boolean boolean0 = interval0.overlaps((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Duration duration0 = Duration.standardHours(833L);
      Instant instant0 = Instant.ofEpochMilli(833L);
      Interval interval0 = duration0.toIntervalTo(instant0);
      boolean boolean0 = interval0.overlaps((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Duration duration0 = Duration.standardHours(833L);
      Instant instant0 = Instant.ofEpochMilli(833L);
      Interval interval0 = duration0.toIntervalTo(instant0);
      Interval interval1 = interval0.withEnd((ReadableInstant) null);
      boolean boolean0 = interval0.contains((ReadableInterval) interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Duration duration0 = Duration.standardHours(833L);
      Instant instant0 = Instant.ofEpochMilli(833L);
      Interval interval0 = duration0.toIntervalTo(instant0);
      boolean boolean0 = interval0.contains((ReadableInterval) interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.withStartMillis(27);
      boolean boolean0 = interval0.contains((ReadableInterval) interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Duration duration0 = Duration.standardHours(833L);
      Instant instant0 = Instant.ofEpochMilli(833L);
      Interval interval0 = duration0.toIntervalTo(instant0);
      boolean boolean0 = interval0.contains((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.contains((ReadableInterval) interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Duration duration0 = Duration.standardHours(833L);
      Instant instant0 = Instant.ofEpochMilli(833L);
      Interval interval0 = duration0.toIntervalTo(instant0);
      boolean boolean0 = interval0.contains((ReadableInstant) instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      Period period0 = new Period(duration0, (ReadableInstant) null);
      Period period1 = period0.plusHours(27);
      Interval interval1 = interval0.withPeriodAfterStart(period1);
      boolean boolean0 = interval1.contains((ReadableInstant) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.contains(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      // Undeclared exception!
      try { 
        interval0.withEndMillis(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      boolean boolean0 = mutableInterval0.isBeforeNow();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(774L, 774L, (Chronology) null);
      Period period0 = mutableInterval0.toPeriod((PeriodType) null);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.isAfter((ReadableInstant) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.contains((ReadableInstant) null);
      assertFalse(boolean0);
  }
}
