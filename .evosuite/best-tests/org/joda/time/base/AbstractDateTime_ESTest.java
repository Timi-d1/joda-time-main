/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 22:53:55 GMT 2025
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MutableDateTime;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDateTime_ESTest extends AbstractDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-2678L));
      int int0 = dateTime0.getYearOfEra();
      assertEquals(1969, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTime dateTime0 = new DateTime(2843L);
      int int0 = dateTime0.getWeekyear();
      assertEquals(1970, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      int int0 = dateTime0.getWeekOfWeekyear();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(0L, dateTimeZone0);
      int int0 = dateTime0.getSecondOfMinute();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      DateTime dateTime0 = mutableDateTime0.toDateTime(dateTimeZone0);
      int int0 = dateTime0.getSecondOfMinute();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      int int0 = dateTime0.getSecondOfDay();
      assertEquals(73281, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      int int0 = mutableDateTime0.getMonthOfYear();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      int int0 = mutableDateTime0.getMinuteOfHour();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTime dateTime0 = new DateTime(2843L);
      int int0 = dateTime0.getMinuteOfDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(21260793600000L, dateTimeZone0);
      int int0 = mutableDateTime0.getMillisOfSecond();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(3093L);
      DateTime dateTime0 = instant0.toDateTime();
      int int0 = dateTime0.getMillisOfSecond();
      assertEquals(93, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      mutableDateTime0.setRounding(dateTimeField0);
      int int0 = mutableDateTime0.getMillisOfDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 0, (Chronology) null);
      int int0 = mutableDateTime0.getHourOfDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-2678L));
      int int0 = dateTime0.getHourOfDay();
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-991L));
      int int0 = mutableDateTime0.getEra();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      int int0 = mutableDateTime0.getDayOfWeek();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      int int0 = dateTime0.get(dateTimeFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      int int0 = dateTime0.get(dateTimeFieldType0);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      int int0 = dateTime0.getMillisOfDay();
      assertEquals(73281320, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = new DateTime(0L, (Chronology) gJChronology0);
      int int0 = dateTime0.getYear();
      assertEquals(1970, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(3093L);
      DateTime dateTime0 = instant0.toDateTime();
      int int0 = dateTime0.getDayOfMonth();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      String string0 = dateTime0.toString((String) null, (Locale) null);
      assertEquals("2014-02-14T20:21:21.320Z", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      try { 
        dateTime0.toString("|?K;J*h]K@fUb%", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 153692453, 1493, 1);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      String string0 = dateTime0.toString((String) null);
      assertEquals("2014-02-14T05:01:00.000Z", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        dateTime0.toString("org.jod.timefield.RemainderDateTimeField");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Calendar calendar0 = dateTime0.toCalendar((Locale) null);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Locale locale0 = Locale.UK;
      Calendar calendar0 = mutableDateTime0.toCalendar(locale0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3));
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.base.AbstractDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      DateTime dateTime0 = mutableDateTime0.toDateTime(dateTimeZone0);
      int int0 = dateTime0.getDayOfYear();
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      int int0 = dateTime0.getMinuteOfDay();
      assertEquals(1221, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      DateTime dateTime0 = mutableDateTime0.toDateTime(dateTimeZone0);
      String string0 = dateTime0.toString();
      assertEquals("2014-02-14T20:21:21.320Z", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      int int0 = dateTime0.getCenturyOfEra();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      int int0 = mutableDateTime0.getMinuteOfHour();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      MutableDateTime mutableDateTime0 = new MutableDateTime(gregorianCalendar0, dateTimeZone0);
      int int0 = mutableDateTime0.getYearOfCentury();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      int int0 = dateTime0.getSecondOfDay();
      assertEquals(0, int0);
  }
}
