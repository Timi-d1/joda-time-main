/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 23:10:05 GMT 2025
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.ReadablePartial;
import org.joda.time.convert.ReadablePartialConverter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReadablePartialConverter_ESTest extends ReadablePartialConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(chronology0).toString();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn("").when(chronology1).toString();
      doReturn(chronology0).when(chronology1).withZone(any(org.joda.time.DateTimeZone.class));
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(readablePartial0).get(any(org.joda.time.DateTimeFieldType.class));
      doReturn(chronology1).when(readablePartial0).getChronology();
      doReturn((DateTimeFieldType) null, (DateTimeFieldType) null, (DateTimeFieldType) null, (DateTimeFieldType) null, (DateTimeFieldType) null).when(readablePartial0).getFieldType(anyInt());
      doReturn(2274).when(readablePartial0).size();
      Chronology chronology2 = readablePartialConverter0.getChronology((Object) readablePartial0, (DateTimeZone) null);
      readablePartialConverter0.getPartialValues(readablePartial0, (Object) readablePartial0, chronology2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(chronology0).toString();
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(readablePartial0).getChronology();
      doReturn(0).when(readablePartial0).size();
      Chronology chronology1 = readablePartialConverter0.getChronology((Object) readablePartial0, (Chronology) null);
      readablePartialConverter0.getPartialValues(readablePartial0, (Object) readablePartial0, chronology1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(readablePartial0).get(any(org.joda.time.DateTimeFieldType.class));
      doReturn((DateTimeFieldType) null, (DateTimeFieldType) null, (DateTimeFieldType) null, (DateTimeFieldType) null, (DateTimeFieldType) null).when(readablePartial0).getFieldType(anyInt());
      doReturn(719527).when(readablePartial0).size();
      // Undeclared exception!
      readablePartialConverter0.getPartialValues(readablePartial0, (Object) readablePartial0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn((-1404)).when(readablePartial0).size();
      // Undeclared exception!
      try { 
        readablePartialConverter0.getPartialValues(readablePartial0, (Object) null, (Chronology) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      Class<?> class0 = readablePartialConverter0.getSupportedType();
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        readablePartialConverter0.getPartialValues(readablePartial0, (Object) class0, (Chronology) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn((Chronology) null).when(readablePartial0).getChronology();
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeZone0).getID();
      Chronology chronology0 = readablePartialConverter0.getChronology((Object) readablePartial0, dateTimeZone0);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        readablePartialConverter0.getChronology((Object) "9=(N\u0004", dateTimeZone0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.joda.time.ReadablePartial
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      // Undeclared exception!
      try { 
        readablePartialConverter0.getChronology((Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn((Chronology) null).when(readablePartial0).getChronology();
      Chronology chronology0 = readablePartialConverter0.getChronology((Object) readablePartial0, (Chronology) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      // Undeclared exception!
      try { 
        readablePartialConverter0.getChronology((Object) "<,F3:$p", (Chronology) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.joda.time.ReadablePartial
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(readablePartial0).get(any(org.joda.time.DateTimeFieldType.class));
      doReturn((DateTimeFieldType) null, (DateTimeFieldType) null, (DateTimeFieldType) null, (DateTimeFieldType) null, (DateTimeFieldType) null).when(readablePartial0).getFieldType(anyInt());
      doReturn(3336).when(readablePartial0).size();
      // Undeclared exception!
      try { 
        readablePartialConverter0.getPartialValues(readablePartial0, (Object) readablePartial0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(chronology0).toString();
      doReturn((Chronology) null).when(chronology0).withZone(any(org.joda.time.DateTimeZone.class));
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(readablePartial0).getChronology();
      doReturn(0).when(readablePartial0).size();
      Chronology chronology1 = readablePartialConverter0.getChronology((Object) readablePartial0, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        readablePartialConverter0.getPartialValues(readablePartial0, (Object) readablePartial0, chronology1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        readablePartialConverter0.getChronology((Object) null, dateTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      Class<?> class0 = readablePartialConverter0.getSupportedType();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(chronology0).toString();
      Chronology chronology1 = readablePartialConverter0.getChronology((Object) class0, chronology0);
      assertSame(chronology1, chronology0);
  }
}
