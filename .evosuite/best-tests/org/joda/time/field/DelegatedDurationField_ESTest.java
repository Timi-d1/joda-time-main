/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 23:02:21 GMT 2025
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Months;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.DelegatedDurationField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.UnsupportedDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DelegatedDurationField_ESTest extends DelegatedDurationField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      boolean boolean0 = delegatedDurationField0.isSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      boolean boolean0 = delegatedDurationField0.isPrecise();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getValueAsLong(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getValueAsLong((-5097600000L), 0L);
      assertEquals((-59L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getValueAsLong(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getValueAsLong((long) (-4192));
      assertEquals((-4192L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      int int0 = delegatedDurationField0.getValue(1L, (-3132L));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      int int0 = delegatedDurationField0.getValue((-1512L), (long) 1312);
      assertEquals((-1512), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.millis();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      int int0 = delegatedDurationField0.getValue((long) 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      int int0 = delegatedDurationField0.getValue((-2024L));
      assertEquals((-2024), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.eras();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getUnitMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Days days0 = Days.FIVE;
      DurationFieldType durationFieldType0 = days0.getFieldType(0);
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1933L));
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0, durationFieldType0);
      long long0 = delegatedDurationField0.getUnitMillis();
      assertEquals((-1933L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance((DurationFieldType) null);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      DurationFieldType durationFieldType0 = delegatedDurationField0.getType();
      assertNull(durationFieldType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getMillis(0L, (long) 1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getMillis((-1509L), (-1509L));
      assertEquals((-1509L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getMillis(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Days days0 = Days.FIVE;
      DurationFieldType durationFieldType0 = days0.getFieldType(0);
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1933L));
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0, durationFieldType0);
      long long0 = delegatedDurationField0.getMillis(1786L);
      assertEquals((-3452338L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getMillis(0, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getMillis((-2024), (long) 0);
      assertEquals((-2024L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getMillis(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0, durationFieldType0);
      long long0 = delegatedDurationField0.getMillis((-3456));
      assertEquals((-3456L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0, durationFieldType0);
      long long0 = delegatedDurationField0.getDifferenceAsLong(0L, (-3456));
      assertEquals(3456L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getDifferenceAsLong(601L, 2678400601L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      int int0 = delegatedDurationField0.getDifference(3L, (-1309L));
      assertEquals(1312, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      int int0 = delegatedDurationField0.getDifference(3125L, 1866240000000000L);
      assertEquals((-43199999), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.eras();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      int int0 = delegatedDurationField0.compareTo((DurationField) delegatedDurationField0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.weeks();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(decoratedDurationField0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3107);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      DurationField durationField1 = durationFieldType0.getField(gregorianChronology0);
      int int0 = delegatedDurationField0.compareTo(durationField1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      DurationField durationField1 = buddhistChronology0.years();
      int int0 = delegatedDurationField0.compareTo(durationField1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(99);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.days();
      Months months0 = Months.TWELVE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      long long0 = delegatedDurationField0.add(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.millis();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.add((-1963L), 21600000L);
      assertEquals(21598037L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Days days0 = Days.FIVE;
      DurationFieldType durationFieldType0 = days0.getFieldType(0);
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1933L));
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0, durationFieldType0);
      long long0 = delegatedDurationField0.add(0L, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.add(0L, (-4192));
      assertEquals((-4192L), long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance((DurationFieldType) null);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0, (DurationFieldType) null);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValueAsLong((-3438L), (-3438L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // null field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.eras();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValueAsLong((long) 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValueAsLong(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValue(0L, 0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weeks field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValue(31083663600000L, 31083663600000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 31083663600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValue(31622400000L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weekyears field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance((DurationFieldType) null);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0, (DurationFieldType) null);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DelegatedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.eras();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis(1L, (long) 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis(3155760000000L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 315576000000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance((DurationFieldType) null);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis(1L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // null field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(624);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis(31536000000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 31536000000 * 3155695200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.eras();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis(1972, 1245L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.eras();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis(616);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.eras();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getDifferenceAsLong(4033L, 872L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.eras();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getDifference((-2718L), 1824L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.millis();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getDifference(0L, 31449600000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -31449600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      DurationField durationField0 = durationFieldType0.getField((Chronology) null);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.add(0L, 0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.add(1L, 31556952000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 31556952000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.add((-9223372036854775808L), 93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.eras();
      Hours hours0 = Hours.ONE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.add(0L, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Days days0 = Days.SIX;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      DelegatedDurationField delegatedDurationField0 = null;
      try {
        delegatedDurationField0 = new DelegatedDurationField((DurationField) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance((DurationFieldType) null);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      String string0 = delegatedDurationField0.toString();
      assertEquals("DurationField[halfdays]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      boolean boolean0 = delegatedDurationField0.equals(delegatedDurationField0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.months();
      Hours hours0 = Hours.ONE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      boolean boolean0 = delegatedDurationField0.equals(hours0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      DurationFieldType durationFieldType0 = delegatedDurationField0.getType();
      DelegatedDurationField delegatedDurationField1 = new DelegatedDurationField(delegatedDurationField0, durationFieldType0);
      assertEquals("halfdays", delegatedDurationField1.getName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DelegatedDurationField delegatedDurationField0 = null;
      try {
        delegatedDurationField0 = new DelegatedDurationField((DurationField) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      boolean boolean0 = delegatedDurationField0.isSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      int int0 = delegatedDurationField0.getDifference(1669L, 3141L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getUnitMillis();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      boolean boolean0 = delegatedDurationField0.isPrecise();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.millis();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getValueAsLong((long) 1, 1542L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      int int0 = delegatedDurationField0.getValue((long) 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      int int0 = delegatedDurationField0.getValue(0L, 43200000L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getMillis(43200000L, 825L);
      assertEquals(1866240000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getMillis(1, 3141L);
      assertEquals(43200000L, long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getMillis(3141L);
      assertEquals(135691200000L, long0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getMillis(1);
      assertEquals(31556952000L, long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.compareTo((DurationField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.millis();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      DurationField durationField1 = delegatedDurationField0.getWrappedField();
      assertSame(durationField1, durationField0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.millis();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getValueAsLong(31449600000L);
      assertEquals(31449600000L, long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getDifferenceAsLong(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.millis();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.add(21600000L, 1);
      assertEquals(21600001L, long0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.hashCode();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.add((-152L), (-152L));
      assertEquals((-304L), long0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      String string0 = delegatedDurationField0.getName();
      assertEquals("millis", string0);
  }
}
