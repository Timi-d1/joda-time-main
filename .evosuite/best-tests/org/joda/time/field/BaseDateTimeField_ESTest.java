/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 20:17:19 GMT 2025
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.field.DelegatedDurationField;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.ZeroIsMaxDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseDateTimeField_ESTest extends BaseDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      dateTimeFieldType0.getField(buddhistChronology0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 10);
      remainderDateTimeField0.addWrapField((-2464L), 1);
      remainderDateTimeField0.getLeapDurationField();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      LocalTime localTime0 = new LocalTime(2630L);
      int[] intArray0 = new int[6];
      intArray0[0] = 3350;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[5] = 10;
      intArray0[4] = 1;
      intArray0[5] = 10;
      remainderDateTimeField0.addWrapField((ReadablePartial) localTime0, 1, intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      Locale locale0 = Locale.ROOT;
      offsetDateTimeField0.getAsShortText((-1719L), locale0);
      Locale locale1 = Locale.ROOT;
      locale1.getExtensionKeys();
      offsetDateTimeField0.getAsShortText(1, locale1);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      offsetDateTimeField0.getAsText((-1719L));
      offsetDateTimeField0.getAsShortText((-135L));
      dateTimeFieldType1.getRangeDurationType();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType1);
      zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      offsetDateTimeField0.set((long) 1, 1);
      zeroIsMaxDateTimeField0.set(10000000000L, 1);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      zeroIsMaxDateTimeField0.add((long) 1, (-1));
      zeroIsMaxDateTimeField0.getAsText(17L, locale1);
      zeroIsMaxDateTimeField0.roundHalfEven((-1719L));
      offsetDateTimeField0.getDurationField();
      offsetDateTimeField0.roundHalfCeiling((-1719L));
      zeroIsMaxDateTimeField0.getLeapAmount(1350L);
      offsetDateTimeField0.getMaximumTextLength(locale1);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.convertText("ZK*", locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"ZK*\" for centuryOfEra is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.seconds();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1518);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[4] = 1;
      Locale locale0 = Locale.US;
      Period.years(2615625);
      Integer integer0 = new Integer(1518);
      dividedDateTimeField0.getDifferenceAsLong(1518, 0L);
      dividedDateTimeField0.getRangeDurationField();
      dividedDateTimeField0.getDivisor();
      dividedDateTimeField0.get((-1L));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      dateTimeFieldType0.getField(buddhistChronology0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 10);
      DateTime dateTime0 = new DateTime((long) 1);
      DateTime dateTime1 = dateTime0.plusMinutes(1963);
      LocalDateTime localDateTime0 = dateTime1.toLocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusYears((-270));
      Days days0 = Days.ZERO;
      LocalDateTime localDateTime2 = localDateTime1.withPeriodAdded(days0, (-1));
      int[] intArray0 = new int[8];
      intArray0[0] = (-270);
      intArray0[1] = (-1);
      intArray0[2] = 10;
      intArray0[3] = 1963;
      intArray0[4] = 10;
      intArray0[5] = 1963;
      intArray0[6] = (-270);
      intArray0[7] = 1190;
      remainderDateTimeField0.getMinimumValue((ReadablePartial) localDateTime2, intArray0);
      remainderDateTimeField0.addWrapField((-2432L), 1);
      remainderDateTimeField0.getLeapDurationField();
      LocalTime localTime0 = new LocalTime(2630L);
      int[] intArray1 = new int[6];
      intArray1[0] = 3350;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 10;
      intArray1[4] = 2133167090;
      // Undeclared exception!
      try { 
        remainderDateTimeField0.addWrapField((ReadablePartial) localTime0, 2133167090, intArray1, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2133167090
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      YearMonth yearMonth0 = new YearMonth((long) 1);
      offsetDateTimeField0.roundHalfEven(0L);
      Locale locale0 = Locale.GERMAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      offsetDateTimeField0.addWrapField((-3067L), 849);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      offsetDateTimeField0.getMaximumShortTextLength(locale0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(strictDateTimeField0, dateTimeFieldType0, 1326, (-332), (-332));
      strictDateTimeField0.getLeapAmount(31449600000L);
      offsetDateTimeField0.getDifference(1196L, 1196L);
      buddhistChronology0.years();
      System.setCurrentTimeMillis((-332));
      int int0 = new Integer(0);
      offsetDateTimeField0.getMaximumValue();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField((DateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      Locale locale0 = Locale.ROOT;
      offsetDateTimeField0.getAsShortText((-1719L), locale0);
      Locale locale1 = Locale.ROOT;
      locale1.getExtensionKeys();
      offsetDateTimeField0.getAsShortText(1, locale1);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      offsetDateTimeField0.getAsText((-1719L));
      offsetDateTimeField0.getAsShortText((-135L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType1);
      dateTimeFieldType1.getRangeDurationType();
      zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      offsetDateTimeField0.set((long) 1, 1);
      zeroIsMaxDateTimeField0.set(10000000000L, 1);
      zeroIsMaxDateTimeField0.add((long) 1, (-1));
      zeroIsMaxDateTimeField0.getAsText(17L, locale1);
      zeroIsMaxDateTimeField0.roundHalfEven((-1719L));
      offsetDateTimeField0.getDurationField();
      offsetDateTimeField0.roundHalfCeiling((-1719L));
      zeroIsMaxDateTimeField0.getLeapAmount(1350L);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Integer integer0 = new Integer(1149);
      buddhistChronology0.equals(integer0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.toString();
      offsetDateTimeField0.add(0L, 0L);
      offsetDateTimeField0.roundHalfEven(0L);
      offsetDateTimeField0.addWrapField(2635L, 2137810298);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DateTimeFieldType.dayOfYear();
      buddhistChronology0.toString();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      long long0 = 2582L;
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(100);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      offsetDateTimeField0.getAsShortText((ReadablePartial) localDateTime1, locale0);
      // Undeclared exception!
      try { 
        localDateTime1.withTime(100, 86400000, 2128646072, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 100 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundFloor(1);
      zeroIsMaxDateTimeField0.set((long) 1, 1);
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(strictDateTimeField0, dateTimeFieldType0, 1326, (-332), (-332));
      strictDateTimeField0.getLeapAmount(31449600000L);
      offsetDateTimeField0.getDifference(1184L, 1184L);
      buddhistChronology0.years();
      System.setCurrentTimeMillis((-332));
      offsetDateTimeField0.getMinimumValue();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      dateTimeFieldType0.getField(buddhistChronology0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 10);
      remainderDateTimeField0.addWrapField((-2432L), 1);
      remainderDateTimeField0.getLeapDurationField();
      LocalTime localTime0 = new LocalTime(2630L);
      int[] intArray0 = new int[6];
      Locale locale0 = Locale.CHINA;
      localTime0.toString((String) null, locale0);
      intArray0[0] = 3350;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 10;
      remainderDateTimeField0.roundHalfEven(1);
      intArray0[4] = 2133167090;
      intArray0[5] = 10;
      // Undeclared exception!
      try { 
        remainderDateTimeField0.addWrapField((ReadablePartial) localTime0, 2133167090, intArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2133167090
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 1518;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1518);
      long long0 = 0L;
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      yearMonth0.plusMonths(1059);
      int int1 = 93;
      YearMonth yearMonth1 = yearMonth0.plusMonths((-1946));
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapPartial(yearMonth1, 1498, intArray0, 1498);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1498
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      int int0 = 1518;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1518);
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      yearMonth0.plusMonths(1058);
      YearMonth yearMonth1 = yearMonth0.plusMonths(1058);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      dividedDateTimeField0.addWrapPartial(yearMonth1, 1, intArray0, 1498);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.roundHalfFloor(2641L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1, 744, 12825000);
      offsetDateTimeField0.isLenient();
      offsetDateTimeField0.remainder(604800000L);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      offsetDateTimeField0.roundCeiling(744);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add(1662L, 12825000);
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 12825000;
      dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 12825000;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set((ReadablePartial) localTime0, 12825000, intArray0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 1518;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1518);
      long long0 = 0L;
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      yearMonth0.plusMonths(1059);
      int int1 = 93;
      YearMonth yearMonth1 = yearMonth0.plusMonths(1);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      dividedDateTimeField0.addWrapPartial(yearMonth1, 1, intArray0, 0);
      intArray0[2] = 1518;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      String string0 = "";
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      Locale locale0 = Locale.ROOT;
      offsetDateTimeField0.getAsShortText((-1719L), locale0);
      Locale locale1 = Locale.ROOT;
      locale1.getExtensionKeys();
      offsetDateTimeField0.getAsShortText(1, locale1);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      offsetDateTimeField0.getAsText((-1719L));
      offsetDateTimeField0.getAsShortText((-135L));
      dateTimeFieldType1.getRangeDurationType();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType1);
      zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      offsetDateTimeField0.set((long) 1, 1);
      zeroIsMaxDateTimeField0.set(10000000000L, 1);
      zeroIsMaxDateTimeField0.add((long) 1, (-1));
      zeroIsMaxDateTimeField0.getAsText((-135L), locale1);
      zeroIsMaxDateTimeField0.roundHalfEven(2635L);
      offsetDateTimeField0.getDurationField();
      offsetDateTimeField0.convertText("60", locale1);
      zeroIsMaxDateTimeField0.isSupported();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType.dayOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      YearMonth yearMonth0 = new YearMonth(2622L);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add((ReadablePartial) yearMonth0, 1, (int[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology1.seconds();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 2);
      dividedDateTimeField0.add((long) 1, (-605));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      int int0 = 400;
      int int1 = 30;
      int int2 = (-24);
      buddhistChronology0.toString();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 400, 30, (-24));
      offsetDateTimeField0.roundHalfCeiling((-24));
      LocalDate localDate0 = new LocalDate((long) 30, (Chronology) buddhistChronology0);
      offsetDateTimeField0.getMaximumValue((ReadablePartial) localDate0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      Locale locale0 = Locale.ROOT;
      offsetDateTimeField0.getAsShortText((-1719L), locale0);
      Locale locale1 = Locale.ROOT;
      locale1.getExtensionKeys();
      offsetDateTimeField0.getAsShortText(1, locale1);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      offsetDateTimeField0.getAsShortText((-135L));
      dateTimeFieldType1.getRangeDurationType();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType1);
      zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      int[] intArray0 = buddhistChronology0.get((ReadablePartial) localTime0, (-1L));
      offsetDateTimeField0.set((long) 1, 1);
      zeroIsMaxDateTimeField0.set(10000000000L, 1);
      zeroIsMaxDateTimeField0.add((long) 1, (-1));
      zeroIsMaxDateTimeField0.getAsText(17L, locale1);
      zeroIsMaxDateTimeField0.roundHalfEven(2635L);
      zeroIsMaxDateTimeField0.add((ReadablePartial) localTime0, 1, intArray0, 1);
      offsetDateTimeField0.getDurationField();
      // Undeclared exception!
      try { 
        offsetDateTimeField0.convertText(" is not precise in the period ", locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \" is not precise in the period \" for weekOfWeekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      YearMonth yearMonth0 = new YearMonth((-2276L), (Chronology) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-2147483622);
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = (-2147483622);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial(yearMonth0, (-2147483622), intArray0, (-816));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483622
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 40);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1352, 10, 10, 87, 10, 10);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Partial partial0 = new Partial(yearMonth0);
      buddhistChronology0.set(partial0, 2636L);
      buddhistChronology0.add((long) 40, 2627L, 2888);
      offsetDateTimeField0.add((long) 1, (long) 1);
      long long0 = (-237L);
      offsetDateTimeField0.add((-237L), 40);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 1518;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1518);
      long long0 = 0L;
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.plusMonths(1059);
      Locale locale0 = Locale.CHINA;
      dividedDateTimeField0.getMaximumTextLength(locale0);
      int int1 = 93;
      int int2 = (-1946);
      YearMonth yearMonth2 = yearMonth0.plusMonths((-1946));
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      yearMonth1.isAfter(yearMonth2);
      intArray0[2] = 1518;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dividedDateTimeField0, dateTimeFieldType0, 1, (-1647), 93);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.roundHalfCeiling(1561L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1, 744, 12825000);
      offsetDateTimeField0.isLenient();
      offsetDateTimeField0.remainder(604799989L);
      offsetDateTimeField0.roundCeiling(744);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add(1662L, 0);
      offsetDateTimeField0.roundHalfEven(60000L);
      zeroIsMaxDateTimeField0.roundHalfCeiling((-1L));
      zeroIsMaxDateTimeField0.roundCeiling(407L);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 1518;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1518);
      long long0 = 0L;
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      yearMonth0.plusMonths(1059);
      int int1 = 93;
      YearMonth yearMonth1 = yearMonth0.plusMonths((-1946));
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      dividedDateTimeField0.addWrapPartial(yearMonth1, 1, intArray0, 1498);
      intArray0[2] = 1518;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      String string0 = "";
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType.dayOfWeek();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      Integer integer0 = new Integer(1);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, (Locale) null);
      buddhistChronology0.equals(integer0);
      offsetDateTimeField0.roundHalfEven(0L);
      Locale locale0 = Locale.GERMAN;
      locale0.getDisplayScript();
      offsetDateTimeField0.getMaximumShortTextLength(locale0);
      offsetDateTimeField0.addWrapField(0L, 1922);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.getAsShortText((ReadablePartial) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, (-905));
      DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(lenientDateTimeField0, durationField0, dateTimeFieldType0, 1901);
      dividedDateTimeField0.remainder(1);
      offsetDateTimeField0.isLeap((-224L));
      Locale locale0 = Locale.FRENCH;
      offsetDateTimeField0.getAsShortText(1L, locale0);
      offsetDateTimeField0.getMinimumValue((long) 1);
      dividedDateTimeField0.getMaximumShortTextLength(locale0);
      offsetDateTimeField0.roundHalfCeiling(2594L);
      dividedDateTimeField0.roundFloor((-46L));
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(lenientDateTimeField0, dateTimeFieldType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1, 1, 12825000);
      offsetDateTimeField0.isLenient();
      offsetDateTimeField0.roundCeiling(1);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getRangeDurationField();
      zeroIsMaxDateTimeField0.add(1662L, 0);
      offsetDateTimeField0.roundHalfEven(60000L);
      offsetDateTimeField0.getDifference(12825000, (-2490L));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 1518;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1518);
      MonthDay monthDay0 = new MonthDay(1, 1, buddhistChronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = (-1183);
      intArray0[3] = 2075900859;
      dividedDateTimeField0.getMinimumValue((ReadablePartial) monthDay0, intArray0);
      long long0 = 0L;
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      int int1 = 1059;
      // Undeclared exception!
      try { 
        yearMonth0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfMinute' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      LocalDateTime localDateTime0 = new LocalDateTime(2865L);
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(1);
      offsetDateTimeField0.getMinimumValue((ReadablePartial) localDateTime1);
      long long0 = 0L;
      offsetDateTimeField0.add(0L, 0L);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      buddhistChronology0.set(localDateTime1, 0L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundFloor(1L);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((ReadablePartial) localDateTime1, 1, intArray0, (-1994091957));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1994091957 for weekOfWeekyear must be in the range [1,60]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 1518;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1518);
      long long0 = 0L;
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.plusMonths(1043);
      yearMonth0.plusMonths((-1946));
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1518;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.set((ReadablePartial) yearMonth1, 93, intArray0, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1, 744, 12825000);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      offsetDateTimeField0.isLenient();
      offsetDateTimeField0.remainder(604800000L);
      offsetDateTimeField0.roundCeiling(744);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add(1662L, 0);
      offsetDateTimeField0.remainder(0);
      DurationField durationField0 = buddhistChronology0.eras();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(lenientDateTimeField0, durationField0, dateTimeFieldType0, 35);
      dividedDateTimeField0.add((long) 12825000, 208);
      MonthDay monthDay0 = MonthDay.now((Chronology) buddhistChronology0);
      dividedDateTimeField0.getMinimumValue((ReadablePartial) monthDay0);
      dividedDateTimeField0.getDurationField();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 1518;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1518);
      long long0 = 0L;
      YearMonth yearMonth0 = new YearMonth((long) 1518);
      int int1 = 555;
      yearMonth0.plusMonths(555);
      int int2 = 93;
      int[] intArray0 = new int[7];
      intArray0[0] = 93;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2107715432;
      intArray0[5] = 0;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapPartial(yearMonth0, 2107715432, intArray0, 192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2107715432
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      buddhistChronology0.add(2160L, 2160L, 3887);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(buddhistChronology0);
      MockDate mockDate0 = new MockDate(2713, (-313), 2713, (-313), (-313));
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      Period period0 = Period.hours(0);
      period0.withMonths(0);
      monthDay0.minus(period0);
      MockDate mockDate1 = new MockDate(1);
      mockDate1.setTime(1);
      mockDate0.before(mockDate1);
      int[] intArray0 = new int[1];
      intArray0[0] = 2713;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-313));
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, preciseDurationField0, dateTimeFieldType0, 100);
      preciseDurationField0.getMillis(1L, (-632L));
      remainderDateTimeField0.getMaximumValue();
      remainderDateTimeField0.roundFloor(4502L);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 100);
      offsetDateTimeField0.roundHalfEven(682L);
      offsetDateTimeField0.getMaximumTextLength((Locale) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      DateTimeZone.getDefault();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getMaximumValue();
      DateTimeField dateTimeField1 = buddhistChronology0.year();
      int int0 = 819;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField1, dateTimeFieldType0, 819);
      dividedDateTimeField0.isLeap(0L);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.set((-353L), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.roundFloor((-872L));
      offsetDateTimeField0.roundHalfFloor((-3600000L));
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField1 = buddhistChronology1.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 1250);
      remainderDateTimeField0.isSupported();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField((DateTimeFieldType) null, durationField0, durationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0);
      Locale locale0 = Locale.KOREAN;
      Locale.getISOCountries();
      skipUndoDateTimeField0.getMaximumTextLength(locale0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      skipUndoDateTimeField0.getMaximumShortTextLength(locale0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(skipUndoDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Seconds seconds0 = Seconds.THREE;
      seconds0.toString();
      buddhistChronology0.get((ReadablePeriod) seconds0, 647L);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.getLeapDurationField();
      offsetDateTimeField0.add((-1159L), 0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, (DurationField) null, (DurationField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.PreciseDurationDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(strictDateTimeField0, dateTimeFieldType0, 1326, (-332), (-332));
      offsetDateTimeField0.getDifference(1184L, 1184L);
      buddhistChronology0.years();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      Integer integer0 = new Integer(1023);
      dateTimeZone0.equals(integer0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2406);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.GERMAN;
      zeroIsMaxDateTimeField0.getMaximumShortTextLength(locale0);
      BuddhistChronology.getInstance();
      zeroIsMaxDateTimeField0.roundHalfCeiling(0L);
      long long0 = 0L;
      int int0 = 14;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapField(0L, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      int int0 = 783;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 783);
      DurationField durationField0 = buddhistChronology0.centuries();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      dividedDateTimeField0.getLeapAmount(783);
      int int1 = 152;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(remainderDateTimeField0, dateTimeFieldType0, 152);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, 152, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 152 for clockhourOfDay must not be larger than 24
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundFloor(1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      LocalDate localDate0 = new LocalDate();
      offsetDateTimeField0.getMinimumValue((ReadablePartial) localDate0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID(">=JE2DPQ*rK6P, d!5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '>=JE2DPQ*rK6P, d!5' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(islamicChronology0);
      dateTimeFieldType0.getRangeDurationType();
      DateTimeZone.setNameProvider((NameProvider) null);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 513);
      long long0 = new Integer(1);
      dividedDateTimeField0.roundHalfFloor(513);
      int int0 = 157;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType0, 157);
      remainderDateTimeField0.getRangeDurationField();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-490), 0, 1600);
      offsetDateTimeField0.roundHalfFloor(2629746000L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      MockDate mockDate0 = new MockDate((-490), 0, 513);
      LocalDateTime.fromDateFields(mockDate0);
      String string0 = "";
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (long) 157, (-3179));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -3179
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 3);
      offsetDateTimeField0.roundHalfFloor(30617280288L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      Locale locale0 = Locale.CANADA;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getLeapAmount(1);
      zeroIsMaxDateTimeField0.getMinimumValue();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      dateTimeFieldType0.getDurationType();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.remainder((-579L));
      Locale locale0 = Locale.ROOT;
      Locale locale1 = locale0.stripExtensions();
      locale1.stripExtensions();
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set(138L, (String) null, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for dayOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 1518;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1518);
      long long0 = 0L;
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.plusMonths(1059);
      yearMonth0.plusMonths((-1946));
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1518;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.set((ReadablePartial) yearMonth1, 93, intArray0, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 1518;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1518);
      long long0 = 0L;
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      yearMonth0.plusMonths(1059);
      int int1 = 93;
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1518;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      String string0 = "";
      Locale locale0 = Locale.US;
      List<Locale.LanguageRange> list0 = null;
      dividedDateTimeField0.getMaximumValue((ReadablePartial) yearMonth0);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) linkedList0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DurationField durationField0 = buddhistChronology0.seconds();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 2421);
      remainderDateTimeField0.roundHalfFloor(1);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      int[] intArray0 = new int[1];
      remainderDateTimeField0.roundCeiling(0L);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.add(0L, 0L);
      offsetDateTimeField0.roundHalfFloor(1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      dateTimeFieldType0.getRangeDurationType();
      offsetDateTimeField0.add(0L, 0L);
      offsetDateTimeField0.roundHalfEven(0L);
      offsetDateTimeField0.getMaximumValue((long) 1);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 1518;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1518);
      long long0 = 0L;
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.plusMonths(1059);
      int int1 = 93;
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1518;
      intArray0[3] = 0;
      intArray0[4] = 1;
      YearMonth.now();
      intArray0[5] = 0;
      Locale locale0 = Locale.US;
      dividedDateTimeField0.getMaximumValue((ReadablePartial) yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.set((ReadablePartial) yearMonth1, 93, intArray0, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2159);
      remainderDateTimeField0.roundHalfFloor((-2021L));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 1518;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1518);
      long long0 = 0L;
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.plusMonths(1059);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1518;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.set((ReadablePartial) yearMonth1, 93, intArray0, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1, 744, 12825000);
      offsetDateTimeField0.isLenient();
      offsetDateTimeField0.remainder(604800000L);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      offsetDateTimeField0.roundCeiling(744);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add(1662L, 0);
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      zeroIsMaxDateTimeField0.getAsText((ReadablePartial) localTime0, 1, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1, 744, 12825000);
      offsetDateTimeField0.isLenient();
      offsetDateTimeField0.remainder(604800000L);
      offsetDateTimeField0.roundCeiling(744);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add(1662L, 0);
      zeroIsMaxDateTimeField0.getLeapDurationField();
      offsetDateTimeField0.getName();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 1);
      long long0 = 2064L;
      offsetDateTimeField1.add(2064L, 2064L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField1, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      Locale locale0 = Locale.ROOT;
      offsetDateTimeField0.getAsShortText((-1719L), locale0);
      Locale locale1 = Locale.ROOT;
      locale1.getExtensionKeys();
      offsetDateTimeField0.getAsShortText(1, locale1);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      offsetDateTimeField0.getAsText((-1719L));
      offsetDateTimeField0.getAsShortText((-135L));
      dateTimeFieldType1.getRangeDurationType();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType1);
      zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      offsetDateTimeField0.set((long) 1, 1);
      zeroIsMaxDateTimeField0.set(10000000000L, 1);
      zeroIsMaxDateTimeField0.add((long) 1, (-1));
      zeroIsMaxDateTimeField0.getAsText(17L, locale1);
      zeroIsMaxDateTimeField0.roundHalfEven(2635L);
      offsetDateTimeField0.getDurationField();
      // Undeclared exception!
      try { 
        offsetDateTimeField0.convertText(" is not precise in the period ", locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \" is not precise in the period \" for weekOfWeekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1, 744, 12825000);
      offsetDateTimeField0.isLenient();
      offsetDateTimeField0.remainder(604800000L);
      offsetDateTimeField0.roundCeiling(744);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add(1662L, 0);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((long) 1, 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 44 for monthOfYear must be in the range [744,60]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getLeapDurationField();
      Locale locale0 = Locale.ITALIAN;
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      zeroIsMaxDateTimeField0.roundHalfCeiling(107L);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.roundHalfEven(0L);
      Locale locale0 = Locale.GERMAN;
      offsetDateTimeField0.getMaximumShortTextLength(locale0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.getLeapDurationField();
      offsetDateTimeField0.add(1780L, 1);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 93);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.isLeap((-31L));
      remainderDateTimeField0.getMinimumValue((long) 1);
      zeroIsMaxDateTimeField0.add((long) 93, 2780L);
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, (DurationField) null, (DurationField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.PreciseDurationDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, delegatedDurationField0);
      unsupportedDateTimeField0.getRangeDurationField();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 1929);
      int int0 = (-4014);
      remainderDateTimeField0.addWrapField((long) 1929, (-4014));
      int[] intArray0 = new int[6];
      intArray0[0] = 1929;
      intArray0[1] = (-4014);
      intArray0[2] = (-4014);
      intArray0[3] = (-729);
      intArray0[4] = (-4014);
      intArray0[5] = 1929;
      // Undeclared exception!
      try { 
        remainderDateTimeField0.addWrapField((ReadablePartial) null, 1, intArray0, 1929);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1, 744, 12825000);
      offsetDateTimeField0.remainder(604800000L);
      offsetDateTimeField0.roundCeiling(744);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) copticChronology0);
      Locale locale0 = new Locale("-Wu}x^@g", "2;0,D-n", "-Wu}x^@g");
      zeroIsMaxDateTimeField0.getAsText((ReadablePartial) yearMonth0, locale0);
      zeroIsMaxDateTimeField0.add(1662L, 0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType.year();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      DateTime dateTime1 = dateTime0.plusMillis(2421);
      localDate0.toInterval(dateTimeZone0);
      LocalDateTime localDateTime0 = dateTime1.toLocalDateTime();
      localDateTime0.minusMonths(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2421);
      remainderDateTimeField0.get(2644L);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      lenientDateTimeField0.getDifferenceAsLong(1, 1);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1, 744, 12825000);
      offsetDateTimeField0.isLenient();
      offsetDateTimeField0.remainder(604800000L);
      offsetDateTimeField0.roundCeiling(744);
      Locale locale0 = Locale.CANADA;
      offsetDateTimeField0.getAsText(744, locale0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1223));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-1223));
      offsetDateTimeField0.getAsText(2638L);
      offsetDateTimeField0.roundHalfEven((-1818L));
      offsetDateTimeField0.getType();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      int int0 = (-3679);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes((-3679));
      // Undeclared exception!
      try { 
        localDateTime1.withHourOfDay((-3679));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3679 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      BuddhistChronology.getInstance();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.getDifferenceAsLong(1, 1868L);
      offsetDateTimeField0.roundCeiling(26607895200000L);
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      offsetDateTimeField0.getMinimumValue((ReadablePartial) localDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getDifferenceAsLong(15308640144L, 15308640144L);
      zeroIsMaxDateTimeField0.getMinimumValue((-4526L));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DurationField durationField0 = buddhistChronology0.weekyears();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      int int0 = 2421;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 2421);
      remainderDateTimeField0.roundHalfFloor(1);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.isLeap(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      remainderDateTimeField0.roundHalfCeiling(2639L);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(zeroIsMaxDateTimeField0, 1);
      offsetDateTimeField0.getMinimumValue((-2419L));
      offsetDateTimeField0.roundHalfFloor(1);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      DateTime dateTime1 = dateTime0.plusMillis(2421);
      LocalDateTime localDateTime0 = dateTime1.toLocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        remainderDateTimeField0.add((ReadablePartial) localDateTime1, 1, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 9);
      offsetDateTimeField0.getLeapDurationField();
      offsetDateTimeField0.remainder(221L);
      offsetDateTimeField0.set(53L, 77);
      buddhistChronology0.equals(dateTimeField0);
      int[] intArray0 = new int[4];
      intArray0[0] = 77;
      intArray0[1] = 2;
      intArray0[2] = 9;
      intArray0[3] = 2;
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((ReadablePartial) null, 2, intArray0, "Oo;w/[$y!/", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Oo;w/[$y!/\" for weekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.getZone();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      dateTimeFieldType0.getField(iSOChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.getDifference(2367L, 31795200000L);
      offsetDateTimeField0.roundFloor(1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      lenientDateTimeField0.addWrapField(2551440384L, 1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1, 744, (-1879048191));
      offsetDateTimeField0.isLenient();
      offsetDateTimeField0.remainder(604800000L);
      long long0 = new Integer((-1879048191));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add(1662L, 0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DurationField durationField0 = buddhistChronology0.weekyears();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      int int0 = 2421;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 2421);
      remainderDateTimeField0.roundHalfFloor(1);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.isLeap(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      remainderDateTimeField0.roundHalfCeiling(2639L);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(zeroIsMaxDateTimeField0, 1);
      offsetDateTimeField0.roundHalfFloor(1);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      DateTime dateTime1 = dateTime0.plusMillis(2421);
      LocalDateTime localDateTime0 = dateTime1.toLocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        remainderDateTimeField0.add((ReadablePartial) localDateTime1, 1, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.add((-18L), (-18L));
      offsetDateTimeField0.roundHalfEven((-18L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      buddhistChronology0.toString();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getMinimumValue((long) 1);
      zeroIsMaxDateTimeField0.getLeapDurationField();
      zeroIsMaxDateTimeField0.getAsText(3114L);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set(24L, "EJSD+#pk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"EJSD+#pk\" for yearOfEra is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      dateTimeZone0.isStandardOffset(1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      buddhistChronology0.getZone();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.getMaximumValue();
      offsetDateTimeField0.roundCeiling(1L);
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      int[] intArray0 = new int[3];
      intArray0[0] = 101;
      intArray0[1] = 1;
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((ReadablePartial) localTime0, 1, intArray0, "", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for minuteOfHour is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      Locale locale0 = Locale.JAPANESE;
      locale0.toLanguageTag();
      offsetDateTimeField0.getAsShortText(1, locale0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      offsetDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, 1, locale1);
      offsetDateTimeField0.remainder(1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType.weekOfWeekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.roundHalfEven(1);
      Locale locale0 = Locale.JAPANESE;
      offsetDateTimeField0.isLeap((-926L));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1, 744, 12825000);
      offsetDateTimeField0.isLenient();
      offsetDateTimeField0.remainder(604800000L);
      offsetDateTimeField0.roundCeiling(744);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add(1662L, 0);
      zeroIsMaxDateTimeField0.getMaximumValue((-4182L));
      offsetDateTimeField0.toString();
      LocalDateTime localDateTime0 = new LocalDateTime((-3067L));
      int[] intArray0 = new int[2];
      intArray0[0] = 12825000;
      intArray0[1] = 1707;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) localDateTime0, 0, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      dateTimeFieldType0.getField(buddhistChronology0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 10);
      remainderDateTimeField0.addWrapField((-2432L), 1);
      remainderDateTimeField0.getLeapDurationField();
      LocalTime localTime0 = new LocalTime(2630L);
      int[] intArray0 = new int[6];
      intArray0[0] = 3350;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 10;
      intArray0[4] = 2133167090;
      intArray0[5] = 10;
      // Undeclared exception!
      try { 
        remainderDateTimeField0.addWrapField((ReadablePartial) localTime0, 2133167090, intArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2133167090
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(19);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      int int0 = (-1);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-1));
      offsetDateTimeField0.toString();
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 0);
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField1, dateTimeFieldType0, 19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must be supported
         //
         verifyException("org.joda.time.field.DecoratedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.add(0L, 0L);
      offsetDateTimeField0.roundHalfEven(0L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      LocalDateTime localDateTime0 = new LocalDateTime(2865L);
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(1);
      offsetDateTimeField0.getMinimumValue((ReadablePartial) localDateTime1);
      offsetDateTimeField0.add(0L, 0L);
      offsetDateTimeField0.roundHalfEven(0L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = (-1);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      offsetDateTimeField0.getDifferenceAsLong((-47L), 1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.roundHalfCeiling(1L);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField((DateTimeField) null, dateTimeFieldType0, (-17));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(julianChronology0, dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      Locale locale0 = Locale.CANADA;
      skipDateTimeField0.getAsText((-2134851390), locale0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipDateTimeField0, dateTimeFieldType0, 93, (-2127961068), 3600);
      offsetDateTimeField0.add((long) 3600, (-24L));
      offsetDateTimeField0.getMaximumValue((-24L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      buddhistChronology0.centuryOfEra();
      DateTimeFieldType.secondOfMinute();
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      yearMonth0.plusMonths(1059);
      yearMonth0.plusMonths((-1946));
      Period period0 = Period.years(2615625);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      period0.get(durationFieldType0);
      // Undeclared exception!
      try { 
        buddhistChronology0.add((ReadablePeriod) period0, (long) 93, 1021);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2670553125
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      Locale locale0 = Locale.ROOT;
      offsetDateTimeField0.getAsShortText((-1719L), locale0);
      Locale locale1 = Locale.ROOT;
      locale1.getExtensionKeys();
      offsetDateTimeField0.getAsShortText(1, locale1);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      offsetDateTimeField0.getAsText((-1719L));
      offsetDateTimeField0.getAsShortText((-135L));
      dateTimeFieldType1.getRangeDurationType();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType1);
      zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      offsetDateTimeField0.set((long) 1, 1);
      zeroIsMaxDateTimeField0.set(10000000000L, 1);
      zeroIsMaxDateTimeField0.add((long) 1, 1);
      zeroIsMaxDateTimeField0.getAsText(17L, locale1);
      zeroIsMaxDateTimeField0.roundHalfEven((-1719L));
      offsetDateTimeField0.getDurationField();
      offsetDateTimeField0.roundHalfCeiling((-1719L));
      zeroIsMaxDateTimeField0.getLeapAmount(1350L);
      zeroIsMaxDateTimeField0.getDifferenceAsLong(9997300000L, 2403L);
      zeroIsMaxDateTimeField0.roundHalfEven(2575L);
      zeroIsMaxDateTimeField0.addWrapField(604800000L, (-524));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      int int0 = 12825000;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1, 744, 12825000);
      offsetDateTimeField0.isLenient();
      int[] intArray0 = new int[2];
      intArray0[0] = 744;
      intArray0[1] = 1;
      offsetDateTimeField0.getMaximumValue((ReadablePartial) null, intArray0);
      offsetDateTimeField0.remainder(604800000L);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      offsetDateTimeField0.roundCeiling(744);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add(1662L, 12825000);
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      offsetDateTimeField0.getAsShortText((ReadablePartial) null, (-132), (Locale) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      int int1 = (-228);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=org/joda/time/tz/data
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 1518;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1518);
      long long0 = 0L;
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      yearMonth0.plusMonths(1059);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1518;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      Period period0 = Period.years(2615625);
      // Undeclared exception!
      try { 
        buddhistChronology0.add((ReadablePeriod) period0, (long) 1, 1021);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2670553125
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      Integer integer0 = new Integer(1);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      buddhistChronology0.equals(integer0);
      Locale locale0 = Locale.GERMAN;
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-251);
      intArray0[3] = (-251);
      intArray0[4] = (-251);
      intArray0[5] = (-251);
      intArray0[6] = (-251);
      zeroIsMaxDateTimeField0.addWrapPartial(localDateTime0, 0, intArray0, 0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, 1, (-251), 0);
      offsetDateTimeField0.getMaximumValue();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DurationField durationField0 = buddhistChronology0.weekyears();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 2421);
      remainderDateTimeField0.roundHalfFloor(1);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.isLeap(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      remainderDateTimeField0.roundHalfCeiling(2639L);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(zeroIsMaxDateTimeField0, 1);
      offsetDateTimeField0.roundHalfFloor(1);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      dateTime0.toDate();
      dateTime0.plusMillis(2421);
      remainderDateTimeField0.roundCeiling(0L);
      zeroIsMaxDateTimeField0.getMaximumTextLength((Locale) null);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(zeroIsMaxDateTimeField0, durationField0, dateTimeFieldType0, 3959);
      dividedDateTimeField0.remainder(2421);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      YearMonth yearMonth0 = new YearMonth(2622L);
      int[] intArray0 = new int[0];
      offsetDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0, intArray0);
      offsetDateTimeField0.roundHalfEven(0L);
      Locale locale0 = Locale.GERMAN;
      offsetDateTimeField0.getMaximumShortTextLength(locale0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      YearMonth yearMonth0 = new YearMonth(2622L);
      int[] intArray0 = new int[0];
      offsetDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0, intArray0);
      offsetDateTimeField0.roundHalfEven(0L);
      Locale locale0 = Locale.GERMAN;
      offsetDateTimeField0.getMaximumShortTextLength(locale0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.toString();
      offsetDateTimeField0.add(0L, 0L);
      offsetDateTimeField0.roundHalfEven(0L);
      offsetDateTimeField0.isSupported();
      offsetDateTimeField0.isLeap(2551440384L);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 1524;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1524);
      long long0 = 0L;
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      yearMonth0.plusMonths(1059);
      int int1 = 93;
      YearMonth yearMonth1 = yearMonth0.plusMonths((-1946));
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      dividedDateTimeField0.addWrapPartial(yearMonth1, 1, intArray0, 93);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      String string0 = "";
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      buddhistChronology0.toString();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      long long0 = (-732L);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) null, 1, intArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
