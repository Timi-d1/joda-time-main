/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 22:03:36 GMT 2025
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractReadableInstantFieldProperty_ESTest extends AbstractReadableInstantFieldProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(1141L, (Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      mutableDateTime_Property0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime.Property localTime_Property1 = localTime0.hourOfDay();
      boolean boolean0 = localTime_Property0.equals(localTime_Property1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(881L);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
      Interval interval0 = localDateTime_Property0.toInterval();
      assertEquals(31536000000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      Interval interval0 = localDateTime_Property0.toInterval();
      assertEquals((-12219033600000L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      LocalDate localDate0 = new LocalDate((-782L), dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      DateTime.Property dateTime_Property0 = dateTime0.millisOfDay();
      long long0 = dateTime_Property0.remainder();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1, 2, 1);
      LocalDate.Property localDate_Property0 = localDate0.year();
      DurationField durationField0 = localDate_Property0.getRangeDurationField();
      assertNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DateTime dateTime0 = localTime0.toDateTimeToday();
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfDay();
      int int0 = dateTime_Property0.getMinimumValueOverall();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      int int0 = localDate_Property0.getMinimumValueOverall();
      assertEquals((-292275054), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(10000000000L);
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      DateTime.Property dateTime_Property0 = dateTime0.yearOfCentury();
      int int0 = dateTime_Property0.getMinimumValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(10000000000L);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
      int int0 = mutableDateTime_Property0.getMinimumValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.year();
      DurationField durationField0 = localDate_Property0.getLeapDurationField();
      assertEquals("days", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      LocalDate localDate0 = monthDay0.toLocalDate(2252);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
      DateTimeField dateTimeField0 = localDate_Property0.getField();
      assertEquals(2922789, dateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      long long0 = localDate_Property0.getDifferenceAsLong(dateTime0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTime dateTime0 = new DateTime((long) 3750);
      DateTime.Property dateTime_Property0 = dateTime0.secondOfMinute();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime((Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfCeiling();
      long long0 = dateTime_Property0.getDifferenceAsLong(mutableDateTime1);
      assertEquals(9936003L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-9223372036854775808L), (Chronology) ethiopicChronology0);
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime.Property dateTime_Property0 = dateTime0.secondOfMinute();
      DateTime dateTime1 = dateTime_Property0.roundFloorCopy();
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.year();
      long long0 = localDate_Property0.getDifferenceAsLong(dateTime1);
      assertEquals((-292276980L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
      int int0 = localTime_Property0.getDifference(mutableDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      int int0 = localTime_Property0.get();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-9223372036854775808L), (Chronology) ethiopicChronology0);
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      LocalDate localDate0 = new LocalDate((long) 1);
      LocalDate.Property localDate_Property0 = localDate0.era();
      // Undeclared exception!
      try { 
        localDate_Property0.getDifferenceAsLong(dateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        localTime_Property0.getDifference(dateTime0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -1392409281320
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(26607895200000L);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfMonth();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        localDateTime_Property0.compareTo((ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1, 2, 1);
      LocalDate.Property localDate_Property0 = localDate0.year();
      int int0 = localDate_Property0.getMinimumValue();
      assertEquals((-292275054), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = mutableDateTime_Property0.getFieldType();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) copticChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.dayOfMonth();
      int int0 = dateTime_Property0.getMaximumValue();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      Locale locale0 = Locale.US;
      String string0 = mutableDateTime_Property0.getAsText(locale0);
      assertEquals("7", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime.Property dateTime_Property0 = dateTime0.secondOfDay();
      String string0 = dateTime_Property0.getAsShortText((Locale) null);
      assertEquals("73281", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(26607895200000L);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfMonth();
      int int0 = localDateTime_Property0.get();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 13, 0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      String string0 = localTime_Property0.getName();
      assertEquals("secondOfMinute", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      LocalTime localTime1 = localTime0.minusMinutes(23);
      LocalTime.Property localTime_Property1 = localTime1.millisOfDay();
      boolean boolean0 = localTime_Property0.equals(localTime_Property1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      boolean boolean0 = localTime_Property0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      LocalTime.Property localTime_Property1 = localTime0.hourOfDay();
      boolean boolean0 = localTime_Property0.equals(localTime_Property1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(1461L, dateTimeZone0);
      LocalTime localTime1 = localTime0.plusSeconds(17);
      LocalTime.Property localTime_Property0 = localTime1.secondOfMinute();
      int int0 = localTime_Property0.compareTo((ReadablePartial) localTime0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(1461L, dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.roundCeilingCopy();
      int int0 = localTime_Property0.compareTo((ReadablePartial) localTime1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((-221L), (Chronology) gregorianChronology0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      int int0 = localTime_Property0.compareTo((ReadablePartial) localTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      LocalDate localDate0 = new LocalDate(1, 2, 1);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay((DateTimeZone) null);
      int int0 = mutableDateTime_Property0.compareTo((ReadableInstant) dateTime0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1, 2, 1);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay((DateTimeZone) null);
      DateTime.Property dateTime_Property0 = dateTime0.yearOfCentury();
      DateTime dateTime1 = dateTime_Property0.roundCeilingCopy();
      int int0 = dateTime_Property0.compareTo((ReadableInstant) dateTime1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(26607895200000L);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfMonth();
      // Undeclared exception!
      try { 
        localDateTime_Property0.compareTo((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant must not be null
         //
         verifyException("org.joda.time.field.AbstractReadableInstantFieldProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1, 2, 1);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay((DateTimeZone) null);
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfHour();
      int int0 = dateTime_Property0.compareTo((ReadableInstant) dateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-9223372036854775808L), (Chronology) ethiopicChronology0);
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      // Undeclared exception!
      try { 
        localDate_Property0.getDifferenceAsLong(dateTime0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1392336000000 - -9223372036854775808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      int int0 = localTime_Property0.getDifference((ReadableInstant) null);
      assertEquals((-1392409281), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Chronology) iSOChronology0);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 0, (Chronology) iSOChronology0);
      int int0 = localTime_Property0.getDifference(mutableDateTime0);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((-221L), (Chronology) gregorianChronology0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      DurationField durationField0 = localTime_Property0.getRangeDurationField();
      assertEquals("seconds", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Chronology) iSOChronology0);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      long long0 = localTime_Property0.remainder();
      assertEquals(1281320L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 13, 0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      DurationField durationField0 = localTime_Property0.getLeapDurationField();
      assertNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 13, 0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      Interval interval0 = localTime_Property0.toInterval();
      assertEquals(781000L, interval0.getEndMillis());
      assertEquals(780000L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(1461L, dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      int int0 = localTime_Property0.getMaximumValueOverall();
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      String string0 = mutableDateTime_Property0.getAsString();
      assertEquals("7", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 13, 0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      String string0 = localTime_Property0.getAsShortText();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(1461L, dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      Locale locale0 = Locale.KOREA;
      int int0 = localTime_Property0.getMaximumShortTextLength(locale0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
      DateTime dateTime0 = new DateTime(779, (-1), 429, 88, 779, 779, 2733, lenientChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.dayOfWeek();
      String string0 = dateTime_Property0.getAsText();
      assertEquals("Monday", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      int int0 = mutableDateTime_Property0.getMinimumValueOverall();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      DurationField durationField0 = mutableDateTime_Property0.getDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(1461L, dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      int int0 = localTime_Property0.getMaximumTextLength((Locale) null);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 13, 0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      int int0 = localTime_Property0.getLeapAmount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1, 2, 1);
      LocalDate.Property localDate_Property0 = localDate0.year();
      String string0 = localDate_Property0.toString();
      assertEquals("Property[year]", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      boolean boolean0 = localDate_Property0.isLeap();
      assertFalse(boolean0);
  }
}
