/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 20:38:43 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = 1;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PeriodFormat.millisecond");
      assertFalse(boolean0);
      
      Period period1 = period0.withWeeks(1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      PeriodType.SECOND_INDEX = 623158436;
      // Undeclared exception!
      try { 
        period1.withSeconds(352831696);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 623158436
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      assertNotNull(seconds0);
      assertEquals(1, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Chronology chronology0 = zonedChronology0.withUTC();
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(chronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(1881L, periodType0, chronology0);
      assertNotNull(mutablePeriod0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Period period0 = mutablePeriod0.toPeriod();
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(period0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(period1.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        period1.withYears(806);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w[.hZIfng@");
      assertFalse(boolean0);
      
      Period period0 = Period.hours(2444);
      assertNotNull(period0);
      
      Period period1 = period0.multipliedBy(2444);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.withWeeks((-1931));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Minutes minutes0 = period2.toStandardMinutes();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      assertEquals(338923680, minutes0.getMinutes());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period1.plusSeconds(2444);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Period period4 = period2.withMillis((-2631));
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      
      Period period5 = Period.millis((-5773));
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      
      int int0 = period1.getWeeks();
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period0);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period0));
      
      Period period6 = period2.withYears(28265625);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period2, period6);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotSame(period6, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotNull(period6);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Period period0 = null;
      try {
        period0 = new Period(917L, (-9223372036854775808L), gJChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 7014576573
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      assertNotNull(period0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.hours();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType.MILLI_INDEX = 289;
      // Undeclared exception!
      try { 
        period0.withMillis(4071);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 289
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.hours(0);
      assertNotNull(period0);
      
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      
      int int1 = period0.ZERO.get(durationFieldType0);
      assertEquals(0, int1);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertTrue(int1 == int0);
      
      Period period1 = period0.minusHours(8);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Days days0 = period1.ZERO.toStandardDays();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(days0);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Period period2 = period1.minusSeconds(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertSame(period1, period2);
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      
      PeriodType.DAY_INDEX = (-1);
      DurationField durationField0 = durationFieldType0.getField(gJChronology0);
      assertNotNull(durationField0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertEquals("DurationField[millis]", durationField0.toString());
      
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      assertSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      assertSame(gJChronology0, gJChronology1);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      Period period3 = Period.fieldDifference(localDateTime0, localDateTime0);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertEquals(4, localDateTime0.size());
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      
      Period period4 = period3.ZERO.plusDays(0);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertEquals(4, localDateTime0.size());
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      
      Period period5 = Period.millis(2237);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      
      PeriodType.HOUR_INDEX = 0;
      Period period6 = period4.withField(durationFieldType0, 2237);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period4);
      assertNotSame(period6, period1);
      assertNotSame(period6, period5);
      assertNotSame(period6, period3);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period3, period6);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period4, period6);
      assertNotSame(period4, period1);
      assertNotSame(period4, period5);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotNull(period6);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(4, localDateTime0.size());
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period3));
      assertTrue(period6.equals((Object)period5));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      
      int int2 = period3.getSeconds();
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period3, period6);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertEquals(0, int2);
      assertEquals(4, localDateTime0.size());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      
      Period period7 = period0.withMinutes(60);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotNull(period7);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      
      Period period8 = period7.minusMonths(292272708);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period8);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertNotSame(period7, period8);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period4);
      assertNotSame(period8, period3);
      assertNotSame(period8, period2);
      assertNotSame(period8, period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period5);
      assertNotNull(period8);
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period5));
      
      Period period9 = period7.plusSeconds(0);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period8);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertSame(period7, period9);
      assertNotSame(period7, period8);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period9, period6);
      assertNotSame(period9, period1);
      assertNotSame(period9, period4);
      assertNotSame(period9, period0);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period9, period3);
      assertSame(period9, period7);
      assertNotNull(period9);
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      
      int int3 = period9.ZERO.getWeeks();
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period8);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertSame(period7, period9);
      assertNotSame(period7, period8);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period9, period6);
      assertNotSame(period9, period1);
      assertNotSame(period9, period4);
      assertNotSame(period9, period0);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period9, period3);
      assertSame(period9, period7);
      assertEquals(0, int3);
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      int int4 = period9.ZERO.getHours();
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period8);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertSame(period7, period9);
      assertNotSame(period7, period8);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period9, period6);
      assertNotSame(period9, period1);
      assertNotSame(period9, period4);
      assertNotSame(period9, period0);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period9, period3);
      assertSame(period9, period7);
      assertEquals(0, int4);
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      
      Period period10 = period8.withSeconds(0);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period10);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period8);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertSame(period7, period9);
      assertNotSame(period7, period8);
      assertNotSame(period7, period3);
      assertNotSame(period7, period10);
      assertNotSame(period7, period2);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period4);
      assertNotSame(period8, period3);
      assertNotSame(period8, period10);
      assertNotSame(period8, period2);
      assertNotSame(period8, period9);
      assertNotSame(period8, period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period5);
      assertNotSame(period10, period1);
      assertNotSame(period10, period3);
      assertNotSame(period10, period5);
      assertNotSame(period10, period0);
      assertNotSame(period10, period2);
      assertNotSame(period10, period8);
      assertNotSame(period10, period7);
      assertNotSame(period10, period9);
      assertNotSame(period10, period4);
      assertNotSame(period10, period6);
      assertNotNull(period10);
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period10.equals((Object)period1));
      assertTrue(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period6));
      
      Period period11 = Period.years(8);
      assertNotSame(period11, period1);
      assertNotSame(period11, period6);
      assertNotSame(period11, period9);
      assertNotSame(period11, period2);
      assertNotSame(period11, period3);
      assertNotSame(period11, period8);
      assertNotSame(period11, period10);
      assertNotSame(period11, period7);
      assertNotSame(period11, period0);
      assertNotSame(period11, period4);
      assertNotSame(period11, period5);
      assertNotNull(period11);
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period5));
      
      Period period12 = Period.weeks((-390));
      assertNotSame(period12, period3);
      assertNotSame(period12, period5);
      assertNotSame(period12, period11);
      assertNotSame(period12, period8);
      assertNotSame(period12, period0);
      assertNotSame(period12, period2);
      assertNotSame(period12, period10);
      assertNotSame(period12, period9);
      assertNotSame(period12, period6);
      assertNotSame(period12, period7);
      assertNotSame(period12, period1);
      assertNotSame(period12, period4);
      assertNotNull(period12);
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period4));
      
      Period period13 = Period.months(292272708);
      assertNotSame(period13, period2);
      assertNotSame(period13, period9);
      assertNotSame(period13, period12);
      assertNotSame(period13, period6);
      assertNotSame(period13, period7);
      assertNotSame(period13, period1);
      assertNotSame(period13, period11);
      assertNotSame(period13, period8);
      assertNotSame(period13, period0);
      assertNotSame(period13, period10);
      assertNotSame(period13, period4);
      assertNotSame(period13, period3);
      assertNotSame(period13, period5);
      assertNotNull(period13);
      assertFalse(period13.equals((Object)period2));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period12));
      assertFalse(period13.equals((Object)period6));
      assertFalse(period13.equals((Object)period7));
      assertFalse(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period8));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period5));
      
      int int5 = period10.getMinutes();
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period13);
      assertNotSame(period0, period10);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period12);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period11);
      assertNotSame(period0, period8);
      assertNotSame(period7, period6);
      assertNotSame(period7, period12);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertSame(period7, period9);
      assertNotSame(period7, period11);
      assertNotSame(period7, period8);
      assertNotSame(period7, period2);
      assertNotSame(period7, period13);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period3);
      assertNotSame(period7, period10);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(period8, period2);
      assertNotSame(period8, period9);
      assertNotSame(period8, period7);
      assertNotSame(period8, period5);
      assertNotSame(period8, period4);
      assertNotSame(period8, period13);
      assertNotSame(period8, period10);
      assertNotSame(period8, period11);
      assertNotSame(period8, period0);
      assertNotSame(period8, period12);
      assertNotSame(period10, period5);
      assertNotSame(period10, period0);
      assertNotSame(period10, period4);
      assertNotSame(period10, period13);
      assertNotSame(period10, period1);
      assertNotSame(period10, period3);
      assertNotSame(period10, period12);
      assertNotSame(period10, period2);
      assertNotSame(period10, period8);
      assertNotSame(period10, period7);
      assertNotSame(period10, period9);
      assertNotSame(period10, period11);
      assertNotSame(period10, period6);
      assertEquals(60, int5);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period13));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period12));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period11));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period10));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period5));
      assertTrue(period8.equals((Object)period10));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period13));
      assertFalse(period8.equals((Object)period11));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period12));
      assertTrue(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period13));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period12));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period11));
      assertFalse(period10.equals((Object)period6));
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      
      // Undeclared exception!
      try { 
        period3.plus(period8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(881L);
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      
      int int0 = 262;
      Period period1 = period0.minusYears(262);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      int int1 = period1.getYears();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals((-262), int1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(int1 == int0);
      
      Period period2 = period1.negated();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      int int2 = 636;
      Period period3 = Period.millis(636);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      // Undeclared exception!
      try { 
        LocalDate.parse("p}>~\"eG)nQa", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p}>~\"eG)nQa\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(31083663600000L);
      assertNotNull(duration0);
      assertEquals(1865019816000000L, duration0.getStandardSeconds());
      assertEquals(1865019816000000000L, duration0.getMillis());
      assertEquals(518061060000L, duration0.getStandardHours());
      assertEquals(21585877500L, duration0.getStandardDays());
      assertEquals(31083663600000L, duration0.getStandardMinutes());
      
      Period period0 = new Period((ReadableInstant) null, duration0);
      assertNotNull(period0);
      assertEquals(1865019816000000L, duration0.getStandardSeconds());
      assertEquals(1865019816000000000L, duration0.getMillis());
      assertEquals(518061060000L, duration0.getStandardHours());
      assertEquals(21585877500L, duration0.getStandardDays());
      assertEquals(31083663600000L, duration0.getStandardMinutes());
      
      Period period1 = period0.minusWeeks((-292272708));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1865019816000000L, duration0.getStandardSeconds());
      assertEquals(1865019816000000000L, duration0.getMillis());
      assertEquals(518061060000L, duration0.getStandardHours());
      assertEquals(21585877500L, duration0.getStandardDays());
      assertEquals(31083663600000L, duration0.getStandardMinutes());
      assertFalse(period1.equals((Object)period0));
      
      PeriodType.DAY_INDEX = (-292272708);
      Period period2 = period0.withWeeks((-292272708));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals(1865019816000000L, duration0.getStandardSeconds());
      assertEquals(1865019816000000000L, duration0.getMillis());
      assertEquals(518061060000L, duration0.getStandardHours());
      assertEquals(21585877500L, duration0.getStandardDays());
      assertEquals(31083663600000L, duration0.getStandardMinutes());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-108);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte) (-108)}, byteArray0);
      
      // Undeclared exception!
      try { 
        period0.plusDays((-2569));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -292272708
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 3;
      Period period0 = Period.weeks(3);
      assertNotNull(period0);
      
      Period period1 = period0.minusYears(85);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.minusHours(1147);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period1.minusSeconds(6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      
      PeriodType.DAY_INDEX = 1214;
      // Undeclared exception!
      try { 
        period3.ZERO.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = new Period(11L);
      assertNotNull(period0);
      
      Duration duration0 = period0.toDurationFrom((ReadableInstant) null);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(11L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      
      int int0 = 0;
      PeriodType.MINUTE_INDEX = 2114;
      Period period1 = period0.plusDays(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      
      PeriodType.MONTH_INDEX = 2114;
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      PeriodType periodType1 = PeriodType.minutes();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Minutes", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      int int1 = period1.size();
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      
      int int2 = period1.getYears();
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = period1.getWeeks();
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      Period period2 = period1.minusYears((-3384));
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      PeriodType.YEAR_INDEX = 2114;
      Period period3 = period1.multipliedBy(8);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertNotSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      // Undeclared exception!
      try { 
        period3.minusYears(2114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2114
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = new Period(31556952000L, 31556952000L);
      assertNotNull(period0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Seconds seconds0 = period0.ZERO.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      
      PeriodType periodType1 = PeriodType.millis();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period1 = period0.withDays((-345));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.withHours((-1));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      PeriodType.YEAR_INDEX = (-308);
      Period period3 = period0.plusMillis(0);
      assertSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      // Undeclared exception!
      try { 
        period3.plusYears(2483);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -308
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.years(17971875);
      assertNotNull(period0);
      
      int int0 = period0.getHours();
      assertEquals(0, int0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.ZERO.withMillis(17971875);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Weeks weeks0 = period2.ZERO.toStandardWeeks();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(weeks0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period2.plusDays(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertSame(period2, period3);
      assertSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTimeNoDays", periodType1.getName());
      assertEquals(6, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.yearMonthDayTime();
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertNotNull(periodType2);
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertEquals(7, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType1));
      
      Integer integer0 = new Integer(17971875);
      assertEquals(17971875, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Days days0 = period2.toStandardDays();
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertSame(period2, period3);
      assertNotNull(days0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      int int1 = period0.getYears();
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertEquals(17971875, int1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(int1 == int0);
      
      Period period4 = period0.withMinutes(17971875);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      
      Period period5 = period0.plus(period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      
      Period period6 = period3.plusMonths((int) integer0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period6);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period3, period5);
      assertNotSame(period3, period6);
      assertNotSame(period3, period4);
      assertSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period6, period3);
      assertNotNull(period6);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period3));
      
      Period period7 = period6.normalizedStandard(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period7);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period6);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period7);
      assertSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period3, period5);
      assertNotSame(period3, period6);
      assertNotSame(period3, period7);
      assertNotSame(period3, period4);
      assertSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period7);
      assertNotSame(period6, period0);
      assertNotSame(period6, period3);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period7, period0);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotNull(period7);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      
      Period period8 = period5.ZERO.withYears(17971875);
      assertNotSame(period8, period5);
      assertNotSame(period8, period1);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotSame(period8, period3);
      assertNotSame(period8, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period8);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period7);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period2, period8);
      assertNotSame(period2, period0);
      assertNotSame(period2, period6);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period7);
      assertSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period7);
      assertNotSame(period5, period8);
      assertNotSame(period5, period6);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotNull(period8);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period2));
      assertTrue(period8.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      
      Period period9 = period8.minusMinutes(2559);
      assertNotSame(period8, period5);
      assertNotSame(period8, period1);
      assertNotSame(period8, period9);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotSame(period8, period3);
      assertNotSame(period8, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period9, period3);
      assertNotSame(period9, period2);
      assertNotSame(period9, period7);
      assertNotSame(period9, period6);
      assertNotSame(period9, period4);
      assertNotSame(period9, period8);
      assertNotSame(period9, period1);
      assertNotSame(period9, period5);
      assertNotSame(period9, period0);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period8);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period7);
      assertNotSame(period1, period0);
      assertNotSame(period1, period9);
      assertNotSame(period1, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period2, period8);
      assertNotSame(period2, period0);
      assertNotSame(period2, period6);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period9);
      assertNotSame(period2, period7);
      assertSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period7);
      assertNotSame(period5, period8);
      assertNotSame(period5, period6);
      assertNotSame(period5, period9);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotNull(period9);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period2));
      assertTrue(period8.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period0));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period8));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      
      Instant instant0 = Instant.ofEpochSecond(2907L);
      assertNotNull(instant0);
      assertEquals(2907000L, instant0.getMillis());
      
      Instant instant1 = instant0.plus((long) integer0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      assertEquals(2907000L, instant0.getMillis());
      assertEquals(20878875L, instant1.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Duration duration0 = period0.ZERO.toDurationTo(instant1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(duration0);
      assertEquals(2907000L, instant0.getMillis());
      assertEquals(20878875L, instant1.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      
      Period period10 = period4.withField(durationFieldType0, 17971875);
      assertNotSame(period0, period1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period10, period7);
      assertNotSame(period10, period1);
      assertNotSame(period10, period6);
      assertNotSame(period10, period9);
      assertNotSame(period10, period3);
      assertNotSame(period10, period2);
      assertNotSame(period10, period4);
      assertNotSame(period10, period8);
      assertNotSame(period10, period5);
      assertNotSame(period10, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period6);
      assertNotSame(period4, period9);
      assertNotSame(period4, period2);
      assertNotSame(period4, period10);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period7);
      assertNotSame(period4, period8);
      assertNotNull(period10);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period9));
      assertTrue(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period8));
      
      int int2 = period10.ZERO.getMillis();
      assertNotSame(period0, period1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period10, period7);
      assertNotSame(period10, period1);
      assertNotSame(period10, period6);
      assertNotSame(period10, period9);
      assertNotSame(period10, period3);
      assertNotSame(period10, period2);
      assertNotSame(period10, period4);
      assertNotSame(period10, period8);
      assertNotSame(period10, period5);
      assertNotSame(period10, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period6);
      assertNotSame(period4, period9);
      assertNotSame(period4, period2);
      assertNotSame(period4, period10);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period7);
      assertNotSame(period4, period8);
      assertEquals(0, int2);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period9));
      assertTrue(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period10));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period8));
      
      Period period11 = period10.ZERO.withFields(period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period11);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period8);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period7);
      assertNotSame(period1, period11);
      assertNotSame(period1, period0);
      assertNotSame(period1, period9);
      assertNotSame(period1, period10);
      assertNotSame(period1, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period2, period10);
      assertNotSame(period2, period8);
      assertNotSame(period2, period0);
      assertNotSame(period2, period6);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period9);
      assertNotSame(period2, period11);
      assertNotSame(period2, period7);
      assertSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period10, period7);
      assertNotSame(period10, period1);
      assertNotSame(period10, period6);
      assertNotSame(period10, period9);
      assertNotSame(period10, period3);
      assertNotSame(period10, period2);
      assertNotSame(period10, period4);
      assertNotSame(period10, period8);
      assertNotSame(period10, period5);
      assertNotSame(period10, period11);
      assertNotSame(period10, period0);
      assertNotSame(period3, period5);
      assertNotSame(period3, period9);
      assertNotSame(period3, period6);
      assertNotSame(period3, period7);
      assertNotSame(period3, period4);
      assertSame(period3, period2);
      assertNotSame(period3, period10);
      assertNotSame(period3, period8);
      assertNotSame(period3, period11);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period11, period0);
      assertNotSame(period11, period7);
      assertNotSame(period11, period8);
      assertNotSame(period11, period5);
      assertNotSame(period11, period4);
      assertNotSame(period11, period2);
      assertNotSame(period11, period1);
      assertNotSame(period11, period3);
      assertNotSame(period11, period6);
      assertNotSame(period11, period9);
      assertNotSame(period11, period10);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period6);
      assertNotSame(period4, period9);
      assertNotSame(period4, period2);
      assertNotSame(period4, period10);
      assertNotSame(period4, period3);
      assertNotSame(period4, period11);
      assertNotSame(period4, period0);
      assertNotSame(period4, period7);
      assertNotSame(period4, period8);
      assertNotNull(period11);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period9));
      assertTrue(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period11.equals((Object)period0));
      assertTrue(period11.equals((Object)period3));
      assertTrue(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period10));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period8));
      
      Period period12 = period10.plusWeeks((-1203));
      assertNotSame(period0, period12);
      assertNotSame(period0, period1);
      assertNotSame(period0, period10);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period11);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period10, period7);
      assertNotSame(period10, period1);
      assertNotSame(period10, period6);
      assertNotSame(period10, period12);
      assertNotSame(period10, period9);
      assertNotSame(period10, period3);
      assertNotSame(period10, period2);
      assertNotSame(period10, period4);
      assertNotSame(period10, period8);
      assertNotSame(period10, period5);
      assertNotSame(period10, period11);
      assertNotSame(period10, period0);
      assertNotSame(period12, period7);
      assertNotSame(period12, period0);
      assertNotSame(period12, period5);
      assertNotSame(period12, period11);
      assertNotSame(period12, period9);
      assertNotSame(period12, period1);
      assertNotSame(period12, period3);
      assertNotSame(period12, period6);
      assertNotSame(period12, period2);
      assertNotSame(period12, period10);
      assertNotSame(period12, period8);
      assertNotSame(period12, period4);
      assertNotSame(period4, period1);
      assertNotSame(period4, period5);
      assertNotSame(period4, period6);
      assertNotSame(period4, period12);
      assertNotSame(period4, period9);
      assertNotSame(period4, period2);
      assertNotSame(period4, period10);
      assertNotSame(period4, period3);
      assertNotSame(period4, period11);
      assertNotSame(period4, period0);
      assertNotSame(period4, period8);
      assertNotSame(period4, period7);
      assertNotNull(period12);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period9));
      assertTrue(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period11));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period11));
      assertFalse(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period10));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period8));
      
      Period period13 = period8.plusMillis(17971875);
      assertNotSame(period8, period13);
      assertNotSame(period8, period12);
      assertNotSame(period8, period4);
      assertNotSame(period8, period10);
      assertNotSame(period8, period3);
      assertNotSame(period8, period2);
      assertNotSame(period8, period1);
      assertNotSame(period8, period5);
      assertNotSame(period8, period9);
      assertNotSame(period8, period6);
      assertNotSame(period8, period11);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period0, period12);
      assertNotSame(period0, period10);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period11);
      assertNotSame(period0, period8);
      assertNotSame(period0, period13);
      assertNotSame(period0, period4);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period4);
      assertNotSame(period1, period13);
      assertNotSame(period1, period11);
      assertNotSame(period1, period0);
      assertNotSame(period1, period10);
      assertNotSame(period1, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period1, period12);
      assertNotSame(period1, period9);
      assertNotSame(period2, period10);
      assertNotSame(period2, period0);
      assertNotSame(period2, period6);
      assertNotSame(period2, period12);
      assertNotSame(period2, period5);
      assertSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period8);
      assertNotSame(period2, period1);
      assertNotSame(period2, period9);
      assertNotSame(period2, period11);
      assertNotSame(period2, period4);
      assertNotSame(period2, period13);
      assertNotSame(period13, period4);
      assertNotSame(period13, period3);
      assertNotSame(period13, period2);
      assertNotSame(period13, period10);
      assertNotSame(period13, period8);
      assertNotSame(period13, period0);
      assertNotSame(period13, period1);
      assertNotSame(period13, period6);
      assertNotSame(period13, period9);
      assertNotSame(period13, period5);
      assertNotSame(period13, period11);
      assertNotSame(period13, period7);
      assertNotSame(period13, period12);
      assertNotSame(period5, period10);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period7);
      assertNotSame(period5, period11);
      assertNotSame(period5, period9);
      assertNotSame(period5, period12);
      assertNotSame(period5, period13);
      assertNotSame(period5, period3);
      assertNotSame(period5, period8);
      assertNotSame(period5, period6);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotNull(period13);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period12));
      assertFalse(period8.equals((Object)period11));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period10));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period2));
      assertTrue(period8.equals((Object)period0));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period12));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period2));
      assertFalse(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period8));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period6));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period7));
      assertTrue(period13.equals((Object)period5));
      assertFalse(period13.equals((Object)period12));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period10));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period8));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period11));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period9));
      assertFalse(period5.equals((Object)period12));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      
      Period period14 = period1.minusMillis((-1811));
      assertNotSame(period0, period12);
      assertNotSame(period0, period10);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period14);
      assertNotSame(period0, period1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period11);
      assertNotSame(period0, period8);
      assertNotSame(period0, period13);
      assertNotSame(period0, period4);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period4);
      assertNotSame(period1, period13);
      assertNotSame(period1, period11);
      assertNotSame(period1, period0);
      assertNotSame(period1, period10);
      assertNotSame(period1, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period14);
      assertNotSame(period1, period8);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period1, period12);
      assertNotSame(period1, period9);
      assertNotSame(period14, period4);
      assertNotSame(period14, period12);
      assertNotSame(period14, period13);
      assertNotSame(period14, period2);
      assertNotSame(period14, period0);
      assertNotSame(period14, period11);
      assertNotSame(period14, period8);
      assertNotSame(period14, period5);
      assertNotSame(period14, period9);
      assertNotSame(period14, period3);
      assertNotSame(period14, period6);
      assertNotSame(period14, period1);
      assertNotSame(period14, period10);
      assertNotSame(period14, period7);
      assertNotNull(period14);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period4));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period13));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period14.equals((Object)period4));
      assertFalse(period14.equals((Object)period12));
      assertFalse(period14.equals((Object)period13));
      assertFalse(period14.equals((Object)period2));
      assertFalse(period14.equals((Object)period0));
      assertFalse(period14.equals((Object)period11));
      assertFalse(period14.equals((Object)period8));
      assertFalse(period14.equals((Object)period5));
      assertFalse(period14.equals((Object)period9));
      assertFalse(period14.equals((Object)period3));
      assertFalse(period14.equals((Object)period6));
      assertFalse(period14.equals((Object)period1));
      assertFalse(period14.equals((Object)period10));
      assertFalse(period14.equals((Object)period7));
      
      Duration duration1 = period14.toStandardDuration();
      assertNotSame(period0, period12);
      assertNotSame(period0, period10);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period14);
      assertNotSame(period0, period1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period11);
      assertNotSame(period0, period8);
      assertNotSame(period0, period13);
      assertNotSame(period0, period4);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period4);
      assertNotSame(period1, period13);
      assertNotSame(period1, period11);
      assertNotSame(period1, period0);
      assertNotSame(period1, period10);
      assertNotSame(period1, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period14);
      assertNotSame(period1, period8);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period1, period12);
      assertNotSame(period1, period9);
      assertNotSame(period14, period4);
      assertNotSame(period14, period12);
      assertNotSame(period14, period13);
      assertNotSame(period14, period2);
      assertNotSame(period14, period0);
      assertNotSame(period14, period11);
      assertNotSame(period14, period8);
      assertNotSame(period14, period5);
      assertNotSame(period14, period9);
      assertNotSame(period14, period3);
      assertNotSame(period14, period6);
      assertNotSame(period14, period1);
      assertNotSame(period14, period10);
      assertNotSame(period14, period7);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(1811L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(1L, duration1.getStandardSeconds());
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period14));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period4));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period13));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period14));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period14.equals((Object)period4));
      assertFalse(period14.equals((Object)period12));
      assertFalse(period14.equals((Object)period13));
      assertFalse(period14.equals((Object)period2));
      assertFalse(period14.equals((Object)period0));
      assertFalse(period14.equals((Object)period11));
      assertFalse(period14.equals((Object)period8));
      assertFalse(period14.equals((Object)period5));
      assertFalse(period14.equals((Object)period9));
      assertFalse(period14.equals((Object)period3));
      assertFalse(period14.equals((Object)period6));
      assertFalse(period14.equals((Object)period1));
      assertFalse(period14.equals((Object)period10));
      assertFalse(period14.equals((Object)period7));
      assertFalse(duration1.equals((Object)duration0));
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-3371), 17971875, (-440));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3371 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-94), (byte)17}, byteArray0);
      
      Period period0 = new Period(604800000L, (byte) (-94), (PeriodType) null);
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      assertEquals((-1), weeks0.getWeeks());
      
      Days days0 = period0.toStandardDays();
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals((-7), days0.getDays());
      
      Period period1 = period0.minusHours((byte)17);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Period period0 = Period.days((-1507));
      assertNotNull(period0);
      
      Period period1 = Period.seconds(6258);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Period period2 = period0.withMillis(Integer.MAX_VALUE);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      int int0 = period2.ZERO.getYears();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Days days0 = period2.toStandardDays();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(days0);
      assertEquals((-1483), days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = Period.minutes(Integer.MAX_VALUE);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      Minutes minutes0 = period2.toStandardMinutes();
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      assertEquals((-2134289), minutes0.getMinutes());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      
      Days days1 = period0.toStandardDays();
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(days1, days0);
      assertNotNull(days1);
      assertEquals((-1507), days1.getDays());
      assertEquals(1, days1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(days1.equals((Object)days0));
      
      PeriodType periodType1 = PeriodType.time();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Time", periodType1.getName());
      assertEquals(4, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period4 = period3.negated();
      assertNotSame(period3, period4);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      
      PeriodType periodType2 = PeriodType.yearDay();
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      assertEquals("YearDay", periodType2.getName());
      assertEquals(2, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      Period period5 = Period.months(0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      
      System.setCurrentTimeMillis(6258);
      Duration duration0 = Duration.millis(1000000000000000L);
      assertNotNull(duration0);
      assertEquals(11574074L, duration0.getStandardDays());
      assertEquals(1000000000000L, duration0.getStandardSeconds());
      assertEquals(16666666666L, duration0.getStandardMinutes());
      assertEquals(277777777L, duration0.getStandardHours());
      assertEquals(1000000000000000L, duration0.getMillis());
      
      Period period6 = duration0.toPeriod(periodType0);
      assertNotSame(period6, period0);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotNull(period6);
      assertEquals(11574074L, duration0.getStandardDays());
      assertEquals(1000000000000L, duration0.getStandardSeconds());
      assertEquals(16666666666L, duration0.getStandardMinutes());
      assertEquals(277777777L, duration0.getStandardHours());
      assertEquals(1000000000000000L, duration0.getMillis());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period1));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      
      // Undeclared exception!
      try { 
        period3.plus(period6);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 46
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1532L));
      assertNotNull(duration0);
      assertEquals((-5515200L), duration0.getStandardSeconds());
      assertEquals((-63L), duration0.getStandardDays());
      assertEquals((-91920L), duration0.getStandardMinutes());
      assertEquals((-1532L), duration0.getStandardHours());
      assertEquals((-5515200000L), duration0.getMillis());
      
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = duration0.toPeriod(periodType0);
      assertNotNull(period0);
      assertEquals((-5515200L), duration0.getStandardSeconds());
      assertEquals((-63L), duration0.getStandardDays());
      assertEquals((-91920L), duration0.getStandardMinutes());
      assertEquals((-1532L), duration0.getStandardHours());
      assertEquals((-5515200000L), duration0.getMillis());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      int int0 = (-2698);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-2698));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.hours(0);
      assertNotNull(period0);
      
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      
      int int1 = period0.ZERO.get(durationFieldType0);
      assertEquals(0, int1);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertTrue(int1 == int0);
      
      Period period1 = period0.minusHours(8);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.plusHours(4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Days days0 = Days.FIVE;
      assertNotNull(days0);
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Period period3 = period2.minusSeconds(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertSame(period2, period3);
      assertNotSame(period2, period0);
      assertSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      DurationField durationField0 = durationFieldType0.getField(gJChronology0);
      assertNotNull(durationField0);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationField0.getName());
      assertEquals("DurationField[millis]", durationField0.toString());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      assertSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      assertSame(gJChronology0, gJChronology1);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      Period period4 = Period.fieldDifference(localDateTime0, localDateTime0);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertEquals(4, localDateTime0.size());
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      
      Period period5 = period4.ZERO.plusDays(0);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period5);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotNull(period5);
      assertEquals(4, localDateTime0.size());
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      
      Period period6 = Period.millis(2237);
      assertNotSame(period6, period0);
      assertNotSame(period6, period3);
      assertNotSame(period6, period2);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotSame(period6, period4);
      assertNotNull(period6);
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period4));
      
      PeriodType.HOUR_INDEX = 0;
      Period period7 = period5.withField(durationFieldType0, 2237);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period6);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period2);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period6);
      assertNotSame(period4, period2);
      assertNotSame(period4, period7);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period5);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period2);
      assertNotSame(period5, period7);
      assertNotSame(period5, period0);
      assertNotNull(period7);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals(4, localDateTime0.size());
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertTrue(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period2));
      
      int int2 = period4.getSeconds();
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period6);
      assertNotSame(period4, period2);
      assertNotSame(period4, period7);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period5);
      assertEquals(0, int2);
      assertEquals(4, localDateTime0.size());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period5));
      
      Period period8 = period2.withMinutes(60);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period8);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period8);
      assertSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period4);
      assertNotSame(period2, period7);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotNull(period8);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      
      Period period9 = period8.minusMonths(292272708);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period6);
      assertNotSame(period0, period8);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period8, period9);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period2);
      assertNotSame(period9, period4);
      assertNotSame(period9, period5);
      assertNotSame(period9, period1);
      assertNotSame(period9, period3);
      assertNotSame(period9, period6);
      assertNotSame(period9, period2);
      assertNotSame(period9, period7);
      assertNotSame(period9, period8);
      assertNotSame(period9, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period8);
      assertNotSame(period2, period9);
      assertSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period4);
      assertNotSame(period2, period7);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotNull(period9);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      
      Period period10 = period8.plusSeconds(0);
      assertNotSame(period0, period5);
      assertNotSame(period0, period10);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period6);
      assertNotSame(period0, period8);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period8, period9);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertSame(period8, period10);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period2);
      assertNotSame(period10, period7);
      assertNotSame(period10, period5);
      assertNotSame(period10, period2);
      assertNotSame(period10, period0);
      assertSame(period10, period8);
      assertNotSame(period10, period1);
      assertNotSame(period10, period9);
      assertNotSame(period10, period6);
      assertNotSame(period10, period4);
      assertNotSame(period10, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period8);
      assertNotSame(period2, period9);
      assertSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period4);
      assertNotSame(period2, period10);
      assertNotSame(period2, period7);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotNull(period10);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      
      int int3 = period10.ZERO.getWeeks();
      assertNotSame(period0, period5);
      assertNotSame(period0, period10);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period6);
      assertNotSame(period0, period8);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period8, period9);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertSame(period8, period10);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period2);
      assertNotSame(period10, period7);
      assertNotSame(period10, period5);
      assertNotSame(period10, period2);
      assertNotSame(period10, period0);
      assertSame(period10, period8);
      assertNotSame(period10, period1);
      assertNotSame(period10, period9);
      assertNotSame(period10, period6);
      assertNotSame(period10, period4);
      assertNotSame(period10, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period8);
      assertNotSame(period2, period9);
      assertSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period4);
      assertNotSame(period2, period10);
      assertNotSame(period2, period7);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertEquals(0, int3);
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Period period11 = period10.withMinutes(60);
      assertNotSame(period0, period5);
      assertNotSame(period0, period10);
      assertNotSame(period0, period11);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period6);
      assertNotSame(period0, period8);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period8, period9);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertSame(period8, period10);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period2);
      assertNotSame(period8, period11);
      assertNotSame(period10, period7);
      assertNotSame(period10, period11);
      assertNotSame(period10, period5);
      assertNotSame(period10, period2);
      assertNotSame(period10, period0);
      assertSame(period10, period8);
      assertNotSame(period10, period1);
      assertNotSame(period10, period9);
      assertNotSame(period10, period6);
      assertNotSame(period10, period4);
      assertNotSame(period10, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period8);
      assertNotSame(period2, period9);
      assertSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period4);
      assertNotSame(period2, period10);
      assertNotSame(period2, period11);
      assertNotSame(period2, period7);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotSame(period11, period8);
      assertNotSame(period11, period9);
      assertNotSame(period11, period1);
      assertNotSame(period11, period3);
      assertNotSame(period11, period4);
      assertNotSame(period11, period6);
      assertNotSame(period11, period10);
      assertNotSame(period11, period7);
      assertNotSame(period11, period0);
      assertNotSame(period11, period5);
      assertNotSame(period11, period2);
      assertNotNull(period11);
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period5));
      assertTrue(period11.equals((Object)period10));
      assertTrue(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period2));
      
      int int4 = period10.ZERO.getHours();
      assertNotSame(period0, period5);
      assertNotSame(period0, period10);
      assertNotSame(period0, period11);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period6);
      assertNotSame(period0, period8);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period8, period9);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertSame(period8, period10);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period2);
      assertNotSame(period8, period11);
      assertNotSame(period10, period7);
      assertNotSame(period10, period11);
      assertNotSame(period10, period5);
      assertNotSame(period10, period2);
      assertNotSame(period10, period0);
      assertSame(period10, period8);
      assertNotSame(period10, period1);
      assertNotSame(period10, period9);
      assertNotSame(period10, period6);
      assertNotSame(period10, period4);
      assertNotSame(period10, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period8);
      assertNotSame(period2, period9);
      assertSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period4);
      assertNotSame(period2, period10);
      assertNotSame(period2, period11);
      assertNotSame(period2, period7);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertEquals(0, int4);
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period8.equals((Object)period9));
      assertTrue(period8.equals((Object)period11));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period3));
      assertTrue(period10.equals((Object)period11));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      
      Period period12 = period4.plusMillis(0);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period12, period8);
      assertNotSame(period12, period9);
      assertNotSame(period12, period6);
      assertNotSame(period12, period7);
      assertSame(period12, period4);
      assertNotSame(period12, period0);
      assertNotSame(period12, period11);
      assertNotSame(period12, period2);
      assertNotSame(period12, period5);
      assertNotSame(period12, period10);
      assertNotSame(period12, period1);
      assertNotSame(period12, period3);
      assertSame(period4, period12);
      assertNotSame(period4, period3);
      assertNotSame(period4, period6);
      assertNotSame(period4, period2);
      assertNotSame(period4, period7);
      assertNotSame(period4, period8);
      assertNotSame(period4, period0);
      assertNotSame(period4, period9);
      assertNotSame(period4, period10);
      assertNotSame(period4, period11);
      assertNotSame(period4, period1);
      assertNotSame(period4, period5);
      assertNotNull(period12);
      assertEquals(4, localDateTime0.size());
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period10));
      assertFalse(period4.equals((Object)period11));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period5));
      
      int int5 = period8.ZERO.size();
      assertNotSame(period0, period5);
      assertNotSame(period0, period10);
      assertNotSame(period0, period11);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period6);
      assertNotSame(period0, period8);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period12);
      assertNotSame(period8, period9);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertSame(period8, period10);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotSame(period8, period12);
      assertNotSame(period8, period7);
      assertNotSame(period8, period4);
      assertNotSame(period8, period0);
      assertNotSame(period8, period2);
      assertNotSame(period8, period11);
      assertNotSame(period2, period1);
      assertNotSame(period2, period8);
      assertNotSame(period2, period9);
      assertSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period4);
      assertNotSame(period2, period10);
      assertNotSame(period2, period11);
      assertNotSame(period2, period7);
      assertNotSame(period2, period12);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertEquals(8, int5);
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period8.equals((Object)period9));
      assertTrue(period8.equals((Object)period11));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period12));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period12));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      
      Period period13 = Period.years(8);
      assertNotSame(period13, period8);
      assertNotSame(period13, period3);
      assertNotSame(period13, period6);
      assertNotSame(period13, period9);
      assertNotSame(period13, period4);
      assertNotSame(period13, period1);
      assertNotSame(period13, period2);
      assertNotSame(period13, period0);
      assertNotSame(period13, period11);
      assertNotSame(period13, period12);
      assertNotSame(period13, period10);
      assertNotSame(period13, period7);
      assertNotSame(period13, period5);
      assertNotNull(period13);
      assertFalse(period13.equals((Object)period8));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period6));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period2));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period12));
      assertFalse(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period7));
      assertFalse(period13.equals((Object)period5));
      
      Period period14 = Period.weeks((-390));
      assertNotSame(period14, period3);
      assertNotSame(period14, period6);
      assertNotSame(period14, period9);
      assertNotSame(period14, period10);
      assertNotSame(period14, period8);
      assertNotSame(period14, period4);
      assertNotSame(period14, period12);
      assertNotSame(period14, period2);
      assertNotSame(period14, period0);
      assertNotSame(period14, period7);
      assertNotSame(period14, period1);
      assertNotSame(period14, period5);
      assertNotSame(period14, period13);
      assertNotSame(period14, period11);
      assertNotNull(period14);
      assertFalse(period14.equals((Object)period3));
      assertFalse(period14.equals((Object)period6));
      assertFalse(period14.equals((Object)period9));
      assertFalse(period14.equals((Object)period10));
      assertFalse(period14.equals((Object)period8));
      assertFalse(period14.equals((Object)period4));
      assertFalse(period14.equals((Object)period12));
      assertFalse(period14.equals((Object)period2));
      assertFalse(period14.equals((Object)period0));
      assertFalse(period14.equals((Object)period7));
      assertFalse(period14.equals((Object)period1));
      assertFalse(period14.equals((Object)period5));
      assertFalse(period14.equals((Object)period13));
      assertFalse(period14.equals((Object)period11));
      
      Period period15 = Period.months(292272708);
      assertNotSame(period15, period8);
      assertNotSame(period15, period3);
      assertNotSame(period15, period14);
      assertNotSame(period15, period5);
      assertNotSame(period15, period0);
      assertNotSame(period15, period11);
      assertNotSame(period15, period6);
      assertNotSame(period15, period13);
      assertNotSame(period15, period10);
      assertNotSame(period15, period1);
      assertNotSame(period15, period4);
      assertNotSame(period15, period7);
      assertNotSame(period15, period2);
      assertNotSame(period15, period12);
      assertNotSame(period15, period9);
      assertNotNull(period15);
      assertFalse(period15.equals((Object)period8));
      assertFalse(period15.equals((Object)period3));
      assertFalse(period15.equals((Object)period14));
      assertFalse(period15.equals((Object)period5));
      assertFalse(period15.equals((Object)period0));
      assertFalse(period15.equals((Object)period11));
      assertFalse(period15.equals((Object)period6));
      assertFalse(period15.equals((Object)period13));
      assertFalse(period15.equals((Object)period10));
      assertFalse(period15.equals((Object)period1));
      assertFalse(period15.equals((Object)period4));
      assertFalse(period15.equals((Object)period7));
      assertFalse(period15.equals((Object)period2));
      assertFalse(period15.equals((Object)period12));
      assertFalse(period15.equals((Object)period9));
      
      // Undeclared exception!
      try { 
        period12.withFields(period3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Period period0 = Period.years(13421772);
      assertNotNull(period0);
      
      Period period1 = period0.ZERO.withMinutes(2147417320);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      int int0 = period1.ZERO.getDays();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = Period.seconds(13421772);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period2.plusDays(399);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      MockDate mockDate0 = new MockDate(399);
      assertNotNull(mockDate0);
      
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      assertNotNull(yearMonth0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      YearMonth yearMonth1 = yearMonth0.minus(period3);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotNull(yearMonth1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(1970, yearMonth1.getYear());
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertTrue(yearMonth1.equals((Object)yearMonth0));
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      Period period4 = Period.fieldDifference(yearMonth0, yearMonth0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertTrue(yearMonth0.equals((Object)yearMonth1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      Weeks weeks0 = period3.toStandardWeeks();
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(weeks0);
      assertEquals(79, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      Period period5 = period3.minusDays(13421772);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotNull(period5);
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      
      Period period6 = Period.millis(1);
      assertNotSame(period6, period5);
      assertNotSame(period6, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotNull(period6);
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      
      Period period7 = period2.normalizedStandard();
      assertNotSame(period2, period6);
      assertNotSame(period2, period7);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period7, period0);
      assertNotSame(period7, period3);
      assertNotSame(period7, period5);
      assertNotSame(period7, period6);
      assertNotSame(period7, period2);
      assertNotSame(period7, period4);
      assertNotSame(period7, period1);
      assertNotNull(period7);
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      
      // Undeclared exception!
      try { 
        period5.multipliedBy(399);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -13421373 * 399
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PT");
      assertFalse(boolean0);
      
      Duration duration0 = Duration.millis((-2532L));
      assertNotNull(duration0);
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2532L), duration0.getMillis());
      
      Duration duration1 = duration0.withMillis((-2305L));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2532L), duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-2L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-2305L), duration1.getMillis());
      assertFalse(duration1.equals((Object)duration0));
      
      Period period0 = duration1.toPeriod();
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(period0);
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2532L), duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-2L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-2305L), duration1.getMillis());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PT");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Days days0 = period0.toStandardDays();
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(days0);
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2532L), duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-2L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-2305L), duration1.getMillis());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      
      Period period1 = period0.withMillis(283);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2532L), duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-2L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-2305L), duration1.getMillis());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.ZERO.withMonths(283);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2532L), duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-2L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-2305L), duration1.getMillis());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1294));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.294", dateTimeZone0.toString());
      assertEquals("-00:00:01.294", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals("-00:00:01.294", dateTimeZone0.toString());
      assertEquals("-00:00:01.294", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 283, (Chronology) islamicChronology0);
      assertNotNull(localTime0);
      assertEquals("-00:00:01.294", dateTimeZone0.toString());
      assertEquals("-00:00:01.294", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1, IslamicChronology.AH);
      
      Period period3 = period1.normalizedStandard();
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2532L), duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-2L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-2305L), duration1.getMillis());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      int[] intArray0 = localTime0.getValues();
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 283}, intArray0);
      assertNotNull(intArray0);
      assertEquals("-00:00:01.294", dateTimeZone0.toString());
      assertEquals("-00:00:01.294", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1, IslamicChronology.AH);
      
      Period period4 = Period.fieldDifference(localTime0, localTime0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertEquals("-00:00:01.294", dateTimeZone0.toString());
      assertEquals("-00:00:01.294", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertEquals(1, IslamicChronology.AH);
      
      Minutes minutes0 = period1.toStandardMinutes();
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotNull(minutes0);
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2532L), duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-2L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-2305L), duration1.getMillis());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      
      Period period5 = period2.withDays(3332);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotNull(period5);
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2532L), duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-2L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-2305L), duration1.getMillis());
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      // Undeclared exception!
      try { 
        period4.minusYears((-51));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType1.size());
      assertEquals("YearWeekDay", periodType1.getName());
      
      PeriodType periodType2 = periodType0.withWeeksRemoved();
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals("YearWeekDayNoWeeks", periodType2.getName());
      assertEquals(2, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = gJChronology0.equals(object0);
      assertFalse(boolean0);
      
      Period period0 = new Period((Object) null, periodType2, gJChronology0);
      assertNotNull(period0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals("YearWeekDayNoWeeks", periodType2.getName());
      assertEquals(2, periodType2.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals("YearWeekDayNoWeeks", periodType2.getName());
      assertEquals(2, periodType2.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.millis(3384);
      assertNotNull(period0);
      
      Seconds seconds0 = Seconds.ONE;
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(1, seconds0.getSeconds());
      
      Period period1 = period0.ZERO.minus(seconds0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, seconds0.size());
      assertEquals(1, seconds0.getSeconds());
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.plusDays(3384);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      int int0 = period2.getMillis();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertEquals(3384, int0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period0.toPeriod();
      assertNotSame(period0, period2);
      assertSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      
      Period period4 = period3.ZERO.plusMinutes(3384);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      
      Period period5 = Period.years(3384);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      
      Period period6 = period5.normalizedStandard();
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period6);
      assertNotSame(period5, period2);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period3);
      assertNotNull(period6);
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertTrue(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period3));
      
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period7 = Period.seconds(3384);
      assertNotSame(period7, period2);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period4);
      assertNotNull(period7);
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period4));
      
      PeriodType.MONTH_INDEX = (-4428);
      // Undeclared exception!
      try { 
        period2.plusMonths((-1496));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4428
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      
      Period period0 = new Period((Object) null, buddhistChronology0);
      assertNotNull(period0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = uTCDateTimeZone0.getName(59L, (Locale) null);
      assertEquals("Coordinated Universal Time", string0);
      assertNotNull(string0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      String string1 = uTCDateTimeZone0.getName((long) 1);
      assertEquals("Coordinated Universal Time", string1);
      assertNotNull(string1);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      Period period1 = Period.millis((-3024));
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Days days0 = period1.ZERO.toStandardDays();
      assertNotSame(period1, period0);
      assertNotNull(days0);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period1.equals((Object)period0));
      
      Duration duration0 = period0.toStandardDuration();
      assertNotSame(period0, period1);
      assertNotNull(duration0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertFalse(period0.equals((Object)period1));
      assertEquals(1, BuddhistChronology.BE);
      
      Period period2 = new Period((ReadableInstant) null, duration0);
      assertNotNull(period2);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertFalse(period0.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = 690;
      PeriodType.HOUR_INDEX = 690;
      Period period3 = Period.years((-3024));
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      
      int int1 = 1815;
      Period period4 = period3.plusSeconds(1815);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      
      // Undeclared exception!
      try { 
        period4.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Duration duration0 = period0.toDurationFrom((ReadableInstant) null);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      
      int int0 = 0;
      Period period1 = period0.plusDays(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      
      PeriodType.MONTH_INDEX = 0;
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      int int1 = period0.getHours();
      assertSame(period0, period1);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      PeriodType.WEEK_INDEX = (-348);
      PeriodType periodType1 = PeriodType.minutes();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(1, periodType1.size());
      assertEquals("Minutes", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      
      int int2 = new Integer(0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = period1.getYears();
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      // Undeclared exception!
      try { 
        period1.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.seconds(17971875);
      assertNotNull(period0);
      
      int int0 = period0.getHours();
      assertEquals(0, int0);
      
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.ZERO.withMillis(17971875);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Weeks weeks0 = period2.ZERO.toStandardWeeks();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(weeks0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period2.plusDays(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period3, period1);
      assertSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, periodType1.size());
      assertEquals("Years", periodType1.getName());
      
      PeriodType periodType2 = PeriodType.yearMonthDayTime();
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertEquals(7, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      int int1 = period1.getMonths();
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertEquals(0, int1);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertTrue(int1 == int0);
      
      Days days0 = period2.toStandardDays();
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(days0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period4 = period0.withMinutes(17971875);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      
      Period period5 = period3.plusMonths(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period3, period1);
      assertSame(period3, period5);
      assertNotSame(period3, period4);
      assertSame(period3, period2);
      assertNotSame(period3, period0);
      assertSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertSame(period5, period2);
      assertNotNull(period5);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      
      Period period6 = period5.normalizedStandard(periodType0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period3, period1);
      assertSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertSame(period3, period2);
      assertNotSame(period3, period0);
      assertSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period6);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertSame(period5, period2);
      assertNotSame(period6, period2);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotNull(period6);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertTrue(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period3));
      
      Period period7 = period4.ZERO.withYears(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period7);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period5);
      assertNotSame(period7, period0);
      assertNotNull(period7);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period0));
      
      Period period8 = period7.minusMinutes(17);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period7);
      assertNotSame(period4, period8);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertNotSame(period7, period1);
      assertNotSame(period7, period5);
      assertNotSame(period7, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period4);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period1);
      assertNotSame(period8, period5);
      assertNotSame(period8, period6);
      assertNotSame(period8, period2);
      assertNotNull(period8);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period2));
      
      Instant instant0 = Instant.ofEpochSecond(2907L);
      assertNotNull(instant0);
      assertEquals(2907000L, instant0.getMillis());
      
      Instant instant1 = instant0.plus((long) 0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(instant1);
      assertEquals(2907000L, instant0.getMillis());
      assertEquals(2907000L, instant1.getMillis());
      
      Duration duration0 = period0.ZERO.toDurationTo(instant1);
      assertSame(instant0, instant1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertSame(instant1, instant0);
      assertNotNull(duration0);
      assertEquals(2907000L, instant0.getMillis());
      assertEquals(2907000L, instant1.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      
      Period period9 = period4.withField(durationFieldType0, 17971875);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period9, period7);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period3);
      assertNotSame(period9, period0);
      assertNotSame(period9, period2);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period6);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period7);
      assertNotSame(period4, period8);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period9);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertNotNull(period9);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period6));
      
      Period period10 = period9.ZERO.withFields(period3);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period10);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period5);
      assertNotSame(period1, period9);
      assertNotSame(period1, period6);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period10);
      assertNotSame(period1, period8);
      assertNotSame(period1, period3);
      assertNotSame(period9, period7);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period3);
      assertNotSame(period9, period0);
      assertNotSame(period9, period2);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period10);
      assertNotSame(period9, period6);
      assertSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period1);
      assertNotSame(period2, period9);
      assertNotSame(period2, period10);
      assertNotSame(period2, period8);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period10, period5);
      assertNotSame(period10, period2);
      assertNotSame(period10, period1);
      assertNotSame(period10, period3);
      assertNotSame(period10, period7);
      assertNotSame(period10, period4);
      assertNotSame(period10, period6);
      assertNotSame(period10, period8);
      assertNotSame(period10, period9);
      assertNotSame(period10, period0);
      assertNotSame(period3, period1);
      assertSame(period3, period5);
      assertNotSame(period3, period7);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertNotSame(period3, period8);
      assertSame(period3, period2);
      assertNotSame(period3, period9);
      assertNotSame(period3, period0);
      assertNotSame(period3, period10);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period7);
      assertNotSame(period4, period8);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period10);
      assertNotSame(period4, period9);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertNotNull(period10);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period9));
      assertTrue(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period6));
      assertTrue(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period8));
      assertTrue(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period0));
      assertTrue(period10.equals((Object)period3));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period6));
      
      Period period11 = period9.plusWeeks((-1203));
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period11);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period10);
      assertNotSame(period9, period11);
      assertNotSame(period9, period7);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period3);
      assertNotSame(period9, period0);
      assertNotSame(period9, period2);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period10);
      assertNotSame(period9, period6);
      assertNotSame(period11, period7);
      assertNotSame(period11, period2);
      assertNotSame(period11, period4);
      assertNotSame(period11, period9);
      assertNotSame(period11, period10);
      assertNotSame(period11, period8);
      assertNotSame(period11, period1);
      assertNotSame(period11, period3);
      assertNotSame(period11, period6);
      assertNotSame(period11, period5);
      assertNotSame(period11, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period7);
      assertNotSame(period4, period11);
      assertNotSame(period4, period8);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period10);
      assertNotSame(period4, period9);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertNotNull(period11);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period10));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period10));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period6));
      
      Period period12 = period5.withMonths(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period11);
      assertNotSame(period0, period7);
      assertNotSame(period0, period12);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period0, period10);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period12);
      assertNotSame(period1, period7);
      assertNotSame(period1, period5);
      assertNotSame(period1, period9);
      assertNotSame(period1, period6);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period10);
      assertNotSame(period1, period8);
      assertNotSame(period1, period11);
      assertNotSame(period1, period3);
      assertSame(period2, period3);
      assertNotSame(period2, period12);
      assertNotSame(period2, period7);
      assertNotSame(period2, period1);
      assertNotSame(period2, period9);
      assertNotSame(period2, period10);
      assertNotSame(period2, period11);
      assertNotSame(period2, period8);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period11);
      assertSame(period3, period5);
      assertNotSame(period3, period12);
      assertNotSame(period3, period7);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertSame(period3, period2);
      assertNotSame(period3, period8);
      assertNotSame(period3, period9);
      assertNotSame(period3, period0);
      assertNotSame(period3, period10);
      assertNotSame(period12, period10);
      assertNotSame(period12, period4);
      assertNotSame(period12, period9);
      assertNotSame(period12, period7);
      assertNotSame(period12, period3);
      assertNotSame(period12, period2);
      assertNotSame(period12, period6);
      assertNotSame(period12, period11);
      assertNotSame(period12, period8);
      assertNotSame(period12, period1);
      assertNotSame(period12, period5);
      assertNotSame(period12, period0);
      assertSame(period5, period3);
      assertNotSame(period5, period12);
      assertNotSame(period5, period7);
      assertNotSame(period5, period1);
      assertNotSame(period5, period9);
      assertNotSame(period5, period10);
      assertNotSame(period5, period11);
      assertNotSame(period5, period8);
      assertNotSame(period5, period6);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertSame(period5, period2);
      assertNotNull(period12);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period10));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period9));
      assertTrue(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertTrue(period2.equals((Object)period10));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period11));
      assertTrue(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period12.equals((Object)period4));
      assertTrue(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period1));
      assertTrue(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period0));
      assertTrue(period12.equals((Object)period10));
      assertTrue(period12.equals((Object)period2));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period9));
      assertFalse(period5.equals((Object)period11));
      assertFalse(period5.equals((Object)period8));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period10));
      
      int int2 = (-1820);
      // Undeclared exception!
      try { 
        period1.minusMillis((-1820));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = new Period(31556952000L, periodType0);
      assertNotNull(period0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Seconds seconds0 = period0.ZERO.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      
      Period period1 = Period.days((-1));
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      PeriodType.HOUR_INDEX = 11;
      PeriodType periodType1 = PeriodType.millis();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period2 = period0.withDays((-345));
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      // Undeclared exception!
      try { 
        period0.withHours((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      
      Period period0 = new Period((Object) null, periodType0);
      assertNotNull(period0);
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = (-616);
      Period period1 = period0.ZERO.withSeconds((-616));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertFalse(period1.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        period0.minusWeeks((-616));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.months((-6455));
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.minusMonths((-6455));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      MutablePeriod mutablePeriod0 = period2.ZERO.toMutablePeriod();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(mutablePeriod0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      PeriodType periodType1 = PeriodType.minutes();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Minutes", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period3 = period2.withMinutes(1930);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = period3.withWeeks(469);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      
      Period period5 = period3.plusHours(1930);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      
      DurationFieldType durationFieldType0 = period2.ZERO.getFieldType(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      
      DurationFieldType durationFieldType1 = DurationFieldType.millis();
      assertNotSame(durationFieldType1, durationFieldType0);
      assertNotNull(durationFieldType1);
      assertEquals("millis", durationFieldType1.getName());
      assertEquals("millis", durationFieldType1.toString());
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      
      int int0 = period2.ZERO.get(durationFieldType1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(durationFieldType1, durationFieldType0);
      assertEquals(0, int0);
      assertEquals("millis", durationFieldType1.getName());
      assertEquals("millis", durationFieldType1.toString());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      
      Period period6 = Period.minutes((-6455));
      assertNotSame(period6, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period5);
      assertNotSame(period6, period2);
      assertNotSame(period6, period1);
      assertNotSame(period6, period3);
      assertNotNull(period6);
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period3));
      
      Period period7 = Period.seconds((-6455));
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period0);
      assertNotNull(period7);
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period0));
      
      Period period8 = Period.hours(2225);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotNull(period8);
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      
      Period period9 = period8.minusHours(469);
      assertNotSame(period8, period0);
      assertNotSame(period8, period9);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotSame(period9, period4);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotSame(period9, period3);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period6);
      assertNotSame(period9, period2);
      assertNotSame(period9, period1);
      assertNotNull(period9);
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period1));
      
      PeriodType periodType2 = period8.getPeriodType();
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertNotSame(period8, period0);
      assertNotSame(period8, period9);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotNull(periodType2);
      assertEquals("Standard", periodType2.getName());
      assertEquals(8, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      
      Period period10 = Period.minutes(0);
      assertNotSame(period10, period0);
      assertNotSame(period10, period4);
      assertNotSame(period10, period8);
      assertNotSame(period10, period6);
      assertNotSame(period10, period5);
      assertNotSame(period10, period3);
      assertNotSame(period10, period1);
      assertNotSame(period10, period2);
      assertNotSame(period10, period7);
      assertNotSame(period10, period9);
      assertNotNull(period10);
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period9));
      
      Period period11 = period10.minusDays(0);
      assertNotSame(period10, period0);
      assertNotSame(period10, period4);
      assertSame(period10, period11);
      assertNotSame(period10, period8);
      assertNotSame(period10, period6);
      assertNotSame(period10, period5);
      assertNotSame(period10, period3);
      assertNotSame(period10, period1);
      assertNotSame(period10, period2);
      assertNotSame(period10, period7);
      assertNotSame(period10, period9);
      assertSame(period11, period10);
      assertNotSame(period11, period4);
      assertNotSame(period11, period5);
      assertNotSame(period11, period8);
      assertNotSame(period11, period3);
      assertNotSame(period11, period2);
      assertNotSame(period11, period6);
      assertNotSame(period11, period7);
      assertNotSame(period11, period9);
      assertNotSame(period11, period0);
      assertNotSame(period11, period1);
      assertNotNull(period11);
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period1));
      
      Period period12 = period8.withSeconds((-6455));
      assertNotSame(period12, period4);
      assertNotSame(period12, period0);
      assertNotSame(period12, period9);
      assertNotSame(period12, period7);
      assertNotSame(period12, period1);
      assertNotSame(period12, period3);
      assertNotSame(period12, period11);
      assertNotSame(period12, period5);
      assertNotSame(period12, period8);
      assertNotSame(period12, period2);
      assertNotSame(period12, period6);
      assertNotSame(period12, period10);
      assertNotSame(period8, period12);
      assertNotSame(period8, period0);
      assertNotSame(period8, period9);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period11);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(period8, period10);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotNull(period12);
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period11));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period10));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      
      Period period13 = Period.months(0);
      assertNotSame(period13, period11);
      assertNotSame(period13, period3);
      assertNotSame(period13, period7);
      assertNotSame(period13, period12);
      assertNotSame(period13, period10);
      assertNotSame(period13, period6);
      assertNotSame(period13, period1);
      assertNotSame(period13, period2);
      assertNotSame(period13, period9);
      assertNotSame(period13, period4);
      assertNotSame(period13, period0);
      assertNotSame(period13, period5);
      assertNotSame(period13, period8);
      assertNotNull(period13);
      assertFalse(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period7));
      assertTrue(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period12));
      assertFalse(period13.equals((Object)period6));
      assertFalse(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period2));
      assertFalse(period13.equals((Object)period9));
      assertTrue(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period5));
      assertFalse(period13.equals((Object)period8));
      
      Period period14 = period8.minusDays(0);
      assertNotSame(period14, period0);
      assertNotSame(period14, period5);
      assertNotSame(period14, period13);
      assertNotSame(period14, period1);
      assertNotSame(period14, period11);
      assertNotSame(period14, period4);
      assertNotSame(period14, period12);
      assertNotSame(period14, period2);
      assertNotSame(period14, period10);
      assertNotSame(period14, period6);
      assertNotSame(period14, period3);
      assertSame(period14, period8);
      assertNotSame(period14, period7);
      assertNotSame(period14, period9);
      assertSame(period8, period14);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period11);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(period8, period10);
      assertNotSame(period8, period12);
      assertNotSame(period8, period9);
      assertNotSame(period8, period13);
      assertNotSame(period8, period2);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotNull(period14);
      assertFalse(period14.equals((Object)period0));
      assertFalse(period14.equals((Object)period5));
      assertFalse(period14.equals((Object)period13));
      assertFalse(period14.equals((Object)period1));
      assertFalse(period14.equals((Object)period11));
      assertFalse(period14.equals((Object)period4));
      assertFalse(period14.equals((Object)period12));
      assertFalse(period14.equals((Object)period2));
      assertFalse(period14.equals((Object)period10));
      assertFalse(period14.equals((Object)period6));
      assertFalse(period14.equals((Object)period3));
      assertFalse(period14.equals((Object)period7));
      assertFalse(period14.equals((Object)period9));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period11));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period10));
      assertFalse(period8.equals((Object)period12));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period13));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      
      Period period15 = period2.normalizedStandard();
      assertNotSame(period0, period7);
      assertNotSame(period0, period13);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period0, period12);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period15);
      assertNotSame(period0, period1);
      assertNotSame(period0, period11);
      assertNotSame(period0, period14);
      assertNotSame(period0, period10);
      assertNotSame(period0, period6);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period1, period13);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period9);
      assertNotSame(period1, period8);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period14);
      assertNotSame(period1, period10);
      assertNotSame(period1, period6);
      assertNotSame(period1, period15);
      assertNotSame(period1, period12);
      assertNotSame(period1, period11);
      assertNotSame(period2, period0);
      assertNotSame(period2, period14);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period15);
      assertNotSame(period2, period11);
      assertNotSame(period2, period4);
      assertNotSame(period2, period12);
      assertNotSame(period2, period10);
      assertNotSame(period2, period6);
      assertNotSame(period2, period8);
      assertNotSame(period2, period13);
      assertNotSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period9);
      assertNotSame(period15, period12);
      assertNotSame(period15, period14);
      assertNotSame(period15, period6);
      assertNotSame(period15, period10);
      assertNotSame(period15, period1);
      assertNotSame(period15, period11);
      assertNotSame(period15, period7);
      assertNotSame(period15, period3);
      assertNotSame(period15, period0);
      assertNotSame(period15, period4);
      assertNotSame(period15, period9);
      assertNotSame(period15, period5);
      assertNotSame(period15, period8);
      assertNotSame(period15, period13);
      assertNotSame(period15, period2);
      assertNotNull(period15);
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period14));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period13));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period14));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period14));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period12));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period13));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period15.equals((Object)period12));
      assertFalse(period15.equals((Object)period14));
      assertFalse(period15.equals((Object)period6));
      assertFalse(period15.equals((Object)period1));
      assertFalse(period15.equals((Object)period7));
      assertTrue(period15.equals((Object)period10));
      assertFalse(period15.equals((Object)period3));
      assertTrue(period15.equals((Object)period11));
      assertTrue(period15.equals((Object)period13));
      assertFalse(period15.equals((Object)period0));
      assertFalse(period15.equals((Object)period4));
      assertFalse(period15.equals((Object)period9));
      assertFalse(period15.equals((Object)period5));
      assertFalse(period15.equals((Object)period8));
      assertFalse(period15.equals((Object)period2));
      
      Period period16 = period11.minusMonths(3700);
      assertNotSame(period10, period4);
      assertNotSame(period10, period12);
      assertNotSame(period10, period8);
      assertNotSame(period10, period6);
      assertNotSame(period10, period15);
      assertNotSame(period10, period1);
      assertNotSame(period10, period0);
      assertSame(period10, period11);
      assertNotSame(period10, period14);
      assertNotSame(period10, period5);
      assertNotSame(period10, period16);
      assertNotSame(period10, period3);
      assertNotSame(period10, period13);
      assertNotSame(period10, period2);
      assertNotSame(period10, period7);
      assertNotSame(period10, period9);
      assertSame(period11, period10);
      assertNotSame(period11, period4);
      assertNotSame(period11, period8);
      assertNotSame(period11, period16);
      assertNotSame(period11, period3);
      assertNotSame(period11, period13);
      assertNotSame(period11, period2);
      assertNotSame(period11, period7);
      assertNotSame(period11, period9);
      assertNotSame(period11, period0);
      assertNotSame(period11, period5);
      assertNotSame(period11, period6);
      assertNotSame(period11, period15);
      assertNotSame(period11, period14);
      assertNotSame(period11, period1);
      assertNotSame(period11, period12);
      assertNotSame(period16, period8);
      assertNotSame(period16, period3);
      assertNotSame(period16, period11);
      assertNotSame(period16, period6);
      assertNotSame(period16, period14);
      assertNotSame(period16, period12);
      assertNotSame(period16, period10);
      assertNotSame(period16, period15);
      assertNotSame(period16, period1);
      assertNotSame(period16, period5);
      assertNotSame(period16, period7);
      assertNotSame(period16, period9);
      assertNotSame(period16, period0);
      assertNotSame(period16, period4);
      assertNotSame(period16, period13);
      assertNotSame(period16, period2);
      assertNotNull(period16);
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period12));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period1));
      assertTrue(period10.equals((Object)period15));
      assertTrue(period10.equals((Object)period13));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period14));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period0));
      assertTrue(period11.equals((Object)period13));
      assertTrue(period11.equals((Object)period15));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period14));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period12));
      assertFalse(period16.equals((Object)period8));
      assertFalse(period16.equals((Object)period3));
      assertFalse(period16.equals((Object)period11));
      assertFalse(period16.equals((Object)period6));
      assertFalse(period16.equals((Object)period14));
      assertFalse(period16.equals((Object)period12));
      assertFalse(period16.equals((Object)period10));
      assertFalse(period16.equals((Object)period15));
      assertFalse(period16.equals((Object)period1));
      assertFalse(period16.equals((Object)period5));
      assertFalse(period16.equals((Object)period7));
      assertFalse(period16.equals((Object)period9));
      assertFalse(period16.equals((Object)period0));
      assertFalse(period16.equals((Object)period4));
      assertFalse(period16.equals((Object)period13));
      assertFalse(period16.equals((Object)period2));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Hours hours0 = Hours.ONE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
      
      Duration duration0 = hours0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
      assertEquals(60L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardHours());
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(3600L, duration0.getStandardSeconds());
      
      Period period0 = duration0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
      assertEquals(60L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardHours());
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(3600L, duration0.getStandardSeconds());
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
      assertEquals(60L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1L, duration0.getStandardHours());
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(3600L, duration0.getStandardSeconds());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)41;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-1), (byte)41}, byteArray0);
      
      // Undeclared exception!
      try { 
        JulianChronology.getInstance((DateTimeZone) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      
      Period period0 = new Period(0L, periodType0);
      assertNotNull(period0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.millis();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period1 = period0.plusSeconds((-26));
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.minusSeconds((-26));
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 2266L, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      
      PeriodType periodType2 = PeriodType.time();
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      assertEquals(4, periodType2.size());
      assertEquals("Time", periodType2.getName());
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      Period period3 = mutablePeriod0.toPeriod();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      Period period4 = period2.withMinutes((-26));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      
      Period period5 = period0.withFields(period3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotNull(period5);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      
      int int0 = new Integer((-26));
      assertEquals((-26), int0);
      
      Seconds seconds0 = period1.toStandardSeconds();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotNull(seconds0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals((-26), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      
      Period period6 = period5.withMillis((-26));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period6);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period4);
      assertNotSame(period6, period1);
      assertNotNull(period6);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period5.equals((Object)period0));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      
      Minutes minutes0 = period3.toStandardMinutes();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period6);
      assertNotNull(minutes0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period6));
      assertTrue(period3.equals((Object)period5));
      
      Days days0 = period1.toStandardDays();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotNull(days0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      
      Period period7 = Period.days((-26));
      assertNotSame(period7, period5);
      assertNotSame(period7, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotNull(period7);
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      
      int int1 = new Integer((-26));
      assertEquals((-26), int1);
      assertTrue(int1 == int0);
      
      int int2 = period4.getMinutes();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period7);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period7);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period7);
      assertNotSame(period4, period6);
      assertEquals((-26), int2);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period6));
      
      Period period8 = period4.plusDays(427);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period8, period6);
      assertNotSame(period8, period2);
      assertNotSame(period8, period0);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(period8, period7);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period7);
      assertNotSame(period1, period0);
      assertNotSame(period1, period8);
      assertNotSame(period1, period6);
      assertNotSame(period2, period6);
      assertNotSame(period2, period8);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period7);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period7);
      assertNotSame(period4, period6);
      assertNotSame(period4, period8);
      assertNotNull(period8);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period6));
      
      Period period9 = period5.plusDays((-26));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period9, period6);
      assertNotSame(period9, period0);
      assertNotSame(period9, period5);
      assertNotSame(period9, period3);
      assertNotSame(period9, period7);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period3, period9);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period7);
      assertNotSame(period3, period0);
      assertNotSame(period3, period8);
      assertNotSame(period3, period1);
      assertNotSame(period3, period6);
      assertNotSame(period5, period0);
      assertNotSame(period5, period7);
      assertNotSame(period5, period9);
      assertNotSame(period5, period2);
      assertNotSame(period5, period8);
      assertNotSame(period5, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotNull(period9);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period6));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period7));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period8));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      
      Period period10 = period4.minusYears((-26));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period10);
      assertNotSame(period1, period9);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period10);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period7);
      assertNotSame(period1, period0);
      assertNotSame(period1, period8);
      assertNotSame(period1, period6);
      assertNotSame(period2, period6);
      assertNotSame(period2, period9);
      assertNotSame(period2, period8);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period7);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period10);
      assertNotSame(period2, period3);
      assertNotSame(period10, period8);
      assertNotSame(period10, period5);
      assertNotSame(period10, period7);
      assertNotSame(period10, period0);
      assertNotSame(period10, period1);
      assertNotSame(period10, period6);
      assertNotSame(period10, period4);
      assertNotSame(period10, period9);
      assertNotSame(period10, period3);
      assertNotSame(period10, period2);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period9);
      assertNotSame(period4, period10);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period7);
      assertNotSame(period4, period6);
      assertNotSame(period4, period8);
      assertNotNull(period10);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period8));
      
      Period period11 = period9.minus(period7);
      assertNotSame(period7, period9);
      assertNotSame(period7, period5);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period11);
      assertNotSame(period7, period10);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period11);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period10);
      assertNotSame(period9, period6);
      assertNotSame(period9, period0);
      assertNotSame(period9, period5);
      assertNotSame(period9, period3);
      assertNotSame(period9, period7);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period8);
      assertNotSame(period9, period10);
      assertNotSame(period9, period11);
      assertNotSame(period9, period2);
      assertNotSame(period11, period8);
      assertNotSame(period11, period3);
      assertNotSame(period11, period5);
      assertNotSame(period11, period7);
      assertNotSame(period11, period1);
      assertNotSame(period11, period4);
      assertNotSame(period11, period6);
      assertNotSame(period11, period0);
      assertNotSame(period11, period2);
      assertNotSame(period11, period9);
      assertNotSame(period11, period10);
      assertNotSame(period3, period9);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period10);
      assertNotSame(period3, period4);
      assertNotSame(period3, period7);
      assertNotSame(period3, period0);
      assertNotSame(period3, period11);
      assertNotSame(period3, period8);
      assertNotSame(period3, period1);
      assertNotSame(period3, period6);
      assertNotSame(period5, period0);
      assertNotSame(period5, period11);
      assertNotSame(period5, period10);
      assertNotSame(period5, period7);
      assertNotSame(period5, period9);
      assertNotSame(period5, period2);
      assertNotSame(period5, period8);
      assertNotSame(period5, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotNull(period11);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(period7.equals((Object)period9));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period10));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period10));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period1));
      assertTrue(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period6));
      assertTrue(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period6));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period10));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period9));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period8));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      
      int int3 = 8;
      PeriodType.HOUR_INDEX = 8;
      Period period12 = period2.minusMinutes((-2004));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period11);
      assertNotSame(period0, period12);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period10);
      assertNotSame(period1, period9);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period10);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period7);
      assertNotSame(period1, period0);
      assertNotSame(period1, period8);
      assertNotSame(period1, period11);
      assertNotSame(period1, period12);
      assertNotSame(period1, period6);
      assertNotSame(period2, period6);
      assertNotSame(period2, period9);
      assertNotSame(period2, period8);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period7);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period10);
      assertNotSame(period2, period12);
      assertNotSame(period2, period3);
      assertNotSame(period2, period11);
      assertNotSame(period12, period6);
      assertNotSame(period12, period2);
      assertNotSame(period12, period9);
      assertNotSame(period12, period11);
      assertNotSame(period12, period3);
      assertNotSame(period12, period4);
      assertNotSame(period12, period7);
      assertNotSame(period12, period1);
      assertNotSame(period12, period10);
      assertNotSame(period12, period8);
      assertNotSame(period12, period0);
      assertNotSame(period12, period5);
      assertNotNull(period12);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period5));
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Chronology chronology0 = iSOChronology0.withUTC();
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
      assertNotNull(chronology0);
      
      Period period13 = period12.minusMinutes(1186);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period0, period11);
      assertNotSame(period0, period1);
      assertNotSame(period0, period13);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period10);
      assertNotSame(period0, period6);
      assertNotSame(period0, period12);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period1, period9);
      assertNotSame(period1, period2);
      assertNotSame(period1, period10);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period8);
      assertNotSame(period1, period13);
      assertNotSame(period1, period12);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period1, period11);
      assertNotSame(period2, period13);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period10);
      assertNotSame(period2, period12);
      assertNotSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period9);
      assertNotSame(period2, period8);
      assertNotSame(period2, period0);
      assertNotSame(period2, period7);
      assertNotSame(period2, period11);
      assertNotSame(period12, period13);
      assertNotSame(period12, period11);
      assertNotSame(period12, period3);
      assertNotSame(period12, period4);
      assertNotSame(period12, period1);
      assertNotSame(period12, period8);
      assertNotSame(period12, period0);
      assertNotSame(period12, period5);
      assertNotSame(period12, period6);
      assertNotSame(period12, period2);
      assertNotSame(period12, period9);
      assertNotSame(period12, period7);
      assertNotSame(period12, period10);
      assertNotSame(period13, period11);
      assertNotSame(period13, period1);
      assertNotSame(period13, period4);
      assertNotSame(period13, period3);
      assertNotSame(period13, period7);
      assertNotSame(period13, period10);
      assertNotSame(period13, period9);
      assertNotSame(period13, period2);
      assertNotSame(period13, period8);
      assertNotSame(period13, period12);
      assertNotSame(period13, period6);
      assertNotSame(period13, period0);
      assertNotSame(period13, period5);
      assertNotNull(period13);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period12));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period7));
      assertFalse(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period2));
      assertFalse(period13.equals((Object)period8));
      assertFalse(period13.equals((Object)period12));
      assertFalse(period13.equals((Object)period6));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period5));
      
      mutablePeriod0.add((-1647L), chronology0);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      
      Period period14 = period7.plusMonths(0);
      assertNotSame(period7, period5);
      assertNotSame(period7, period13);
      assertNotSame(period7, period1);
      assertNotSame(period7, period4);
      assertNotSame(period7, period3);
      assertNotSame(period7, period10);
      assertNotSame(period7, period9);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertNotSame(period7, period12);
      assertNotSame(period7, period6);
      assertSame(period7, period14);
      assertNotSame(period7, period0);
      assertNotSame(period7, period11);
      assertNotSame(period14, period2);
      assertNotSame(period14, period9);
      assertNotSame(period14, period6);
      assertNotSame(period14, period12);
      assertNotSame(period14, period8);
      assertNotSame(period14, period0);
      assertNotSame(period14, period1);
      assertNotSame(period14, period10);
      assertNotSame(period14, period3);
      assertNotSame(period14, period4);
      assertNotSame(period14, period5);
      assertSame(period14, period7);
      assertNotSame(period14, period13);
      assertNotSame(period14, period11);
      assertNotNull(period14);
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period13));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period10));
      assertFalse(period7.equals((Object)period9));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period12));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period11));
      assertFalse(period14.equals((Object)period2));
      assertFalse(period14.equals((Object)period9));
      assertFalse(period14.equals((Object)period6));
      assertFalse(period14.equals((Object)period12));
      assertFalse(period14.equals((Object)period8));
      assertFalse(period14.equals((Object)period0));
      assertFalse(period14.equals((Object)period1));
      assertFalse(period14.equals((Object)period10));
      assertFalse(period14.equals((Object)period3));
      assertFalse(period14.equals((Object)period4));
      assertFalse(period14.equals((Object)period5));
      assertFalse(period14.equals((Object)period13));
      assertFalse(period14.equals((Object)period11));
      
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = new Period(31556952000L, periodType0);
      assertNotNull(period0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, seconds0.size());
      assertEquals(31536000, seconds0.getSeconds());
      
      int int0 = (-1);
      Period period1 = Period.days((-1));
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        period0.withHours((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "";
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      assertEquals(0, durationFieldTypeArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(periodType0);
      assertEquals(0, periodType0.size());
      assertEquals("", periodType0.getName());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      Period period0 = new Period((-630L), (-711L), periodType0, ethiopicChronology0);
      assertEquals(0, durationFieldTypeArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(period0);
      assertEquals(0, periodType0.size());
      assertEquals("", periodType0.getName());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = (-8);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.seconds(0);
      assertNotNull(period0);
      
      Period period1 = period0.withDays((-1820));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.plusYears(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Period period3 = period2.minusSeconds((-1820));
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      int int0 = period2.getDays();
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertEquals((-1820), int0);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      long long0 = iSOChronology0.add(0L, 0L, 14);
      assertEquals(0L, long0);
      
      Period period0 = new Period(0L, periodType0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      
      int int0 = period0.getYears();
      assertEquals(0, int0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      int int1 = 0;
      Period period1 = period0.plusYears(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period2 = period1.withFields(period0);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      
      Period period3 = period1.negated();
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period0));
      
      String string0 = "~<d[2.dC4_P3";
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodType.MILLI_INDEX = 14;
      boolean boolean1 = period2.ZERO.equals(periodType0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertFalse(boolean1);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period3));
      
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        period1.ZERO.plusMillis(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = Period.days((-1));
      assertNotNull(period0);
      
      PeriodType.YEAR_INDEX = (-308);
      Period period1 = period0.plusHours((-3114));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      long long0 = iSOChronology0.add(0L, 0L, 14);
      assertEquals(0L, long0);
      
      Period period0 = new Period(0L, periodType0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      
      int int0 = period0.getYears();
      assertEquals(0, int0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period1 = period0.plusYears(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period2 = period1.withFields(period0);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      
      Period period3 = period1.negated();
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period2));
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodType.MILLI_INDEX = 14;
      boolean boolean1 = period2.ZERO.equals(periodType0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertFalse(boolean1);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(boolean1 == boolean0);
      
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(14).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      
      Months months1 = Months.months(0);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      
      PeriodFormatter periodFormatter2 = periodFormatter1.withParseType(periodType0);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter0, periodFormatter2);
      assertNotSame(months0, months1);
      assertNotSame(periodFormatter1, periodFormatter2);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotSame(periodFormatter2, periodFormatter1);
      assertNotSame(periodFormatter2, periodFormatter0);
      assertNotNull(periodFormatter2);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter2.isPrinter());
      assertTrue(periodFormatter2.isParser());
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertFalse(months0.equals((Object)months1));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter1));
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      
      Period period4 = Period.parse("~<d[2.dC4_P3", periodFormatter2);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter0, periodFormatter2);
      assertNotSame(months0, months1);
      assertNotSame(periodFormatter1, periodFormatter2);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotSame(periodFormatter2, periodFormatter1);
      assertNotSame(periodFormatter2, periodFormatter0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter2.isPrinter());
      assertTrue(periodFormatter2.isParser());
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertFalse(periodFormatter0.equals((Object)periodFormatter2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(periodFormatter1.equals((Object)periodFormatter2));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter1));
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period3));
      
      Period period5 = Period.years(0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      
      PeriodType.SECOND_INDEX = 0;
      Period period6 = period4.plusMonths((-1090));
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter0, periodFormatter2);
      assertNotSame(months0, months1);
      assertNotSame(periodFormatter1, periodFormatter2);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotSame(periodFormatter2, periodFormatter1);
      assertNotSame(periodFormatter2, periodFormatter0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period6);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period5);
      assertNotSame(period4, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period6, period1);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotNull(period6);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter2.isPrinter());
      assertTrue(periodFormatter2.isParser());
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertFalse(periodFormatter0.equals((Object)periodFormatter2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(periodFormatter1.equals((Object)periodFormatter2));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter1));
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      assertTrue(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period5));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period3));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      
      // Undeclared exception!
      try { 
        period3.plusMinutes((-1090));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      long long0 = iSOChronology0.add(0L, 0L, 14);
      assertEquals(0L, long0);
      
      Period period0 = new Period(0L, periodType0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      
      int int0 = period0.getYears();
      assertEquals(0, int0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Period period1 = period0.plusYears(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Period period2 = new Period(0, 0, 0, 0, 0, 0, 14, 14);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period1.negated();
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertTrue(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodType.MILLI_INDEX = 14;
      boolean boolean1 = period2.ZERO.equals(periodType0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertFalse(boolean1);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertTrue(boolean1 == boolean0);
      
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      
      PeriodFormatter periodFormatter2 = periodFormatter1.withParseType(periodType0);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter0, periodFormatter2);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotSame(periodFormatter1, periodFormatter2);
      assertNotSame(periodFormatter2, periodFormatter1);
      assertNotSame(periodFormatter2, periodFormatter0);
      assertNotNull(periodFormatter2);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter2.isPrinter());
      assertTrue(periodFormatter2.isParser());
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter1));
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      
      // Undeclared exception!
      try { 
        period3.plusHours(4978125);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Period period0 = new Period((-61L), 126L, periodType0);
      assertNotNull(period0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      
      // Undeclared exception!
      try { 
        period0.minusSeconds(23118750);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%]cy,,6QcT");
      assertFalse(boolean0);
      
      Duration duration0 = Duration.millis(0L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Period period0 = duration0.toPeriod(periodType0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Duration duration1 = period0.toStandardDuration();
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertTrue(duration1.equals((Object)duration0));
      
      // Undeclared exception!
      try { 
        period0.withMillis(17971875);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeriodType.YEAR_INDEX = (-308);
      int int0 = 0;
      ReadableInstant readableInstant0 = null;
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      
      Duration duration1 = duration0.plus((long) (-308));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-308L), duration1.getMillis());
      assertFalse(duration1.equals((Object)duration0));
      
      Duration duration2 = duration1.minus(10000L);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotNull(duration2);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-308L), duration1.getMillis());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals((-10308L), duration2.getMillis());
      assertEquals((-10L), duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardDays());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      
      Period period0 = duration2.toPeriod();
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-308L), duration1.getMillis());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals((-10308L), duration2.getMillis());
      assertEquals((-10L), duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardDays());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      
      Period period1 = period0.withMinutes(809);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-308L), duration1.getMillis());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals((-10308L), duration2.getMillis());
      assertEquals((-10L), duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardDays());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(period1.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        period1.withYears(714);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -308
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.seconds(17971875);
      assertNotNull(period0);
      
      int int0 = period0.getHours();
      assertEquals(0, int0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.ZERO.withMillis(17971875);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Weeks weeks0 = period2.ZERO.toStandardWeeks();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(weeks0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period2.plusDays(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTimeNoDays", periodType1.getName());
      assertEquals(6, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.yearMonthDayTime();
      assertSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertEquals(7, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType1));
      
      int int1 = new Integer(17971875);
      assertEquals(17971875, int1);
      assertFalse(int1 == int0);
      
      Days days0 = period2.toStandardDays();
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(days0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      int int2 = period0.getYears();
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertEquals(0, int2);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      Period period4 = period0.withMinutes(17971875);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      
      Period period5 = period0.plus(period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period2, period4);
      assertSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotNull(period5);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      
      Period period6 = period3.plusMonths(17971875);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period2, period4);
      assertSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertSame(period3, period2);
      assertNotSame(period3, period6);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period6, period1);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotNull(period6);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      
      Period period7 = period6.normalizedStandard(periodType0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period2, period4);
      assertSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period6);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertSame(period3, period2);
      assertNotSame(period3, period7);
      assertNotSame(period3, period6);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period6, period1);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period2);
      assertNotSame(period6, period7);
      assertNotSame(period6, period0);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period2);
      assertNotSame(period7, period0);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertNotNull(period7);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      
      Period period8 = period5.ZERO.withYears(0);
      assertNotSame(period8, period0);
      assertNotSame(period8, period2);
      assertNotSame(period8, period4);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(period8, period5);
      assertNotSame(period8, period7);
      assertNotSame(period8, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period8);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period2, period4);
      assertSame(period2, period3);
      assertNotSame(period2, period8);
      assertNotSame(period2, period7);
      assertNotSame(period2, period6);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotSame(period5, period8);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period2);
      assertNotSame(period5, period7);
      assertNotSame(period5, period0);
      assertNotNull(period8);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period0));
      
      Period period9 = period8.minusMinutes(17);
      assertNotSame(period8, period0);
      assertNotSame(period8, period9);
      assertNotSame(period8, period2);
      assertNotSame(period8, period4);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(period8, period5);
      assertNotSame(period8, period7);
      assertNotSame(period8, period6);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period9, period0);
      assertNotSame(period9, period2);
      assertNotSame(period9, period3);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period7);
      assertNotSame(period9, period6);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period8);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period9);
      assertNotSame(period2, period4);
      assertSame(period2, period3);
      assertNotSame(period2, period8);
      assertNotSame(period2, period7);
      assertNotSame(period2, period6);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotSame(period2, period9);
      assertNotSame(period5, period8);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period2);
      assertNotSame(period5, period7);
      assertNotSame(period5, period0);
      assertNotSame(period5, period9);
      assertNotNull(period9);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period6));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period5.equals((Object)period8));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period0));
      
      Instant instant0 = Instant.ofEpochSecond(2907L);
      assertNotNull(instant0);
      assertEquals(2907000L, instant0.getMillis());
      
      Instant instant1 = instant0.plus((long) 17971875);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      assertEquals(2907000L, instant0.getMillis());
      assertEquals(20878875L, instant1.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      
      Duration duration0 = period0.ZERO.toDurationTo(instant1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(duration0);
      assertEquals(2907000L, instant0.getMillis());
      assertEquals(20878875L, instant1.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      
      Period period10 = period4.withField(durationFieldType0, 17971875);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period10);
      assertNotSame(period0, period6);
      assertNotSame(period10, period2);
      assertNotSame(period10, period4);
      assertNotSame(period10, period1);
      assertNotSame(period10, period5);
      assertNotSame(period10, period0);
      assertNotSame(period10, period9);
      assertNotSame(period10, period6);
      assertNotSame(period10, period3);
      assertNotSame(period10, period8);
      assertNotSame(period10, period7);
      assertNotSame(period4, period8);
      assertNotSame(period4, period10);
      assertNotSame(period4, period5);
      assertNotSame(period4, period7);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period9);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertNotNull(period10);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period6));
      
      int int3 = period10.ZERO.getMillis();
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period10);
      assertNotSame(period0, period6);
      assertNotSame(period10, period2);
      assertNotSame(period10, period4);
      assertNotSame(period10, period1);
      assertNotSame(period10, period5);
      assertNotSame(period10, period0);
      assertNotSame(period10, period9);
      assertNotSame(period10, period6);
      assertNotSame(period10, period3);
      assertNotSame(period10, period8);
      assertNotSame(period10, period7);
      assertNotSame(period4, period8);
      assertNotSame(period4, period10);
      assertNotSame(period4, period5);
      assertNotSame(period4, period7);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period9);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertEquals(0, int3);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period7));
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period10));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period6));
      
      Period period11 = period10.ZERO.withFields(period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period11);
      assertNotSame(period0, period7);
      assertNotSame(period0, period10);
      assertNotSame(period0, period6);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period11);
      assertNotSame(period1, period7);
      assertNotSame(period1, period8);
      assertNotSame(period1, period6);
      assertNotSame(period1, period10);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period9);
      assertNotSame(period2, period4);
      assertSame(period2, period3);
      assertNotSame(period2, period8);
      assertNotSame(period2, period11);
      assertNotSame(period2, period7);
      assertNotSame(period2, period10);
      assertNotSame(period2, period6);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotSame(period2, period9);
      assertNotSame(period10, period2);
      assertNotSame(period10, period4);
      assertNotSame(period10, period1);
      assertNotSame(period10, period5);
      assertNotSame(period10, period0);
      assertNotSame(period10, period9);
      assertNotSame(period10, period6);
      assertNotSame(period10, period3);
      assertNotSame(period10, period8);
      assertNotSame(period10, period11);
      assertNotSame(period10, period7);
      assertSame(period3, period2);
      assertNotSame(period3, period8);
      assertNotSame(period3, period11);
      assertNotSame(period3, period7);
      assertNotSame(period3, period10);
      assertNotSame(period3, period6);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period3, period9);
      assertNotSame(period11, period0);
      assertNotSame(period11, period9);
      assertNotSame(period11, period3);
      assertNotSame(period11, period2);
      assertNotSame(period11, period4);
      assertNotSame(period11, period1);
      assertNotSame(period11, period5);
      assertNotSame(period11, period8);
      assertNotSame(period11, period7);
      assertNotSame(period11, period10);
      assertNotSame(period11, period6);
      assertNotSame(period4, period8);
      assertNotSame(period4, period11);
      assertNotSame(period4, period10);
      assertNotSame(period4, period5);
      assertNotSame(period4, period7);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period9);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertNotNull(period11);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period6));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period6));
      assertTrue(period11.equals((Object)period3));
      assertTrue(period11.equals((Object)period2));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period10));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period6));
      
      Period period12 = period10.plusWeeks((-1203));
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period11);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period12);
      assertNotSame(period0, period10);
      assertNotSame(period0, period6);
      assertNotSame(period10, period2);
      assertNotSame(period10, period4);
      assertNotSame(period10, period5);
      assertNotSame(period10, period1);
      assertNotSame(period10, period0);
      assertNotSame(period10, period9);
      assertNotSame(period10, period6);
      assertNotSame(period10, period3);
      assertNotSame(period10, period11);
      assertNotSame(period10, period12);
      assertNotSame(period10, period8);
      assertNotSame(period10, period7);
      assertNotSame(period12, period11);
      assertNotSame(period12, period8);
      assertNotSame(period12, period4);
      assertNotSame(period12, period7);
      assertNotSame(period12, period5);
      assertNotSame(period12, period0);
      assertNotSame(period12, period1);
      assertNotSame(period12, period9);
      assertNotSame(period12, period3);
      assertNotSame(period12, period2);
      assertNotSame(period12, period10);
      assertNotSame(period12, period6);
      assertNotSame(period4, period11);
      assertNotSame(period4, period8);
      assertNotSame(period4, period10);
      assertNotSame(period4, period5);
      assertNotSame(period4, period12);
      assertNotSame(period4, period7);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period9);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertNotNull(period12);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period11));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period11));
      assertFalse(period4.equals((Object)period10));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period6));
      
      Period period13 = period6.withMonths(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period11);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period0, period13);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period12);
      assertNotSame(period0, period10);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period7);
      assertNotSame(period1, period8);
      assertNotSame(period1, period6);
      assertNotSame(period1, period10);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period11);
      assertNotSame(period1, period12);
      assertNotSame(period1, period3);
      assertNotSame(period1, period13);
      assertNotSame(period1, period9);
      assertNotSame(period2, period11);
      assertNotSame(period2, period12);
      assertNotSame(period2, period10);
      assertNotSame(period2, period13);
      assertNotSame(period2, period9);
      assertSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period7);
      assertNotSame(period2, period6);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertSame(period3, period2);
      assertNotSame(period3, period11);
      assertNotSame(period3, period12);
      assertNotSame(period3, period10);
      assertNotSame(period3, period6);
      assertNotSame(period3, period4);
      assertNotSame(period3, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period8);
      assertNotSame(period3, period7);
      assertNotSame(period3, period13);
      assertNotSame(period3, period9);
      assertNotSame(period13, period6);
      assertNotSame(period13, period8);
      assertNotSame(period13, period10);
      assertNotSame(period13, period5);
      assertNotSame(period13, period7);
      assertNotSame(period13, period4);
      assertNotSame(period13, period1);
      assertNotSame(period13, period0);
      assertNotSame(period13, period9);
      assertNotSame(period13, period2);
      assertNotSame(period13, period12);
      assertNotSame(period13, period11);
      assertNotSame(period13, period3);
      assertNotSame(period6, period5);
      assertNotSame(period6, period13);
      assertNotSame(period6, period11);
      assertNotSame(period6, period3);
      assertNotSame(period6, period2);
      assertNotSame(period6, period12);
      assertNotSame(period6, period10);
      assertNotSame(period6, period0);
      assertNotSame(period6, period1);
      assertNotSame(period6, period8);
      assertNotSame(period6, period4);
      assertNotSame(period6, period7);
      assertNotSame(period6, period9);
      assertNotNull(period13);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period6));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period12));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertTrue(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period12));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertTrue(period3.equals((Object)period11));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period9));
      assertTrue(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period6));
      assertFalse(period13.equals((Object)period8));
      assertFalse(period13.equals((Object)period10));
      assertTrue(period13.equals((Object)period2));
      assertFalse(period13.equals((Object)period5));
      assertFalse(period13.equals((Object)period7));
      assertTrue(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period12));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period8));
      assertFalse(period6.equals((Object)period11));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period12));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period10));
      assertFalse(period6.equals((Object)period9));
      assertFalse(period6.equals((Object)period0));
      
      Period period14 = period1.minusMillis((-1820));
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period11);
      assertNotSame(period0, period1);
      assertNotSame(period0, period14);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period0, period13);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period12);
      assertNotSame(period0, period10);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period7);
      assertNotSame(period1, period8);
      assertNotSame(period1, period14);
      assertNotSame(period1, period6);
      assertNotSame(period1, period10);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period11);
      assertNotSame(period1, period12);
      assertNotSame(period1, period3);
      assertNotSame(period1, period13);
      assertNotSame(period1, period9);
      assertNotSame(period14, period4);
      assertNotSame(period14, period1);
      assertNotSame(period14, period8);
      assertNotSame(period14, period10);
      assertNotSame(period14, period12);
      assertNotSame(period14, period7);
      assertNotSame(period14, period13);
      assertNotSame(period14, period11);
      assertNotSame(period14, period0);
      assertNotSame(period14, period9);
      assertNotSame(period14, period5);
      assertNotSame(period14, period6);
      assertNotSame(period14, period3);
      assertNotSame(period14, period2);
      assertNotNull(period14);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period10));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period13));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period14.equals((Object)period4));
      assertFalse(period14.equals((Object)period1));
      assertFalse(period14.equals((Object)period8));
      assertFalse(period14.equals((Object)period10));
      assertFalse(period14.equals((Object)period12));
      assertFalse(period14.equals((Object)period7));
      assertFalse(period14.equals((Object)period13));
      assertFalse(period14.equals((Object)period11));
      assertFalse(period14.equals((Object)period0));
      assertFalse(period14.equals((Object)period9));
      assertFalse(period14.equals((Object)period5));
      assertFalse(period14.equals((Object)period6));
      assertFalse(period14.equals((Object)period3));
      assertFalse(period14.equals((Object)period2));
      
      Duration duration1 = period14.toStandardDuration();
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period11);
      assertNotSame(period0, period1);
      assertNotSame(period0, period14);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period0, period13);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period12);
      assertNotSame(period0, period10);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period7);
      assertNotSame(period1, period8);
      assertNotSame(period1, period14);
      assertNotSame(period1, period6);
      assertNotSame(period1, period10);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period11);
      assertNotSame(period1, period12);
      assertNotSame(period1, period3);
      assertNotSame(period1, period13);
      assertNotSame(period1, period9);
      assertNotSame(period14, period4);
      assertNotSame(period14, period1);
      assertNotSame(period14, period8);
      assertNotSame(period14, period10);
      assertNotSame(period14, period12);
      assertNotSame(period14, period7);
      assertNotSame(period14, period13);
      assertNotSame(period14, period11);
      assertNotSame(period14, period0);
      assertNotSame(period14, period9);
      assertNotSame(period14, period5);
      assertNotSame(period14, period6);
      assertNotSame(period14, period3);
      assertNotSame(period14, period2);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(1820L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period14));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period10));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period14));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period13));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period14.equals((Object)period4));
      assertFalse(period14.equals((Object)period1));
      assertFalse(period14.equals((Object)period8));
      assertFalse(period14.equals((Object)period10));
      assertFalse(period14.equals((Object)period12));
      assertFalse(period14.equals((Object)period7));
      assertFalse(period14.equals((Object)period13));
      assertFalse(period14.equals((Object)period11));
      assertFalse(period14.equals((Object)period0));
      assertFalse(period14.equals((Object)period9));
      assertFalse(period14.equals((Object)period5));
      assertFalse(period14.equals((Object)period6));
      assertFalse(period14.equals((Object)period3));
      assertFalse(period14.equals((Object)period2));
      assertFalse(duration1.equals((Object)duration0));
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-3371), 0, (-440));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3371 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-2147483648L));
      assertNotNull(duration0);
      assertEquals((-2147483648000L), duration0.getMillis());
      assertEquals((-35791394L), duration0.getStandardMinutes());
      assertEquals((-596523L), duration0.getStandardHours());
      assertEquals((-24855L), duration0.getStandardDays());
      assertEquals((-2147483648L), duration0.getStandardSeconds());
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      Period period0 = duration0.toPeriod(periodType0);
      assertNotNull(period0);
      assertEquals((-2147483648000L), duration0.getMillis());
      assertEquals((-35791394L), duration0.getStandardMinutes());
      assertEquals((-596523L), duration0.getStandardHours());
      assertEquals((-24855L), duration0.getStandardDays());
      assertEquals((-2147483648L), duration0.getStandardSeconds());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.days();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period1 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals((-2147483648000L), duration0.getMillis());
      assertEquals((-35791394L), duration0.getStandardMinutes());
      assertEquals((-596523L), duration0.getStandardHours());
      assertEquals((-24855L), duration0.getStandardDays());
      assertEquals((-2147483648L), duration0.getStandardSeconds());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = period1.getSeconds();
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period0);
      assertEquals((-8), int0);
      assertEquals((-2147483648000L), duration0.getMillis());
      assertEquals((-35791394L), duration0.getStandardMinutes());
      assertEquals((-596523L), duration0.getStandardHours());
      assertEquals((-24855L), duration0.getStandardDays());
      assertEquals((-2147483648L), duration0.getStandardSeconds());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      Period period2 = period0.withWeeks(1127);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals((-2147483648000L), duration0.getMillis());
      assertEquals((-35791394L), duration0.getStandardMinutes());
      assertEquals((-596523L), duration0.getStandardHours());
      assertEquals((-24855L), duration0.getStandardDays());
      assertEquals((-2147483648L), duration0.getStandardSeconds());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      int int1 = period2.getWeeks();
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertEquals(1127, int1);
      assertEquals((-2147483648000L), duration0.getMillis());
      assertEquals((-35791394L), duration0.getStandardMinutes());
      assertEquals((-596523L), duration0.getStandardHours());
      assertEquals((-24855L), duration0.getStandardDays());
      assertEquals((-2147483648L), duration0.getStandardSeconds());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(int1 == int0);
      
      Period period3 = Period.millis(1127);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = period0.withPeriodType(periodType0);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertSame(period0, period4);
      assertSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertEquals((-2147483648000L), duration0.getMillis());
      assertEquals((-35791394L), duration0.getStandardMinutes());
      assertEquals((-596523L), duration0.getStandardHours());
      assertEquals((-24855L), duration0.getStandardDays());
      assertEquals((-2147483648L), duration0.getStandardSeconds());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      
      Period period5 = Period.months(1127);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      
      Minutes minutes0 = period3.toStandardMinutes();
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = Period.weeks(176);
      assertNotNull(period0);
      
      Period period1 = period0.plusHours(5);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.toPeriod();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      
      Days days0 = period2.toStandardDays();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertNotNull(days0);
      assertEquals(1232, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      
      Period period3 = period1.minusMillis(5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period3);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      Period period4 = period0.minusWeeks(176);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      
      Weeks weeks0 = Weeks.THREE;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(3, weeks0.getWeeks());
      
      Period period5 = period4.plus(weeks0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period4, period5);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotNull(period5);
      assertEquals(1, weeks0.size());
      assertEquals(3, weeks0.getWeeks());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      
      Duration duration0 = period3.toStandardDuration();
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period1, period3);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(duration0);
      assertEquals(1232L, duration0.getStandardDays());
      assertEquals(106462799L, duration0.getStandardSeconds());
      assertEquals(106462799995L, duration0.getMillis());
      assertEquals(29572L, duration0.getStandardHours());
      assertEquals(1774379L, duration0.getStandardMinutes());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      // Undeclared exception!
      try { 
        Period.parse("9JD9Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9JD9Z\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      long long0 = new Integer(14);
      assertEquals(14, long0);
      
      Period period0 = new Period(0L, periodType0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      
      int int0 = period0.getYears();
      assertEquals(0, int0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period1 = period0.plusYears(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period2 = period1.withFields(period0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      
      Period period3 = period1.negated();
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period2));
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodType.MILLI_INDEX = 14;
      boolean boolean1 = period2.ZERO.equals(periodType0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertFalse(boolean1);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period3));
      assertTrue(boolean1 == boolean0);
      
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(14).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      
      PeriodFormatter periodFormatter2 = periodFormatter1.withParseType(periodType0);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter0, periodFormatter2);
      assertNotSame(periodFormatter1, periodFormatter2);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotSame(periodFormatter2, periodFormatter0);
      assertNotSame(periodFormatter2, periodFormatter1);
      assertNotNull(periodFormatter2);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter2.isParser());
      assertTrue(periodFormatter2.isPrinter());
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter1));
      
      Period period4 = Period.parse("~<d[2.dC4_P3", periodFormatter2);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter0, periodFormatter2);
      assertNotSame(periodFormatter1, periodFormatter2);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotSame(periodFormatter2, periodFormatter0);
      assertNotSame(periodFormatter2, periodFormatter1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter2.isParser());
      assertTrue(periodFormatter2.isPrinter());
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertFalse(periodFormatter0.equals((Object)periodFormatter2));
      assertFalse(periodFormatter1.equals((Object)periodFormatter2));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter1));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      
      PeriodType.SECOND_INDEX = 0;
      // Undeclared exception!
      try { 
        period4.plusMonths((-1090));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      Period period0 = new Period(0L, periodType0);
      assertNotNull(period0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      PeriodType periodType1 = PeriodType.millis();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(1, periodType1.size());
      assertEquals("Millis", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period1 = period0.plusSeconds(0);
      assertNotSame(periodType0, periodType1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType1));
      
      Period period2 = period1.minusSeconds(0);
      assertNotSame(periodType0, periodType1);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertSame(period2, period0);
      assertSame(period2, period1);
      assertNotNull(period2);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType1));
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 2266L, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType1));
      
      PeriodType periodType2 = PeriodType.time();
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      assertEquals(4, periodType2.size());
      assertEquals("Time", periodType2.getName());
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      int int0 = period2.getWeeks();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertSame(period2, period0);
      assertSame(period2, period1);
      assertEquals(0, int0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      
      Period period3 = period0.ZERO.negated();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      
      Period period4 = period0.withFields(period1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      
      int int1 = period0.indexOf(durationFieldType0);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertEquals((-1), int1);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period4));
      assertFalse(int1 == int0);
      
      Seconds seconds0 = period4.toStandardSeconds();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotNull(seconds0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period0));
      
      Period period5 = period4.withMillis(0);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotNull(period5);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period1));
      assertTrue(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      
      PeriodType periodType3 = PeriodType.years();
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotNull(periodType3);
      assertEquals("Years", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      
      Minutes minutes0 = period2.toStandardMinutes();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotNull(minutes0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period5));
      
      Days days0 = period1.toStandardDays();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotNull(days0);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      
      int int2 = period0.getMinutes();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertEquals(0, int2);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period4));
      
      int int3 = period3.getMinutes();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertEquals(0, int3);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period4));
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period4));
      
      Period period6 = period4.plusDays((-1));
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period4);
      assertSame(period1, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period4, period6);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotNull(period6);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period4));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period5));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period0));
      
      Period period7 = period3.minusYears((-1));
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period2);
      assertNotSame(period3, period7);
      assertNotSame(period3, period0);
      assertNotSame(period3, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period6);
      assertNotSame(period3, period4);
      assertNotNull(period7);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period4));
      
      Period period8 = period6.minus(period0);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotSame(period6, period7);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period8);
      assertNotSame(period6, period4);
      assertNotSame(period1, period7);
      assertNotSame(period1, period8);
      assertSame(period1, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period8, period1);
      assertNotSame(period8, period6);
      assertNotSame(period8, period4);
      assertNotSame(period8, period3);
      assertNotSame(period8, period2);
      assertNotSame(period8, period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period5);
      assertNotSame(period4, period6);
      assertNotSame(period4, period3);
      assertNotSame(period4, period8);
      assertNotSame(period4, period0);
      assertNotSame(period4, period7);
      assertNotSame(period4, period2);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotNull(period8);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period4));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertTrue(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertTrue(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period5));
      assertTrue(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period7));
      assertTrue(period4.equals((Object)period0));
      
      Period period9 = period2.minusMinutes(0);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertSame(period0, period9);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period8);
      assertSame(period1, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period6);
      assertSame(period1, period9);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period2, period9);
      assertSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period2, period7);
      assertSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period8);
      assertNotSame(period9, period8);
      assertNotSame(period9, period4);
      assertNotSame(period9, period7);
      assertSame(period9, period0);
      assertSame(period9, period1);
      assertNotSame(period9, period6);
      assertSame(period9, period2);
      assertNotSame(period9, period3);
      assertNotSame(period9, period5);
      assertNotNull(period9);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period7));
      assertTrue(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period3));
      assertTrue(period9.equals((Object)period4));
      
      Period period10 = period1.plusMonths(0);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertSame(period0, period10);
      assertNotSame(period0, period5);
      assertSame(period0, period9);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period8);
      assertSame(period1, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period6);
      assertSame(period1, period9);
      assertNotSame(period1, period4);
      assertSame(period1, period10);
      assertNotSame(period1, period5);
      assertSame(period10, period1);
      assertSame(period10, period2);
      assertNotSame(period10, period3);
      assertSame(period10, period0);
      assertNotSame(period10, period4);
      assertNotSame(period10, period8);
      assertNotSame(period10, period6);
      assertNotSame(period10, period7);
      assertNotSame(period10, period5);
      assertSame(period10, period9);
      assertNotNull(period10);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period10.equals((Object)period4));
      assertTrue(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period7));
      
      Period period11 = period0.normalizedStandard(periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period8);
      assertNotSame(period0, period11);
      assertNotSame(period0, period7);
      assertSame(period0, period10);
      assertNotSame(period0, period5);
      assertSame(period0, period9);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType0);
      assertNotSame(period11, period6);
      assertNotSame(period11, period4);
      assertNotSame(period11, period5);
      assertNotSame(period11, period1);
      assertNotSame(period11, period2);
      assertNotSame(period11, period10);
      assertNotSame(period11, period7);
      assertNotSame(period11, period0);
      assertNotSame(period11, period9);
      assertNotSame(period11, period8);
      assertNotSame(period11, period3);
      assertNotNull(period11);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(1, periodType1.size());
      assertEquals("Millis", periodType1.getName());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period4));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period3));
      
      // Undeclared exception!
      try { 
        period6.minusMonths(8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Period period0 = Period.weeks((-452));
      assertNotNull(period0);
      
      Period period1 = period0.plusYears(86400000);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Days days0 = period0.toStandardDays();
      assertNotSame(period0, period1);
      assertNotNull(days0);
      assertEquals((-3164), days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period0.equals((Object)period1));
      
      int int0 = period0.getDays();
      assertNotSame(period0, period1);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 1589;
      Period period0 = Period.years(1589);
      assertNotNull(period0);
      
      Period period1 = period0.minusWeeks(1589);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Period period2 = period0.normalizedStandard((PeriodType) null);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      
      Period period3 = period0.plusMinutes(1589);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = period3.ZERO.minusYears(1589);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      
      String string0 = ";:1";
      // Undeclared exception!
      try { 
        MutableDateTime.parse(";:1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \";:1\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      assertNotNull(dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      int int1 = 7;
      Period period0 = new Period(7L, 7L, periodType0);
      assertNotNull(period0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period1 = period0.multipliedBy((-1774));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(period1.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        period1.withSeconds(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      Period period0 = new Period(0L, periodType0);
      assertNotNull(period0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      PeriodType periodType1 = PeriodType.millis();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period1 = period0.plusSeconds(0);
      assertNotSame(periodType0, periodType1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType1));
      
      Period period2 = period1.minusSeconds(0);
      assertNotSame(periodType0, periodType1);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertSame(period2, period1);
      assertSame(period2, period0);
      assertNotNull(period2);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType1));
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 2266L, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType1));
      
      PeriodType periodType2 = PeriodType.time();
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      assertEquals(4, periodType2.size());
      assertEquals("Time", periodType2.getName());
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      Period period3 = mutablePeriod0.toPeriod();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = period3.ZERO.negated();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      
      Period period5 = period0.withFields(period3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotNull(period5);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      Seconds seconds0 = period5.toStandardSeconds();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotNull(seconds0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(2, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      
      Period period6 = period5.withMillis(0);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period6);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period5, period6);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period6, period3);
      assertNotSame(period6, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotNull(period6);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      
      Minutes minutes0 = period3.toStandardMinutes();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period6);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotNull(minutes0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      
      Days days0 = period1.toStandardDays();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period1, period6);
      assertSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotNull(days0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      
      Period period7 = Period.days(0);
      assertNotSame(period7, period2);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period0);
      assertNotSame(period7, period3);
      assertNotNull(period7);
      assertFalse(period7.equals((Object)period2));
      assertTrue(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period3));
      
      int int1 = period3.getMinutes();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period7);
      assertNotSame(period3, period6);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertEquals(0, int1);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertTrue(int1 == int0);
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      
      int int2 = period4.getMinutes();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period7);
      assertNotSame(period3, period6);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period4, period5);
      assertNotSame(period4, period7);
      assertNotSame(period4, period6);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertEquals(0, int2);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period7));
      
      Period period8 = period4.plusDays((-2390));
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period8, period1);
      assertNotSame(period8, period7);
      assertNotSame(period8, period6);
      assertNotSame(period8, period4);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period5);
      assertNotSame(period3, period8);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period7);
      assertNotSame(period3, period6);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period4, period8);
      assertNotSame(period4, period5);
      assertNotSame(period4, period7);
      assertNotSame(period4, period6);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotNull(period8);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period5));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period7));
      
      Period period9 = period5.plusDays(0);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period8);
      assertSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period1);
      assertNotSame(period9, period2);
      assertNotSame(period9, period7);
      assertNotSame(period9, period3);
      assertNotSame(period9, period0);
      assertNotSame(period9, period6);
      assertNotSame(period9, period4);
      assertNotSame(period3, period8);
      assertNotSame(period3, period9);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period7);
      assertNotSame(period3, period6);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period5, period6);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period7);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period8);
      assertSame(period5, period9);
      assertNotSame(period5, period3);
      assertNotNull(period9);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertTrue(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period4));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period8));
      
      Period period10 = period4.minusYears(0);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period10, period7);
      assertNotSame(period10, period3);
      assertNotSame(period10, period5);
      assertNotSame(period10, period0);
      assertNotSame(period10, period9);
      assertNotSame(period10, period8);
      assertNotSame(period10, period1);
      assertNotSame(period10, period2);
      assertSame(period10, period4);
      assertNotSame(period10, period6);
      assertNotSame(period3, period8);
      assertNotSame(period3, period9);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period7);
      assertNotSame(period3, period6);
      assertNotSame(period3, period0);
      assertNotSame(period3, period10);
      assertNotSame(period3, period4);
      assertSame(period4, period10);
      assertNotSame(period4, period8);
      assertNotSame(period4, period9);
      assertNotSame(period4, period5);
      assertNotSame(period4, period7);
      assertNotSame(period4, period6);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotNull(period10);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period2));
      assertTrue(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period6));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period7));
      
      Period period11 = period9.minus(period7);
      assertNotSame(period7, period2);
      assertNotSame(period7, period4);
      assertNotSame(period7, period8);
      assertNotSame(period7, period9);
      assertNotSame(period7, period10);
      assertNotSame(period7, period11);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period0);
      assertNotSame(period7, period3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period8);
      assertSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period0, period10);
      assertNotSame(period0, period11);
      assertSame(period9, period5);
      assertNotSame(period9, period10);
      assertNotSame(period9, period8);
      assertNotSame(period9, period1);
      assertNotSame(period9, period2);
      assertNotSame(period9, period7);
      assertNotSame(period9, period11);
      assertNotSame(period9, period3);
      assertNotSame(period9, period0);
      assertNotSame(period9, period6);
      assertNotSame(period9, period4);
      assertNotSame(period11, period10);
      assertNotSame(period11, period5);
      assertNotSame(period11, period9);
      assertNotSame(period11, period8);
      assertNotSame(period11, period1);
      assertNotSame(period11, period2);
      assertNotSame(period11, period7);
      assertNotSame(period11, period3);
      assertNotSame(period11, period0);
      assertNotSame(period11, period6);
      assertNotSame(period11, period4);
      assertNotSame(period3, period8);
      assertNotSame(period3, period9);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period11);
      assertNotSame(period3, period5);
      assertNotSame(period3, period7);
      assertNotSame(period3, period6);
      assertNotSame(period3, period0);
      assertNotSame(period3, period10);
      assertNotSame(period3, period4);
      assertNotSame(period5, period6);
      assertNotSame(period5, period0);
      assertNotSame(period5, period10);
      assertNotSame(period5, period4);
      assertNotSame(period5, period7);
      assertNotSame(period5, period11);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period8);
      assertSame(period5, period9);
      assertNotSame(period5, period3);
      assertNotNull(period11);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertTrue(period7.equals((Object)period10));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period9));
      assertTrue(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period10));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period4));
      assertTrue(period11.equals((Object)period3));
      assertTrue(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period7));
      assertTrue(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period4));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period10));
      assertFalse(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period8));
      
      int int3 = 8;
      PeriodType.HOUR_INDEX = 8;
      Period period12 = period2.minusMinutes((-2004));
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period12);
      assertSame(period0, period2);
      assertNotSame(period0, period8);
      assertNotSame(period0, period9);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period0, period10);
      assertNotSame(period0, period11);
      assertNotSame(period1, period12);
      assertNotSame(period1, period11);
      assertNotSame(period1, period6);
      assertSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period10);
      assertSame(period1, period0);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period8);
      assertNotSame(period1, period5);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period6);
      assertSame(period2, period1);
      assertNotSame(period2, period11);
      assertNotSame(period2, period12);
      assertSame(period2, period0);
      assertNotSame(period2, period9);
      assertNotSame(period2, period10);
      assertNotSame(period2, period8);
      assertNotSame(period2, period5);
      assertNotSame(period2, period7);
      assertNotSame(period12, period11);
      assertNotSame(period12, period5);
      assertNotSame(period12, period7);
      assertNotSame(period12, period9);
      assertNotSame(period12, period1);
      assertNotSame(period12, period2);
      assertNotSame(period12, period8);
      assertNotSame(period12, period4);
      assertNotSame(period12, period0);
      assertNotSame(period12, period10);
      assertNotSame(period12, period3);
      assertNotSame(period12, period6);
      assertNotNull(period12);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period6));
      
      PeriodType periodType3 = PeriodType.seconds();
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotNull(periodType3);
      assertEquals(1, periodType3.size());
      assertEquals("Seconds", periodType3.getName());
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      
      Period period13 = period7.plusMonths(0);
      assertNotSame(period7, period4);
      assertNotSame(period7, period9);
      assertNotSame(period7, period11);
      assertNotSame(period7, period5);
      assertNotSame(period7, period12);
      assertSame(period7, period13);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertNotSame(period7, period10);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period0);
      assertNotSame(period13, period4);
      assertNotSame(period13, period3);
      assertNotSame(period13, period6);
      assertNotSame(period13, period0);
      assertNotSame(period13, period11);
      assertNotSame(period13, period1);
      assertNotSame(period13, period12);
      assertNotSame(period13, period9);
      assertNotSame(period13, period10);
      assertSame(period13, period7);
      assertNotSame(period13, period2);
      assertNotSame(period13, period8);
      assertNotSame(period13, period5);
      assertNotNull(period13);
      assertTrue(period7.equals((Object)period10));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period9));
      assertFalse(period7.equals((Object)period8));
      assertTrue(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period11));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period12));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period13.equals((Object)period2));
      assertTrue(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period6));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period12));
      assertTrue(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period8));
      assertFalse(period13.equals((Object)period5));
      
      // Undeclared exception!
      try { 
        period7.minusHours((-1744));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Days days0 = Days.standardDaysIn(period0);
      assertNotNull(days0);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      
      Hours hours0 = days0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      Duration duration0 = hours0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Hours hours1 = hours0.dividedBy((-1551));
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotNull(hours1);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      
      Period period1 = duration0.toPeriodTo((ReadableInstant) instant0);
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409281320L, instant0.getMillis());
      assertTrue(period1.equals((Object)period0));
      
      Duration duration1 = period1.toStandardDuration();
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertNotSame(duration0, duration1);
      assertNotSame(period1, period0);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertTrue(duration1.equals((Object)duration0));
      
      Period period2 = period1.plusYears((-1551));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertNotSame(duration0, duration1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409281320L, instant0.getMillis());
      assertTrue(period0.equals((Object)period1));
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      PeriodType.YEAR_INDEX = (-196);
      Period period3 = period1.plusMillis(167);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertNotSame(duration0, duration1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409281320L, instant0.getMillis());
      assertTrue(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      Period period4 = period3.minusMillis(1893);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertNotSame(duration0, duration1);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409281320L, instant0.getMillis());
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = Period.weeks(1000);
      assertNotNull(period0);
      
      Period period1 = Period.minutes(1000);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.withDays(1000);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period0.withMinutes(1000);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      
      Weeks weeks0 = period3.toStandardWeeks();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotNull(weeks0);
      assertEquals(1000, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      
      Period period4 = period1.plusHours(1127);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      
      PeriodType periodType1 = PeriodType.millis();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(1, periodType1.size());
      assertEquals("Millis", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period5 = period4.minusMonths(1000);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotNull(period5);
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      
      Period period6 = Period.years(23118750);
      assertNotSame(period6, period2);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotNull(period6);
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotNull(seconds0);
      assertEquals(604800000, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      
      Seconds seconds1 = Seconds.secondsIn((ReadableInterval) null);
      assertNotSame(seconds1, seconds0);
      assertNotNull(seconds1);
      assertEquals(0, seconds1.getSeconds());
      assertEquals(1, seconds1.size());
      assertFalse(seconds1.equals((Object)seconds0));
      
      Period period7 = period2.withSeconds(701);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotSame(period2, period7);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period4);
      assertNotSame(period7, period6);
      assertNotSame(period7, period2);
      assertNotSame(period7, period4);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertNotSame(period7, period3);
      assertNotSame(period7, period5);
      assertNotNull(period7);
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period5));
      
      Period period8 = period7.withFields(seconds0);
      assertNotSame(period0, period8);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotSame(period2, period7);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period8);
      assertNotSame(period2, period6);
      assertNotSame(period2, period4);
      assertNotSame(seconds0, seconds1);
      assertNotSame(period7, period8);
      assertNotSame(period7, period6);
      assertNotSame(period7, period2);
      assertNotSame(period7, period4);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertNotSame(period7, period3);
      assertNotSame(period7, period5);
      assertNotSame(period8, period2);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotNull(period8);
      assertEquals(604800000, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period4));
      assertFalse(seconds0.equals((Object)seconds1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = Period.seconds(17971875);
      assertNotNull(period0);
      
      int int0 = period0.getHours();
      assertEquals(0, int0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period1.equals((Object)period0));
      
      Weeks weeks0 = period0.ZERO.toStandardWeeks();
      assertNotSame(period0, period1);
      assertNotNull(weeks0);
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertFalse(period0.equals((Object)period1));
      
      Period period2 = period1.plusDays(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertNotNull(period2);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      
      PeriodType periodType1 = PeriodType.yearMonthDayTime();
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("YearMonthDayTime", periodType1.getName());
      assertEquals(7, periodType1.size());
      
      int int1 = period1.getMonths();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(periodType0, periodType1);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertEquals(0, int1);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertTrue(int1 == int0);
      
      Days days0 = period1.toStandardDays();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(periodType0, periodType1);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotNull(days0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      int int2 = period0.getYears();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertEquals(0, int2);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      Period period3 = period0.withMinutes(17971875);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      Period period4 = period0.plus(period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertSame(periodType0, periodType1);
      assertNotSame(period1, period3);
      assertSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      
      Period period5 = Period.millis((-1203));
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      
      Period period6 = period5.normalizedStandard(periodType0);
      assertSame(periodType0, periodType1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotSame(period5, period6);
      assertNotSame(period5, period2);
      assertNotSame(period6, period2);
      assertNotSame(period6, period1);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotNull(period6);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      
      Period period7 = period4.ZERO.withYears(0);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertSame(periodType0, periodType1);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period7);
      assertNotSame(period1, period6);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period7);
      assertNotSame(period4, period3);
      assertNotSame(period4, period5);
      assertNotSame(period4, period6);
      assertNotSame(period4, period1);
      assertNotSame(period7, period4);
      assertNotSame(period7, period2);
      assertNotSame(period7, period6);
      assertNotSame(period7, period1);
      assertNotSame(period7, period5);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotNull(period7);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      
      Period period8 = period7.minusMinutes(17);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertSame(periodType0, periodType1);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period8);
      assertSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period7);
      assertNotSame(period1, period6);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period7);
      assertNotSame(period4, period3);
      assertNotSame(period4, period5);
      assertNotSame(period4, period6);
      assertNotSame(period4, period8);
      assertNotSame(period4, period1);
      assertNotSame(period7, period4);
      assertNotSame(period7, period2);
      assertNotSame(period7, period6);
      assertNotSame(period7, period8);
      assertNotSame(period7, period1);
      assertNotSame(period7, period5);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period8, period4);
      assertNotSame(period8, period2);
      assertNotSame(period8, period1);
      assertNotSame(period8, period6);
      assertNotSame(period8, period3);
      assertNotSame(period8, period5);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotNull(period8);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      
      Instant instant0 = Instant.ofEpochSecond(2907L);
      assertNotNull(instant0);
      assertEquals(2907000L, instant0.getMillis());
      
      Instant instant1 = instant0.plus((long) 0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(instant1);
      assertEquals(2907000L, instant0.getMillis());
      assertEquals(2907000L, instant1.getMillis());
      
      Duration duration0 = period0.ZERO.toDurationTo(instant1);
      assertSame(instant0, instant1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertSame(instant1, instant0);
      assertNotNull(duration0);
      assertEquals(2907000L, instant0.getMillis());
      assertEquals(2907000L, instant1.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      
      Period period9 = period3.withField(durationFieldType0, 17971875);
      assertNotSame(period0, period9);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period4);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotSame(period9, period5);
      assertNotSame(period9, period2);
      assertNotSame(period9, period3);
      assertNotSame(period9, period6);
      assertNotSame(period9, period8);
      assertNotSame(period3, period0);
      assertNotSame(period3, period7);
      assertNotSame(period3, period5);
      assertNotSame(period3, period9);
      assertNotSame(period3, period6);
      assertNotSame(period3, period2);
      assertNotSame(period3, period8);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotNull(period9);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      
      Period period10 = period9.ZERO.withFields(period2);
      assertNotSame(period0, period10);
      assertNotSame(period0, period9);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertSame(periodType0, periodType1);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period8);
      assertNotSame(period1, period10);
      assertNotSame(period1, period9);
      assertSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period7);
      assertNotSame(period1, period6);
      assertNotSame(period9, period1);
      assertNotSame(period9, period4);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotSame(period9, period10);
      assertNotSame(period9, period5);
      assertNotSame(period9, period2);
      assertNotSame(period9, period3);
      assertNotSame(period9, period6);
      assertNotSame(period9, period8);
      assertNotSame(period10, period6);
      assertNotSame(period10, period8);
      assertNotSame(period10, period1);
      assertNotSame(period10, period5);
      assertNotSame(period10, period0);
      assertNotSame(period10, period7);
      assertNotSame(period10, period2);
      assertNotSame(period10, period3);
      assertNotSame(period10, period4);
      assertNotSame(period10, period9);
      assertNotSame(period2, period5);
      assertNotSame(period2, period3);
      assertNotSame(period2, period9);
      assertNotSame(period2, period10);
      assertNotSame(period2, period0);
      assertNotSame(period2, period7);
      assertNotSame(period2, period4);
      assertSame(period2, period1);
      assertNotSame(period2, period6);
      assertNotSame(period2, period8);
      assertNotSame(period3, period0);
      assertNotSame(period3, period7);
      assertNotSame(period3, period5);
      assertNotSame(period3, period10);
      assertNotSame(period3, period9);
      assertNotSame(period3, period6);
      assertNotSame(period3, period2);
      assertNotSame(period3, period8);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotNull(period10);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period1));
      assertTrue(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      
      PeriodType.MONTH_INDEX = (-561);
      Period period11 = period9.plusWeeks(0);
      assertNotSame(period0, period10);
      assertNotSame(period0, period9);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period11);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period4);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotSame(period9, period10);
      assertNotSame(period9, period5);
      assertNotSame(period9, period2);
      assertSame(period9, period11);
      assertNotSame(period9, period3);
      assertNotSame(period9, period6);
      assertNotSame(period9, period8);
      assertNotSame(period11, period8);
      assertSame(period11, period9);
      assertNotSame(period11, period6);
      assertNotSame(period11, period1);
      assertNotSame(period11, period5);
      assertNotSame(period11, period0);
      assertNotSame(period11, period7);
      assertNotSame(period11, period10);
      assertNotSame(period11, period2);
      assertNotSame(period11, period4);
      assertNotSame(period11, period3);
      assertNotSame(period3, period0);
      assertNotSame(period3, period7);
      assertNotSame(period3, period5);
      assertNotSame(period3, period10);
      assertNotSame(period3, period9);
      assertNotSame(period3, period6);
      assertNotSame(period3, period2);
      assertNotSame(period3, period8);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period11);
      assertNotNull(period11);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period10));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      
      // Undeclared exception!
      try { 
        period5.withMonths(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -561
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = Period.millis(3384);
      assertNotNull(period0);
      
      Period period1 = period0.plusDays(3384);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      int int0 = period1.getMillis();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(3384, int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.toPeriod();
      assertNotSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period2, period1);
      assertSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = Period.years(3384);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = period3.normalizedStandard();
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertTrue(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period5 = Period.seconds(3384);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      
      // Undeclared exception!
      try { 
        DateTimeZone.forID("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.withWeeks(1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.withSeconds(352831696);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Hours hours0 = period2.toStandardHours();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(98176, hours0.getHours());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period2.minusSeconds(1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      int int0 = period2.ZERO.getHours();
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period4 = Period.minutes(1607);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      
      Period period5 = period4.minusDays(1607);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      
      Hours hours1 = period4.ZERO.toStandardHours();
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(hours1, hours0);
      assertNotNull(hours1);
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(hours1.equals((Object)hours0));
      
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      
      Period period6 = period4.ZERO.withMonths(5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period6);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotNull(period6);
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      
      PeriodType periodType1 = period6.getPeriodType();
      assertNotSame(period4, period1);
      assertNotSame(period4, period6);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Standard", periodType1.getName());
      assertEquals(8, periodType1.size());
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period7 = period6.ZERO.minusMinutes(1820);
      assertNotSame(period4, period7);
      assertNotSame(period4, period1);
      assertNotSame(period4, period6);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period7);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period3);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period0);
      assertNotSame(period7, period2);
      assertNotNull(period7);
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period2));
      
      PeriodType periodType2 = PeriodType.yearDay();
      assertSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      assertEquals(2, periodType2.size());
      assertEquals("YearDay", periodType2.getName());
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType.YEAR_INDEX = 558;
      int int1 = period1.getDays();
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertEquals(0, int1);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertTrue(int1 == int0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("");
      assertNull(dateTimeZone0);
      
      Period period8 = period4.withFields(period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period3);
      assertNotSame(period8, period6);
      assertNotSame(period8, period7);
      assertNotSame(period8, period4);
      assertNotSame(period8, period1);
      assertNotSame(period8, period2);
      assertNotSame(period8, period5);
      assertNotSame(period4, period7);
      assertNotSame(period4, period1);
      assertNotSame(period4, period8);
      assertNotSame(period4, period6);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period8);
      assertNotSame(period6, period0);
      assertNotSame(period6, period7);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period8);
      assertNotSame(period7, period3);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period0);
      assertNotSame(period7, period2);
      assertNotNull(period8);
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period5));
      assertTrue(period8.equals((Object)period7));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period2));
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(period0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.Period
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = (-3211);
      int int1 = 2;
      Period period0 = new Period((-3211), (-3211), 2, 3384);
      assertNotNull(period0);
      
      int int2 = period0.ZERO.getSeconds();
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = (-406);
      Period period1 = period0.plusYears((-406));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.withHours((-406));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      PeriodType.SECOND_INDEX = 1156;
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(2268L);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertNotNull(minutes0);
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      LocalDate localDate1 = localDate0.withPeriodAdded(minutes0, 0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(3, localDate1.size());
      
      Period period0 = new Period(localDate0, localDate1);
      assertNotNull(period0);
      assertEquals(3, localDate0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(3, localDate1.size());
      
      Period period1 = period0.minusHours(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(3, localDate0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(3, localDate1.size());
      
      Period period2 = period1.withYears(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals(3, localDate0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(3, localDate1.size());
      assertTrue(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      
      Period period3 = period0.withMonths(2171);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertEquals(3, localDate0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(3, localDate1.size());
      assertTrue(period0.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      Period period4 = period2.minusSeconds(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period2, period0);
      assertSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertSame(period4, period2);
      assertNotNull(period4);
      assertEquals(3, localDate0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(3, localDate1.size());
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      
      int int0 = period4.getValue(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period2, period0);
      assertSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertSame(period4, period2);
      assertEquals(0, int0);
      assertEquals(3, localDate0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(3, localDate1.size());
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      
      Period period5 = period1.withSeconds(2171);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotNull(period5);
      assertEquals(3, localDate0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(3, localDate1.size());
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      
      int int1 = period5.getYears();
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertEquals(0, int1);
      assertEquals(3, localDate0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(3, localDate1.size());
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertTrue(int1 == int0);
      
      Period period6 = period4.minusDays(2171);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period6);
      assertNotSame(period2, period5);
      assertSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period6);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period5);
      assertSame(period4, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period5);
      assertNotSame(period6, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotNull(period6);
      assertEquals(3, localDate0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(3, localDate1.size());
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      
      Period period7 = Period.millis(0);
      assertNotSame(period7, period2);
      assertNotSame(period7, period3);
      assertNotSame(period7, period1);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotNull(period7);
      assertTrue(period7.equals((Object)period1));
      assertTrue(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period5));
      assertTrue(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertTrue(period7.equals((Object)period2));
      
      Period period8 = Period.months(0);
      assertNotSame(period8, period5);
      assertNotSame(period8, period4);
      assertNotSame(period8, period0);
      assertNotSame(period8, period6);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertNotSame(period8, period1);
      assertNotNull(period8);
      assertTrue(period8.equals((Object)period4));
      assertTrue(period8.equals((Object)period2));
      assertTrue(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period5));
      assertTrue(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period6));
      assertTrue(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period3));
      
      Period period9 = Period.fieldDifference(localDate0, localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period3);
      assertNotSame(period9, period1);
      assertNotSame(period9, period2);
      assertNotSame(period9, period6);
      assertNotSame(period9, period4);
      assertNotNull(period9);
      assertEquals(3, localDate0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(3, localDate1.size());
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period4));
      
      Period period10 = Period.hours((-233));
      assertNotSame(period10, period8);
      assertNotSame(period10, period3);
      assertNotSame(period10, period1);
      assertNotSame(period10, period4);
      assertNotSame(period10, period7);
      assertNotSame(period10, period0);
      assertNotSame(period10, period6);
      assertNotSame(period10, period5);
      assertNotSame(period10, period9);
      assertNotSame(period10, period2);
      assertNotNull(period10);
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period2));
      
      Period period11 = period3.minus(period1);
      assertNotSame(period11, period3);
      assertNotSame(period11, period1);
      assertNotSame(period11, period4);
      assertNotSame(period11, period8);
      assertNotSame(period11, period0);
      assertNotSame(period11, period6);
      assertNotSame(period11, period7);
      assertNotSame(period11, period5);
      assertNotSame(period11, period9);
      assertNotSame(period11, period10);
      assertNotSame(period11, period2);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period11);
      assertNotSame(period0, period4);
      assertNotSame(period0, period10);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period1, period6);
      assertNotSame(period1, period7);
      assertNotSame(period1, period2);
      assertNotSame(period1, period9);
      assertNotSame(period1, period8);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period10);
      assertSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period11);
      assertNotSame(period3, period0);
      assertNotSame(period3, period6);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period9);
      assertNotSame(period3, period8);
      assertNotSame(period3, period4);
      assertNotSame(period3, period5);
      assertNotSame(period3, period10);
      assertNotSame(period3, period1);
      assertNotSame(period3, period11);
      assertNotNull(period11);
      assertEquals(3, localDate0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(3, localDate1.size());
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period5));
      assertTrue(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period7));
      assertTrue(period1.equals((Object)period8));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period1));
      
      Period period12 = period9.plusHours(0);
      assertSame(localDate0, localDate1);
      assertNotSame(period12, period7);
      assertNotSame(period12, period2);
      assertNotSame(period12, period11);
      assertNotSame(period12, period3);
      assertNotSame(period12, period1);
      assertNotSame(period12, period8);
      assertNotSame(period12, period10);
      assertNotSame(period12, period4);
      assertSame(period12, period9);
      assertNotSame(period12, period0);
      assertNotSame(period12, period6);
      assertNotSame(period12, period5);
      assertSame(localDate1, localDate0);
      assertSame(period9, period12);
      assertNotSame(period9, period11);
      assertNotSame(period9, period0);
      assertNotSame(period9, period5);
      assertNotSame(period9, period7);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period9, period3);
      assertNotSame(period9, period1);
      assertNotSame(period9, period6);
      assertNotSame(period9, period10);
      assertNotSame(period9, period4);
      assertNotNull(period12);
      assertEquals(3, localDate0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(3, localDate1.size());
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period9.equals((Object)period11));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period10));
      assertFalse(period9.equals((Object)period4));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      Period period0 = new Period(0L, periodType0);
      assertNotNull(period0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      PeriodType periodType1 = PeriodType.millis();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period1 = new Period(0, 0L, periodType1);
      assertNotNull(period1);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.minusSeconds(0);
      assertNotSame(periodType1, periodType0);
      assertNotSame(period1, period0);
      assertSame(period1, period2);
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertNotNull(period2);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 2266L, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType1));
      
      PeriodType periodType2 = PeriodType.yearMonthDayTime();
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertEquals(7, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.time();
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotNull(periodType3);
      assertEquals("Time", periodType3.getName());
      assertEquals(4, periodType3.size());
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      
      Period period3 = mutablePeriod0.toPeriod();
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      
      Period period4 = period1.plusMonths(0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertNotSame(period1, period0);
      assertSame(period1, period4);
      assertSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period4, period0);
      assertSame(period4, period2);
      assertNotSame(period4, period3);
      assertSame(period4, period1);
      assertNotNull(period4);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      
      Period period5 = period2.normalizedStandard();
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertNotSame(period1, period0);
      assertSame(period1, period4);
      assertSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period2, period0);
      assertSame(period2, period4);
      assertSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      
      int int0 = period0.indexOf(durationFieldType0);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertEquals((-1), int0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      
      Seconds seconds0 = period5.toStandardSeconds();
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertNotSame(period1, period0);
      assertSame(period1, period4);
      assertSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period2, period0);
      assertSame(period2, period4);
      assertSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotNull(seconds0);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      
      Period period6 = period5.withMillis(0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertSame(period1, period4);
      assertNotSame(period1, period0);
      assertSame(period1, period2);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertSame(period2, period4);
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertNotSame(period2, period6);
      assertNotSame(period2, period5);
      assertNotSame(period2, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotNull(period6);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertTrue(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      
      Minutes minutes0 = period3.toStandardMinutes();
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotNull(minutes0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period5));
      
      Days days0 = period1.toStandardDays();
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertSame(period1, period4);
      assertNotSame(period1, period0);
      assertSame(period1, period2);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotNull(days0);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      
      Period period7 = Period.days(0);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertNotSame(period7, period2);
      assertNotSame(period7, period4);
      assertNotSame(period7, period3);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotNull(period7);
      assertFalse(period7.equals((Object)period1));
      assertTrue(period7.equals((Object)period6));
      assertTrue(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period3));
      
      int int1 = period3.getMinutes();
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period7);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertEquals(0, int1);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(int1 == int0);
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period5));
      
      int int2 = period4.getMinutes();
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period7);
      assertSame(period1, period2);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period4, period5);
      assertNotSame(period4, period6);
      assertNotSame(period4, period0);
      assertSame(period4, period2);
      assertNotSame(period4, period7);
      assertNotSame(period4, period3);
      assertSame(period4, period1);
      assertEquals(0, int2);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType3));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period3));
      
      // Undeclared exception!
      try { 
        period4.plusDays((-2390));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      PeriodType.DAY_INDEX = (-2461);
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period1 = period0.withMonths(868);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = Period.millis(1963);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period1.minusWeeks((-2461));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      
      int int0 = (-2083);
      PeriodType.MONTH_INDEX = (-2083);
      int int1 = 8;
      Period period4 = period1.ZERO.plusYears(8);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      
      Period period5 = period0.ZERO.minus((ReadablePeriod) null);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period1);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period1));
      
      int int2 = period0.getSeconds();
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertEquals(0, int2);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period3));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = 0L;
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      int int0 = 14;
      long long1 = iSOChronology0.add(0L, 0L, 14);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      Period period0 = new Period(0L, periodType0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      
      int int1 = period0.getYears();
      assertEquals(0, int1);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertFalse(int1 == int0);
      
      int int2 = (-7);
      // Undeclared exception!
      try { 
        period0.plusYears((-7));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = (-23);
      Period period0 = Period.hours((-23));
      assertNotNull(period0);
      
      int int1 = period0.ZERO.getMinutes();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      
      int int2 = period0.ZERO.get(durationFieldType0);
      assertEquals(0, int2);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = 8;
      Period period1 = period0.minusHours(8);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.plusHours(4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Days days0 = period2.ZERO.toStandardDays();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(days0);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Period period3 = period2.minusSeconds(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertSame(period3, period2);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      DurationField durationField0 = durationFieldType0.getField(gJChronology0);
      assertNotNull(durationField0);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertTrue(durationField0.isSupported());
      assertEquals("millis", durationField0.getName());
      assertEquals("DurationField[millis]", durationField0.toString());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      assertSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      assertSame(gJChronology0, gJChronology1);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      Period period4 = Period.fieldDifference(localDateTime0, localDateTime0);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertEquals(4, localDateTime0.size());
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      
      Period period5 = period4.ZERO.plusDays(0);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period5);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotNull(period5);
      assertEquals(4, localDateTime0.size());
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      
      Period period6 = Period.millis(2237);
      assertNotSame(period6, period3);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotNull(period6);
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      
      PeriodType.HOUR_INDEX = (-23);
      Period period7 = period5.withField(durationFieldType0, 764);
      assertNotSame(period5, period6);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period7);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period3);
      assertNotSame(period7, period4);
      assertNotSame(period7, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period6);
      assertNotSame(period4, period2);
      assertNotSame(period4, period5);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period7);
      assertNotNull(period7);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals(4, localDateTime0.size());
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      
      int int4 = period4.getSeconds();
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period6);
      assertNotSame(period4, period2);
      assertNotSame(period4, period5);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period7);
      assertEquals(0, int4);
      assertEquals(4, localDateTime0.size());
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period7));
      
      Period period8 = period2.withMinutes(60);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period8, period3);
      assertNotSame(period8, period4);
      assertNotSame(period8, period2);
      assertNotSame(period8, period7);
      assertNotSame(period8, period1);
      assertNotSame(period8, period0);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period8);
      assertNotSame(period2, period7);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period6);
      assertNotNull(period8);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period6));
      
      Period period9 = period8.minusMonths(292272708);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period8, period9);
      assertNotSame(period8, period3);
      assertNotSame(period8, period4);
      assertNotSame(period8, period2);
      assertNotSame(period8, period7);
      assertNotSame(period8, period1);
      assertNotSame(period8, period0);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotSame(period9, period0);
      assertNotSame(period9, period1);
      assertNotSame(period9, period8);
      assertNotSame(period9, period4);
      assertNotSame(period9, period2);
      assertNotSame(period9, period7);
      assertNotSame(period9, period3);
      assertNotSame(period9, period5);
      assertNotSame(period9, period6);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period8);
      assertNotSame(period2, period7);
      assertNotSame(period2, period1);
      assertNotSame(period2, period9);
      assertNotSame(period2, period4);
      assertNotSame(period2, period6);
      assertNotNull(period9);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period6));
      
      Period period10 = period8.plusSeconds(0);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period8, period9);
      assertNotSame(period8, period3);
      assertNotSame(period8, period4);
      assertNotSame(period8, period2);
      assertNotSame(period8, period7);
      assertSame(period8, period10);
      assertNotSame(period8, period1);
      assertNotSame(period8, period0);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotSame(period10, period0);
      assertNotSame(period10, period1);
      assertNotSame(period10, period5);
      assertNotSame(period10, period9);
      assertNotSame(period10, period6);
      assertNotSame(period10, period3);
      assertSame(period10, period8);
      assertNotSame(period10, period7);
      assertNotSame(period10, period4);
      assertNotSame(period10, period2);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period8);
      assertNotSame(period2, period7);
      assertNotSame(period2, period1);
      assertNotSame(period2, period9);
      assertNotSame(period2, period4);
      assertNotSame(period2, period6);
      assertNotSame(period2, period10);
      assertNotNull(period10);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period6));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period11 = period10.withMinutes(60);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period8);
      assertNotSame(period0, period11);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period8, period9);
      assertNotSame(period8, period11);
      assertNotSame(period8, period3);
      assertNotSame(period8, period4);
      assertNotSame(period8, period2);
      assertNotSame(period8, period7);
      assertSame(period8, period10);
      assertNotSame(period8, period1);
      assertNotSame(period8, period0);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotSame(period10, period0);
      assertNotSame(period10, period1);
      assertNotSame(period10, period5);
      assertNotSame(period10, period9);
      assertNotSame(period10, period6);
      assertNotSame(period10, period3);
      assertSame(period10, period8);
      assertNotSame(period10, period7);
      assertNotSame(period10, period11);
      assertNotSame(period10, period4);
      assertNotSame(period10, period2);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period8);
      assertNotSame(period2, period7);
      assertNotSame(period2, period1);
      assertNotSame(period2, period9);
      assertNotSame(period2, period4);
      assertNotSame(period2, period6);
      assertNotSame(period2, period11);
      assertNotSame(period2, period10);
      assertNotSame(period11, period0);
      assertNotSame(period11, period8);
      assertNotSame(period11, period6);
      assertNotSame(period11, period7);
      assertNotSame(period11, period5);
      assertNotSame(period11, period1);
      assertNotSame(period11, period9);
      assertNotSame(period11, period2);
      assertNotSame(period11, period3);
      assertNotSame(period11, period4);
      assertNotSame(period11, period10);
      assertNotNull(period11);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period7));
      assertTrue(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period2));
      assertTrue(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period4));
      
      // Undeclared exception!
      try { 
        period10.ZERO.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      long long0 = iSOChronology0.add(0L, 0L, 14);
      assertEquals(0L, long0);
      
      Period period0 = new Period(0L, periodType0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      
      int int0 = period0.getYears();
      assertEquals(0, int0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Period period1 = period0.plusYears(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Period period2 = period1.withFields(period0);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      
      Period period3 = period1.negated();
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period0));
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodType.MILLI_INDEX = 14;
      boolean boolean1 = period2.ZERO.equals(periodType0);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(boolean1);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(boolean1 == boolean0);
      
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      
      PeriodFormatter periodFormatter2 = periodFormatter1.withParseType(periodType0);
      assertNotSame(periodFormatter0, periodFormatter2);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotSame(periodFormatter1, periodFormatter2);
      assertNotSame(periodFormatter2, periodFormatter1);
      assertNotSame(periodFormatter2, periodFormatter0);
      assertNotNull(periodFormatter2);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter2.isParser());
      assertTrue(periodFormatter2.isPrinter());
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter1));
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      
      Period period4 = period3.toPeriod();
      assertSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertSame(period3, period4);
      assertNotNull(period4);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        period0.minusHours(7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = Period.millis((-1403));
      assertNotNull(period0);
      
      Period period1 = period0.plusDays((-1403));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      int int0 = period1.getMillis();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals((-1403), int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      PeriodType.HOUR_INDEX = 0;
      int int1 = (-701);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      // Undeclared exception!
      try { 
        LocalDate.parse(";95_!&8jR`N;UqW", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \";95_!&8jR`N;UqW\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = new Period(0L, (Chronology) null);
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
      assertNotNull(mutableDateTime0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Duration duration0 = period1.toDurationFrom(mutableDateTime0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(duration0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      Duration duration1 = duration0.dividedBy((long) 2, roundingMode0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertTrue(duration1.equals((Object)duration0));
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Days days0 = Days.MAX_VALUE;
      assertNotNull(days0);
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      
      PeriodType periodType0 = days0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType1.getName());
      
      Period period2 = duration1.toPeriod(periodType1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType1.getName());
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        period2.plusWeeks(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      Period period0 = new Period((-134L), 0L, gregorianChronology0);
      assertNotNull(period0);
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(134L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      
      Period period1 = new Period(instant0, duration0, periodType0);
      assertNotNull(period1);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(134L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertFalse(period1.equals((Object)period0));
      
      int int0 = period1.getDays();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(0, int0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(134L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        period1.withFieldAdded((DurationFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period((-253L), (-186L));
      assertNotNull(period0);
      
      int int0 = (-1044);
      Period period1 = period0.minusWeeks((-1044));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.minusYears(4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = Period.weeks((-1044));
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      
      int int1 = period3.size();
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertEquals(8, int1);
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(int1 == int0);
      
      PeriodType.MINUTE_INDEX = (-1044);
      // Undeclared exception!
      try { 
        period2.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      Period period0 = new Period(0L, 0L, copticChronology0);
      assertNotNull(period0);
      assertEquals(1, CopticChronology.AM);
      
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
      assertEquals(1, CopticChronology.AM);
      
      Period period1 = period0.multipliedBy(1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, CopticChronology.AM);
      
      // Undeclared exception!
      try { 
        Period.parse("monthOfYear");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"monthOfYear\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(3600000L);
      assertNotNull(duration0);
      assertEquals(41L, duration0.getStandardDays());
      assertEquals(60000L, duration0.getStandardMinutes());
      assertEquals(3600000000L, duration0.getMillis());
      assertEquals(1000L, duration0.getStandardHours());
      assertEquals(3600000L, duration0.getStandardSeconds());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Period period0 = new Period(duration0, dateTime0);
      assertNotNull(period0);
      assertEquals(41L, duration0.getStandardDays());
      assertEquals(60000L, duration0.getStandardMinutes());
      assertEquals(3600000000L, duration0.getMillis());
      assertEquals(1000L, duration0.getStandardHours());
      assertEquals(3600000L, duration0.getStandardSeconds());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 1170;
      Period period0 = Period.days(1170);
      assertNotNull(period0);
      
      Period period1 = period0.minusSeconds((-4570));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period2.withDays(4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      int int1 = 3;
      Period period4 = period3.withMillis(3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance((Chronology) null, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = new Period((Object) null);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period1.equals((Object)period0));
      
      int int0 = 292272984;
      Period period2 = Period.hours(292272984);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      int int1 = 0;
      Period period3 = period0.minusYears(0);
      assertNotSame(period0, period2);
      assertSame(period0, period3);
      assertNotSame(period0, period1);
      assertSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      
      PeriodType periodType1 = PeriodType.years();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(1, periodType1.size());
      assertEquals("Years", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period4 = period0.minus(period3);
      assertNotSame(period0, period2);
      assertSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      Period period5 = Period.days(0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertTrue(period5.equals((Object)period0));
      assertTrue(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      
      // Undeclared exception!
      try { 
        period1.withWeeks(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      assertNotNull(period0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Days days0 = Days.TWO;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(2, days0.getDays());
      
      // Undeclared exception!
      try { 
        period0.minus(days0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.weeks((-1));
      assertNotNull(period0);
      
      int int0 = 675;
      Period period1 = period0.ZERO.withDays(675);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      boolean boolean0 = period1.ZERO.equals(period0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(boolean0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      int int1 = period1.ZERO.size();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, int1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(int1 == int0);
      
      Period period2 = period0.withMillis(2008);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period0.withMinutes(2949);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period4 = Period.months((-1));
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      
      Period period5 = period4.normalizedStandard();
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertTrue(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      
      Period period6 = period3.normalizedStandard(periodType0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period6);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotNull(period6);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      
      boolean boolean1 = period6.isSupported((DurationFieldType) null);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period6);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertFalse(boolean1);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        period5.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 0;
      Seconds seconds0 = Seconds.seconds(0);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      
      PeriodType periodType0 = seconds0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Minutes minutes0 = seconds0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      
      Period period0 = new Period(3600L, 3600L, periodType0);
      assertNotNull(period0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(1, periodType1.size());
      
      PeriodType.DAY_INDEX = (-1105);
      int int1 = period0.getMillis();
      assertSame(periodType0, periodType1);
      assertEquals(0, int1);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        period0.withDays(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1105
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = new Period(0L, 10800000L);
      assertNotNull(period0);
      
      Period period1 = period0.minusMonths(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      
      Period period2 = period1.ZERO.minusMinutes(398);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      DurationFieldType durationFieldType0 = period1.getFieldType(0);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      
      Period period3 = period1.withHours(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(10800, seconds0.getSeconds());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      
      Period period4 = Period.millis(0);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertTrue(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      
      int int0 = 211;
      Period period5 = Period.millis(211);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      
      Period period6 = period4.minusHours(0);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertSame(period4, period6);
      assertNotSame(period4, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertNotNull(period6);
      assertTrue(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period1));
      assertTrue(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      
      Period period7 = period4.withWeeks(398);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period7);
      assertNotSame(period4, period1);
      assertSame(period4, period6);
      assertNotSame(period4, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period7, period4);
      assertNotNull(period7);
      assertTrue(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period4));
      
      int int1 = period1.getMillis();
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertNotSame(period0, period6);
      assertSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period5);
      assertEquals(0, int1);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period5));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        Period.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 884;
      ReadablePeriod readablePeriod0 = null;
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      
      PeriodType periodType0 = days0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = null;
      try {
        period0 = new Period(884, 292272992, 292272992, 884, 884, (-1763), (-1763), 884, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-798);
      Period period0 = Period.millis((-798));
      assertNotNull(period0);
      
      Period period1 = period0.ZERO.minusMinutes((-798));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.minusMinutes((-798));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period2.minusMinutes((-798));
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      PeriodType.YEAR_INDEX = (-798);
      // Undeclared exception!
      try { 
        period3.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType1.getName());
      assertEquals(1, periodType1.size());
      
      PeriodType periodType2 = periodType1.withDaysRemoved();
      assertSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType2);
      assertSame(periodType1, periodType0);
      assertSame(periodType2, periodType0);
      assertSame(periodType2, periodType1);
      assertNotNull(periodType2);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals(1, periodType2.size());
      assertEquals("Hours", periodType2.getName());
      
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType2);
      assertNotNull(period0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals(1, periodType2.size());
      assertEquals("Hours", periodType2.getName());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      PeriodType.YEAR_INDEX = (-2693);
      Period period1 = period0.withPeriodType(periodType1);
      assertSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType2);
      assertSame(periodType1, periodType0);
      assertSame(periodType2, periodType0);
      assertSame(periodType2, periodType1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals(1, periodType2.size());
      assertEquals("Hours", periodType2.getName());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        period1.plusMillis(1440);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      
      Period period0 = new Period(0L, periodType0);
      assertNotNull(period0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.millis();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period1 = period0.plusSeconds(0);
      assertNotSame(periodType0, periodType1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      
      Period period2 = period1.minusSeconds(0);
      assertNotSame(periodType0, periodType1);
      assertSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertSame(period1, period2);
      assertSame(period2, period0);
      assertSame(period2, period1);
      assertNotNull(period2);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 2266L, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      
      PeriodType periodType2 = PeriodType.time();
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      assertEquals("Time", periodType2.getName());
      assertEquals(4, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      Period period3 = mutablePeriod0.toPeriod();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = period3.ZERO.negated();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      
      Period period5 = period0.withFields(period3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertSame(period0, period2);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotNull(period5);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      
      int int0 = period0.indexOf(durationFieldType0);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertSame(period0, period2);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertEquals((-1), int0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      
      Seconds seconds0 = period5.toStandardSeconds();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertSame(period0, period2);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotNull(seconds0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(1, seconds0.size());
      assertEquals(2, seconds0.getSeconds());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      
      Period period6 = period5.withMillis(0);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period6);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period3);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period5);
      assertNotNull(period6);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      
      Minutes minutes0 = period3.toStandardMinutes();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotNull(minutes0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      
      Days days0 = period1.toStandardDays();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period3);
      assertSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period1, period4);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertSame(period1, period0);
      assertSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotNull(days0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      
      Period period7 = Period.days(0);
      assertNotSame(period7, period4);
      assertNotSame(period7, period2);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotNull(period7);
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertTrue(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      
      int int1 = period3.getMinutes();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period7);
      assertNotSame(period3, period0);
      assertEquals(0, int1);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(int1 == int0);
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period7));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      
      int int2 = period4.getMinutes();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period7);
      assertNotSame(period3, period0);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period7);
      assertNotSame(period4, period6);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertEquals(0, int2);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period7));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period2));
      
      Period period8 = period4.plusDays((-2390));
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotSame(period8, period0);
      assertNotSame(period8, period2);
      assertNotSame(period8, period4);
      assertNotSame(period8, period3);
      assertNotSame(period8, period7);
      assertNotSame(period8, period1);
      assertNotSame(period3, period8);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period7);
      assertNotSame(period3, period0);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period8);
      assertNotSame(period4, period3);
      assertNotSame(period4, period7);
      assertNotSame(period4, period6);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotNull(period8);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period7));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period2));
      
      Period period9 = period5.plusDays((-1));
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period9);
      assertSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period3);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period9, period6);
      assertNotSame(period9, period5);
      assertNotSame(period3, period8);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period9);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period7);
      assertNotSame(period3, period0);
      assertNotSame(period5, period7);
      assertNotSame(period5, period9);
      assertNotSame(period5, period8);
      assertNotSame(period5, period2);
      assertNotSame(period5, period6);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotNull(period9);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period7));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period8));
      assertFalse(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      
      Period period10 = period4.minusYears((-1));
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period10, period3);
      assertNotSame(period10, period6);
      assertNotSame(period10, period5);
      assertNotSame(period10, period8);
      assertNotSame(period10, period9);
      assertNotSame(period10, period1);
      assertNotSame(period10, period2);
      assertNotSame(period10, period0);
      assertNotSame(period10, period4);
      assertNotSame(period10, period7);
      assertNotSame(period3, period10);
      assertNotSame(period3, period8);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period9);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period7);
      assertNotSame(period3, period0);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period10);
      assertNotSame(period4, period8);
      assertNotSame(period4, period3);
      assertNotSame(period4, period7);
      assertNotSame(period4, period9);
      assertNotSame(period4, period6);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotNull(period10);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period7));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period2));
      
      Period period11 = period9.minus(period7);
      assertNotSame(period7, period4);
      assertNotSame(period7, period9);
      assertNotSame(period7, period2);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period8);
      assertNotSame(period7, period10);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period11);
      assertNotSame(period7, period0);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period9);
      assertSame(period0, period2);
      assertNotSame(period0, period10);
      assertNotSame(period0, period11);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period3);
      assertNotSame(period9, period10);
      assertNotSame(period9, period11);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period9, period6);
      assertNotSame(period9, period5);
      assertNotSame(period11, period8);
      assertNotSame(period11, period3);
      assertNotSame(period11, period10);
      assertNotSame(period11, period0);
      assertNotSame(period11, period7);
      assertNotSame(period11, period9);
      assertNotSame(period11, period1);
      assertNotSame(period11, period2);
      assertNotSame(period11, period4);
      assertNotSame(period11, period6);
      assertNotSame(period11, period5);
      assertNotSame(period3, period10);
      assertNotSame(period3, period8);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period9);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period7);
      assertNotSame(period3, period11);
      assertNotSame(period3, period0);
      assertNotSame(period5, period7);
      assertNotSame(period5, period9);
      assertNotSame(period5, period8);
      assertNotSame(period5, period2);
      assertNotSame(period5, period6);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period10);
      assertNotSame(period5, period1);
      assertNotSame(period5, period11);
      assertNotSame(period5, period0);
      assertNotNull(period11);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(period7.equals((Object)period9));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period10));
      assertTrue(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period10));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period0));
      assertTrue(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period7));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period9));
      assertFalse(period5.equals((Object)period8));
      assertFalse(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period10));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      
      int int3 = 8;
      PeriodType.HOUR_INDEX = 8;
      Period period12 = period2.minusMinutes((-2004));
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period7);
      assertSame(period0, period2);
      assertNotSame(period0, period10);
      assertNotSame(period0, period11);
      assertNotSame(period0, period6);
      assertNotSame(period0, period12);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period1, period4);
      assertNotSame(period1, period9);
      assertNotSame(period1, period5);
      assertNotSame(period1, period6);
      assertSame(period1, period0);
      assertNotSame(period1, period10);
      assertNotSame(period1, period8);
      assertSame(period1, period2);
      assertNotSame(period1, period12);
      assertNotSame(period1, period7);
      assertNotSame(period1, period11);
      assertNotSame(period1, period3);
      assertNotSame(period2, period11);
      assertNotSame(period2, period4);
      assertNotSame(period2, period12);
      assertNotSame(period2, period7);
      assertNotSame(period2, period8);
      assertNotSame(period2, period3);
      assertSame(period2, period0);
      assertNotSame(period2, period10);
      assertSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period6);
      assertNotSame(period2, period9);
      assertNotSame(period12, period8);
      assertNotSame(period12, period10);
      assertNotSame(period12, period3);
      assertNotSame(period12, period5);
      assertNotSame(period12, period7);
      assertNotSame(period12, period2);
      assertNotSame(period12, period4);
      assertNotSame(period12, period0);
      assertNotSame(period12, period11);
      assertNotSame(period12, period1);
      assertNotSame(period12, period6);
      assertNotSame(period12, period9);
      assertNotNull(period12);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period9));
      
      Period period13 = period7.plusMonths(0);
      assertSame(period7, period13);
      assertNotSame(period7, period9);
      assertNotSame(period7, period2);
      assertNotSame(period7, period6);
      assertNotSame(period7, period10);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period11);
      assertNotSame(period7, period4);
      assertNotSame(period7, period12);
      assertNotSame(period7, period5);
      assertNotSame(period7, period8);
      assertNotSame(period7, period0);
      assertNotSame(period13, period12);
      assertNotSame(period13, period3);
      assertNotSame(period13, period11);
      assertNotSame(period13, period4);
      assertNotSame(period13, period2);
      assertNotSame(period13, period0);
      assertSame(period13, period7);
      assertNotSame(period13, period8);
      assertNotSame(period13, period6);
      assertNotSame(period13, period10);
      assertNotSame(period13, period1);
      assertNotSame(period13, period5);
      assertNotSame(period13, period9);
      assertNotNull(period13);
      assertFalse(period7.equals((Object)period12));
      assertFalse(period7.equals((Object)period9));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period10));
      assertTrue(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period11));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period13.equals((Object)period12));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period6));
      assertFalse(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period2));
      assertFalse(period13.equals((Object)period5));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period8));
      assertTrue(period13.equals((Object)period4));
      
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, (PeriodType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = new Period((-3300L));
      assertNotNull(period0);
      
      Period period1 = period0.ZERO.withYears((-1046));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = new Period(0L, 1665L);
      assertNotNull(period0);
      
      int int0 = period0.getHours();
      assertEquals(0, int0);
      
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      Period period1 = period0.withYears(0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-233);
      Period period0 = Period.seconds((-233));
      assertNotNull(period0);
      
      DurationFieldType[] durationFieldTypeArray0 = period0.getFieldTypes();
      assertEquals(8, durationFieldTypeArray0.length);
      assertNotNull(durationFieldTypeArray0);
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals((-233000L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-233L), duration0.getStandardSeconds());
      assertEquals((-3L), duration0.getStandardMinutes());
      
      int int1 = (-1);
      int int2 = period0.getMillis();
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Period period1 = period0.minusYears((-1));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      int int3 = 2452;
      // Undeclared exception!
      try { 
        period0.getFieldType(400);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      Days days0 = Days.ONE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(1, days0.getDays());
      
      Weeks weeks0 = days0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, days0.size());
      assertEquals(1, days0.getDays());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      
      Weeks weeks1 = Weeks.standardWeeksIn(weeks0);
      assertSame(weeks0, weeks1);
      assertSame(weeks1, weeks0);
      assertNotNull(weeks1);
      assertEquals(1, days0.size());
      assertEquals(1, days0.getDays());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks1.size());
      assertEquals(0, weeks1.getWeeks());
      
      CopticChronology copticChronology1 = CopticChronology.getInstance();
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals(1, CopticChronology.AM);
      
      long long0 = copticChronology0.add((ReadablePeriod) weeks1, 24L, 1469);
      assertSame(copticChronology0, copticChronology1);
      assertSame(weeks0, weeks1);
      assertSame(weeks1, weeks0);
      assertEquals(24L, long0);
      assertEquals(1, days0.size());
      assertEquals(1, days0.getDays());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks1.size());
      assertEquals(0, weeks1.getWeeks());
      assertEquals(1, CopticChronology.AM);
      
      Period period0 = new Period(598L, 598L, (PeriodType) null, copticChronology0);
      assertNotNull(period0);
      assertEquals(1, CopticChronology.AM);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertSame(copticChronology0, copticChronology1);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = (-1152);
      Period period0 = new Period(10209375, 718, (-1152), 718);
      assertNotNull(period0);
      
      Period period1 = period0.minusHours(718);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.plusMonths(718);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      
      // Undeclared exception!
      try { 
        period2.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = Period.hours(0);
      assertNotNull(period0);
      
      Period period1 = period0.withMillis(1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.ZERO.minusYears(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period0.withFields((ReadablePeriod) null);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(period0, period3);
      assertSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period2));
      
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      
      Days days0 = period3.toStandardDays();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(period0, period3);
      assertSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(days0);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period2));
      
      int int0 = period3.ZERO.getSeconds();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(period0, period3);
      assertSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertEquals(0, int0);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period2));
      
      Period period4 = period3.withYears(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertSame(period0, period3);
      assertNotSame(period3, period4);
      assertSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      
      Period period5 = period3.withHours(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period3);
      assertNotSame(period3, period4);
      assertSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period5, period2);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotNull(period5);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period4));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertTrue(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period3));
      
      Period period6 = period0.plusMonths(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period4);
      assertSame(period6, period0);
      assertSame(period6, period3);
      assertNotSame(period6, period5);
      assertNotNull(period6);
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertTrue(period6.equals((Object)period2));
      assertTrue(period6.equals((Object)period4));
      assertTrue(period6.equals((Object)period5));
      
      PeriodType.YEAR_INDEX = (-165);
      int[] intArray0 = period6.getValues();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period4);
      assertSame(period6, period0);
      assertSame(period6, period3);
      assertNotSame(period6, period5);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray0);
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertTrue(period6.equals((Object)period2));
      assertTrue(period6.equals((Object)period4));
      assertTrue(period6.equals((Object)period5));
      
      Period period7 = period4.plusHours((-302));
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period3);
      assertNotSame(period3, period4);
      assertSame(period3, period0);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period7);
      assertNotSame(period4, period6);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period7, period2);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertNotSame(period7, period1);
      assertNotNull(period7);
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period4));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period6));
      assertTrue(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period1));
      
      int int1 = period7.getMinutes();
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period3);
      assertNotSame(period3, period4);
      assertSame(period3, period0);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period7);
      assertNotSame(period4, period6);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period7, period2);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertNotSame(period7, period1);
      assertEquals(0, int1);
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period4));
      assertTrue(period3.equals((Object)period2));
      assertFalse(period4.equals((Object)period7));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period6));
      assertTrue(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period1));
      assertTrue(int1 == int0);
      
      Period period8 = period2.minusYears(0);
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period8);
      assertNotSame(period1, period6);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period5);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period6);
      assertNotSame(period2, period3);
      assertNotSame(period2, period7);
      assertSame(period2, period8);
      assertSame(period8, period2);
      assertNotSame(period8, period6);
      assertNotSame(period8, period3);
      assertNotSame(period8, period7);
      assertNotSame(period8, period5);
      assertNotSame(period8, period0);
      assertNotSame(period8, period4);
      assertNotSame(period8, period1);
      assertNotNull(period8);
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertTrue(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period6));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period7));
      assertTrue(period2.equals((Object)period4));
      assertTrue(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertTrue(period8.equals((Object)period3));
      assertTrue(period8.equals((Object)period0));
      assertTrue(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period1));
      assertTrue(period8.equals((Object)period6));
      
      Period period9 = period8.multipliedBy(586);
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period9);
      assertSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period8);
      assertNotSame(period1, period6);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period9);
      assertNotSame(period1, period5);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period6);
      assertNotSame(period2, period3);
      assertNotSame(period2, period7);
      assertSame(period2, period9);
      assertSame(period2, period8);
      assertSame(period8, period2);
      assertNotSame(period8, period6);
      assertNotSame(period8, period3);
      assertNotSame(period8, period7);
      assertSame(period8, period9);
      assertNotSame(period8, period5);
      assertNotSame(period8, period0);
      assertNotSame(period8, period4);
      assertNotSame(period8, period1);
      assertSame(period9, period8);
      assertNotSame(period9, period3);
      assertSame(period9, period2);
      assertNotSame(period9, period5);
      assertNotSame(period9, period1);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotSame(period9, period4);
      assertNotSame(period9, period6);
      assertNotNull(period9);
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertTrue(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period6));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period7));
      assertTrue(period2.equals((Object)period4));
      assertTrue(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertTrue(period8.equals((Object)period3));
      assertTrue(period8.equals((Object)period0));
      assertTrue(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period1));
      assertTrue(period8.equals((Object)period6));
      assertTrue(period9.equals((Object)period4));
      assertTrue(period9.equals((Object)period3));
      assertTrue(period9.equals((Object)period6));
      assertTrue(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period1));
      assertTrue(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period7));
      
      int int2 = period5.getMillis();
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period9);
      assertSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period3);
      assertNotSame(period3, period4);
      assertSame(period3, period0);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertSame(period3, period6);
      assertNotSame(period3, period8);
      assertNotSame(period3, period9);
      assertNotSame(period3, period5);
      assertNotSame(period5, period2);
      assertNotSame(period5, period1);
      assertNotSame(period5, period8);
      assertNotSame(period5, period3);
      assertNotSame(period5, period9);
      assertNotSame(period5, period4);
      assertNotSame(period5, period6);
      assertNotSame(period5, period7);
      assertNotSame(period5, period0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period9));
      assertTrue(period3.equals((Object)period9));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period4));
      assertTrue(period3.equals((Object)period8));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertTrue(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period6));
      assertTrue(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period8));
      assertFalse(period5.equals((Object)period7));
      assertTrue(period5.equals((Object)period9));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.negated();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      
      int int0 = period0.ZERO.getMinutes();
      assertNotSame(period0, period1);
      assertEquals(0, int0);
      assertTrue(period0.equals((Object)period1));
      
      Duration duration0 = period1.ZERO.toStandardDuration();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      
      int int1 = period1.getMonths();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(0, int1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertTrue(int1 == int0);
      
      DurationFieldType[] durationFieldTypeArray0 = period1.getFieldTypes();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, durationFieldTypeArray0.length);
      assertNotNull(durationFieldTypeArray0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      
      Duration duration1 = period0.toStandardDuration();
      assertNotSame(period0, period1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertTrue(period0.equals((Object)period1));
      assertTrue(duration1.equals((Object)duration0));
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      String string0 = period0.ZERO.toString(periodFormatter0);
      assertNotSame(period0, period1);
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(period0.equals((Object)period1));
      
      Period period2 = period1.minusDays(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period2.equals((Object)period0));
      
      Period period3 = period0.minusHours((-2297));
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      
      Period period4 = period3.normalizedStandard(periodType0);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      
      Period period5 = period0.minusHours((-936));
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      
      Period period0 = new Period(31556952000L, periodType0);
      assertNotNull(period0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      
      Seconds seconds0 = period0.ZERO.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      
      Period period1 = Period.days((-1));
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        period0.withHours((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = Period.minutes(690562340);
      assertNotNull(period0);
      
      int int0 = period0.getHours();
      assertEquals(0, int0);
      
      Period period1 = period0.withWeeks((-3381));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.minusMonths(690562340);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period1.minusWeeks((-3381));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      Period period4 = period2.plusYears((-1889));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      
      Period period5 = period4.ZERO.plus(period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period4, period1);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period2));
      
      PeriodType.DAY_INDEX = (-3381);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      
      boolean boolean0 = period1.isSupported(durationFieldType0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertFalse(boolean0);
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      
      Period period6 = period2.plus(period0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period6);
      assertNotSame(period1, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period6, period1);
      assertNotSame(period6, period5);
      assertNotSame(period6, period3);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotNull(period6);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      
      int int1 = period6.getMinutes();
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period6);
      assertNotSame(period1, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period6, period1);
      assertNotSame(period6, period5);
      assertNotSame(period6, period3);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertEquals(1381124680, int1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        period6.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = Period.millis((-1411));
      assertNotNull(period0);
      
      Period period1 = period0.minusSeconds(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      
      Period period2 = period1.withWeeks((-1411));
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertNotNull(durationFieldType0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      
      boolean boolean0 = period1.ZERO.isSupported(durationFieldType0);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertTrue(boolean0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      
      Period period3 = period1.plusMinutes((-1411));
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      
      Period period4 = period1.multipliedBy((-1411));
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      
      Period period5 = period1.plusMinutes((-1411));
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      
      boolean boolean1 = period3.isSupported(durationFieldType0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertTrue(boolean1);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertTrue(boolean1 == boolean0);
      
      int int0 = period3.getYears();
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertTrue(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      
      Period period6 = period0.minusSeconds(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period5);
      assertSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertSame(period6, period0);
      assertNotNull(period6);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      
      Period period7 = period6.withWeeks((-1411));
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period5);
      assertSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period7);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertSame(period6, period0);
      assertNotSame(period7, period5);
      assertNotSame(period7, period0);
      assertNotSame(period7, period1);
      assertNotSame(period7, period4);
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotNull(period7);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      assertTrue(period7.equals((Object)period2));
      
      Period period8 = period0.minusHours(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertSame(period0, period8);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period8, period4);
      assertNotSame(period8, period3);
      assertNotSame(period8, period7);
      assertSame(period8, period6);
      assertNotSame(period8, period2);
      assertSame(period8, period0);
      assertSame(period8, period1);
      assertNotSame(period8, period5);
      assertNotNull(period8);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period5));
      
      Period period9 = period0.plus(period7);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertSame(period0, period8);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period5);
      assertSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period7);
      assertNotSame(period6, period5);
      assertSame(period6, period8);
      assertNotSame(period6, period4);
      assertSame(period6, period0);
      assertNotSame(period6, period9);
      assertNotSame(period7, period5);
      assertNotSame(period7, period0);
      assertNotSame(period7, period1);
      assertNotSame(period7, period9);
      assertNotSame(period7, period4);
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertNotSame(period9, period0);
      assertNotSame(period9, period1);
      assertNotSame(period9, period5);
      assertNotSame(period9, period6);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period9, period3);
      assertNotSame(period9, period7);
      assertNotSame(period9, period4);
      assertNotNull(period9);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period8));
      assertTrue(period7.equals((Object)period2));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period4));
      
      Period period10 = period9.withSeconds(0);
      assertNotSame(period0, period9);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertSame(period0, period8);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period5);
      assertSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period7);
      assertNotSame(period6, period5);
      assertSame(period6, period8);
      assertNotSame(period6, period4);
      assertNotSame(period6, period10);
      assertSame(period6, period0);
      assertNotSame(period6, period9);
      assertNotSame(period7, period5);
      assertNotSame(period7, period0);
      assertNotSame(period7, period1);
      assertNotSame(period7, period9);
      assertNotSame(period7, period4);
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertNotSame(period7, period10);
      assertNotSame(period9, period0);
      assertNotSame(period9, period1);
      assertNotSame(period9, period5);
      assertNotSame(period9, period6);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period9, period3);
      assertNotSame(period9, period7);
      assertNotSame(period9, period10);
      assertNotSame(period9, period4);
      assertNotSame(period10, period9);
      assertNotSame(period10, period1);
      assertNotSame(period10, period5);
      assertNotSame(period10, period4);
      assertNotSame(period10, period6);
      assertNotSame(period10, period8);
      assertNotSame(period10, period2);
      assertNotSame(period10, period0);
      assertNotSame(period10, period3);
      assertNotSame(period10, period7);
      assertNotNull(period10);
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period9));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period9));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period8));
      assertTrue(period7.equals((Object)period2));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period7));
      assertTrue(period10.equals((Object)period9));
      
      Period period11 = period2.minusMinutes(0);
      assertNotSame(period0, period9);
      assertNotSame(period0, period10);
      assertNotSame(period0, period11);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period4);
      assertSame(period0, period8);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period1, period5);
      assertNotSame(period1, period9);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period10);
      assertSame(period1, period0);
      assertNotSame(period1, period11);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertSame(period1, period8);
      assertSame(period1, period6);
      assertNotSame(period2, period1);
      assertNotSame(period2, period6);
      assertNotSame(period2, period9);
      assertNotSame(period2, period10);
      assertNotSame(period2, period5);
      assertNotSame(period2, period8);
      assertSame(period2, period11);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period0);
      assertNotSame(period11, period5);
      assertNotSame(period11, period0);
      assertNotSame(period11, period1);
      assertNotSame(period11, period9);
      assertNotSame(period11, period3);
      assertNotSame(period11, period7);
      assertNotSame(period11, period10);
      assertNotSame(period11, period4);
      assertSame(period11, period2);
      assertNotSame(period11, period6);
      assertNotSame(period11, period8);
      assertNotNull(period11);
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period5));
      assertTrue(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period4));
      assertTrue(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period8));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 1;
      Period period0 = Period.months(1);
      assertNotNull(period0);
      
      Period period1 = period0.minusMonths(1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      int int1 = 0;
      Period period2 = period1.minusYears(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      // Undeclared exception!
      try { 
        Period.parse((String) null, periodFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = Period.millis(32);
      assertNotNull(period0);
      
      Period period1 = period0.ZERO.minusSeconds(32);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      int int0 = period0.getDays();
      assertNotSame(period0, period1);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period1));
      
      Period period2 = Period.days(32);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = Period.minutes(3672);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      Period period4 = period0.minusHours(32);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      
      int int1 = period4.getYears();
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertEquals(0, int1);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertTrue(int1 == int0);
      
      Period period5 = period1.withMillis(6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      
      MutablePeriod mutablePeriod0 = period5.ZERO.toMutablePeriod();
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotNull(mutablePeriod0);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      
      Period period6 = Period.millis(32);
      assertNotSame(period6, period2);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotSame(period6, period3);
      assertNotSame(period6, period0);
      assertNotSame(period6, period4);
      assertNotNull(period6);
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertTrue(period6.equals((Object)period0));
      
      Weeks weeks0 = period2.toStandardWeeks();
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotNull(weeks0);
      assertEquals(4, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      
      Period period7 = Period.seconds(32);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period2);
      assertNotNull(period7);
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period2));
      
      Weeks weeks1 = period7.toStandardWeeks();
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period2);
      assertNotSame(weeks1, weeks0);
      assertNotNull(weeks1);
      assertEquals(0, weeks1.getWeeks());
      assertEquals(1, weeks1.size());
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period2));
      assertFalse(weeks1.equals((Object)weeks0));
      
      Minutes minutes0 = period2.toStandardMinutes();
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period7);
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      assertEquals(46080, minutes0.getMinutes());
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period7));
      
      Period period8 = Period.years((-1694));
      assertNotSame(period8, period2);
      assertNotSame(period8, period5);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period7);
      assertNotNull(period8);
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period7));
      
      Period period9 = Period.weeks(93);
      assertNotSame(period9, period8);
      assertNotSame(period9, period3);
      assertNotSame(period9, period0);
      assertNotSame(period9, period2);
      assertNotSame(period9, period1);
      assertNotSame(period9, period4);
      assertNotSame(period9, period6);
      assertNotSame(period9, period7);
      assertNotSame(period9, period5);
      assertNotNull(period9);
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period5));
      
      Minutes minutes1 = period4.toStandardMinutes();
      assertNotSame(minutes1, minutes0);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period7);
      assertNotSame(period4, period1);
      assertNotSame(period4, period9);
      assertNotSame(period4, period6);
      assertNotSame(period4, period5);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period8);
      assertNotNull(minutes1);
      assertEquals((-1920), minutes1.getMinutes());
      assertEquals(1, minutes1.size());
      assertFalse(minutes1.equals((Object)minutes0));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period8));
      
      Period period10 = period7.withHours(0);
      assertNotSame(period10, period2);
      assertNotSame(period10, period6);
      assertNotSame(period10, period5);
      assertNotSame(period10, period4);
      assertNotSame(period10, period1);
      assertNotSame(period10, period8);
      assertNotSame(period10, period9);
      assertNotSame(period10, period0);
      assertNotSame(period10, period3);
      assertNotSame(period10, period7);
      assertNotSame(period7, period1);
      assertNotSame(period7, period10);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period9);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertNotNull(period10);
      assertFalse(period10.equals((Object)period2));
      assertTrue(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period9));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period8));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-247);
      Period period0 = Period.millis((-247));
      assertNotNull(period0);
      
      Period period1 = period0.withMinutes((-247));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Seconds seconds0 = period1.toStandardSeconds();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals((-14820), seconds0.getSeconds());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      int int1 = (-507);
      Period period2 = period0.plusWeeks((-507));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period2.withYears((-247));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      
      PeriodType.YEAR_INDEX = (-2537);
      // Undeclared exception!
      try { 
        period3.ZERO.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(5, periodType1.size());
      assertEquals("DayTime", periodType1.getName());
      
      PeriodType periodType2 = PeriodType.seconds();
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      assertEquals("Seconds", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.hours();
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotNull(periodType3);
      assertEquals("Hours", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(2268L);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Minutes minutes0 = Minutes.minutes(57);
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      assertEquals(57, minutes0.getMinutes());
      
      LocalDate localDate1 = localDate0.withPeriodAdded(minutes0, 0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(57, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
      
      Period period0 = new Period(localDate0, localDate1);
      assertNotNull(period0);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(57, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
      
      Period period1 = period0.minusHours(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(57, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
      
      Period period2 = period1.withYears(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(57, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      
      Period period3 = period0.withMonths(57);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(57, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
      assertTrue(period0.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = period2.minusSeconds(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertSame(period2, period4);
      assertNotSame(period4, period1);
      assertSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(57, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period1));
      
      int int0 = period4.getValue(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertSame(period2, period4);
      assertNotSame(period4, period1);
      assertSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertEquals(0, int0);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(57, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period1));
      
      Period period5 = period4.plusWeeks(0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertSame(period2, period5);
      assertNotSame(period2, period0);
      assertSame(period2, period4);
      assertNotSame(period4, period1);
      assertSame(period4, period2);
      assertNotSame(period4, period3);
      assertSame(period4, period5);
      assertNotSame(period4, period0);
      assertSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotNull(period5);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(57, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period0));
      
      int int1 = period5.getYears();
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertSame(period2, period5);
      assertNotSame(period2, period0);
      assertSame(period2, period4);
      assertNotSame(period4, period1);
      assertSame(period4, period2);
      assertNotSame(period4, period3);
      assertSame(period4, period5);
      assertNotSame(period4, period0);
      assertSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertSame(period5, period4);
      assertNotSame(period5, period1);
      assertEquals(0, int1);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(57, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period0));
      assertTrue(int1 == int0);
      
      Period period6 = period4.minusDays(57);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotSame(period0, period6);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period1, period6);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertSame(period2, period5);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertSame(period2, period4);
      assertNotSame(period4, period1);
      assertSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period6);
      assertSame(period4, period5);
      assertNotSame(period4, period0);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period1);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotNull(period6);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(57, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      
      Period period7 = Period.millis(0);
      assertNotSame(period7, period4);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period1);
      assertNotSame(period7, period2);
      assertNotNull(period7);
      assertTrue(period7.equals((Object)period0));
      assertTrue(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period6));
      assertTrue(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertTrue(period7.equals((Object)period4));
      assertTrue(period7.equals((Object)period5));
      
      Period period8 = Period.months(0);
      assertNotSame(period8, period0);
      assertNotSame(period8, period6);
      assertNotSame(period8, period7);
      assertNotSame(period8, period3);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotSame(period8, period1);
      assertNotSame(period8, period2);
      assertNotNull(period8);
      assertTrue(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period6));
      assertTrue(period8.equals((Object)period4));
      assertTrue(period8.equals((Object)period5));
      assertTrue(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertTrue(period8.equals((Object)period0));
      assertTrue(period8.equals((Object)period7));
      
      Period period9 = Period.fieldDifference(localDate0, localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotSame(period9, period7);
      assertNotSame(period9, period0);
      assertNotSame(period9, period8);
      assertNotSame(period9, period3);
      assertNotSame(period9, period6);
      assertNotSame(period9, period5);
      assertNotSame(period9, period2);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotNull(period9);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(57, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      
      Period period10 = Period.hours((-233));
      assertNotSame(period10, period9);
      assertNotSame(period10, period6);
      assertNotSame(period10, period5);
      assertNotSame(period10, period0);
      assertNotSame(period10, period3);
      assertNotSame(period10, period7);
      assertNotSame(period10, period8);
      assertNotSame(period10, period4);
      assertNotSame(period10, period2);
      assertNotSame(period10, period1);
      assertNotNull(period10);
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period1));
      
      Period period11 = period3.minus(period1);
      assertNotSame(period11, period7);
      assertNotSame(period11, period2);
      assertNotSame(period11, period8);
      assertNotSame(period11, period10);
      assertNotSame(period11, period0);
      assertNotSame(period11, period1);
      assertNotSame(period11, period6);
      assertNotSame(period11, period9);
      assertNotSame(period11, period4);
      assertNotSame(period11, period3);
      assertNotSame(period11, period5);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotSame(period0, period6);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period10);
      assertNotSame(period0, period11);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period9);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period7);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period10);
      assertNotSame(period1, period11);
      assertNotSame(period1, period9);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period5);
      assertNotSame(period3, period9);
      assertNotSame(period3, period11);
      assertNotSame(period3, period4);
      assertNotSame(period3, period2);
      assertNotSame(period3, period10);
      assertNotSame(period3, period1);
      assertNotSame(period3, period7);
      assertNotSame(period3, period8);
      assertNotSame(period3, period0);
      assertNotSame(period3, period5);
      assertNotSame(period3, period6);
      assertNotNull(period11);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(57, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period10));
      assertTrue(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period10));
      assertTrue(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period6));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 1586;
      int int1 = 1047;
      int int2 = 0;
      int int3 = (-1);
      int int4 = 40;
      int int5 = 4;
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      assertNotNull(periodFormatter0);
      assertFalse(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      // Undeclared exception!
      try { 
        Period.parse("Field must not be null", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTime dateTime0 = new DateTime(0L, (Chronology) islamicChronology0);
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(1, IslamicChronology.AH);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      assertNotNull(localTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, localTime0.size());
      
      DateTime dateTime1 = dateTime0.withTime(localTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertEquals(73281320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(1, IslamicChronology.AH);
      
      Period period0 = new Period(dateTime1, dateTime1);
      assertNotNull(period0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertEquals(73281320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(1, IslamicChronology.AH);
      
      Period period1 = period0.plusMonths(1607);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertEquals(73281320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(period1.equals((Object)period0));
      assertEquals(1, IslamicChronology.AH);
      
      Period period2 = period1.minusYears(1000);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertEquals(73281320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertEquals(1, IslamicChronology.AH);
      
      Period period3 = period2.withFields(period0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, localTime0.size());
      assertEquals(73281320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Period period0 = new Period(4, 0, 4, 6);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period1 = period0.plusHours(4);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      DurationFieldType[] durationFieldTypeArray0 = period0.ZERO.getFieldTypes();
      assertNotSame(period0, period1);
      assertEquals(8, durationFieldTypeArray0.length);
      assertNotNull(durationFieldTypeArray0);
      assertFalse(period0.equals((Object)period1));
      
      Period period2 = period1.minusDays(15271875);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = Period.months(352831696);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      Period period4 = Period.years(4);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      
      PeriodType periodType1 = PeriodType.yearMonthDayTime();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("YearMonthDayTime", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period5 = period1.minusMinutes(6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period0);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      
      int int0 = period3.getMonths();
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertEquals(352831696, int0);
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      
      Period period6 = period1.withDays(15271875);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period6, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period1);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertNotNull(period6);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period5));
      
      Period period7 = Period.minutes(0);
      assertNotSame(period7, period3);
      assertNotSame(period7, period4);
      assertNotSame(period7, period6);
      assertNotSame(period7, period2);
      assertNotSame(period7, period0);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotNull(period7);
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      
      Period period8 = period6.withMonths(3381);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period1, period7);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period6, period8);
      assertNotSame(period6, period7);
      assertNotSame(period6, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period1);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertNotSame(period8, period7);
      assertNotSame(period8, period6);
      assertNotSame(period8, period2);
      assertNotSame(period8, period5);
      assertNotSame(period8, period0);
      assertNotSame(period8, period4);
      assertNotSame(period8, period3);
      assertNotSame(period8, period1);
      assertNotNull(period8);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period1));
      
      Period period9 = period1.withMinutes(352831696);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period1, period7);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period4);
      assertNotSame(period1, period9);
      assertNotSame(period1, period5);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period9, period8);
      assertNotSame(period9, period7);
      assertNotSame(period9, period4);
      assertNotSame(period9, period5);
      assertNotSame(period9, period3);
      assertNotSame(period9, period1);
      assertNotSame(period9, period0);
      assertNotSame(period9, period6);
      assertNotSame(period9, period2);
      assertNotNull(period9);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period2));
      
      Period period10 = period0.withYears(352831696);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period10);
      assertNotSame(period0, period8);
      assertNotSame(period10, period0);
      assertNotSame(period10, period1);
      assertNotSame(period10, period5);
      assertNotSame(period10, period3);
      assertNotSame(period10, period9);
      assertNotSame(period10, period8);
      assertNotSame(period10, period7);
      assertNotSame(period10, period4);
      assertNotSame(period10, period6);
      assertNotSame(period10, period2);
      assertNotNull(period10);
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period2));
      
      Period period11 = period3.minusWeeks(1000);
      assertNotSame(period3, period0);
      assertNotSame(period3, period10);
      assertNotSame(period3, period11);
      assertNotSame(period3, period6);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period3, period7);
      assertNotSame(period3, period1);
      assertNotSame(period3, period8);
      assertNotSame(period3, period9);
      assertNotSame(period3, period5);
      assertNotSame(period11, period5);
      assertNotSame(period11, period8);
      assertNotSame(period11, period3);
      assertNotSame(period11, period6);
      assertNotSame(period11, period7);
      assertNotSame(period11, period4);
      assertNotSame(period11, period0);
      assertNotSame(period11, period9);
      assertNotSame(period11, period1);
      assertNotSame(period11, period2);
      assertNotSame(period11, period10);
      assertNotNull(period11);
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period10));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period(2789, 0, 2789, 2789);
      assertNotNull(period0);
      
      Period period1 = period0.minusMillis((-1454));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      int int0 = period1.getYears();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      
      Period period2 = period1.ZERO.minusMonths(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      int int1 = period1.indexOf(durationFieldType0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertEquals((-1), int1);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(int1 == int0);
      
      Period period3 = period1.plusSeconds(2139);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      int int2 = period3.getHours();
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertEquals(2789, int2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Period period4 = period1.minusYears((-1807));
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      
      Period period5 = period3.plusDays(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertSame(period3, period5);
      assertNotSame(period5, period1);
      assertSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = Period.days((-2378));
      assertNotNull(period0);
      
      Period period1 = period0.withSeconds(0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      
      Period period2 = period1.ZERO.withMinutes((-2378));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period2.ZERO.plusWeeks((-3126));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      
      PeriodType.MILLI_INDEX = 0;
      Period period4 = period0.minus(period1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      
      Period period5 = period4.toPeriod();
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      
      Period period6 = period5.plusDays((-2378));
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period6);
      assertSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period6);
      assertNotSame(period5, period2);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotSame(period6, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotNull(period6);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertTrue(period6.equals((Object)period0));
      assertTrue(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      
      Period period7 = period3.plusMillis((-2755));
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period2, period7);
      assertNotSame(period2, period6);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period3, period7);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertNotSame(period3, period2);
      assertNotSame(period7, period3);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period0);
      assertNotSame(period7, period2);
      assertNotNull(period7);
      assertFalse(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period2));
      
      Period period8 = period5.withMonths(2868);
      assertNotSame(period0, period8);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period8);
      assertNotSame(period1, period3);
      assertSame(period4, period5);
      assertNotSame(period4, period8);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period7);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period6);
      assertNotSame(period5, period7);
      assertNotSame(period5, period8);
      assertSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period6);
      assertNotSame(period5, period2);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period4);
      assertNotSame(period8, period1);
      assertNotSame(period8, period7);
      assertNotSame(period8, period5);
      assertNotSame(period8, period6);
      assertNotSame(period8, period2);
      assertNotNull(period8);
      assertFalse(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period2));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 13;
      Period period0 = Period.hours(13);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.seconds();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, (-2663));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = Period.years((-2207));
      assertNotNull(period0);
      
      Period period1 = period0.ZERO.withWeeks((-2207));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.ZERO.withSeconds((-2207));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period1.minusWeeks((-2207));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      
      int int0 = period0.getHours();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      
      Period period4 = period1.plusYears(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertSame(period1, period4);
      assertNotSame(period4, period3);
      assertSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      
      Period period5 = period4.ZERO.plusDays(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period4, period3);
      assertSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      
      Integer integer0 = new Integer((-831));
      assertEquals((-831), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = period0.equals(integer0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertFalse(boolean0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(integer0.equals((Object)int0));
      
      Duration duration0 = period1.toStandardDuration();
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotNull(duration0);
      assertEquals((-1334793600000L), duration0.getMillis());
      assertEquals((-15449L), duration0.getStandardDays());
      assertEquals((-1334793600L), duration0.getStandardSeconds());
      assertEquals((-22246560L), duration0.getStandardMinutes());
      assertEquals((-370776L), duration0.getStandardHours());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      
      Period period6 = period1.minusSeconds(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period6, period5);
      assertSame(period6, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period3);
      assertSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotNull(period6);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      
      int int1 = period5.getSeconds();
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertSame(period4, period6);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period6);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertEquals(0, int1);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      assertTrue(int1 == int0);
      
      Period period7 = period5.withSeconds(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period4, period7);
      assertSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertSame(period4, period6);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period6);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertNotSame(period5, period7);
      assertNotSame(period7, period2);
      assertNotSame(period7, period4);
      assertNotSame(period7, period0);
      assertNotSame(period7, period3);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotNull(period7);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      assertTrue(period7.equals((Object)period3));
      assertTrue(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      
      Period period8 = period2.plusMillis(0);
      assertNotSame(period0, period8);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period5);
      assertNotSame(period2, period6);
      assertNotSame(period2, period3);
      assertSame(period2, period8);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period8, period1);
      assertSame(period8, period2);
      assertNotSame(period8, period4);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period6);
      assertNotSame(period8, period5);
      assertNotNull(period8);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period5));
      
      Period period9 = period0.minusHours(252);
      assertNotSame(period0, period8);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period9, period1);
      assertNotSame(period9, period0);
      assertNotSame(period9, period3);
      assertNotSame(period9, period6);
      assertNotSame(period9, period7);
      assertNotSame(period9, period5);
      assertNotSame(period9, period4);
      assertNotNull(period9);
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period4));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = Period.months(0);
      assertNotNull(period0);
      
      Weeks weeks0 = Weeks.TWO;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(2, weeks0.getWeeks());
      
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(1, weeks0.size());
      assertEquals(2, weeks0.getWeeks());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      
      Period period1 = period0.withField(durationFieldType0, 0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, weeks0.size());
      assertEquals(2, weeks0.getWeeks());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertTrue(period1.equals((Object)period0));
      
      Days days0 = period1.toStandardDays();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(days0);
      assertEquals(1, weeks0.size());
      assertEquals(2, weeks0.getWeeks());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DurationField durationField0 = durationFieldType0.getField(ethiopicChronology0);
      assertNotNull(durationField0);
      assertEquals(1, weeks0.size());
      assertEquals(2, weeks0.getWeeks());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals(1, EthiopicChronology.EE);
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      Period period2 = Period.parse("", periodFormatter0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertTrue(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      
      int int0 = period1.getHours();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertEquals(0, int0);
      assertEquals(1, weeks0.size());
      assertEquals(2, weeks0.getWeeks());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period2));
      
      int int1 = period1.getHours();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertEquals(0, int1);
      assertEquals(1, weeks0.size());
      assertEquals(2, weeks0.getWeeks());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period2));
      assertTrue(int1 == int0);
      
      Period period3 = period1.negated();
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertEquals(1, weeks0.size());
      assertEquals(2, weeks0.getWeeks());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      
      Hours hours0 = period0.toStandardHours();
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(2551440384L);
      assertNotNull(duration0);
      assertEquals(42524006L, duration0.getStandardMinutes());
      assertEquals(2551440384L, duration0.getStandardSeconds());
      assertEquals(29530L, duration0.getStandardDays());
      assertEquals(2551440384000L, duration0.getMillis());
      assertEquals(708733L, duration0.getStandardHours());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      Chronology chronology0 = instant0.getChronology();
      assertNotNull(chronology0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0);
      assertNotNull(period0);
      assertEquals(42524006L, duration0.getStandardMinutes());
      assertEquals(2551440384L, duration0.getStandardSeconds());
      assertEquals(29530L, duration0.getStandardDays());
      assertEquals(2551440384000L, duration0.getMillis());
      assertEquals(708733L, duration0.getStandardHours());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      Period period1 = duration0.toPeriod();
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(42524006L, duration0.getStandardMinutes());
      assertEquals(2551440384L, duration0.getStandardSeconds());
      assertEquals(29530L, duration0.getStandardDays());
      assertEquals(2551440384000L, duration0.getMillis());
      assertEquals(708733L, duration0.getStandardHours());
      assertFalse(period1.equals((Object)period0));
      
      Days days0 = period1.toStandardDays();
      assertNotSame(period1, period0);
      assertNotNull(days0);
      assertEquals(42524006L, duration0.getStandardMinutes());
      assertEquals(2551440384L, duration0.getStandardSeconds());
      assertEquals(29530L, duration0.getStandardDays());
      assertEquals(2551440384000L, duration0.getMillis());
      assertEquals(708733L, duration0.getStandardHours());
      assertEquals(29530, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period1.equals((Object)period0));
      
      int int0 = 1924;
      // Undeclared exception!
      try { 
        mutableDateTime0.setMinuteOfHour(1924);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1924 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Period period0 = new Period(2971L, (Chronology) julianChronology0);
      assertNotNull(period0);
      
      Period period1 = period0.plusDays(8);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.ZERO.minusMinutes(8);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period1.ZERO.withYears((-2609));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      Days days0 = period1.toStandardDays();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotNull(days0);
      assertEquals(8, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      
      Period period4 = period2.plusMinutes((-2609));
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period5 = Period.weeks(0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      
      Hours hours0 = Hours.TWO;
      assertNotNull(hours0);
      assertEquals(2, hours0.getHours());
      assertEquals(1, hours0.size());
      
      Minutes minutes0 = hours0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(2, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(120, minutes0.getMinutes());
      
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(2, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(120, minutes0.getMinutes());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      
      Period period6 = period0.withFieldAdded(durationFieldType0, 6);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotNull(period6);
      assertEquals(2, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(120, minutes0.getMinutes());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      
      Period period0 = new Period((-61L), 126L, periodType0);
      assertNotNull(period0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      
      int int0 = 8;
      // Undeclared exception!
      try { 
        period0.withMinutes(8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      int int0 = 0;
      PeriodType.MINUTE_INDEX = 0;
      PeriodType.WEEK_INDEX = 0;
      PeriodType.DAY_INDEX = 4224;
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      int int0 = 6;
      PeriodType.WEEK_INDEX = 6;
      Period period0 = new Period(30585600000L, 0L, periodType0);
      assertNotNull(period0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, periodType1.size());
      assertEquals("Months", periodType1.getName());
      
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = Period.hours(1);
      assertNotNull(period0);
      
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
      
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      int int1 = period0.getMinutes();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Period period1 = Period.minutes(1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.minusMillis(0);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period0.plusMillis(2486);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertNotNull(durationFieldType0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      
      Period period4 = period0.withField(durationFieldType0, (-661));
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = new Period(instant0, instant0, periodType0);
      assertNotNull(period0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(period1.equals((Object)period0));
      
      int int0 = 771;
      Period period2 = period1.withMonths(771);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      int int1 = period2.ZERO.getWeeks();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertEquals(0, int1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(int1 == int0);
      
      int int2 = 354;
      Period period3 = period2.ZERO.minusYears(354);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      Date date0 = instant0.toDate();
      assertNotNull(date0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      // Undeclared exception!
      try { 
        period2.plusMillis(771);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 3;
      Period period0 = Period.millis(3);
      assertNotNull(period0);
      
      Period period1 = period0.ZERO.minusSeconds(3);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      
      Period period2 = period0.ZERO.plusHours(3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period2.ZERO.withMinutes(3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      PeriodType.MINUTE_INDEX = 0;
      Period period4 = period2.ZERO.plusMinutes(7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      
      int int1 = period0.getDays();
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertEquals(0, int1);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(int1 == int0);
      
      Period period5 = period0.minusDays(6);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      
      int int2 = period5.getMillis();
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertEquals(3, int2);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      Period period6 = period0.minusWeeks(292272984);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period1);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotNull(period6);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      
      // Undeclared exception!
      try { 
        period5.withField(durationFieldType0, 292272984);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weekyears'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = new Period(303L);
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.ZERO.plusMinutes(0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.ZERO.withMillis((-285));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      int int1 = period2.ZERO.getMonths();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertEquals(0, int1);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertTrue(int1 == int0);
      
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      int int2 = 0;
      Period period3 = period0.withMinutes(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period0));
      
      PeriodType periodType1 = PeriodType.years();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(1, periodType1.size());
      assertEquals("Years", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      
      int int3 = period3.getYears();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertEquals(0, int3);
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period0));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = 2368;
      DurationFieldType[] durationFieldTypeArray0 = period3.ZERO.getFieldTypes();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertEquals(8, durationFieldTypeArray0.length);
      assertNotNull(durationFieldTypeArray0);
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period0));
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-1382), (-1382), (-3806), 0, 365, (-1382), 2, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 365 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = new Period(0L);
      assertNotNull(period0);
      
      int int0 = 17;
      PeriodType.MONTH_INDEX = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        period0.minusMonths(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-2439);
      Period period0 = Period.months((-2439));
      assertNotNull(period0);
      
      Period period1 = period0.plusDays((-2439));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.plusMonths((-50));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period1.plusWeeks((-1827));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      
      PeriodType periodType0 = period3.getPeriodType();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotNull(periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = Period.millis(1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      
      Period period5 = period4.ZERO.normalizedStandard();
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Locale.setDefault(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      
      String string0 = period5.ZERO.toString(periodFormatter1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      
      Period period6 = period1.minusDays(1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period6, period1);
      assertNotSame(period6, period3);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotNull(period6);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      
      // Undeclared exception!
      try { 
        period2.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = new Period(0L);
      assertNotNull(period0);
      
      Duration duration0 = period0.toDurationFrom((ReadableInstant) null);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      
      int int0 = 0;
      PeriodType.MINUTE_INDEX = 2114;
      Period period1 = period0.plusDays(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      
      PeriodType.MONTH_INDEX = 2114;
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      int int1 = period0.getHours();
      assertSame(period0, period1);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      PeriodType periodType1 = PeriodType.minutes();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Minutes", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      int int2 = period1.size();
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = period1.getYears();
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(0, int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      int int4 = period1.getWeeks();
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(0, int4);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      
      Period period2 = period1.minusYears((-3384));
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      PeriodType.YEAR_INDEX = 2114;
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = Period.months(91);
      assertNotNull(period0);
      
      Period period1 = period0.minusYears((-5008));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.plusWeeks(91);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      int int0 = period1.getDays();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      
      Period period3 = period0.minusHours(91);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = period0.plusHours((-1233));
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      
      Period period5 = period4.minusDays((-358));
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period5);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      
      // Undeclared exception!
      try { 
        period3.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      assertNotNull(seconds0);
      assertEquals(1, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      
      Weeks weeks0 = seconds0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      
      Minutes minutes0 = weeks0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(1, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      
      PeriodType periodType0 = minutes0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = new Period((-2840L), periodType0, (Chronology) null);
      assertNotNull(period0);
      assertEquals(1, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType1.getName());
      assertEquals(1, periodType1.size());
      
      Period period0 = new Period((-1015L), periodType1);
      assertNotNull(period0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType1.getName());
      assertEquals(1, periodType1.size());
      
      int int0 = 2033;
      // Undeclared exception!
      try { 
        period0.plusSeconds(2033);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = Period.months((-6455));
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.minusMonths((-6455));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      MutablePeriod mutablePeriod0 = period2.ZERO.toMutablePeriod();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(mutablePeriod0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.minutes();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(1, periodType1.size());
      assertEquals("Minutes", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period3 = period2.withMinutes(1930);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      
      Period period4 = period3.withWeeks(469);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      
      Period period5 = period3.plusHours(1930);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period5);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period3, period5);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      
      DurationFieldType durationFieldType0 = period2.ZERO.getFieldType(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period5);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period4));
      
      DurationFieldType durationFieldType1 = DurationFieldType.millis();
      assertNotSame(durationFieldType1, durationFieldType0);
      assertNotNull(durationFieldType1);
      assertEquals("millis", durationFieldType1.getName());
      assertEquals("millis", durationFieldType1.toString());
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      
      int int0 = period2.ZERO.get(durationFieldType1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period5);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(durationFieldType1, durationFieldType0);
      assertEquals(0, int0);
      assertEquals("millis", durationFieldType1.getName());
      assertEquals("millis", durationFieldType1.toString());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period4));
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      
      Period period6 = Period.minutes((-6455));
      assertNotSame(period6, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period1);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertNotNull(period6);
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period5));
      
      Period period7 = Period.seconds((-6455));
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period2);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotNull(period7);
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      
      Period period8 = Period.hours(2225);
      assertNotSame(period8, period6);
      assertNotSame(period8, period7);
      assertNotSame(period8, period1);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotNull(period8);
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      
      PeriodType periodType2 = period8.getPeriodType();
      assertNotSame(period8, period6);
      assertNotSame(period8, period7);
      assertNotSame(period8, period1);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertNotNull(periodType2);
      assertEquals("Standard", periodType2.getName());
      assertEquals(8, periodType2.size());
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertFalse(periodType2.equals((Object)periodType1));
      
      Period period9 = Period.minutes(0);
      assertNotSame(period9, period6);
      assertNotSame(period9, period7);
      assertNotSame(period9, period0);
      assertNotSame(period9, period4);
      assertNotSame(period9, period8);
      assertNotSame(period9, period3);
      assertNotSame(period9, period2);
      assertNotSame(period9, period1);
      assertNotSame(period9, period5);
      assertNotNull(period9);
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period5));
      
      Period period10 = period9.minusDays(0);
      assertNotSame(period9, period6);
      assertNotSame(period9, period7);
      assertNotSame(period9, period0);
      assertNotSame(period9, period4);
      assertNotSame(period9, period8);
      assertNotSame(period9, period3);
      assertNotSame(period9, period2);
      assertNotSame(period9, period1);
      assertSame(period9, period10);
      assertNotSame(period9, period5);
      assertNotSame(period10, period8);
      assertNotSame(period10, period1);
      assertNotSame(period10, period3);
      assertNotSame(period10, period0);
      assertNotSame(period10, period7);
      assertNotSame(period10, period2);
      assertSame(period10, period9);
      assertNotSame(period10, period4);
      assertNotSame(period10, period6);
      assertNotSame(period10, period5);
      assertNotNull(period10);
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period5));
      
      Period period11 = period8.withSeconds((-6455));
      assertNotSame(period11, period1);
      assertNotSame(period11, period3);
      assertNotSame(period11, period10);
      assertNotSame(period11, period0);
      assertNotSame(period11, period7);
      assertNotSame(period11, period8);
      assertNotSame(period11, period9);
      assertNotSame(period11, period4);
      assertNotSame(period11, period6);
      assertNotSame(period11, period2);
      assertNotSame(period11, period5);
      assertNotSame(period8, period6);
      assertNotSame(period8, period11);
      assertNotSame(period8, period7);
      assertNotSame(period8, period1);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertNotSame(period8, period9);
      assertNotSame(period8, period0);
      assertNotSame(period8, period10);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotNull(period11);
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period10));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      
      Period period12 = Period.months(0);
      assertNotSame(period12, period5);
      assertNotSame(period12, period10);
      assertNotSame(period12, period8);
      assertNotSame(period12, period11);
      assertNotSame(period12, period7);
      assertNotSame(period12, period9);
      assertNotSame(period12, period0);
      assertNotSame(period12, period2);
      assertNotSame(period12, period3);
      assertNotSame(period12, period4);
      assertNotSame(period12, period1);
      assertNotSame(period12, period6);
      assertNotNull(period12);
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period0));
      assertTrue(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period3));
      assertTrue(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period6));
      
      Period period13 = period8.minusDays(0);
      assertNotSame(period13, period7);
      assertNotSame(period13, period5);
      assertNotSame(period13, period1);
      assertNotSame(period13, period9);
      assertSame(period13, period8);
      assertNotSame(period13, period6);
      assertNotSame(period13, period10);
      assertNotSame(period13, period0);
      assertNotSame(period13, period4);
      assertNotSame(period13, period12);
      assertNotSame(period13, period11);
      assertNotSame(period13, period2);
      assertNotSame(period13, period3);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period10);
      assertNotSame(period8, period12);
      assertNotSame(period8, period5);
      assertNotSame(period8, period11);
      assertNotSame(period8, period7);
      assertNotSame(period8, period1);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertNotSame(period8, period9);
      assertSame(period8, period13);
      assertNotSame(period8, period4);
      assertNotNull(period13);
      assertFalse(period13.equals((Object)period7));
      assertFalse(period13.equals((Object)period6));
      assertFalse(period13.equals((Object)period5));
      assertFalse(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period12));
      assertFalse(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period2));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period11));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period10));
      assertFalse(period8.equals((Object)period12));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 4172;
      Period period0 = new Period(0, (-2824), 83, (-4781), 4172, (-2824), (-1), 17971875);
      assertNotNull(period0);
      
      Period period1 = period0.ZERO.minusDays(572);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      
      Minutes minutes0 = period1.toStandardMinutes();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      assertEquals((-823680), minutes0.getMinutes());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.ZERO.withFieldAdded(durationFieldType0, 0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.dayTime();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("DayTime", periodType1.getName());
      assertEquals(5, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.yearWeekDayTime();
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      assertEquals("YearWeekDayTime", periodType2.getName());
      assertEquals(7, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType.MILLI_INDEX = 83;
      // Undeclared exception!
      try { 
        period0.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period((-4602L), (Chronology) null);
      assertNotNull(period0);
      
      Period period1 = period0.withMinutes((-1630));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      Period period2 = Period.weeks(2693);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Duration duration0 = period2.toStandardDuration();
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(duration0);
      assertEquals(452424L, duration0.getStandardHours());
      assertEquals(1628726400L, duration0.getStandardSeconds());
      assertEquals(1628726400000L, duration0.getMillis());
      assertEquals(27145440L, duration0.getStandardMinutes());
      assertEquals(18851L, duration0.getStandardDays());
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period1.plusMinutes(2693);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, periodType1.size());
      assertEquals("Months", periodType1.getName());
      
      Period period4 = period3.ZERO.withPeriodType(periodType1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, periodType1.size());
      assertEquals("Months", periodType1.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      
      Period period5 = Period.minutes(2693);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      
      Hours hours0 = period0.toStandardHours();
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotNull(hours0);
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      
      Period period6 = period0.ZERO.minusMonths(2693);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotNull(period6);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      
      Period period7 = period2.minusYears(2);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period5);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period1);
      assertNotSame(period7, period2);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotNull(period7);
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      
      Period period8 = period0.withSeconds((-3868));
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period4);
      assertNotSame(period8, period5);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period1);
      assertNotSame(period8, period6);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotNull(period8);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      
      Period period9 = period8.plus(period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period4);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period5);
      assertNotSame(period2, period9);
      assertNotSame(period8, period5);
      assertNotSame(period8, period9);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period1);
      assertNotSame(period8, period6);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotSame(period9, period3);
      assertNotSame(period9, period7);
      assertNotSame(period9, period0);
      assertNotSame(period9, period6);
      assertNotSame(period9, period4);
      assertNotSame(period9, period2);
      assertNotSame(period9, period5);
      assertNotSame(period9, period1);
      assertNotSame(period9, period8);
      assertNotNull(period9);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period8));
      
      Period period10 = period9.ZERO.minusSeconds(623158436);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period4);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period10);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period5);
      assertNotSame(period2, period9);
      assertNotSame(period8, period5);
      assertNotSame(period8, period10);
      assertNotSame(period8, period9);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period1);
      assertNotSame(period8, period6);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotSame(period9, period3);
      assertNotSame(period9, period7);
      assertNotSame(period9, period0);
      assertNotSame(period9, period6);
      assertNotSame(period9, period4);
      assertNotSame(period9, period2);
      assertNotSame(period9, period5);
      assertNotSame(period9, period1);
      assertNotSame(period9, period8);
      assertNotSame(period9, period10);
      assertNotSame(period10, period1);
      assertNotSame(period10, period5);
      assertNotSame(period10, period9);
      assertNotSame(period10, period2);
      assertNotSame(period10, period6);
      assertNotSame(period10, period4);
      assertNotSame(period10, period0);
      assertNotSame(period10, period8);
      assertNotSame(period10, period3);
      assertNotSame(period10, period7);
      assertNotNull(period10);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period7));
      
      int int0 = (-2789);
      Period period11 = period2.ZERO.multipliedBy((-2789));
      assertNotSame(period11, period7);
      assertNotSame(period11, period5);
      assertNotSame(period11, period4);
      assertNotSame(period11, period3);
      assertNotSame(period11, period8);
      assertNotSame(period11, period10);
      assertNotSame(period11, period0);
      assertNotSame(period11, period1);
      assertNotSame(period11, period6);
      assertNotSame(period11, period9);
      assertNotSame(period11, period2);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period10);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period5);
      assertNotSame(period2, period11);
      assertNotSame(period2, period9);
      assertNotNull(period11);
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period9));
      
      Period period12 = period1.plus(period3);
      assertNotSame(period0, period8);
      assertNotSame(period0, period10);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period11);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period12);
      assertNotSame(period0, period6);
      assertNotSame(period0, period4);
      assertNotSame(period1, period9);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period12);
      assertNotSame(period1, period8);
      assertNotSame(period1, period7);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period10);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertNotSame(period1, period11);
      assertNotSame(period12, period0);
      assertNotSame(period12, period8);
      assertNotSame(period12, period10);
      assertNotSame(period12, period11);
      assertNotSame(period12, period1);
      assertNotSame(period12, period3);
      assertNotSame(period12, period4);
      assertNotSame(period12, period6);
      assertNotSame(period12, period5);
      assertNotSame(period12, period7);
      assertNotSame(period12, period2);
      assertNotSame(period12, period9);
      assertNotSame(period3, period5);
      assertNotSame(period3, period2);
      assertNotSame(period3, period10);
      assertNotSame(period3, period9);
      assertNotSame(period3, period1);
      assertNotSame(period3, period12);
      assertNotSame(period3, period8);
      assertNotSame(period3, period11);
      assertNotSame(period3, period6);
      assertNotSame(period3, period7);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotNull(period12);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period11));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      
      Period period13 = Period.hours((-1630));
      assertNotSame(period13, period7);
      assertNotSame(period13, period12);
      assertNotSame(period13, period2);
      assertNotSame(period13, period0);
      assertNotSame(period13, period10);
      assertNotSame(period13, period3);
      assertNotSame(period13, period5);
      assertNotSame(period13, period9);
      assertNotSame(period13, period8);
      assertNotSame(period13, period1);
      assertNotSame(period13, period11);
      assertNotSame(period13, period4);
      assertNotSame(period13, period6);
      assertNotNull(period13);
      assertFalse(period13.equals((Object)period7));
      assertFalse(period13.equals((Object)period12));
      assertFalse(period13.equals((Object)period2));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period5));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period8));
      assertFalse(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period6));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      
      PeriodType periodType2 = period2.ZERO.getPeriodType();
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertNotSame(period2, period10);
      assertNotSame(period2, period13);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period12);
      assertNotSame(period2, period7);
      assertNotSame(period2, period5);
      assertNotSame(period2, period11);
      assertNotSame(period2, period9);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      assertEquals(8, periodType2.size());
      assertEquals("Standard", periodType2.getName());
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period13));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period12));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period9));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      
      // Undeclared exception!
      try { 
        period2.withFieldAdded(durationFieldType0, (-3868));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'eras'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(0L, 696L, iSOChronology0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      
      Period period2 = period1.minusMonths(0);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertSame(period2, period0);
      assertSame(period2, period1);
      assertNotNull(period2);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      
      DateTime dateTime0 = new DateTime(4054L);
      assertNotNull(dateTime0);
      assertEquals(4054L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusYears(414);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      assertEquals(4054L, dateTime0.getMillis());
      assertEquals((-13064630395946L), dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Minutes minutes0 = Minutes.ONE;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      DateTime dateTime2 = dateTime1.plus((ReadablePeriod) minutes0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotNull(dateTime2);
      assertEquals(4054L, dateTime0.getMillis());
      assertEquals((-13064630395946L), dateTime1.getMillis());
      assertEquals(1, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals((-13064630335946L), dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      Duration duration0 = period2.toDurationTo(dateTime2);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertSame(period2, period0);
      assertSame(period2, period1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotNull(duration0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals(4054L, dateTime0.getMillis());
      assertEquals((-13064630395946L), dateTime1.getMillis());
      assertEquals(1, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals((-13064630335946L), dateTime2.getMillis());
      assertEquals(696L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      Period period3 = duration0.toPeriodTo((ReadableInstant) dateTime1);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertSame(period0, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertSame(period2, period0);
      assertSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals(4054L, dateTime0.getMillis());
      assertEquals((-13064630395946L), dateTime1.getMillis());
      assertEquals(1, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals((-13064630335946L), dateTime2.getMillis());
      assertEquals(696L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period2));
      
      Period period4 = period3.withFields(minutes0);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertSame(period0, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertSame(period2, period0);
      assertSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals(4054L, dateTime0.getMillis());
      assertEquals((-13064630395946L), dateTime1.getMillis());
      assertEquals(1, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals((-13064630335946L), dateTime2.getMillis());
      assertEquals(696L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertTrue(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period2.equals((Object)period3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = new Period(27, 27, 27, 27, 27, 27, 27, (-1));
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.withYears(0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals("Time", periodType1.getName());
      assertEquals(4, periodType1.size());
      
      // Undeclared exception!
      try { 
        period1.withPeriodType(periodType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = Period.months(2376);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(6, periodType1.size());
      assertEquals("YearMonthDayTimeNoHours", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period1 = period0.withPeriodType(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      
      PeriodType.MILLI_INDEX = 2376;
      PeriodType periodType2 = PeriodType.yearWeekDayTime();
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      assertEquals(7, periodType2.size());
      assertEquals("YearWeekDayTime", periodType2.getName());
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      int int0 = period1.ZERO.getYears();
      assertNotSame(period0, period1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period0);
      assertEquals(0, int0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.ZERO.withDays(2376);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      int int1 = 0;
      Period period3 = period2.ZERO.minusDays(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      
      Duration duration0 = period2.ZERO.toDurationTo((ReadableInstant) null);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotNull(duration0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      
      PeriodType.MONTH_INDEX = 2376;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      Period period0 = new Period(0L, 0L, copticChronology0);
      assertNotNull(period0);
      assertEquals(1, CopticChronology.AM);
      
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
      assertEquals(1, CopticChronology.AM);
      
      int int1 = (-557);
      Period period1 = period0.multipliedBy((-557));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertEquals(1, CopticChronology.AM);
      
      // Undeclared exception!
      try { 
        Period.parse("monthOfYear");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"monthOfYear\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(0);
      assertNotNull(period0);
      
      Period period1 = period0.ZERO.negated();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      
      String string0 = period0.ZERO.toString();
      assertNotSame(period0, period1);
      assertEquals("PT0S", string0);
      assertNotNull(string0);
      assertTrue(period0.equals((Object)period1));
      
      Period period2 = period0.plusYears(0);
      assertNotSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period2, period1);
      assertSame(period2, period0);
      assertNotNull(period2);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period2.equals((Object)period1));
      
      Hours hours0 = period2.ZERO.toStandardHours();
      assertNotSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period2, period1);
      assertSame(period2, period0);
      assertNotNull(hours0);
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertTrue(period0.equals((Object)period1));
      assertTrue(period2.equals((Object)period1));
      
      PeriodType.MONTH_INDEX = 1018;
      int int1 = period2.getSeconds();
      assertNotSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period2, period1);
      assertSame(period2, period0);
      assertEquals(0, int1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period2.equals((Object)period1));
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        period2.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = new Period(86400L);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.minutes();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(1, periodType1.size());
      assertEquals("Minutes", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period1 = period0.plusSeconds(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      
      PeriodType periodType2 = PeriodType.minutes();
      assertSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      assertEquals("Minutes", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType0));
      
      DurationFieldType[] durationFieldTypeArray0 = period0.ZERO.getFieldTypes();
      assertSame(period0, period1);
      assertEquals(8, durationFieldTypeArray0.length);
      assertNotNull(durationFieldTypeArray0);
      
      PeriodType periodType3 = PeriodType.yearMonthDayTime();
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotNull(periodType3);
      assertEquals("YearMonthDayTime", periodType3.getName());
      assertEquals(7, periodType3.size());
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      
      Period period2 = Period.minutes((-2898));
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      PeriodType periodType4 = PeriodType.days();
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType3);
      assertNotNull(periodType4);
      assertEquals("Days", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      
      int int0 = 1471;
      Period period3 = Period.years(1471);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      Period period4 = period0.minus(period1);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period4);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      
      Seconds seconds0 = period4.ZERO.toStandardSeconds();
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period4);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      
      Period period5 = period4.ZERO.plusDays((-2022));
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period1, period4);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period5);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      
      Period period6 = period1.withMonths(0);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period1, period4);
      assertSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotSame(period6, period3);
      assertNotSame(period6, period0);
      assertNotNull(period6);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertTrue(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period3));
      assertTrue(period6.equals((Object)period0));
      
      PeriodType.SECOND_INDEX = 1045;
      Period period7 = period0.negated();
      assertNotSame(period7, period2);
      assertNotSame(period7, period3);
      assertNotSame(period7, period6);
      assertNotSame(period7, period1);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period0);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotNull(period7);
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period0));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      
      Period period8 = period7.withMonths(2);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertNotSame(period7, period3);
      assertNotSame(period7, period6);
      assertNotSame(period7, period1);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period0);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period3);
      assertNotSame(period8, period1);
      assertNotSame(period8, period0);
      assertNotSame(period8, period5);
      assertNotSame(period8, period2);
      assertNotSame(period8, period7);
      assertNotNull(period8);
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period0));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period7));
      
      Period period9 = period7.withFields(period0);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertNotSame(period7, period3);
      assertNotSame(period7, period6);
      assertNotSame(period7, period1);
      assertNotSame(period7, period5);
      assertNotSame(period7, period9);
      assertNotSame(period7, period4);
      assertNotSame(period7, period0);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period9);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period9, period4);
      assertNotSame(period9, period0);
      assertNotSame(period9, period2);
      assertNotSame(period9, period7);
      assertNotSame(period9, period8);
      assertNotSame(period9, period3);
      assertNotSame(period9, period6);
      assertNotSame(period9, period1);
      assertNotSame(period9, period5);
      assertNotNull(period9);
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period0));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period9.equals((Object)period4));
      assertTrue(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period8));
      assertTrue(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period3));
      assertTrue(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period5));
      
      int int1 = 51;
      // Undeclared exception!
      try { 
        period3.minusSeconds(51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1045
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = Period.hours(1958);
      assertNotNull(period0);
      
      Period period1 = Period.months(1958);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      PeriodType.SECOND_INDEX = 1958;
      int int0 = (-1345);
      PeriodType.MINUTE_INDEX = (-1345);
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      
      int int1 = period0.getDays();
      assertNotSame(period0, period1);
      assertEquals(0, int1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        period0.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer((-1766));
      assertEquals((-1766), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean0 = dateTimeZone0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      Period period0 = null;
      try {
        period0 = new Period((Object) integer0, (Chronology) islamicChronology1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      Period period0 = null;
      try {
        period0 = new Period("O>xWt$W#fCffUR", periodType0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"O>xWt$W#fCffUR\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      DateTime dateTime0 = new DateTime(0L);
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      Duration duration0 = new Duration(dateTime0, dateTime0);
      assertNotNull(duration0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      
      Duration duration1 = duration0.plus((long) 1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(1L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertFalse(duration1.equals((Object)duration0));
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      
      Period period0 = new Period(duration1, dateTime0, periodType0);
      assertNotNull(period0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(1L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      
      long long0 = buddhistChronology0.add((ReadablePeriod) period0, 12L, 8);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(12L, long0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(1L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertEquals(1, BuddhistChronology.BE);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string0 = uTCDateTimeZone0.getShortName(0L, locale0);
      assertEquals("UTC", string0);
      assertNotNull(string0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(uTCDateTimeZone0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotNull(buddhistChronology1);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) buddhistChronology1);
      assertNotNull(yearMonth0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2513, yearMonth0.getYear());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      PeriodType periodType1 = PeriodType.years();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Years", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period1 = duration1.toPeriodFrom((ReadableInstant) dateTime0, periodType1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(periodType1, periodType0);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(1L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals("Years", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = new Period(yearMonth0, yearMonth0, periodType1);
      assertNotNull(period2);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2513, yearMonth0.getYear());
      assertEquals("Years", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      PeriodType periodType2 = PeriodType.time();
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      assertEquals("Time", periodType2.getName());
      assertEquals(4, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      // Undeclared exception!
      try { 
        period2.withMonths(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = Period.hours(0);
      assertNotNull(period0);
      
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      
      int int1 = period0.ZERO.get(durationFieldType0);
      assertEquals(0, int1);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertTrue(int1 == int0);
      
      Period period1 = period0.minusHours(8);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.plusHours(4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Days days0 = period2.ZERO.toStandardDays();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Period period3 = period2.minusSeconds(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period3, period0);
      assertSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      DurationField durationField0 = durationFieldType0.getField(gJChronology0);
      assertNotNull(durationField0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("DurationField[millis]", durationField0.toString());
      assertTrue(durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertEquals(1L, durationField0.getUnitMillis());
      
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      assertSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      assertSame(gJChronology0, gJChronology1);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      Period period4 = Period.fieldDifference(localDateTime0, localDateTime0);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertEquals(4, localDateTime0.size());
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      
      Period period5 = period4.ZERO.plusDays(0);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period3);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotNull(period5);
      assertEquals(4, localDateTime0.size());
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      
      Period period6 = Period.millis(2237);
      assertNotSame(period6, period3);
      assertNotSame(period6, period0);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotNull(period6);
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      
      PeriodType.HOUR_INDEX = 0;
      Period period7 = period5.withField(durationFieldType0, 764);
      assertNotSame(period7, period1);
      assertNotSame(period7, period2);
      assertNotSame(period7, period3);
      assertNotSame(period7, period4);
      assertNotSame(period7, period6);
      assertNotSame(period7, period0);
      assertNotSame(period7, period5);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period4, period6);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period7);
      assertNotSame(period4, period3);
      assertNotSame(period5, period3);
      assertNotSame(period5, period7);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period6);
      assertNotNull(period7);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(4, localDateTime0.size());
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period6));
      
      int int2 = period4.getSeconds();
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period4, period6);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period7);
      assertNotSame(period4, period3);
      assertEquals(0, int2);
      assertEquals(4, localDateTime0.size());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period3));
      
      Period period8 = period2.withMinutes(60);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period8, period5);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period6);
      assertNotNull(period8);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period6));
      
      Period period9 = period8.minusMonths(292272708);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period8, period5);
      assertNotSame(period8, period9);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertNotSame(period9, period8);
      assertNotSame(period9, period5);
      assertNotSame(period9, period6);
      assertNotSame(period9, period0);
      assertNotSame(period9, period1);
      assertNotSame(period9, period2);
      assertNotSame(period9, period3);
      assertNotSame(period9, period4);
      assertNotSame(period9, period7);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period6);
      assertNotSame(period2, period9);
      assertNotNull(period9);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period6));
      
      Period period10 = period8.plusSeconds(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period10);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period8, period5);
      assertNotSame(period8, period9);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertSame(period8, period10);
      assertSame(period10, period8);
      assertNotSame(period10, period3);
      assertNotSame(period10, period1);
      assertNotSame(period10, period2);
      assertNotSame(period10, period9);
      assertNotSame(period10, period0);
      assertNotSame(period10, period6);
      assertNotSame(period10, period5);
      assertNotSame(period10, period4);
      assertNotSame(period10, period7);
      assertNotSame(period2, period10);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period6);
      assertNotSame(period2, period9);
      assertNotNull(period10);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period9));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period11 = period10.withMinutes(60);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period10);
      assertNotSame(period0, period11);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period8, period5);
      assertNotSame(period8, period9);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period11);
      assertNotSame(period8, period3);
      assertSame(period8, period10);
      assertSame(period10, period8);
      assertNotSame(period10, period3);
      assertNotSame(period10, period11);
      assertNotSame(period10, period1);
      assertNotSame(period10, period2);
      assertNotSame(period10, period9);
      assertNotSame(period10, period0);
      assertNotSame(period10, period6);
      assertNotSame(period10, period5);
      assertNotSame(period10, period4);
      assertNotSame(period10, period7);
      assertNotSame(period2, period10);
      assertNotSame(period2, period11);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period6);
      assertNotSame(period2, period9);
      assertNotSame(period11, period8);
      assertNotSame(period11, period0);
      assertNotSame(period11, period4);
      assertNotSame(period11, period6);
      assertNotSame(period11, period7);
      assertNotSame(period11, period1);
      assertNotSame(period11, period2);
      assertNotSame(period11, period3);
      assertNotSame(period11, period10);
      assertNotSame(period11, period5);
      assertNotSame(period11, period9);
      assertNotNull(period11);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period2));
      assertTrue(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period3));
      assertTrue(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period9));
      
      int int3 = period10.ZERO.getHours();
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period10);
      assertNotSame(period0, period11);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period8, period5);
      assertNotSame(period8, period9);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period11);
      assertNotSame(period8, period3);
      assertSame(period8, period10);
      assertSame(period10, period8);
      assertNotSame(period10, period3);
      assertNotSame(period10, period11);
      assertNotSame(period10, period1);
      assertNotSame(period10, period2);
      assertNotSame(period10, period9);
      assertNotSame(period10, period0);
      assertNotSame(period10, period6);
      assertNotSame(period10, period5);
      assertNotSame(period10, period4);
      assertNotSame(period10, period7);
      assertNotSame(period2, period10);
      assertNotSame(period2, period11);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period6);
      assertNotSame(period2, period9);
      assertEquals(0, int3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period8.equals((Object)period11));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period5));
      assertTrue(period10.equals((Object)period11));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period9));
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      Period period12 = period9.withSeconds(0);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period12);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period10);
      assertNotSame(period0, period11);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period8, period12);
      assertNotSame(period8, period5);
      assertNotSame(period8, period9);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period1);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertNotSame(period8, period11);
      assertSame(period8, period10);
      assertNotSame(period9, period8);
      assertNotSame(period9, period5);
      assertNotSame(period9, period6);
      assertNotSame(period9, period0);
      assertNotSame(period9, period1);
      assertNotSame(period9, period2);
      assertNotSame(period9, period3);
      assertNotSame(period9, period10);
      assertNotSame(period9, period11);
      assertNotSame(period9, period4);
      assertNotSame(period9, period12);
      assertNotSame(period9, period7);
      assertNotSame(period2, period10);
      assertNotSame(period2, period11);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period12);
      assertNotSame(period2, period6);
      assertNotSame(period2, period9);
      assertNotSame(period12, period6);
      assertNotSame(period12, period7);
      assertNotSame(period12, period4);
      assertNotSame(period12, period0);
      assertNotSame(period12, period3);
      assertNotSame(period12, period1);
      assertNotSame(period12, period2);
      assertNotSame(period12, period8);
      assertNotSame(period12, period11);
      assertNotSame(period12, period10);
      assertNotSame(period12, period5);
      assertNotSame(period12, period9);
      assertNotNull(period12);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period8.equals((Object)period11));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period10));
      assertFalse(period9.equals((Object)period11));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period11));
      assertTrue(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period5));
      
      int int4 = period8.ZERO.size();
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period12);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period10);
      assertNotSame(period0, period11);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period8, period12);
      assertNotSame(period8, period5);
      assertNotSame(period8, period9);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period1);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period3);
      assertNotSame(period8, period11);
      assertSame(period8, period10);
      assertNotSame(period2, period10);
      assertNotSame(period2, period11);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period12);
      assertNotSame(period2, period6);
      assertNotSame(period2, period9);
      assertEquals(8, int4);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period8.equals((Object)period12));
      assertTrue(period8.equals((Object)period11));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period12));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period9));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      
      Period period13 = Period.years(8);
      assertNotSame(period13, period11);
      assertNotSame(period13, period9);
      assertNotSame(period13, period7);
      assertNotSame(period13, period5);
      assertNotSame(period13, period8);
      assertNotSame(period13, period0);
      assertNotSame(period13, period6);
      assertNotSame(period13, period3);
      assertNotSame(period13, period4);
      assertNotSame(period13, period10);
      assertNotSame(period13, period12);
      assertNotSame(period13, period1);
      assertNotSame(period13, period2);
      assertNotNull(period13);
      assertFalse(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period7));
      assertFalse(period13.equals((Object)period5));
      assertFalse(period13.equals((Object)period8));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period6));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period12));
      assertFalse(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period2));
      
      Period period14 = Period.weeks((-390));
      assertNotSame(period14, period3);
      assertNotSame(period14, period10);
      assertNotSame(period14, period13);
      assertNotSame(period14, period1);
      assertNotSame(period14, period2);
      assertNotSame(period14, period8);
      assertNotSame(period14, period7);
      assertNotSame(period14, period12);
      assertNotSame(period14, period9);
      assertNotSame(period14, period11);
      assertNotSame(period14, period5);
      assertNotSame(period14, period4);
      assertNotSame(period14, period6);
      assertNotSame(period14, period0);
      assertNotNull(period14);
      assertFalse(period14.equals((Object)period3));
      assertFalse(period14.equals((Object)period10));
      assertFalse(period14.equals((Object)period13));
      assertFalse(period14.equals((Object)period1));
      assertFalse(period14.equals((Object)period2));
      assertFalse(period14.equals((Object)period8));
      assertFalse(period14.equals((Object)period7));
      assertFalse(period14.equals((Object)period12));
      assertFalse(period14.equals((Object)period9));
      assertFalse(period14.equals((Object)period11));
      assertFalse(period14.equals((Object)period5));
      assertFalse(period14.equals((Object)period4));
      assertFalse(period14.equals((Object)period6));
      assertFalse(period14.equals((Object)period0));
      
      Period period15 = period12.withFields(period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period12);
      assertNotSame(period0, period13);
      assertNotSame(period0, period9);
      assertNotSame(period0, period10);
      assertNotSame(period0, period4);
      assertNotSame(period0, period14);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period15);
      assertNotSame(period0, period11);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period8, period5);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period3);
      assertNotSame(period8, period15);
      assertNotSame(period8, period11);
      assertNotSame(period8, period13);
      assertNotSame(period8, period12);
      assertNotSame(period8, period9);
      assertNotSame(period8, period4);
      assertNotSame(period8, period1);
      assertNotSame(period8, period2);
      assertNotSame(period8, period14);
      assertSame(period8, period10);
      assertNotSame(period9, period13);
      assertNotSame(period9, period1);
      assertNotSame(period9, period10);
      assertNotSame(period9, period4);
      assertNotSame(period9, period8);
      assertNotSame(period9, period14);
      assertNotSame(period9, period5);
      assertNotSame(period9, period6);
      assertNotSame(period9, period0);
      assertNotSame(period9, period2);
      assertNotSame(period9, period15);
      assertNotSame(period9, period3);
      assertNotSame(period9, period11);
      assertNotSame(period9, period12);
      assertNotSame(period9, period7);
      assertNotSame(period2, period10);
      assertNotSame(period2, period15);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period1);
      assertNotSame(period2, period7);
      assertNotSame(period2, period12);
      assertNotSame(period2, period9);
      assertNotSame(period2, period14);
      assertNotSame(period2, period11);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period13);
      assertNotSame(period2, period6);
      assertNotSame(period3, period7);
      assertSame(period3, period2);
      assertNotSame(period3, period9);
      assertNotSame(period3, period13);
      assertNotSame(period3, period12);
      assertNotSame(period3, period15);
      assertNotSame(period3, period8);
      assertNotSame(period3, period11);
      assertNotSame(period3, period6);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period10);
      assertNotSame(period3, period5);
      assertNotSame(period3, period14);
      assertNotSame(period3, period1);
      assertNotSame(period12, period7);
      assertNotSame(period12, period1);
      assertNotSame(period12, period11);
      assertNotSame(period12, period13);
      assertNotSame(period12, period14);
      assertNotSame(period12, period10);
      assertNotSame(period12, period5);
      assertNotSame(period12, period6);
      assertNotSame(period12, period4);
      assertNotSame(period12, period0);
      assertNotSame(period12, period3);
      assertNotSame(period12, period15);
      assertNotSame(period12, period2);
      assertNotSame(period12, period8);
      assertNotSame(period12, period9);
      assertNotSame(period15, period1);
      assertNotSame(period15, period13);
      assertNotSame(period15, period12);
      assertNotSame(period15, period3);
      assertNotSame(period15, period7);
      assertNotSame(period15, period9);
      assertNotSame(period15, period2);
      assertNotSame(period15, period4);
      assertNotSame(period15, period14);
      assertNotSame(period15, period8);
      assertNotSame(period15, period11);
      assertNotSame(period15, period10);
      assertNotSame(period15, period6);
      assertNotSame(period15, period0);
      assertNotSame(period15, period5);
      assertNotNull(period15);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period14));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period13));
      assertFalse(period8.equals((Object)period12));
      assertTrue(period8.equals((Object)period11));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period14));
      assertFalse(period9.equals((Object)period13));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period10));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period14));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period2));
      assertTrue(period9.equals((Object)period12));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period11));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period12));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period14));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period13));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period13));
      assertFalse(period3.equals((Object)period12));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period11));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period14));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period13));
      assertFalse(period12.equals((Object)period14));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period8));
      assertTrue(period12.equals((Object)period9));
      assertFalse(period15.equals((Object)period1));
      assertFalse(period15.equals((Object)period13));
      assertFalse(period15.equals((Object)period12));
      assertFalse(period15.equals((Object)period7));
      assertTrue(period15.equals((Object)period2));
      assertFalse(period15.equals((Object)period9));
      assertFalse(period15.equals((Object)period4));
      assertFalse(period15.equals((Object)period14));
      assertFalse(period15.equals((Object)period8));
      assertFalse(period15.equals((Object)period11));
      assertFalse(period15.equals((Object)period10));
      assertTrue(period15.equals((Object)period3));
      assertFalse(period15.equals((Object)period6));
      assertFalse(period15.equals((Object)period0));
      assertFalse(period15.equals((Object)period5));
      
      int int5 = period12.getMinutes();
      assertNotSame(period0, period1);
      assertNotSame(period0, period12);
      assertNotSame(period0, period13);
      assertNotSame(period0, period9);
      assertNotSame(period0, period10);
      assertNotSame(period0, period4);
      assertNotSame(period0, period14);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period15);
      assertNotSame(period0, period11);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period8, period5);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period3);
      assertNotSame(period8, period15);
      assertNotSame(period8, period11);
      assertNotSame(period8, period13);
      assertNotSame(period8, period12);
      assertNotSame(period8, period9);
      assertNotSame(period8, period4);
      assertNotSame(period8, period1);
      assertNotSame(period8, period2);
      assertNotSame(period8, period14);
      assertSame(period8, period10);
      assertNotSame(period9, period13);
      assertNotSame(period9, period1);
      assertNotSame(period9, period10);
      assertNotSame(period9, period4);
      assertNotSame(period9, period8);
      assertNotSame(period9, period14);
      assertNotSame(period9, period5);
      assertNotSame(period9, period6);
      assertNotSame(period9, period0);
      assertNotSame(period9, period2);
      assertNotSame(period9, period15);
      assertNotSame(period9, period3);
      assertNotSame(period9, period11);
      assertNotSame(period9, period12);
      assertNotSame(period9, period7);
      assertNotSame(period2, period10);
      assertNotSame(period2, period15);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period1);
      assertNotSame(period2, period7);
      assertNotSame(period2, period12);
      assertNotSame(period2, period9);
      assertNotSame(period2, period14);
      assertNotSame(period2, period11);
      assertNotSame(period2, period5);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period13);
      assertNotSame(period2, period6);
      assertNotSame(period12, period7);
      assertNotSame(period12, period1);
      assertNotSame(period12, period11);
      assertNotSame(period12, period13);
      assertNotSame(period12, period14);
      assertNotSame(period12, period10);
      assertNotSame(period12, period5);
      assertNotSame(period12, period6);
      assertNotSame(period12, period4);
      assertNotSame(period12, period0);
      assertNotSame(period12, period3);
      assertNotSame(period12, period15);
      assertNotSame(period12, period2);
      assertNotSame(period12, period8);
      assertNotSame(period12, period9);
      assertEquals(60, int5);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period14));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period15));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period15));
      assertFalse(period8.equals((Object)period13));
      assertFalse(period8.equals((Object)period12));
      assertTrue(period8.equals((Object)period11));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period14));
      assertFalse(period9.equals((Object)period13));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period10));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period14));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period15));
      assertTrue(period9.equals((Object)period12));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period11));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period12));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period14));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period13));
      assertFalse(period2.equals((Object)period6));
      assertTrue(period2.equals((Object)period15));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period13));
      assertFalse(period12.equals((Object)period14));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period15));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period8));
      assertTrue(period12.equals((Object)period9));
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = Period.minutes((-85));
      assertNotNull(period0);
      
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      
      Period period1 = period0.withFields(months0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.minusMillis((-85));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period0.withHours((-85));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      int int0 = (-389);
      Period period4 = period2.plusYears((-389));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        Weeks.standardWeeksIn(period2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P7MT-85M0.085S
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = new Period((Object) null);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      
      Period period1 = Period.days(2);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.minusSeconds((-1770));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period2.ZERO.plusMinutes((-1770));
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = period2.normalizedStandard((PeriodType) null);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      
      Hours hours0 = period3.toStandardHours();
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotNull(hours0);
      assertEquals((-29), hours0.getHours());
      assertEquals(1, hours0.size());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      PeriodType.DAY_INDEX = (-2461);
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period1 = period0.withMonths(868);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = Period.millis(1963);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period1.minusWeeks((-3881));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = Period.days(292278993);
      assertNotNull(period0);
      
      Period period1 = period0.minusMonths(292278993);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      int int0 = (-792);
      Period period2 = Period.minutes((-792));
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period0.withDays(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      Period period4 = period3.plusYears((-792));
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      
      Period period5 = period3.minus(period0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      
      int int1 = 2088;
      Period period6 = period5.ZERO.minusHours(2088);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period4);
      assertNotNull(period6);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period4));
      
      PeriodType periodType1 = PeriodType.yearWeekDay();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(3, periodType1.size());
      assertEquals("YearWeekDay", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      
      int int2 = 2171;
      PeriodType.HOUR_INDEX = 0;
      Period period7 = period3.ZERO.multipliedBy((-792));
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period6);
      assertNotSame(period7, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertNotSame(period7, period3);
      assertNotSame(period7, period4);
      assertNotNull(period7);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period6));
      assertTrue(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period4));
      
      PeriodType periodType2 = PeriodType.millis();
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      assertEquals("Millis", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      Period period8 = period5.negated();
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period3, period8);
      assertNotSame(period3, period0);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period7);
      assertNotSame(period5, period8);
      assertNotSame(period8, period0);
      assertNotSame(period8, period3);
      assertNotSame(period8, period6);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period1);
      assertNotNull(period8);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period4));
      assertTrue(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period1));
      assertTrue(period8.equals((Object)period0));
      
      Period period9 = Period.seconds(2171);
      assertNotSame(period9, period4);
      assertNotSame(period9, period6);
      assertNotSame(period9, period8);
      assertNotSame(period9, period3);
      assertNotSame(period9, period5);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotSame(period9, period2);
      assertNotSame(period9, period1);
      assertNotNull(period9);
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period1));
      
      Duration duration0 = period5.toStandardDuration();
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period9);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period3, period9);
      assertNotSame(period3, period8);
      assertNotSame(period3, period0);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period7);
      assertNotSame(period5, period8);
      assertNotSame(period5, period9);
      assertNotNull(duration0);
      assertEquals((-7014695832L), duration0.getStandardHours());
      assertEquals((-420881749920L), duration0.getStandardMinutes());
      assertEquals((-292278993L), duration0.getStandardDays());
      assertEquals((-25252904995200000L), duration0.getMillis());
      assertEquals((-25252904995200L), duration0.getStandardSeconds());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period4));
      assertTrue(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period8));
      assertFalse(period5.equals((Object)period9));
      
      Period period10 = period3.plusWeeks(2171);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period9);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period10);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period10, period7);
      assertNotSame(period10, period2);
      assertNotSame(period10, period3);
      assertNotSame(period10, period8);
      assertNotSame(period10, period4);
      assertNotSame(period10, period0);
      assertNotSame(period10, period6);
      assertNotSame(period10, period1);
      assertNotSame(period10, period5);
      assertNotSame(period10, period9);
      assertNotSame(period3, period9);
      assertNotSame(period3, period8);
      assertNotSame(period3, period0);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertNotSame(period3, period10);
      assertNotNull(period10);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period4));
      assertTrue(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period6));
      
      Period period11 = period10.plus(period8);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period11);
      assertNotSame(period0, period7);
      assertNotSame(period0, period9);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period10);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period10, period7);
      assertNotSame(period10, period2);
      assertNotSame(period10, period3);
      assertNotSame(period10, period8);
      assertNotSame(period10, period11);
      assertNotSame(period10, period4);
      assertNotSame(period10, period0);
      assertNotSame(period10, period6);
      assertNotSame(period10, period1);
      assertNotSame(period10, period5);
      assertNotSame(period10, period9);
      assertNotSame(period11, period1);
      assertNotSame(period11, period4);
      assertNotSame(period11, period6);
      assertNotSame(period11, period0);
      assertNotSame(period11, period7);
      assertNotSame(period11, period2);
      assertNotSame(period11, period3);
      assertNotSame(period11, period5);
      assertNotSame(period11, period9);
      assertNotSame(period11, period10);
      assertNotSame(period11, period8);
      assertNotSame(period3, period9);
      assertNotSame(period3, period8);
      assertNotSame(period3, period0);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period11);
      assertNotSame(period3, period6);
      assertNotSame(period3, period10);
      assertNotSame(period5, period0);
      assertNotSame(period5, period10);
      assertNotSame(period5, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period11);
      assertNotSame(period5, period1);
      assertNotSame(period5, period7);
      assertNotSame(period5, period8);
      assertNotSame(period5, period9);
      assertNotSame(period8, period0);
      assertNotSame(period8, period3);
      assertNotSame(period8, period10);
      assertNotSame(period8, period6);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period1);
      assertNotSame(period8, period11);
      assertNotSame(period8, period9);
      assertNotNull(period11);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period4));
      assertTrue(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period10));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period8));
      assertFalse(period5.equals((Object)period9));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period10));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period1));
      assertTrue(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period9));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      
      int int3 = period10.get(durationFieldType0);
      assertNotSame(period0, period8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period11);
      assertNotSame(period0, period7);
      assertNotSame(period0, period9);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period10);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period10, period7);
      assertNotSame(period10, period2);
      assertNotSame(period10, period3);
      assertNotSame(period10, period8);
      assertNotSame(period10, period11);
      assertNotSame(period10, period4);
      assertNotSame(period10, period0);
      assertNotSame(period10, period6);
      assertNotSame(period10, period1);
      assertNotSame(period10, period5);
      assertNotSame(period10, period9);
      assertNotSame(period3, period9);
      assertNotSame(period3, period8);
      assertNotSame(period3, period0);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period11);
      assertNotSame(period3, period6);
      assertNotSame(period3, period10);
      assertEquals(0, int3);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period8));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period11));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period11));
      assertTrue(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period10));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      // Undeclared exception!
      try { 
        period4.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 7;
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Period period0 = null;
      try {
        period0 = new Period((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(4343L);
      assertNotNull(duration0);
      assertEquals(3L, duration0.getStandardDays());
      assertEquals(260580L, duration0.getStandardSeconds());
      assertEquals(260580000L, duration0.getMillis());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(4343L, duration0.getStandardMinutes());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((-377L));
      assertNotNull(mutableDateTime0);
      assertEquals((-377L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = new Period(duration0, mutableDateTime0, periodType0);
      assertNotNull(period0);
      assertEquals(3L, duration0.getStandardDays());
      assertEquals(260580L, duration0.getStandardSeconds());
      assertEquals(260580000L, duration0.getMillis());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(4343L, duration0.getStandardMinutes());
      assertEquals((-377L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = (-281);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-281));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      Period period0 = duration0.toPeriod((PeriodType) null, (Chronology) islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      Period period1 = period0.plusMillis(1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(period1.equals((Object)period0));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      Days days0 = period0.toStandardDays();
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(period0, period1);
      assertNotNull(days0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        days0.getFieldType(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Period period0 = new Period(2551440384L);
      assertNotNull(period0);
      
      Period period1 = period0.minusSeconds(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Duration duration0 = new Duration((-3814L));
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-3814L), duration0.getMillis());
      assertEquals((-3L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      
      Duration duration1 = duration0.withDurationAdded((-3814L), (-277));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-3814L), duration0.getMillis());
      assertEquals((-3L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(17L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(1052664L, duration1.getMillis());
      assertEquals(1052L, duration1.getStandardSeconds());
      assertFalse(duration1.equals((Object)duration0));
      
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertNotNull(minutes0);
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      PeriodType periodType0 = minutes0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Period period0 = duration1.toPeriod(periodType0, (Chronology) julianChronology0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-3814L), duration0.getMillis());
      assertEquals((-3L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(17L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(1052664L, duration1.getMillis());
      assertEquals(1052L, duration1.getStandardSeconds());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      
      Period period1 = period0.minusHours(0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-3814L), duration0.getMillis());
      assertEquals((-3L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(17L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(1052664L, duration1.getMillis());
      assertEquals(1052L, duration1.getStandardSeconds());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      
      Period period2 = period0.plusDays(0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period2, period0);
      assertSame(period2, period1);
      assertNotNull(period2);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-3814L), duration0.getMillis());
      assertEquals((-3L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(17L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(1052664L, duration1.getMillis());
      assertEquals(1052L, duration1.getStandardSeconds());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      
      int int0 = period0.getSeconds();
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertSame(period0, period2);
      assertSame(period0, period1);
      assertEquals(0, int0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-3814L), duration0.getMillis());
      assertEquals((-3L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(17L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(1052664L, duration1.getMillis());
      assertEquals(1052L, duration1.getStandardSeconds());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      
      // Undeclared exception!
      try { 
        period2.withHours(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = Period.weeks(51);
      assertNotNull(period0);
      
      Period period1 = period0.withMinutes(361);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      int int0 = period1.getWeeks();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(51, int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(2719L);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(100);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      LocalDateTime localDateTime2 = localDateTime1.withLocalMillis(100);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotNull(localDateTime2);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      
      LocalDateTime localDateTime3 = localDateTime2.plusMonths(100);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotNull(localDateTime3);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      
      LocalDateTime localDateTime4 = localDateTime3.minusHours(0);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime1);
      assertSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime0);
      assertSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotNull(localDateTime4);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      
      Period period0 = Period.fieldDifference(localDateTime4, localDateTime3);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime1);
      assertSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime0);
      assertSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotNull(period0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = Period.years(0);
      assertNotNull(period0);
      
      Period period1 = period0.ZERO.negated();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      
      Period period2 = period0.minusMonths(0);
      assertSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Days days0 = Days.SEVEN;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      
      Period period0 = days0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      
      Period period1 = period0.withField(durationFieldType0, 5);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertFalse(period1.equals((Object)period0));
      
      Duration duration0 = period1.toDurationTo((ReadableInstant) null);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(duration0);
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1833L, duration0.getStandardDays());
      assertEquals(2639520L, duration0.getStandardMinutes());
      assertEquals(158371200000L, duration0.getMillis());
      assertEquals(158371200L, duration0.getStandardSeconds());
      assertEquals(43992L, duration0.getStandardHours());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = duration0.toPeriodFrom((ReadableInstant) null);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1833L, duration0.getStandardDays());
      assertEquals(2639520L, duration0.getStandardMinutes());
      assertEquals(158371200000L, duration0.getMillis());
      assertEquals(158371200L, duration0.getStandardSeconds());
      assertEquals(43992L, duration0.getStandardHours());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period2.minusHours(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1833L, duration0.getStandardDays());
      assertEquals(2639520L, duration0.getStandardMinutes());
      assertEquals(158371200000L, duration0.getMillis());
      assertEquals(158371200L, duration0.getStandardSeconds());
      assertEquals(43992L, duration0.getStandardHours());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Chronology chronology0 = gregorianChronology0.withZone(dateTimeZone0);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(chronology0);
      assertSame(gregorianChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(strictChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Period period0 = new Period(0L, (Chronology) strictChronology0);
      assertNotNull(period0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      
      Period period1 = period0.withWeeks((-1735));
      assertSame(gregorianChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(chronology0, gregorianChronology0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.plusMonths((-2550));
      assertSame(gregorianChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(chronology0, gregorianChronology0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = (-118);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      Period period0 = new Period(2615625, 0, 2615625, 2615625, (-118), (-3015), (-118), 0, periodType0);
      assertNotNull(period0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      int int1 = 0;
      PeriodType.DAY_INDEX = 0;
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = Period.millis(0);
      assertNotNull(period0);
      
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
      
      Period period1 = period0.plusSeconds((-203));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.negated();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = Period.months(999);
      assertNotNull(period0);
      
      Period period1 = new Period(999, 999, (PeriodType) null);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      int[] intArray0 = period1.ZERO.getValues();
      assertNotSame(period1, period0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray0);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.plus(period1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Period period3 = period2.ZERO.withSeconds(999);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertNotNull(weeks0);
      assertEquals(4, localDateTime0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(4, localDateTime0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      
      int int0 = (-2489);
      Period period4 = Period.hours((-2489));
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      
      Period period5 = period2.withFieldAdded(durationFieldType0, 999);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period1, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotNull(period5);
      assertEquals(4, localDateTime0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      
      Period period6 = period5.plusSeconds(999);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotNull(period6);
      assertEquals(4, localDateTime0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      
      // Undeclared exception!
      try { 
        Period.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      
      int int0 = period0.getSeconds();
      assertSame(period0, period1);
      assertEquals(0, int0);
      
      Period period2 = period1.ZERO.multipliedBy(0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      
      PeriodType.SECOND_INDEX = 0;
      Period period3 = period1.plusMonths(2340);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      int int1 = period2.getYears();
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertEquals(0, int1);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertTrue(int1 == int0);
      
      Period period4 = period3.minusMonths(0);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertSame(period3, period4);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      
      Period period5 = period2.withDays(0);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period5);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period2, period5);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotNull(period5);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period0));
      assertTrue(period5.equals((Object)period1));
      assertTrue(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      
      Period period6 = period2.withMillis(0);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period5);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period6);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period4);
      assertNotSame(period2, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotNull(period6);
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period5));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertTrue(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertTrue(period6.equals((Object)period5));
      assertTrue(period6.equals((Object)period2));
      assertTrue(period6.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      
      Period period0 = new Period((ReadableInstant) null, duration0, periodType0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      
      Months months0 = Months.ZERO;
      assertNotNull(months0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      
      Period period1 = period0.minus(months0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertTrue(period1.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        period1.withDays(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = Period.weeks(236548278);
      assertNotNull(period0);
      
      Period period1 = Period.minutes(236548278);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.minusSeconds(236548278);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Duration duration0 = period1.toStandardDuration();
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotNull(duration0);
      assertEquals(236548278L, duration0.getStandardMinutes());
      assertEquals(14192896680000L, duration0.getMillis());
      assertEquals(3942471L, duration0.getStandardHours());
      assertEquals(164269L, duration0.getStandardDays());
      assertEquals(14192896680L, duration0.getStandardSeconds());
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = Period.months((-1));
      assertNotNull(period0);
      
      Period period1 = period0.minusSeconds((-1416));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Seconds seconds0 = period0.ZERO.toStandardSeconds();
      assertNotSame(period0, period1);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertFalse(period0.equals((Object)period1));
      
      int int0 = period1.ZERO.size();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      int[] intArray0 = period1.getValues();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 1416, 0}, intArray0);
      assertNotNull(intArray0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      int int1 = period0.getMonths();
      assertNotSame(period0, period1);
      assertEquals((-1), int1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(int1 == int0);
      
      Period period2 = Period.days(17);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period1.withMonths(3525);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      
      Duration duration0 = period2.toStandardDuration();
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotNull(duration0);
      assertEquals(17L, duration0.getStandardDays());
      assertEquals(408L, duration0.getStandardHours());
      assertEquals(24480L, duration0.getStandardMinutes());
      assertEquals(1468800L, duration0.getStandardSeconds());
      assertEquals(1468800000L, duration0.getMillis());
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      
      Period period4 = period2.minusWeeks(0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertSame(period2, period4);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Period period0 = Period.days(1359);
      assertNotNull(period0);
      
      Period period1 = period0.plusWeeks(1359);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.ZERO.multipliedBy(21);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      
      int int0 = period2.ZERO.get(durationFieldType0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertEquals(0, int0);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period1.plusYears(3717);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      Period period4 = period3.withWeeks(1359);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period3));
      
      int int1 = period4.getDays();
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertEquals(1359, int1);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period3));
      assertFalse(int1 == int0);
      
      Period period5 = Period.seconds((-1889));
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      
      Period period0 = new Period(0L, periodType0);
      assertNotNull(period0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      
      int int0 = (-1806);
      // Undeclared exception!
      try { 
        period0.minusDays((-1806));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "?9N\"fS}gG~%";
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      
      // Undeclared exception!
      try { 
        Period.parse("?9N\"fS}gG~%", periodFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"?9N\"fS}gG~%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = new Period((Object) null, (Chronology) null);
      assertNotNull(period0);
      
      Period period1 = period0.minusYears((-2559));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = Period.millis((-2559));
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period0.plusMillis((-2559));
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period2));
      
      Period period4 = period1.minusMinutes((-3431));
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
      assertNotNull(period0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      int int0 = period0.getMillis();
      assertEquals(0, int0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      Period period1 = period0.minusYears(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Period period2 = period1.minusHours(0);
      assertSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertSame(period1, period2);
      assertSame(period2, period1);
      assertSame(period2, period0);
      assertNotNull(period2);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      
      Period period3 = period2.withField(durationFieldType0, 0);
      assertSame(period0, period2);
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period1, period3);
      assertSame(period2, period1);
      assertSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period1));
      
      Period period4 = period0.withMonths(0);
      assertSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertTrue(period0.equals((Object)period3));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period0));
      
      Period period5 = Period.months(0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      
      Weeks weeks0 = period2.toStandardWeeks();
      assertSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period5);
      assertSame(period2, period1);
      assertNotSame(period2, period4);
      assertSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period3);
      assertNotNull(weeks0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertTrue(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period5));
      assertTrue(period2.equals((Object)period4));
      
      Period period6 = period5.normalizedStandard();
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period6);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period4);
      assertNotSame(period6, period5);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotNull(period6);
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertTrue(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      
      Period period7 = Period.weeks(3796);
      assertNotSame(period7, period3);
      assertNotSame(period7, period6);
      assertNotSame(period7, period1);
      assertNotSame(period7, period4);
      assertNotSame(period7, period0);
      assertNotSame(period7, period2);
      assertNotSame(period7, period5);
      assertNotNull(period7);
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period5));
      
      Period period8 = period2.plusMonths(3);
      assertSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period8);
      assertNotSame(period0, period6);
      assertSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period1, period6);
      assertNotSame(period1, period7);
      assertSame(period1, period0);
      assertNotSame(period1, period8);
      assertSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period5);
      assertNotSame(period2, period6);
      assertNotSame(period2, period7);
      assertSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period2);
      assertNotSame(period8, period1);
      assertNotSame(period8, period5);
      assertNotSame(period8, period3);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period7);
      assertNotNull(period8);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertTrue(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period7));
      assertTrue(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period5));
      assertTrue(period2.equals((Object)period4));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period7));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Weeks weeks0 = Weeks.ONE;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(1, weeks0.getWeeks());
      
      Period period1 = period0.minus(weeks0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, weeks0.size());
      assertEquals(1, weeks0.getWeeks());
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.withSeconds(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals(1, weeks0.size());
      assertEquals(1, weeks0.getWeeks());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period2.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertEquals(1, weeks0.size());
      assertEquals(1, weeks0.getWeeks());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertTrue(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period2));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = Period.weeks(236548278);
      assertNotNull(period0);
      
      Period period1 = period0.withYears(236548278);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.minusSeconds(236548278);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = Period.seconds(86400000);
      assertNotNull(period0);
      
      Period period1 = period0.plusHours(3613);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      int int0 = period0.getMillis();
      assertNotSame(period0, period1);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period1));
      
      int int1 = period1.getYears();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(0, int1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertTrue(int1 == int0);
      
      Period period2 = period1.minusDays(3613);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Hours hours0 = period2.toStandardHours();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(hours0);
      assertEquals((-59099), hours0.getHours());
      assertEquals(1, hours0.size());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("StandardNoHours", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period0 = new Period((-1156L), periodType1);
      assertNotNull(period0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("StandardNoHours", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Days days0 = Days.FIVE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(5, days0.getDays());
      
      Days days1 = Days.standardDaysIn(days0);
      assertSame(days0, days1);
      assertSame(days1, days0);
      assertNotNull(days1);
      assertEquals(1, days0.size());
      assertEquals(5, days0.getDays());
      assertEquals(1, days1.size());
      assertEquals(5, days1.getDays());
      
      Duration duration0 = days1.toStandardDuration();
      assertSame(days0, days1);
      assertSame(days1, days0);
      assertNotNull(duration0);
      assertEquals(1, days0.size());
      assertEquals(5, days0.getDays());
      assertEquals(1, days1.size());
      assertEquals(5, days1.getDays());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      
      Duration duration1 = duration0.toDuration();
      assertSame(days0, days1);
      assertSame(days1, days0);
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertNotNull(duration1);
      assertEquals(1, days0.size());
      assertEquals(5, days0.getDays());
      assertEquals(1, days1.size());
      assertEquals(5, days1.getDays());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals(120L, duration1.getStandardHours());
      assertEquals(432000L, duration1.getStandardSeconds());
      assertEquals(5L, duration1.getStandardDays());
      assertEquals(7200L, duration1.getStandardMinutes());
      assertEquals(432000000L, duration1.getMillis());
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      DateTime dateTime0 = new DateTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Period period0 = duration1.toPeriodFrom((ReadableInstant) dateTime0);
      assertSame(days0, days1);
      assertSame(days1, days0);
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertNotNull(period0);
      assertEquals(1, days0.size());
      assertEquals(5, days0.getDays());
      assertEquals(1, days1.size());
      assertEquals(5, days1.getDays());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals(120L, duration1.getStandardHours());
      assertEquals(432000L, duration1.getStandardSeconds());
      assertEquals(5L, duration1.getStandardDays());
      assertEquals(7200L, duration1.getStandardMinutes());
      assertEquals(432000000L, duration1.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      int int0 = (-241);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, (-241));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      Duration duration0 = hours0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      
      Instant instant0 = Instant.ofEpochSecond((-1L));
      assertNotNull(instant0);
      assertEquals((-1000L), instant0.getMillis());
      
      Period period0 = duration0.toPeriodTo((ReadableInstant) instant0);
      assertNotNull(period0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-1000L), instant0.getMillis());
      
      Period period1 = period0.ZERO.minusMillis(220);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-1000L), instant0.getMillis());
      assertFalse(period1.equals((Object)period0));
      
      PeriodType.MINUTE_INDEX = 220;
      Period period2 = period0.minusMillis((-2933));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-1000L), instant0.getMillis());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = Period.weeks(21);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      
      Period period4 = period1.plusDays(1665);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-1000L), instant0.getMillis());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      
      Period period5 = period3.minus(period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotNull(period5);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-1000L), instant0.getMillis());
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      
      Period period0 = new Period(0L, 24L, periodType0);
      assertNotNull(period0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      
      Period period1 = period0.plusSeconds(37);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.withMinutes(37);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period2.plusMillis(153692453);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = period3.plusHours(37);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HdRtW8");
      assertFalse(boolean0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTime dateTime0 = new DateTime(3600000L, (Chronology) ethiopicChronology0);
      assertNotNull(dateTime0);
      assertEquals(3600000L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      
      Seconds seconds0 = Seconds.seconds(1);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(1, seconds0.getSeconds());
      
      Duration duration0 = seconds0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(1, seconds0.size());
      assertEquals(1, seconds0.getSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1000L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      
      Duration duration1 = duration0.withMillis(1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertEquals(1, seconds0.size());
      assertEquals(1, seconds0.getSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1000L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1L, duration1.getMillis());
      assertFalse(duration1.equals((Object)duration0));
      
      Duration duration2 = duration1.plus((ReadableDuration) duration0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotNull(duration2);
      assertEquals(1, seconds0.size());
      assertEquals(1, seconds0.getSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1000L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1L, duration1.getMillis());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(1001L, duration2.getMillis());
      assertEquals(1L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      
      Period period0 = new Period(dateTime0, duration2);
      assertNotNull(period0);
      assertEquals(3600000L, dateTime0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(1, seconds0.getSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1000L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1L, duration1.getMillis());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(1001L, duration2.getMillis());
      assertEquals(1L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertEquals(1, EthiopicChronology.EE);
      
      Period period1 = period0.plusMinutes(2823);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(3600000L, dateTime0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(1, seconds0.getSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1000L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1L, duration1.getMillis());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(1001L, duration2.getMillis());
      assertEquals(1L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(period1.equals((Object)period0));
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(33L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(33L, duration0.getStandardSeconds());
      assertEquals(33000L, duration0.getMillis());
      
      Duration duration1 = duration0.plus(33L);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(33L, duration0.getStandardSeconds());
      assertEquals(33000L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(33L, duration1.getStandardSeconds());
      assertEquals(33033L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertFalse(duration1.equals((Object)duration0));
      
      Duration duration2 = duration1.minus((ReadableDuration) duration0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertNotNull(duration2);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(33L, duration0.getStandardSeconds());
      assertEquals(33000L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(33L, duration1.getStandardSeconds());
      assertEquals(33033L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(33L, duration2.getMillis());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      
      Instant instant0 = Instant.ofEpochMilli(33L);
      assertNotNull(instant0);
      assertEquals(33L, instant0.getMillis());
      
      Instant instant1 = instant0.withMillis((-3176L));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      assertEquals(33L, instant0.getMillis());
      assertEquals((-3176L), instant1.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      
      Period period0 = new Period(duration2, instant1, periodType0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(33L, duration0.getStandardSeconds());
      assertEquals(33000L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(33L, duration1.getStandardSeconds());
      assertEquals(33033L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(33L, duration2.getMillis());
      assertEquals(33L, instant0.getMillis());
      assertEquals((-3176L), instant1.getMillis());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      
      Period period1 = period0.negated();
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(33L, duration0.getStandardSeconds());
      assertEquals(33000L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(33L, duration1.getStandardSeconds());
      assertEquals(33033L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(33L, duration2.getMillis());
      assertEquals(33L, instant0.getMillis());
      assertEquals((-3176L), instant1.getMillis());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertTrue(period1.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        period1.withMillis((-2888));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)40}, byteArray0);
      
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      assertNotNull(interval0);
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      Period period0 = interval0.toPeriod((PeriodType) null);
      assertNotNull(period0);
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      Period period1 = interval0.toPeriod();
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertTrue(period1.equals((Object)period0));
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      Period period2 = Period.days((byte)40);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      assertNotNull(period0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      
      // Undeclared exception!
      try { 
        period0.withMillis(4071);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(31449600000L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusHours((-8));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      int int0 = 443;
      LocalTime localTime2 = localTime1.withMillisOfDay(443);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotNull(localTime2);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      
      Period period0 = new Period(localTime2, localTime0);
      assertNotNull(period0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localTime1, (ReadablePartial) localTime0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotNull(hours0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(1, hours0.size());
      assertEquals((-16), hours0.getHours());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      
      Period period1 = hours0.toPeriod();
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(1, hours0.size());
      assertEquals((-16), hours0.getHours());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(period1.equals((Object)period0));
      
      Minutes minutes0 = hours0.toStandardMinutes();
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotNull(minutes0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(1, hours0.size());
      assertEquals((-16), hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals((-960), minutes0.getMinutes());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      
      Period period2 = period0.withFields(minutes0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(1, hours0.size());
      assertEquals((-16), hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals((-960), minutes0.getMinutes());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      int int1 = period1.ZERO.getSeconds();
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertEquals(0, int1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(1, hours0.size());
      assertEquals((-16), hours0.getHours());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(int1 == int0);
      
      Period period3 = period0.ZERO.plus(period2);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(1, hours0.size());
      assertEquals((-16), hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals((-960), minutes0.getMinutes());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period2));
      
      int int2 = 7;
      Period period4 = period0.withWeeks(7);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      
      Period period5 = period4.withFields(period0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period5);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotNull(period5);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertTrue(period5.equals((Object)period0));
      
      Period period6 = new Period(0, 0, (-8), 7);
      assertNotNull(period6);
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int3 = (-189);
      Period period7 = period3.plusMillis((-189));
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(period7, period1);
      assertNotSame(period7, period5);
      assertNotSame(period7, period2);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertNotSame(period7, period4);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period6);
      assertNotSame(period2, period7);
      assertNotSame(period3, period1);
      assertNotSame(period3, period6);
      assertNotSame(period3, period7);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotNull(period7);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(1, hours0.size());
      assertEquals((-16), hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals((-960), minutes0.getMinutes());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period4));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertTrue(period3.equals((Object)period2));
      
      Period period8 = period5.withFields(period2);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotSame(period8, period5);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period2);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period2, period8);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period6);
      assertNotSame(period2, period7);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period6);
      assertNotSame(period4, period8);
      assertNotSame(period4, period7);
      assertNotSame(period4, period5);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period8);
      assertNotSame(period5, period1);
      assertNotSame(period5, period6);
      assertNotSame(period5, period7);
      assertNotNull(period8);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(1, hours0.size());
      assertEquals((-16), hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals((-960), minutes0.getMinutes());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(period8.equals((Object)period4));
      assertTrue(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period7));
      assertTrue(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period7));
      
      Period period9 = Period.hours((-8));
      assertNotSame(period9, period8);
      assertNotSame(period9, period7);
      assertNotSame(period9, period5);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period3);
      assertNotSame(period9, period6);
      assertNotSame(period9, period0);
      assertNotSame(period9, period2);
      assertNotNull(period9);
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period2));
      
      // Undeclared exception!
      try { 
        Period.parse("Y]W5R:#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Y]W5R:#\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period(0, 978, 978, 978, 978, 366, 148, 148);
      assertNotNull(period0);
      
      Period period1 = Period.hours((-57));
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.withYears((-57));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period1.minusHours((-57));
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = Period.years(978);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      
      int int0 = period0.getSeconds();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertEquals(148, int0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      
      int int1 = period0.getWeeks();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertEquals(978, int1);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(int1 == int0);
      
      int int2 = period0.getMinutes();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertEquals(366, int2);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = period0.getDays();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertEquals(978, int3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = period4.ZERO.getMillis();
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertEquals(0, int4);
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      
      Period period5 = period0.withMillis(148);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      
      Period period6 = period1.toPeriod();
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotNull(period6);
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      
      Period period7 = period6.plusMillis(296);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertNotSame(period6, period7);
      assertSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotNull(period7);
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      
      Period period8 = period1.plusYears(148);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period0);
      assertNotSame(period8, period1);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period2);
      assertNotSame(period8, period5);
      assertNotSame(period8, period3);
      assertNotSame(period8, period4);
      assertNotSame(period8, period7);
      assertNotNull(period8);
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period7));
      
      Period period9 = period1.multipliedBy((-2933));
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period0);
      assertNotSame(period9, period4);
      assertNotSame(period9, period3);
      assertNotSame(period9, period1);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period9, period6);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotNull(period9);
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period7));
      
      Period period10 = period4.withFields(period9);
      assertNotSame(period1, period10);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period0);
      assertNotSame(period4, period6);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period8);
      assertNotSame(period4, period10);
      assertNotSame(period4, period5);
      assertNotSame(period4, period7);
      assertNotSame(period4, period1);
      assertNotSame(period4, period9);
      assertNotSame(period4, period3);
      assertNotSame(period9, period4);
      assertNotSame(period9, period3);
      assertNotSame(period9, period1);
      assertNotSame(period9, period10);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period9, period6);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotSame(period10, period0);
      assertNotSame(period10, period4);
      assertNotSame(period10, period5);
      assertNotSame(period10, period7);
      assertNotSame(period10, period1);
      assertNotSame(period10, period9);
      assertNotSame(period10, period3);
      assertNotSame(period10, period2);
      assertNotSame(period10, period6);
      assertNotSame(period10, period8);
      assertNotNull(period10);
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period7));
      assertTrue(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period8));
      
      Period period11 = period7.toPeriod();
      assertNotSame(period11, period10);
      assertNotSame(period11, period4);
      assertNotSame(period11, period1);
      assertNotSame(period11, period3);
      assertNotSame(period11, period8);
      assertNotSame(period11, period9);
      assertNotSame(period11, period2);
      assertSame(period11, period7);
      assertNotSame(period11, period0);
      assertNotSame(period11, period6);
      assertNotSame(period11, period5);
      assertNotSame(period1, period10);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period11);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period11);
      assertNotSame(period6, period3);
      assertNotSame(period6, period10);
      assertNotSame(period6, period5);
      assertNotSame(period6, period7);
      assertNotSame(period6, period9);
      assertSame(period6, period1);
      assertNotSame(period6, period8);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period10);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period9);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertSame(period7, period11);
      assertNotNull(period11);
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period10));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period9));
      assertFalse(period6.equals((Object)period8));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period10));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period9));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period8));
      
      int int5 = period11.getHours();
      assertNotSame(period11, period10);
      assertNotSame(period11, period4);
      assertNotSame(period11, period1);
      assertNotSame(period11, period3);
      assertNotSame(period11, period8);
      assertNotSame(period11, period9);
      assertNotSame(period11, period2);
      assertSame(period11, period7);
      assertNotSame(period11, period0);
      assertNotSame(period11, period6);
      assertNotSame(period11, period5);
      assertNotSame(period1, period10);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period11);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period11);
      assertNotSame(period6, period3);
      assertNotSame(period6, period10);
      assertNotSame(period6, period5);
      assertNotSame(period6, period7);
      assertNotSame(period6, period9);
      assertSame(period6, period1);
      assertNotSame(period6, period8);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period10);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period9);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertSame(period7, period11);
      assertEquals((-57), int5);
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period5));
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period11));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period10));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period9));
      assertFalse(period6.equals((Object)period8));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period10));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period9));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period8));
      
      Hours hours0 = period7.toStandardHours();
      assertNotSame(period1, period10);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period11);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period11);
      assertNotSame(period6, period3);
      assertNotSame(period6, period10);
      assertNotSame(period6, period5);
      assertNotSame(period6, period7);
      assertNotSame(period6, period9);
      assertSame(period6, period1);
      assertNotSame(period6, period8);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period10);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period9);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertSame(period7, period11);
      assertNotNull(hours0);
      assertEquals((-57), hours0.getHours());
      assertEquals(1, hours0.size());
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period11));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period10));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period9));
      assertFalse(period6.equals((Object)period8));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period10));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period9));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period8));
      
      Period period12 = period5.withWeeks((-2297));
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period10);
      assertNotSame(period0, period12);
      assertNotSame(period0, period11);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period12, period10);
      assertNotSame(period12, period11);
      assertNotSame(period12, period4);
      assertNotSame(period12, period8);
      assertNotSame(period12, period0);
      assertNotSame(period12, period9);
      assertNotSame(period12, period2);
      assertNotSame(period12, period6);
      assertNotSame(period12, period7);
      assertNotSame(period12, period3);
      assertNotSame(period12, period5);
      assertNotSame(period12, period1);
      assertNotSame(period5, period10);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period7);
      assertNotSame(period5, period4);
      assertNotSame(period5, period12);
      assertNotSame(period5, period9);
      assertNotSame(period5, period6);
      assertNotSame(period5, period8);
      assertNotSame(period5, period0);
      assertNotSame(period5, period11);
      assertNotSame(period5, period2);
      assertNotNull(period12);
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period5.equals((Object)period10));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period9));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period8));
      assertFalse(period5.equals((Object)period11));
      assertFalse(period5.equals((Object)period2));
      
      Period period13 = period6.minusMillis(366);
      assertNotSame(period1, period10);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period13);
      assertNotSame(period1, period11);
      assertNotSame(period1, period12);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period0);
      assertNotSame(period13, period6);
      assertNotSame(period13, period7);
      assertNotSame(period13, period12);
      assertNotSame(period13, period11);
      assertNotSame(period13, period9);
      assertNotSame(period13, period0);
      assertNotSame(period13, period2);
      assertNotSame(period13, period8);
      assertNotSame(period13, period5);
      assertNotSame(period13, period4);
      assertNotSame(period13, period1);
      assertNotSame(period13, period10);
      assertNotSame(period13, period3);
      assertNotSame(period6, period11);
      assertNotSame(period6, period13);
      assertNotSame(period6, period12);
      assertNotSame(period6, period9);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period10);
      assertNotSame(period6, period5);
      assertNotSame(period6, period7);
      assertSame(period6, period1);
      assertNotSame(period6, period8);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotNull(period13);
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period13.equals((Object)period6));
      assertFalse(period13.equals((Object)period7));
      assertFalse(period13.equals((Object)period12));
      assertFalse(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period2));
      assertFalse(period13.equals((Object)period8));
      assertFalse(period13.equals((Object)period5));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period11));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period12));
      assertFalse(period6.equals((Object)period10));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period9));
      assertFalse(period6.equals((Object)period8));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      
      Period period14 = period0.withFieldAdded(durationFieldType0, 0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period11);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertSame(period0, period14);
      assertNotSame(period0, period13);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period0, period1);
      assertNotSame(period0, period10);
      assertNotSame(period0, period12);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertSame(period14, period0);
      assertNotSame(period14, period11);
      assertNotSame(period14, period13);
      assertNotSame(period14, period12);
      assertNotSame(period14, period9);
      assertNotSame(period14, period2);
      assertNotSame(period14, period8);
      assertNotSame(period14, period4);
      assertNotSame(period14, period10);
      assertNotSame(period14, period5);
      assertNotSame(period14, period7);
      assertNotSame(period14, period1);
      assertNotSame(period14, period3);
      assertNotSame(period14, period6);
      assertNotNull(period14);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period14.equals((Object)period11));
      assertFalse(period14.equals((Object)period13));
      assertFalse(period14.equals((Object)period12));
      assertFalse(period14.equals((Object)period9));
      assertFalse(period14.equals((Object)period2));
      assertFalse(period14.equals((Object)period8));
      assertTrue(period14.equals((Object)period5));
      assertFalse(period14.equals((Object)period4));
      assertFalse(period14.equals((Object)period10));
      assertFalse(period14.equals((Object)period7));
      assertFalse(period14.equals((Object)period1));
      assertFalse(period14.equals((Object)period3));
      assertFalse(period14.equals((Object)period6));
      
      Period period15 = period7.multipliedBy(0);
      assertNotSame(period1, period10);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period14);
      assertNotSame(period1, period15);
      assertNotSame(period1, period13);
      assertNotSame(period1, period11);
      assertNotSame(period1, period12);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period0);
      assertNotSame(period15, period14);
      assertNotSame(period15, period2);
      assertNotSame(period15, period0);
      assertNotSame(period15, period11);
      assertNotSame(period15, period7);
      assertNotSame(period15, period12);
      assertNotSame(period15, period9);
      assertNotSame(period15, period6);
      assertNotSame(period15, period10);
      assertNotSame(period15, period13);
      assertNotSame(period15, period4);
      assertNotSame(period15, period1);
      assertNotSame(period15, period3);
      assertNotSame(period15, period8);
      assertNotSame(period15, period5);
      assertNotSame(period6, period11);
      assertNotSame(period6, period13);
      assertNotSame(period6, period12);
      assertNotSame(period6, period9);
      assertNotSame(period6, period15);
      assertNotSame(period6, period14);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period10);
      assertNotSame(period6, period5);
      assertNotSame(period6, period7);
      assertSame(period6, period1);
      assertNotSame(period6, period8);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period10);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period9);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertNotSame(period7, period0);
      assertNotSame(period7, period13);
      assertNotSame(period7, period12);
      assertNotSame(period7, period14);
      assertSame(period7, period11);
      assertNotSame(period7, period15);
      assertNotNull(period15);
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period14));
      assertFalse(period1.equals((Object)period13));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period15.equals((Object)period3));
      assertFalse(period15.equals((Object)period14));
      assertFalse(period15.equals((Object)period2));
      assertFalse(period15.equals((Object)period0));
      assertFalse(period15.equals((Object)period11));
      assertFalse(period15.equals((Object)period7));
      assertFalse(period15.equals((Object)period12));
      assertFalse(period15.equals((Object)period9));
      assertFalse(period15.equals((Object)period6));
      assertFalse(period15.equals((Object)period10));
      assertFalse(period15.equals((Object)period13));
      assertFalse(period15.equals((Object)period4));
      assertFalse(period15.equals((Object)period1));
      assertFalse(period15.equals((Object)period8));
      assertFalse(period15.equals((Object)period5));
      assertFalse(period6.equals((Object)period11));
      assertFalse(period6.equals((Object)period13));
      assertFalse(period6.equals((Object)period12));
      assertFalse(period6.equals((Object)period9));
      assertFalse(period6.equals((Object)period14));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period10));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period8));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period10));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period9));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period13));
      assertFalse(period7.equals((Object)period12));
      assertFalse(period7.equals((Object)period14));
      
      int int6 = period7.getMinutes();
      assertNotSame(period1, period10);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period14);
      assertNotSame(period1, period15);
      assertNotSame(period1, period13);
      assertNotSame(period1, period11);
      assertNotSame(period1, period12);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period0);
      assertNotSame(period6, period11);
      assertNotSame(period6, period13);
      assertNotSame(period6, period12);
      assertNotSame(period6, period9);
      assertNotSame(period6, period15);
      assertNotSame(period6, period14);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period10);
      assertNotSame(period6, period5);
      assertNotSame(period6, period7);
      assertSame(period6, period1);
      assertNotSame(period6, period8);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period10);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period9);
      assertNotSame(period7, period2);
      assertNotSame(period7, period8);
      assertNotSame(period7, period0);
      assertNotSame(period7, period13);
      assertNotSame(period7, period12);
      assertNotSame(period7, period14);
      assertSame(period7, period11);
      assertNotSame(period7, period15);
      assertEquals(0, int6);
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period14));
      assertFalse(period1.equals((Object)period15));
      assertFalse(period1.equals((Object)period13));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period0));
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(period6.equals((Object)period11));
      assertFalse(period6.equals((Object)period13));
      assertFalse(period6.equals((Object)period12));
      assertFalse(period6.equals((Object)period9));
      assertFalse(period6.equals((Object)period15));
      assertFalse(period6.equals((Object)period14));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period10));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period8));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period10));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period9));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period13));
      assertFalse(period7.equals((Object)period12));
      assertFalse(period7.equals((Object)period14));
      assertFalse(period7.equals((Object)period15));
      
      Years years0 = Years.years(0);
      assertNotNull(years0);
      assertEquals(0, years0.getYears());
      assertEquals(1, years0.size());
      
      Period period16 = period9.plus(years0);
      assertNotSame(period1, period10);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period14);
      assertNotSame(period1, period15);
      assertNotSame(period1, period13);
      assertNotSame(period1, period11);
      assertNotSame(period1, period12);
      assertNotSame(period1, period16);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period0);
      assertNotSame(period16, period9);
      assertNotSame(period16, period6);
      assertNotSame(period16, period1);
      assertNotSame(period16, period10);
      assertNotSame(period16, period12);
      assertNotSame(period16, period4);
      assertNotSame(period16, period3);
      assertNotSame(period16, period11);
      assertNotSame(period16, period13);
      assertNotSame(period16, period15);
      assertNotSame(period16, period2);
      assertNotSame(period16, period0);
      assertNotSame(period16, period14);
      assertNotSame(period16, period5);
      assertNotSame(period16, period7);
      assertNotSame(period16, period8);
      assertNotSame(period9, period4);
      assertNotSame(period9, period3);
      assertNotSame(period9, period1);
      assertNotSame(period9, period10);
      assertNotSame(period9, period5);
      assertNotSame(period9, period15);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period9, period6);
      assertNotSame(period9, period14);
      assertNotSame(period9, period12);
      assertNotSame(period9, period7);
      assertNotSame(period9, period16);
      assertNotSame(period9, period11);
      assertNotSame(period9, period13);
      assertNotSame(period9, period0);
      assertNotNull(period16);
      assertEquals(0, years0.getYears());
      assertEquals(1, years0.size());
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period14));
      assertFalse(period1.equals((Object)period15));
      assertFalse(period1.equals((Object)period13));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period16.equals((Object)period6));
      assertFalse(period16.equals((Object)period1));
      assertFalse(period16.equals((Object)period12));
      assertFalse(period16.equals((Object)period4));
      assertFalse(period16.equals((Object)period3));
      assertFalse(period16.equals((Object)period11));
      assertFalse(period16.equals((Object)period13));
      assertTrue(period16.equals((Object)period9));
      assertFalse(period16.equals((Object)period15));
      assertFalse(period16.equals((Object)period2));
      assertFalse(period16.equals((Object)period0));
      assertFalse(period16.equals((Object)period14));
      assertFalse(period16.equals((Object)period5));
      assertFalse(period16.equals((Object)period7));
      assertFalse(period16.equals((Object)period8));
      assertTrue(period16.equals((Object)period10));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period5));
      assertTrue(period9.equals((Object)period10));
      assertFalse(period9.equals((Object)period15));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period14));
      assertFalse(period9.equals((Object)period12));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period11));
      assertFalse(period9.equals((Object)period13));
      assertFalse(period9.equals((Object)period0));
      
      Period period17 = period14.plus(period16);
      assertNotSame(period0, period2);
      assertNotSame(period0, period11);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period15);
      assertSame(period0, period14);
      assertNotSame(period0, period13);
      assertNotSame(period0, period6);
      assertNotSame(period0, period17);
      assertNotSame(period0, period9);
      assertNotSame(period0, period1);
      assertNotSame(period0, period10);
      assertNotSame(period0, period12);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period16);
      assertNotSame(period1, period10);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period14);
      assertNotSame(period1, period17);
      assertNotSame(period1, period15);
      assertNotSame(period1, period13);
      assertNotSame(period1, period11);
      assertNotSame(period1, period12);
      assertNotSame(period1, period16);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period0);
      assertSame(period14, period0);
      assertNotSame(period14, period11);
      assertNotSame(period14, period13);
      assertNotSame(period14, period16);
      assertNotSame(period14, period12);
      assertNotSame(period14, period9);
      assertNotSame(period14, period2);
      assertNotSame(period14, period8);
      assertNotSame(period14, period4);
      assertNotSame(period14, period10);
      assertNotSame(period14, period5);
      assertNotSame(period14, period7);
      assertNotSame(period14, period1);
      assertNotSame(period14, period3);
      assertNotSame(period14, period6);
      assertNotSame(period14, period17);
      assertNotSame(period14, period15);
      assertNotSame(period16, period9);
      assertNotSame(period16, period17);
      assertNotSame(period16, period6);
      assertNotSame(period16, period1);
      assertNotSame(period16, period10);
      assertNotSame(period16, period12);
      assertNotSame(period16, period4);
      assertNotSame(period16, period3);
      assertNotSame(period16, period11);
      assertNotSame(period16, period13);
      assertNotSame(period16, period15);
      assertNotSame(period16, period2);
      assertNotSame(period16, period0);
      assertNotSame(period16, period14);
      assertNotSame(period16, period5);
      assertNotSame(period16, period7);
      assertNotSame(period16, period8);
      assertNotSame(period17, period0);
      assertNotSame(period17, period13);
      assertNotSame(period17, period16);
      assertNotSame(period17, period12);
      assertNotSame(period17, period7);
      assertNotSame(period17, period15);
      assertNotSame(period17, period9);
      assertNotSame(period17, period11);
      assertNotSame(period17, period6);
      assertNotSame(period17, period14);
      assertNotSame(period17, period1);
      assertNotSame(period17, period4);
      assertNotSame(period17, period8);
      assertNotSame(period17, period3);
      assertNotSame(period17, period10);
      assertNotSame(period17, period5);
      assertNotSame(period17, period2);
      assertNotSame(period9, period4);
      assertNotSame(period9, period3);
      assertNotSame(period9, period1);
      assertNotSame(period9, period10);
      assertNotSame(period9, period5);
      assertNotSame(period9, period15);
      assertNotSame(period9, period8);
      assertNotSame(period9, period2);
      assertNotSame(period9, period6);
      assertNotSame(period9, period14);
      assertNotSame(period9, period12);
      assertNotSame(period9, period7);
      assertNotSame(period9, period16);
      assertNotSame(period9, period11);
      assertNotSame(period9, period13);
      assertNotSame(period9, period0);
      assertNotSame(period9, period17);
      assertNotNull(period17);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(0, years0.getYears());
      assertEquals(1, years0.size());
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period15));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period16));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period14));
      assertFalse(period1.equals((Object)period15));
      assertFalse(period1.equals((Object)period13));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period16));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period14.equals((Object)period11));
      assertFalse(period14.equals((Object)period13));
      assertFalse(period14.equals((Object)period16));
      assertFalse(period14.equals((Object)period12));
      assertFalse(period14.equals((Object)period9));
      assertFalse(period14.equals((Object)period2));
      assertFalse(period14.equals((Object)period8));
      assertTrue(period14.equals((Object)period5));
      assertFalse(period14.equals((Object)period4));
      assertFalse(period14.equals((Object)period10));
      assertFalse(period14.equals((Object)period7));
      assertFalse(period14.equals((Object)period1));
      assertFalse(period14.equals((Object)period3));
      assertFalse(period14.equals((Object)period6));
      assertFalse(period14.equals((Object)period15));
      assertFalse(period16.equals((Object)period6));
      assertFalse(period16.equals((Object)period1));
      assertFalse(period16.equals((Object)period12));
      assertFalse(period16.equals((Object)period4));
      assertFalse(period16.equals((Object)period3));
      assertFalse(period16.equals((Object)period11));
      assertFalse(period16.equals((Object)period13));
      assertTrue(period16.equals((Object)period9));
      assertFalse(period16.equals((Object)period15));
      assertFalse(period16.equals((Object)period2));
      assertFalse(period16.equals((Object)period0));
      assertFalse(period16.equals((Object)period14));
      assertFalse(period16.equals((Object)period5));
      assertFalse(period16.equals((Object)period7));
      assertFalse(period16.equals((Object)period8));
      assertTrue(period16.equals((Object)period10));
      assertFalse(period17.equals((Object)period0));
      assertFalse(period17.equals((Object)period13));
      assertFalse(period17.equals((Object)period16));
      assertFalse(period17.equals((Object)period12));
      assertFalse(period17.equals((Object)period7));
      assertFalse(period17.equals((Object)period15));
      assertFalse(period17.equals((Object)period9));
      assertFalse(period17.equals((Object)period11));
      assertFalse(period17.equals((Object)period6));
      assertFalse(period17.equals((Object)period14));
      assertFalse(period17.equals((Object)period1));
      assertFalse(period17.equals((Object)period4));
      assertFalse(period17.equals((Object)period8));
      assertFalse(period17.equals((Object)period3));
      assertFalse(period17.equals((Object)period10));
      assertFalse(period17.equals((Object)period5));
      assertFalse(period17.equals((Object)period2));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period5));
      assertTrue(period9.equals((Object)period10));
      assertTrue(period9.equals((Object)period16));
      assertFalse(period9.equals((Object)period15));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period14));
      assertFalse(period9.equals((Object)period12));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period11));
      assertFalse(period9.equals((Object)period13));
      assertFalse(period9.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 17971875;
      Period period0 = Period.seconds(17971875);
      assertNotNull(period0);
      
      int int1 = period0.getHours();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.ZERO.withMillis(17971875);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Weeks weeks0 = period2.ZERO.toStandardWeeks();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(weeks0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period2.plusDays(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertSame(period2, period3);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertSame(period3, period2);
      assertNotNull(period3);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals("DayTimeNoDays", periodType1.getName());
      assertEquals(4, periodType1.size());
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.yearMonthDayTime();
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertEquals(7, periodType2.size());
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      Integer integer0 = new Integer(17971875);
      assertEquals(17971875, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      Days days0 = period2.toStandardDays();
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertSame(period2, period3);
      assertNotNull(days0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      int int2 = period0.getYears();
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertEquals(0, int2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      Period period4 = period0.withMinutes(17971875);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      
      Period period5 = period0.plus(period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertSame(period2, period3);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotNull(period5);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      
      int int3 = (-1203);
      Period period6 = period3.plusMonths((int) integer0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period6);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period5);
      assertSame(period2, period3);
      assertNotSame(period3, period6);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotNull(period6);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period5));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      
      // Undeclared exception!
      try { 
        period6.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P17971875MT17971.875S
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = (-2610);
      Period period0 = Period.months((-2610));
      assertNotNull(period0);
      
      Period period1 = period0.ZERO.plusSeconds((-2610));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.plusDays((-2610));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      int int1 = 0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Period period3 = period1.withMillis(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = period0.ZERO.minusSeconds((-2610));
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      
      int int2 = period3.getMinutes();
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertEquals(0, int2);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        period2.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Period period0 = new Period(2971L, (Chronology) julianChronology0);
      assertNotNull(period0);
      
      Period period1 = period0.plusDays(8);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.ZERO.minusMinutes(8);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period1.ZERO.withYears((-2609));
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      
      Days days0 = period1.toStandardDays();
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(8, days0.getDays());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      
      Period period4 = period2.plusMinutes((-2609));
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period5 = Period.weeks(0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      
      Hours hours0 = Hours.TWO;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(2, hours0.getHours());
      
      Minutes minutes0 = hours0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(1, hours0.size());
      assertEquals(2, hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals(120, minutes0.getMinutes());
      
      int int0 = period0.ZERO.size();
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertEquals(8, int0);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(1, hours0.size());
      assertEquals(2, hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals(120, minutes0.getMinutes());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      
      Period period6 = period0.withFieldAdded(durationFieldType0, 6);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period6, period2);
      assertNotSame(period6, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotNull(period6);
      assertEquals(1, hours0.size());
      assertEquals(2, hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals(120, minutes0.getMinutes());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      
      Period period7 = period0.plusMinutes(0);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertSame(period0, period7);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period2);
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertSame(period7, period0);
      assertNotSame(period7, period1);
      assertNotNull(period7);
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = Period.millis(3384);
      assertNotNull(period0);
      
      Seconds seconds0 = Seconds.ONE;
      assertNotNull(seconds0);
      assertEquals(1, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      
      Period period1 = period0.ZERO.minus(seconds0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period0.plusDays(3384);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      int int0 = period2.getMillis();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertEquals(3384, int0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period0.toPeriod();
      assertNotSame(period0, period2);
      assertSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertSame(period3, period0);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      
      Period period4 = Period.years(3384);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotNull(period4);
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      
      Period period5 = period4.normalizedStandard();
      assertNotSame(period4, period2);
      assertNotSame(period4, period5);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotNull(period5);
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertTrue(period5.equals((Object)period4));
      
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period6 = Period.seconds(3384);
      assertNotSame(period6, period5);
      assertNotSame(period6, period2);
      assertNotSame(period6, period1);
      assertNotSame(period6, period3);
      assertNotSame(period6, period0);
      assertNotSame(period6, period4);
      assertNotNull(period6);
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      
      // Undeclared exception!
      try { 
        period5.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.withWeeks(1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.withSeconds(352831696);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period3 = period2.minusSeconds(1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      
      int int0 = period2.ZERO.getHours();
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      
      Period period4 = Period.minutes(1636);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotNull(period4);
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      
      Period period5 = period4.minusDays(1636);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotNull(period5);
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      
      Hours hours0 = period4.ZERO.toStandardHours();
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      
      Period period6 = period4.ZERO.withMonths(5);
      assertNotSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period6);
      assertNotSame(period4, period2);
      assertNotSame(period6, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotSame(period6, period3);
      assertNotNull(period6);
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period3));
      
      PeriodType periodType1 = PeriodType.yearDay();
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("YearDay", periodType1.getName());
      assertEquals(2, periodType1.size());
      
      PeriodType.YEAR_INDEX = 5;
      Integer integer0 = new Integer(1636);
      assertEquals(1636, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("");
      assertNull(dateTimeZone0);
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(period0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.Period
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(0L, periodType0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      
      int int0 = period0.getYears();
      assertEquals(0, int0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Period period1 = period0.plusYears(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Period period2 = period1.withFields(period0);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      
      Period period3 = period1.negated();
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotNull(period3);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      
      PeriodType.MILLI_INDEX = 0;
      boolean boolean1 = period2.ZERO.equals(periodType0);
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertFalse(boolean1);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertTrue(boolean1 == boolean0);
      
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      PeriodType.SECOND_INDEX = 0;
      Period period4 = period3.plusMonths((-1090));
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotNull(period4);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      
      int int1 = period1.getSeconds();
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertEquals(0, int1);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(int1 == int0);
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      
      int int2 = period0.getMillis();
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertEquals(0, int2);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      
      Period period5 = period2.minusWeeks(0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertSame(period5, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertSame(period2, period5);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotNull(period5);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period4));
      assertTrue(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      
      Period period6 = period5.plusHours(0);
      assertNotSame(period5, period3);
      assertSame(period5, period6);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertSame(period5, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period4);
      assertSame(period6, period5);
      assertSame(period6, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period6);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertSame(period2, period6);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertSame(period2, period5);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotNull(period6);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period1));
      assertTrue(period6.equals((Object)period0));
      assertTrue(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertTrue(period6.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period4));
      assertTrue(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      
      PeriodType periodType1 = PeriodType.days();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      
      int int3 = period2.ZERO.getWeeks();
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period6);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertSame(period2, period6);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertSame(period2, period5);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertEquals(0, int3);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period4));
      assertTrue(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      
      // Undeclared exception!
      try { 
        period5.withDays((-1237));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = new Period(31556952000L, 31556952000L);
      assertNotNull(period0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Seconds seconds0 = period0.ZERO.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      
      Period period1 = period0.withSeconds((-1));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      PeriodType periodType1 = PeriodType.millis();
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(1, periodType1.size());
      assertEquals("Millis", periodType1.getName());
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period2 = period0.withDays((-345));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Period period3 = period0.withHours((-1));
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotNull(period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      
      Period period4 = period3.ZERO.withWeeks((-1));
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      
      PeriodType.YEAR_INDEX = (-308);
      Period period5 = period0.plusMillis(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotNull(period5);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      
      // Undeclared exception!
      try { 
        period0.getValue((-2812));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = Period.hours(0);
      assertNotNull(period0);
      
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      
      int int1 = period0.ZERO.get(durationFieldType0);
      assertEquals(0, int1);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertTrue(int1 == int0);
      
      Period period1 = period0.minusHours(8);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Days days0 = period1.ZERO.toStandardDays();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Period period2 = period1.minusSeconds(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      
      DurationField durationField0 = durationFieldType0.getField(gJChronology0);
      assertNotNull(durationField0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("DurationField[millis]", durationField0.toString());
      assertTrue(durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertEquals(1L, durationField0.getUnitMillis());
      
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      assertSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      assertSame(gJChronology0, gJChronology1);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      Period period3 = Period.fieldDifference(localDateTime0, localDateTime0);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotNull(period3);
      assertEquals(4, localDateTime0.size());
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      
      Period period4 = period3.ZERO.plusDays(0);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotNull(period4);
      assertEquals(4, localDateTime0.size());
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      
      Period period5 = Period.millis(2237);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotNull(period5);
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      
      PeriodType.HOUR_INDEX = 0;
      Period period6 = period4.withField(durationFieldType0, 2237);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period1);
      assertNotSame(period6, period5);
      assertNotSame(period6, period3);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period5);
      assertNotSame(period3, period2);
      assertNotSame(period3, period6);
      assertNotSame(period3, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period6);
      assertNotSame(period4, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotNull(period6);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(4, localDateTime0.size());
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertTrue(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period5));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      
      int int2 = period3.getSeconds();
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period5);
      assertNotSame(period3, period2);
      assertNotSame(period3, period6);
      assertNotSame(period3, period0);
      assertEquals(0, int2);
      assertEquals(4, localDateTime0.size());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period0));
      
      Period period7 = period0.withMinutes(60);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period2);
      assertNotNull(period7);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period2));
      
      Period period8 = period7.minusMonths(292272708);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period8);
      assertNotSame(period7, period2);
      assertNotSame(period8, period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period3);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotSame(period8, period2);
      assertNotNull(period8);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period2));
      
      Period period9 = period7.plusSeconds(0);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period8);
      assertNotSame(period7, period2);
      assertSame(period7, period9);
      assertNotSame(period9, period3);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period0);
      assertNotSame(period9, period6);
      assertNotSame(period9, period2);
      assertSame(period9, period7);
      assertNotNull(period9);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period2));
      
      int int3 = period9.ZERO.getWeeks();
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period8);
      assertNotSame(period7, period2);
      assertSame(period7, period9);
      assertNotSame(period9, period3);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period0);
      assertNotSame(period9, period6);
      assertNotSame(period9, period2);
      assertSame(period9, period7);
      assertEquals(0, int3);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period2));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      int int4 = period9.ZERO.getHours();
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period8);
      assertNotSame(period7, period2);
      assertSame(period7, period9);
      assertNotSame(period9, period3);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period0);
      assertNotSame(period9, period6);
      assertNotSame(period9, period2);
      assertSame(period9, period7);
      assertEquals(0, int4);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period2));
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      
      Period period10 = period8.withSeconds(0);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period10);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period8);
      assertNotSame(period7, period2);
      assertSame(period7, period9);
      assertNotSame(period8, period7);
      assertNotSame(period8, period10);
      assertNotSame(period8, period0);
      assertNotSame(period8, period3);
      assertNotSame(period8, period9);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotSame(period8, period2);
      assertNotSame(period10, period1);
      assertNotSame(period10, period4);
      assertNotSame(period10, period6);
      assertNotSame(period10, period2);
      assertNotSame(period10, period5);
      assertNotSame(period10, period8);
      assertNotSame(period10, period9);
      assertNotSame(period10, period7);
      assertNotSame(period10, period0);
      assertNotSame(period10, period3);
      assertNotNull(period10);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period0));
      assertTrue(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period3));
      
      Period period11 = Period.years(8);
      assertNotSame(period11, period1);
      assertNotSame(period11, period5);
      assertNotSame(period11, period8);
      assertNotSame(period11, period3);
      assertNotSame(period11, period7);
      assertNotSame(period11, period4);
      assertNotSame(period11, period0);
      assertNotSame(period11, period6);
      assertNotSame(period11, period9);
      assertNotSame(period11, period10);
      assertNotSame(period11, period2);
      assertNotNull(period11);
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period2));
      
      Period period12 = Period.weeks((-390));
      assertNotSame(period12, period0);
      assertNotSame(period12, period2);
      assertNotSame(period12, period8);
      assertNotSame(period12, period5);
      assertNotSame(period12, period11);
      assertNotSame(period12, period4);
      assertNotSame(period12, period10);
      assertNotSame(period12, period6);
      assertNotSame(period12, period1);
      assertNotSame(period12, period7);
      assertNotSame(period12, period9);
      assertNotSame(period12, period3);
      assertNotNull(period12);
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period3));
      
      Period period13 = Period.months(292272708);
      assertNotSame(period13, period12);
      assertNotSame(period13, period3);
      assertNotSame(period13, period5);
      assertNotSame(period13, period8);
      assertNotSame(period13, period4);
      assertNotSame(period13, period7);
      assertNotSame(period13, period11);
      assertNotSame(period13, period9);
      assertNotSame(period13, period0);
      assertNotSame(period13, period10);
      assertNotSame(period13, period6);
      assertNotSame(period13, period1);
      assertNotSame(period13, period2);
      assertNotNull(period13);
      assertFalse(period13.equals((Object)period12));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period5));
      assertFalse(period13.equals((Object)period8));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period7));
      assertFalse(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period6));
      assertFalse(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period2));
      
      int int5 = period10.getMinutes();
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period10);
      assertNotSame(period0, period9);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period13);
      assertNotSame(period0, period11);
      assertNotSame(period0, period12);
      assertNotSame(period0, period2);
      assertNotSame(period7, period12);
      assertNotSame(period7, period3);
      assertNotSame(period7, period6);
      assertNotSame(period7, period13);
      assertNotSame(period7, period2);
      assertSame(period7, period9);
      assertNotSame(period7, period11);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertNotSame(period7, period10);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period8);
      assertNotSame(period8, period11);
      assertNotSame(period8, period7);
      assertNotSame(period8, period10);
      assertNotSame(period8, period0);
      assertNotSame(period8, period9);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotSame(period8, period12);
      assertNotSame(period8, period3);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period13);
      assertNotSame(period8, period2);
      assertNotSame(period10, period1);
      assertNotSame(period10, period6);
      assertNotSame(period10, period2);
      assertNotSame(period10, period11);
      assertNotSame(period10, period9);
      assertNotSame(period10, period3);
      assertNotSame(period10, period13);
      assertNotSame(period10, period4);
      assertNotSame(period10, period5);
      assertNotSame(period10, period8);
      assertNotSame(period10, period12);
      assertNotSame(period10, period7);
      assertNotSame(period10, period0);
      assertEquals(60, int5);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period7.equals((Object)period11));
      assertFalse(period7.equals((Object)period12));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period10));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period8));
      assertFalse(period7.equals((Object)period13));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period8.equals((Object)period11));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period12));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period13));
      assertTrue(period8.equals((Object)period10));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period11));
      assertFalse(period10.equals((Object)period9));
      assertTrue(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period13));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period12));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period0));
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = 12;
      Period period0 = Period.hours(12);
      period0.ZERO.getMinutes();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      period0.ZERO.get(durationFieldType0);
      int int1 = 8;
      period0.minusHours(8);
      Period period1 = period0.plusHours(4);
      period1.ZERO.toStandardDays();
      GJChronology gJChronology0 = GJChronology.getInstance();
      period1.minusSeconds(0);
      durationFieldType0.getField(gJChronology0);
      GJChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      ISOPeriodFormat.standard();
      Period period2 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period3 = period2.ZERO.plusDays(0);
      int int2 = 2237;
      Period.millis(2237);
      PeriodType.HOUR_INDEX = 12;
      int int3 = 764;
      period3.withField(durationFieldType0, 764);
      period2.getSeconds();
      Period period4 = period1.withMinutes(60);
      period4.minusMonths(292272708);
      Period period5 = period4.plusSeconds(0);
      PeriodType.months();
      period5.withMinutes(60);
      // Undeclared exception!
      try { 
        period5.ZERO.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Period period0 = Period.seconds(17971875);
      period0.getHours();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      Period period2 = period1.ZERO.withMillis(17971875);
      period2.ZERO.toStandardWeeks();
      Period period3 = period2.plusDays(0);
      periodType0.withDaysRemoved();
      PeriodType.yearMonthDayTime();
      period1.getMonths();
      period2.toStandardDays();
      period0.getYears();
      Period period4 = period0.withMinutes(17971875);
      Period period5 = period0.plus(period2);
      Period period6 = period3.plusMonths(0);
      period6.normalizedStandard(periodType0);
      Period period7 = period5.ZERO.withYears(0);
      period7.minusMinutes(17);
      Instant instant0 = Instant.ofEpochSecond(2907L);
      Instant instant1 = instant0.plus((long) 0);
      period0.ZERO.toDurationTo(instant1);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      Period period8 = period4.withField(durationFieldType0, 17971875);
      period8.ZERO.withFields(period3);
      period8.plusWeeks((-1203));
      period6.withMonths(0);
      period1.minusMillis((-1820));
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-3371), 0, (-440));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3371 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(0L, periodType0);
      PeriodType periodType1 = PeriodType.millis();
      int int0 = (-23);
      Period period1 = period0.plusSeconds((-23));
      Period period2 = period1.minusSeconds((-23));
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 2266L, periodType0);
      PeriodType.time();
      Period period3 = mutablePeriod0.toPeriod();
      Period period4 = period3.ZERO.negated();
      Period period5 = period0.withFields(period3);
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      period0.indexOf(durationFieldType0);
      period5.toStandardSeconds();
      period5.withMillis((-23));
      period3.toStandardMinutes();
      period1.toStandardDays();
      Period period6 = Period.days((-23));
      period3.getMinutes();
      period4.getMinutes();
      period4.plusDays(427);
      Period period7 = period5.plusDays((-1));
      period4.minusYears((-1));
      period7.minus(period6);
      int int1 = 8;
      PeriodType.HOUR_INDEX = 8;
      period2.minusMinutes((-2004));
      period6.plusMonths(0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = new Period(0L);
      period0.toDurationFrom((ReadableInstant) null);
      int int0 = 0;
      PeriodType.MINUTE_INDEX = 2114;
      Period period1 = period0.plusDays(0);
      PeriodType.MONTH_INDEX = 2114;
      PeriodType.yearWeekDayTime();
      Integer integer0 = new Integer(0);
      PeriodType.minutes();
      period1.size();
      period1.getYears();
      period1.getWeeks();
      PeriodType.YEAR_INDEX = 2114;
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
