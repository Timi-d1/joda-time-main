/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 22:51:07 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.GJChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Instant_ESTest extends Instant_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = Instant.now();
      Duration duration0 = Duration.ZERO;
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, 0);
      assertSame(instant0, instant1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-4611L));
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertEquals((-4611L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-1184L));
      Instant instant1 = instant0.withMillis(2802L);
      MutableDateTime mutableDateTime0 = instant1.toMutableDateTime();
      assertEquals((-1184L), instant0.getMillis());
      assertEquals(2802L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-1184L));
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertEquals((-1184L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Instant instant1 = instant0.toInstant();
      assertEquals(0L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-9L));
      Instant instant1 = instant0.toInstant();
      assertEquals((-9L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTimeISO();
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-3186L));
      DateTime dateTime0 = instant0.toDateTimeISO();
      assertEquals((-3186L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-9L));
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals((-9L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Duration duration0 = Duration.standardSeconds(0L);
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-9L));
      Duration duration0 = Duration.millis((-9L));
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      assertEquals((-18L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-1864L));
      instant0.EPOCH.plus(0L);
      assertEquals((-1864L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Instant instant1 = instant0.EPOCH.plus((-774L));
      assertEquals((-774L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Instant instant0 = Instant.parse("", dateTimeFormatter0);
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Instant instant0 = Instant.parse("1970-01-01T00:00:00.000Z");
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Instant instant0 = Instant.parse("1970-01-01T01:43:58.800Z");
      assertEquals(6238800L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = Instant.parse("6");
      assertEquals((-61977830400000L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(0L);
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-3186L));
      assertEquals((-3186000L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      Instant instant0 = Instant.now();
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis((-797L));
      Instant instant0 = Instant.now();
      assertEquals((-797L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(0L);
      Duration duration0 = new Duration(0L);
      Instant instant1 = instant0.minus((ReadableDuration) duration0);
      assertSame(instant0, instant1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 2);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(2);
      Instant instant0 = Instant.parse("", dateTimeFormatter2);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Duration duration0 = minutes0.toStandardDuration();
      Instant instant1 = instant0.minus((ReadableDuration) duration0);
      assertEquals((-7320000L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-1864L));
      instant0.EPOCH.minus(0L);
      assertEquals((-1864L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Instant instant1 = instant0.minus((long) 4);
      assertEquals((-4L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      long long0 = instant0.getMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(460L);
      Minutes minutes0 = Minutes.MIN_VALUE;
      Duration duration0 = minutes0.toStandardDuration();
      // Undeclared exception!
      try { 
        instant0.withDurationAdded((ReadableDuration) duration0, 2145545485);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -128849018880000 * 2145545485
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Instant instant0 = Instant.now();
      // Undeclared exception!
      try { 
        instant0.withDurationAdded(100000000000000000L, 1000);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 100000000000000000 * 1000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(1392409281320L);
      Duration duration0 = Duration.standardHours(1392409281320L);
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      // Undeclared exception!
      try { 
        instant1.plus((ReadableDuration) duration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 5012674805161281320 + 5012673412752000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        Instant.parse(":#EP5rNw]e8};>uD\"wR", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        Instant.parse("/O_.H", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"/O_.H\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.ofEpochSecond((-1298798110310400000L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -1298798110310400000 * 1000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Instant instant0 = null;
      try {
        instant0 = new Instant("(^_F\")wu2\"NI,8rT$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"(^_F\")wu2\"NI,8rT$\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Instant instant0 = gJChronology0.getGregorianCutover();
      Hours hours0 = Hours.ZERO;
      Duration duration0 = hours0.toStandardDuration();
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, 2271);
      assertEquals((-12219292800000L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) null, 360);
      assertSame(instant0, instant1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Instant instant1 = instant0.withDurationAdded(1569L, (-1786));
      assertEquals((-2802234L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Instant instant1 = instant0.withDurationAdded(0L, 1000);
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Instant instant1 = instant0.EPOCH.withMillis((-3078L));
      assertEquals((-3078L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Instant instant0 = new Instant((-1L));
      long long0 = instant0.getMillis();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Chronology chronology0 = instant0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Instant instant0 = Instant.now();
      long long0 = instant0.getMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Instant instant0 = Instant.now();
      instant0.EPOCH.toMutableDateTime();
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse("The partial must not be null", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(460L);
      Instant instant1 = instant0.withDurationAdded(460L, 0);
      assertEquals(460000L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.EPOCH.withMillis(0L);
      assertFalse(instant1.equals((Object)instant0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(460L);
      Minutes minutes0 = Minutes.ZERO;
      Duration duration0 = minutes0.toStandardDuration();
      Instant instant1 = instant0.minus((ReadableDuration) duration0);
      assertEquals(460000L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse("Types array must be in order largest-smallest, for year-based fields, years is defined as being largest: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Types array must be in order larg...\" is malformed at \"ypes array must be in order larg...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Instant instant0 = new Instant();
      Instant instant1 = instant0.minus(0L);
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Instant instant0 = new Instant();
      Instant instant1 = instant0.toInstant();
      assertSame(instant0, instant1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTime dateTime0 = instant0.toDateTimeISO();
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = new Instant(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertTrue(instant1.equals((Object)instant0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(1392409281320L);
      Instant instant1 = instant0.plus(1L);
      assertEquals(1392409281321L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }
}
