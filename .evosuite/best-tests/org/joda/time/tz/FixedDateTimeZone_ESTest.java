/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 22:15:11 GMT 2025
 */

package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FixedDateTimeZone_ESTest extends FixedDateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("-01:00", "K#QNgc$xw}y0Y", 8, 8);
      DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", 1, 1805);
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", (-1463), 1805);
      boolean boolean0 = fixedDateTimeZone1.equals(fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("GMT", "GMT", 0, (-3119));
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=GMT,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("\"@ Z|J", "\"@ Z|J", 2502, 0);
      long long0 = fixedDateTimeZone0.previousTransition(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("W(F6[`%=u_%#O", "elgzD*gbLo*}$uj", (-474), (-474));
      long long0 = fixedDateTimeZone0.previousTransition((-474));
      assertEquals((-474L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("\"@ Z|J", "\"@ Z|J", 2502, 0);
      long long0 = fixedDateTimeZone0.nextTransition(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("org.joda.time.tz.FixedDateTimeZone", "org.joda.time.tz.FixedDateTimeZone", 10080, (-6793));
      long long0 = fixedDateTimeZone0.nextTransition(10080);
      assertEquals(10080L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "", 0, 0);
      int int0 = fixedDateTimeZone0.getStandardOffset(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("org.joda.time.tz.FixedDateTimeZone", "org.joda.time.tz.FixedDateTimeZone", 10080, (-6793));
      int int0 = fixedDateTimeZone0.getStandardOffset(10080);
      assertEquals((-6793), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(" cannot be compared to ", " cannot be compared to ", 0, 0);
      int int0 = fixedDateTimeZone0.getOffsetFromLocal((-3749L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "+", (-500), (-500));
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(0L);
      assertEquals((-500), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("\"@ Z|J", "\"@ Z|J", 2502, 0);
      int int0 = fixedDateTimeZone0.getOffset(0L);
      assertEquals(2502, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(".Iih!.s6+p.bWsZXa", "", (-1907), (-1907));
      int int0 = fixedDateTimeZone0.getOffset((long) (-1907));
      assertEquals((-1907), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("+", (String) null, 1492, 1492);
      String string0 = fixedDateTimeZone0.getNameKey(1492);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "", 0, 292272708);
      String string0 = fixedDateTimeZone0.getNameKey(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = null;
      try {
        fixedDateTimeZone0 = new FixedDateTimeZone((String) null, "h^", 0, 346);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Id must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("\"@ Z|J", "\"@ Z|J", 2502, 0);
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals(2502, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("+", (String) null, 1492, 1492);
      int int0 = fixedDateTimeZone0.getStandardOffset((-1L));
      assertEquals(1492, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("\"@ Z|J", "\"@ Z|J", 2502, 0);
      String string0 = fixedDateTimeZone0.getNameKey(0L);
      assertEquals("\"@ Z|J", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("x/", "x/", 0, 0);
      int int0 = fixedDateTimeZone0.getOffset((long) 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", 1, 1805);
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", 1, 1805);
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("-l", "-l", 0, 0);
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("-l", "-l", 37, 37);
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", 1, 1805);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        dateTimeZone0.equals(fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", 1, 1805);
      Object object0 = new Object();
      boolean boolean0 = fixedDateTimeZone0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", 1, 1805);
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", 1, 1805);
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", (-1463), 1805);
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("+d|B5)", "+d|B5)", 2149, 2149);
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("4nOW@", "4nOW@", (-298), (-298));
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=4nOW@,offset=-298,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", 1, 1805);
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals(1, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", 1, 1805);
      long long0 = fixedDateTimeZone0.previousTransition(1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", 1, 1805);
      fixedDateTimeZone0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("4nOW@", "4nOW@", (-298), (-298));
      boolean boolean0 = fixedDateTimeZone0.isFixed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", 1, 1805);
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("1DV;LGP@G-)P?", "1DV;LGP@G-)P?", 1, 1805);
      long long0 = fixedDateTimeZone0.nextTransition((-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("-01:00", "C$6T}d5ko", 8, 12);
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals("GMT-01:00", timeZone0.getID());
  }
}
