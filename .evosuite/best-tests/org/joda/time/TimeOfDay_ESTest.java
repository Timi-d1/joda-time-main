/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 22:00:51 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeOfDay_ESTest extends TimeOfDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((-1308L));
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 1;
      intArray0[5] = 2;
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      Object object0 = new Object();
      DateTime dateTime0 = new DateTime((long) 0);
      Duration duration0 = Duration.standardHours(1);
      Duration duration1 = new Duration((-1924L));
      Duration duration2 = duration0.withDurationAdded((ReadableDuration) duration1, 950);
      dateTime0.plus((ReadableDuration) duration2);
      String string0 = "_*CwIx^]W'~TVR";
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      int int0 = (-23);
      TimeOfDay timeOfDay2 = TimeOfDay.MIDNIGHT;
      timeOfDay0.getHourOfDay();
      timeOfDay0.minusHours(1);
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        LocalDate.parse(string0, dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"_*CwIx^]W'~TVR\" is too short
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(2, 2, 2);
      timeOfDay0.plusMillis(2);
      int int0 = 3284;
      timeOfDay0.plusSeconds(int0);
      int int1 = 86400;
      timeOfDay0.minusSeconds(int1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = null;
      try {
        period0 = new Period(dateTimeFieldType0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TimeOfDay timeOfDay0 = new TimeOfDay(24L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, (Chronology) buddhistChronology0);
      int int0 = 0;
      TimeOfDay timeOfDay2 = timeOfDay1.minusMinutes(4);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      timeOfDay2.MIDNIGHT.withField(dateTimeFieldType0, timeOfDay2.MILLIS_OF_SECOND);
      BuddhistChronology.getInstance();
      TimeOfDay timeOfDay3 = timeOfDay1.withHourOfDay(int0);
      timeOfDay0.toDateTimeToday();
      Days days0 = Days.THREE;
      PeriodType periodType0 = days0.getPeriodType();
      // Undeclared exception!
      try { 
        periodType0.getFieldType(timeOfDay3.MILLIS_OF_SECOND);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      TimeOfDay.fromMillisOfDay(0L);
      timeOfDay0.MIDNIGHT.minusMillis((-7));
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      ReadablePeriod readablePeriod0 = null;
      TimeOfDay timeOfDay1 = timeOfDay0.minus(readablePeriod0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      TimeOfDay.fromMillisOfDay((long) timeOfDay1.MINUTE_OF_HOUR, (Chronology) gregorianChronology0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CopticChronology.getInstanceUTC();
      GJChronology gJChronology0 = GJChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      gJChronology0.withUTC();
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 1);
      TimeOfDay timeOfDay0 = new TimeOfDay(100000000000L, (Chronology) copticChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.withSecondOfMinute(0);
      timeOfDay0.getFieldTypes();
      timeOfDay0.getMillisOfSecond();
      TimeOfDay timeOfDay2 = timeOfDay0.minusSeconds(1);
      int int0 = (-2234);
      timeOfDay1.plusMillis(int0);
      timeOfDay2.size();
      timeOfDay0.withChronologyRetainFields(copticChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      timeOfDay2.withFieldAdded(durationFieldType0, timeOfDay1.HOUR_OF_DAY);
      int int1 = 1771;
      TimeOfDay timeOfDay3 = timeOfDay1.minusMinutes(int1);
      int int2 = 3;
      timeOfDay3.plusMillis(int2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(3490L, (Chronology) iSOChronology0);
      Period period0 = new Period();
      uTCDateTimeZone0.getOffset((-3006L));
      TimeOfDay timeOfDay1 = timeOfDay0.plus(period0);
      TimeOfDay timeOfDay2 = timeOfDay1.plusMinutes(3);
      TimeOfDay timeOfDay3 = timeOfDay0.withChronologyRetainFields(iSOChronology0);
      timeOfDay1.toString();
      timeOfDay1.size();
      timeOfDay0.getMinuteOfHour();
      timeOfDay2.toString();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeOfDay3.MILLIS_OF_SECOND, timeOfDay0.MILLIS_OF_SECOND, timeOfDay3.MINUTE_OF_HOUR, timeOfDay2.MINUTE_OF_HOUR, timeOfDay1.HOUR_OF_DAY);
      TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      int int0 = 0;
      timeOfDay3.withSecondOfMinute(int0);
      timeOfDay0.getMillisOfSecond();
      timeOfDay1.plus(period0);
      timeOfDay3.getField(timeOfDay2.MILLIS_OF_SECOND, (Chronology) iSOChronology0);
      timeOfDay2.getHourOfDay();
      TimeOfDay timeOfDay4 = new TimeOfDay((DateTimeZone) uTCDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-23L), (Chronology) null);
      TimeOfDay timeOfDay1 = timeOfDay0.withPeriodAdded((ReadablePeriod) null, 1);
      timeOfDay0.getSecondOfMinute();
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay((-23L));
      timeOfDay0.getSecondOfMinute();
      DateTime dateTime0 = timeOfDay1.toDateTimeToday();
      timeOfDay0.MIDNIGHT.plusHours(2);
      int int0 = 1;
      timeOfDay2.plusMinutes(int0);
      Locale locale0 = Locale.UK;
      Calendar calendar0 = dateTime0.toCalendar(locale0);
      TimeOfDay.fromCalendarFields(calendar0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Chronology chronology0 = julianChronology0.withUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3084));
      julianChronology0.withZone(dateTimeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay(chronology0);
      chronology0.get((ReadablePartial) timeOfDay0, (long) (-3084));
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusSeconds(2);
      intArray0[3] = timeOfDay0.SECOND_OF_MINUTE;
      intArray0[2] = timeOfDay0.MINUTE_OF_HOUR;
      intArray0[3] = timeOfDay0.SECOND_OF_MINUTE;
      TimeOfDay timeOfDay2 = TimeOfDay.MIDNIGHT;
      int int0 = 114;
      TimeOfDay timeOfDay3 = timeOfDay2.withMillisOfSecond(int0);
      int int1 = 1996;
      TimeOfDay timeOfDay4 = timeOfDay3.plusHours(int1);
      TimeOfDay timeOfDay5 = timeOfDay0.minusMinutes(timeOfDay3.SECOND_OF_MINUTE);
      timeOfDay5.minusMillis(timeOfDay1.HOUR_OF_DAY);
      int int2 = 120;
      timeOfDay4.minusMinutes(int2);
      int int3 = (-4084);
      timeOfDay0.minusHours(int3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(344L);
      timeOfDay0.toLocalTime();
      timeOfDay0.toDateTimeToday();
      // Undeclared exception!
      timeOfDay0.minusMinutes(292272708);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(2858L, (Chronology) gJChronology0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      DateTimeUtils.setCurrentMillisFixed(2);
      intArray0[5] = 0;
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      timeOfDay0.toDateTimeToday(dateTimeZone0);
      timeOfDay1.getHourOfDay();
      timeOfDay1.getMillisOfSecond();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Chronology chronology0 = buddhistChronology0.withZone(dateTimeZone0);
      Period period0 = new Period((-1846L), 3);
      buddhistChronology0.get((ReadablePeriod) period0, (-3614L), (-1185L));
      // Undeclared exception!
      try { 
        timeOfDay1.getField((-957), chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -957
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      TimeOfDay timeOfDay0 = new TimeOfDay(2, 50);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W^gNYI");
      Period period0 = new Period(0, 50, 2, 2);
      timeOfDay0.toString();
      Seconds seconds0 = period0.toStandardSeconds();
      LocalTime localTime1 = localTime0.plus(seconds0);
      localTime1.minusHours((-6772));
      timeOfDay0.MIDNIGHT.compareTo((ReadablePartial) localTime1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      timeOfDay0.isSupported(dateTimeFieldType0);
      TimeOfDay timeOfDay1 = timeOfDay0.minusMillis(50);
      TimeOfDay timeOfDay2 = timeOfDay0.minus(period0);
      int int0 = timeOfDay2.MIDNIGHT.compareTo(localTime0);
      DateTimeFormatter dateTimeFormatter0 = null;
      timeOfDay2.toString(dateTimeFormatter0);
      long long0 = 2392L;
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int0);
      int int1 = 0;
      timeOfDay1.plusHours(int1);
      int int2 = 20587500;
      // Undeclared exception!
      timeOfDay2.minusHours(int2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Chronology chronology0 = julianChronology0.withUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3084));
      julianChronology0.withZone(dateTimeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay(chronology0);
      chronology0.get((ReadablePartial) timeOfDay0, (long) (-3084));
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      timeOfDay0.MIDNIGHT.plusSeconds(2);
      intArray0[3] = timeOfDay0.SECOND_OF_MINUTE;
      intArray0[2] = timeOfDay0.MINUTE_OF_HOUR;
      intArray0[3] = timeOfDay0.SECOND_OF_MINUTE;
      TimeOfDay timeOfDay1 = TimeOfDay.MIDNIGHT;
      TimeOfDay timeOfDay2 = new TimeOfDay(dateTimeZone0);
      int int0 = 1996;
      timeOfDay2.plusHours(int0);
      timeOfDay0.minusMinutes(timeOfDay2.SECOND_OF_MINUTE);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-23L));
      TimeOfDay timeOfDay1 = timeOfDay0.plusMinutes(1);
      Locale locale0 = Locale.UK;
      int int0 = (-3183);
      timeOfDay1.plusHours(int0);
      Locale.getISOLanguages();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      int int1 = 2137;
      // Undeclared exception!
      try { 
        timeOfDay0.withField(dateTimeFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2137 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(1L);
      Months months0 = Months.MIN_VALUE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3Bma0d}yX[_");
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withPeriodAdded(months0, 2);
      DateTimeUtils.setCurrentMillisFixed(3);
      timeOfDay1.compareTo((ReadablePartial) timeOfDay0);
      Months.monthsBetween((ReadablePartial) timeOfDay1, (ReadablePartial) timeOfDay0);
      Hours hours0 = Hours.MAX_VALUE;
      // Undeclared exception!
      timeOfDay0.minus(hours0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      timeOfDay0.MIDNIGHT.minusSeconds(28181250);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CopticChronology.getInstanceUTC();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
      TimeOfDay timeOfDay0 = new TimeOfDay(100000000000L, (Chronology) copticChronology0);
      timeOfDay0.getMillisOfSecond();
      TimeOfDay timeOfDay1 = timeOfDay0.minusSeconds(1);
      int int0 = (-2234);
      timeOfDay0.plusMillis(int0);
      timeOfDay1.size();
      TimeOfDay timeOfDay2 = timeOfDay0.withChronologyRetainFields(copticChronology0);
      int int1 = 1043;
      Days days0 = Days.days(int1);
      Minutes minutes0 = days0.toStandardMinutes();
      // Undeclared exception!
      timeOfDay2.plus(minutes0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      zoneInfoProvider0.getZone("d]J*^|I>:%Y'`5KI_<");
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) null);
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, (int[]) null);
      // Undeclared exception!
      try { 
        timeOfDay1.toLocalTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-23L), (Chronology) null);
      TimeOfDay timeOfDay1 = timeOfDay0.withPeriodAdded((ReadablePeriod) null, 1);
      timeOfDay0.getSecondOfMinute();
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay((-23L));
      timeOfDay0.getSecondOfMinute();
      timeOfDay1.toDateTimeToday();
      timeOfDay2.MIDNIGHT.minusHours(0);
      int int0 = 1;
      timeOfDay2.plusMinutes(int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 0, 43, 43, 991);
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      TimeOfDay timeOfDay1 = timeOfDay0.minusMinutes(0);
      int int0 = 824;
      timeOfDay1.plusHours(int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(0L);
      timeOfDay0.getValue(3);
      DateTimeUtils.setCurrentMillisSystem();
      timeOfDay0.toString();
      timeOfDay0.getSecondOfMinute();
      TimeOfDay timeOfDay1 = timeOfDay0.withHourOfDay(1);
      timeOfDay1.toString();
      TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(3);
      TimeOfDay timeOfDay3 = timeOfDay2.withSecondOfMinute(timeOfDay1.HOUR_OF_DAY);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      DateTimeZone.getNameProvider();
      Chronology chronology0 = strictChronology0.withZone(uTCDateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, uTCDateTimeZone0);
      DateTimeZone dateTimeZone0 = zonedChronology0.getZone();
      timeOfDay3.MIDNIGHT.toDateTimeToday(dateTimeZone0);
      Years years0 = Years.ONE;
      TimeOfDay timeOfDay4 = timeOfDay1.plus(years0);
      int int0 = (-3745);
      timeOfDay4.MIDNIGHT.minusMinutes(int0);
      timeOfDay4.getValue(timeOfDay2.MILLIS_OF_SECOND);
      long long0 = 0L;
      Chronology chronology1 = null;
      TimeOfDay timeOfDay5 = TimeOfDay.fromMillisOfDay(long0, chronology1);
      int int1 = 13;
      timeOfDay2.toDateTimeToday();
      TimeOfDay timeOfDay6 = timeOfDay5.MIDNIGHT.withHourOfDay(int1);
      int int2 = (-2168);
      timeOfDay6.plusMillis(int2);
      timeOfDay2.withSecondOfMinute(timeOfDay0.HOUR_OF_DAY);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Chronology chronology0 = null;
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-23L), (Chronology) null);
      TimeOfDay timeOfDay1 = timeOfDay0.withPeriodAdded((ReadablePeriod) null, 1);
      timeOfDay0.getSecondOfMinute();
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay((-23L));
      TimeOfDay timeOfDay3 = TimeOfDay.fromMillisOfDay((long) 1);
      timeOfDay3.MIDNIGHT.minusMillis(1);
      timeOfDay0.getSecondOfMinute();
      timeOfDay1.toDateTimeToday();
      int int0 = 1;
      TimeOfDay timeOfDay4 = timeOfDay2.plusMinutes(int0);
      // Undeclared exception!
      try { 
        timeOfDay4.getField(timeOfDay2.MILLIS_OF_SECOND, chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Chronology chronology0 = julianChronology0.withUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(chronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      timeOfDay0.MIDNIGHT.get(dateTimeFieldType0);
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 2;
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      // Undeclared exception!
      timeOfDay1.MIDNIGHT.minusMinutes(28265625);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-9223372036854775808L), (Chronology) ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      mockDate0.toInstant();
      mockDate0.getTime();
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      long long0 = 0L;
      timeOfDay0.MIDNIGHT.plusHours(59);
      mockDate0.setTime(long0);
      int int0 = (-3745);
      timeOfDay0.plusMillis(int0);
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      int int1 = 4;
      timeOfDay0.withFieldAdded(durationFieldType0, int1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(3490L, (Chronology) iSOChronology0);
      Period period0 = Period.ZERO;
      uTCDateTimeZone0.getOffset((-3006L));
      TimeOfDay timeOfDay1 = timeOfDay0.plus(period0);
      TimeOfDay timeOfDay2 = timeOfDay1.plusMinutes(3);
      TimeOfDay timeOfDay3 = timeOfDay0.withChronologyRetainFields(iSOChronology0);
      timeOfDay1.toString();
      timeOfDay1.size();
      timeOfDay0.getMinuteOfHour();
      timeOfDay2.toString();
      int int0 = 13;
      timeOfDay2.withSecondOfMinute(int0);
      int int1 = 1;
      int int2 = 3;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int2, timeOfDay2.MINUTE_OF_HOUR);
      TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      int int3 = 0;
      timeOfDay3.withSecondOfMinute(int3);
      timeOfDay0.MIDNIGHT.minusSeconds(timeOfDay3.HOUR_OF_DAY);
      timeOfDay0.getMillisOfSecond();
      int int4 = 2;
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(timeOfDay3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      long long0 = dateTimeZone0.convertUTCToLocal((-3846L));
      Chronology chronology0 = strictChronology0.withUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(41L, chronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.minusMillis(3);
      Minutes minutes0 = Minutes.TWO;
      TimeOfDay timeOfDay2 = timeOfDay1.minus(minutes0);
      long long1 = 0L;
      DateTimeUtils.setCurrentMillisFixed(long1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      TimeOfDay timeOfDay3 = timeOfDay2.withChronologyRetainFields(strictChronology0);
      timeOfDay0.indexOf(dateTimeFieldType0);
      minutes0.plus(timeOfDay1.HOUR_OF_DAY);
      int int0 = 3;
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      timeOfDay2.isAfter(localTime0);
      TimeOfDay timeOfDay4 = timeOfDay0.withMillisOfSecond(int0);
      int int1 = 1;
      copticChronology0.set(timeOfDay2, long0);
      TimeOfDay timeOfDay5 = timeOfDay4.plusSeconds(int1);
      TimeOfDay timeOfDay6 = timeOfDay0.minus(minutes0);
      timeOfDay4.plusSeconds(timeOfDay6.SECOND_OF_MINUTE);
      timeOfDay4.getSecondOfMinute();
      timeOfDay6.toString();
      timeOfDay5.toString();
      TimeOfDay timeOfDay7 = timeOfDay3.plusMinutes(timeOfDay4.SECOND_OF_MINUTE);
      timeOfDay4.plusHours(timeOfDay7.MILLIS_OF_SECOND);
      int int2 = 28265625;
      // Undeclared exception!
      try { 
        timeOfDay6.withHourOfDay(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 28265625 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("The date must not be null");
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) null);
      int[] intArray0 = new int[0];
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      ReadablePeriod readablePeriod0 = null;
      timeOfDay0.MIDNIGHT.plusMillis(0);
      timeOfDay1.plus(readablePeriod0);
      timeOfDay1.size();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "',0Q,aHu`*7T");
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      BuddhistChronology.getInstance();
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      Days days0 = Days.TWO;
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      // Undeclared exception!
      timeOfDay0.withPeriodAdded(minutes0, (-1461));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 28265625;
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.getFieldTypes();
      // Undeclared exception!
      timeOfDay0.plusMinutes(28265625);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      timeOfDay0.getHourOfDay();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(0L);
      int int0 = 3;
      timeOfDay0.getValue(3);
      DateTimeUtils.setCurrentMillisSystem();
      timeOfDay0.MIDNIGHT.getField(3);
      timeOfDay0.toString();
      timeOfDay0.getSecondOfMinute();
      TimeOfDay timeOfDay1 = timeOfDay0.withHourOfDay(1);
      // Undeclared exception!
      try { 
        timeOfDay1.MIDNIGHT.toString("T00:00:00.000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      mockDate0.toInstant();
      mockDate0.getTime();
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      long long0 = 0L;
      timeOfDay0.MIDNIGHT.plusHours(59);
      mockDate0.setTime(long0);
      int int0 = (-3745);
      timeOfDay0.plusMillis(int0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      int int1 = 4;
      // Undeclared exception!
      try { 
        timeOfDay0.withFieldAdded(durationFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weeks' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2358L), (DateTimeZone) uTCDateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0, (ReadableInstant) mutableDateTime0);
      TimeOfDay timeOfDay0 = new TimeOfDay((-2358L), (Chronology) gJChronology0);
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, (Chronology) gJChronology0);
      timeOfDay1.toString();
      timeOfDay1.getFieldTypes();
      int int0 = 2;
      Period period0 = Period.seconds(2);
      TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(11);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      Period period2 = period1.withYears(mutableDateTime0.ROUND_HALF_EVEN);
      period2.getYears();
      int int1 = 1;
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((DateTimeZone) uTCDateTimeZone0);
      period2.minusSeconds(int1);
      int int2 = 0;
      TimeOfDay timeOfDay3 = timeOfDay0.withPeriodAdded(period2, int2);
      timeOfDay3.minusSeconds(mutableDateTime1.ROUND_HALF_EVEN);
      TimeOfDay timeOfDay4 = TimeOfDay.fromMillisOfDay((long) timeOfDay2.SECOND_OF_MINUTE, (Chronology) gJChronology0);
      timeOfDay4.minusMillis(timeOfDay1.MILLIS_OF_SECOND);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1000L);
      timeOfDay0.MIDNIGHT.plusSeconds(0);
      Date date0 = null;
      // Undeclared exception!
      try { 
        TimeOfDay.fromDateFields(date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Locale.setDefault(locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(calendar0);
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      zoneInfoProvider0.getZone("");
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      // Undeclared exception!
      try { 
        timeOfDay0.getField(775, (Chronology) ethiopicChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 775
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone1);
      // Undeclared exception!
      try { 
        timeOfDay0.withSecondOfMinute(3784);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3784 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-23L), (Chronology) null);
      TimeOfDay timeOfDay1 = timeOfDay0.withPeriodAdded((ReadablePeriod) null, 1);
      timeOfDay0.getSecondOfMinute();
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay((-23L));
      timeOfDay0.getSecondOfMinute();
      timeOfDay1.toDateTimeToday();
      timeOfDay2.plusMinutes(1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      TimeOfDay.fromMillisOfDay(0L);
      timeOfDay0.MIDNIGHT.minusMillis(14);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      ReadablePeriod readablePeriod0 = null;
      TimeOfDay timeOfDay1 = timeOfDay0.minus(readablePeriod0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Chronology chronology0 = gregorianChronology0.withUTC();
      TimeOfDay.fromMillisOfDay((long) timeOfDay1.MINUTE_OF_HOUR, chronology0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(3490L, (Chronology) iSOChronology0);
      Period period0 = Period.ZERO;
      uTCDateTimeZone0.getOffset((-3006L));
      TimeOfDay timeOfDay1 = timeOfDay0.plus(period0);
      TimeOfDay timeOfDay2 = timeOfDay1.plusMinutes(3);
      TimeOfDay timeOfDay3 = timeOfDay0.withChronologyRetainFields(iSOChronology0);
      timeOfDay1.toString();
      timeOfDay1.size();
      timeOfDay0.getMinuteOfHour();
      timeOfDay2.toString();
      int int0 = 1;
      int int1 = 3;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, timeOfDay2.MINUTE_OF_HOUR);
      TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      int int2 = 0;
      timeOfDay3.withSecondOfMinute(int2);
      timeOfDay0.getMillisOfSecond();
      int int3 = 2;
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(timeOfDay3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(119L);
      Locale locale0 = Locale.CANADA_FRENCH;
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.multipliedBy((-1204L));
      Period period0 = duration1.toPeriodTo((ReadableInstant) null);
      duration0.toString();
      Period period1 = period0.minusDays(1);
      Period period2 = period1.withWeeks(1);
      TimeOfDay timeOfDay1 = timeOfDay0.plus(period2);
      period2.withMonths(0);
      TimeOfDay timeOfDay2 = timeOfDay0.minusMinutes(0);
      String string0 = null;
      timeOfDay2.MIDNIGHT.toString(string0);
      int int0 = (-2665);
      // Undeclared exception!
      try { 
        timeOfDay1.withSecondOfMinute(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2665 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(10, 10);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = gregorianChronology0.withUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(10, 10, 10, 10, chronology0);
      Period period0 = new Period(10, 1);
      TimeOfDay timeOfDay1 = timeOfDay0.plus(period0);
      DateTimeUtils.setCurrentMillisFixed(1);
      timeOfDay1.minus(period0);
      period0.getMonths();
      GregorianChronology.getInstance(dateTimeZone0);
      timeOfDay1.toString((DateTimeFormatter) null);
      timeOfDay1.withMillisOfSecond(2);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      // Undeclared exception!
      try { 
        timeOfDay1.withField(dateTimeFieldType0, 1154);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyearOfCentury' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Chronology chronology0 = copticChronology0.withUTC();
      TimeOfDay timeOfDay1 = timeOfDay0.withChronologyRetainFields(chronology0);
      timeOfDay1.isAfter(timeOfDay0);
      TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(1);
      Period period0 = new Period((long) timeOfDay0.HOUR_OF_DAY, (Chronology) copticChronology0);
      timeOfDay2.plus(period0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      DateTimeUtils.setCurrentMillisFixed((-250L));
      TimeOfDay timeOfDay1 = timeOfDay0.withSecondOfMinute(3);
      DateTimeUtils.setCurrentMillisFixed(1235L);
      TimeOfDay timeOfDay2 = timeOfDay1.plusSeconds((-308));
      TimeOfDay timeOfDay3 = timeOfDay2.withHourOfDay(timeOfDay1.MINUTE_OF_HOUR);
      int int0 = 0;
      int int1 = 12;
      int int2 = 1;
      Chronology chronology0 = null;
      int int3 = (-1420);
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(timeOfDay3.HOUR_OF_DAY, timeOfDay2.HOUR_OF_DAY, int3, timeOfDay1.HOUR_OF_DAY, timeOfDay0.HOUR_OF_DAY, int3, timeOfDay2.MINUTE_OF_HOUR);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1420 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(259200000L);
      int[] intArray0 = new int[0];
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      // Undeclared exception!
      try { 
        timeOfDay1.withHourOfDay(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      EthiopicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Chronology chronology0 = ethiopicChronology0.withZone(uTCDateTimeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0, 0, chronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      int int1 = 553;
      TimeOfDay timeOfDay1 = timeOfDay0.withFieldAdded(durationFieldType0, 553);
      int int2 = timeOfDay0.getSecondOfMinute();
      int int3 = 2874;
      timeOfDay0.plusMinutes(int3);
      Duration duration0 = Duration.standardHours(int2);
      Duration duration1 = duration0.dividedBy((long) timeOfDay1.MILLIS_OF_SECOND);
      duration1.minus((ReadableDuration) duration0);
      int int4 = 3;
      int int5 = 581;
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(int0, int1, timeOfDay1.MINUTE_OF_HOUR, int4, ethiopicChronology0.EE, int5, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 581 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      TimeOfDay timeOfDay0 = new TimeOfDay((-465L), (Chronology) copticChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) copticChronology0);
      PeriodType periodType0 = PeriodType.hours();
      PeriodType.days();
      Period period0 = new Period(timeOfDay0, timeOfDay0, periodType0);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) period0);
      localDateTime1.plus((ReadablePeriod) period0);
      PeriodType.yearWeekDay();
      Date date0 = localDateTime1.toDate();
      TimeOfDay timeOfDay1 = TimeOfDay.fromDateFields(date0);
      TimeOfDay timeOfDay2 = timeOfDay1.plusMinutes((-167));
      int int0 = (-366);
      // Undeclared exception!
      try { 
        timeOfDay2.withHourOfDay(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -366 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1000;
      intArray0[1] = (-710);
      intArray0[2] = 606;
      intArray0[3] = 528;
      intArray0[4] = (-715);
      intArray0[5] = 261;
      intArray0[6] = 278;
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((TimeOfDay) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      TimeOfDay timeOfDay1 = new TimeOfDay(3, 3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.plusMillis((-3413));
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      timeOfDay0.toLocalTime();
      int int0 = 1854;
      // Undeclared exception!
      try { 
        timeOfDay0.withHourOfDay(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1854 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 1199;
      String string0 = "~c`Okzp_'f3GX|";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1199, "~c`Okzp_'f3GX|");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(calendar0);
      // Undeclared exception!
      try { 
        timeOfDay0.withMillisOfSecond(2000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2000 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-1L), chronology0);
      // Undeclared exception!
      timeOfDay0.plusSeconds(20587500);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) strictChronology0);
      timeOfDay0.MIDNIGHT.toString();
      timeOfDay0.getSecondOfMinute();
      timeOfDay0.toLocalTime();
      PeriodType periodType0 = PeriodType.time();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1706L), periodType0);
      Minutes minutes0 = Minutes.standardMinutesIn(mutablePeriod0);
      mutablePeriod0.add((ReadablePeriod) minutes0);
      DurationFieldType durationFieldType0 = mutablePeriod0.getFieldType(3);
      TimeOfDay timeOfDay1 = timeOfDay0.withFieldAdded(durationFieldType0, 1);
      timeOfDay0.size();
      int int0 = 2;
      timeOfDay1.compareTo((ReadablePartial) timeOfDay0);
      timeOfDay0.getFieldType(int0);
      int int1 = (-914);
      // Undeclared exception!
      try { 
        timeOfDay1.getFieldType(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-300L), (Chronology) julianChronology0);
      timeOfDay0.toLocalTime();
      TimeOfDay timeOfDay1 = timeOfDay0.withMinuteOfHour(51);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("~b-G%CZ'yq|R$#C\"ki");
      DateTimeZone.getDefault();
      timeOfDay0.toDateTimeToday((DateTimeZone) null);
      Period period0 = Period.ZERO;
      Period period1 = period0.toPeriod();
      Weeks weeks0 = period1.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      timeOfDay1.withPeriodAdded(hours0, 51);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      mockDate0.toInstant();
      mockDate0.getTime();
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      mockDate0.setTime(0L);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      // Undeclared exception!
      try { 
        timeOfDay0.MIDNIGHT.withFieldAdded(durationFieldType0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'years' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 3, 3);
      TimeOfDay timeOfDay1 = TimeOfDay.fromMillisOfDay((long) 2);
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay((long) 3);
      timeOfDay0.getHourOfDay();
      timeOfDay1.MIDNIGHT.equals(timeOfDay0);
      timeOfDay2.getMillisOfSecond();
      MockDate mockDate0 = new MockDate();
      TimeOfDay timeOfDay3 = TimeOfDay.fromDateFields(mockDate0);
      UTCProvider uTCProvider0 = new UTCProvider();
      String string0 = "";
      uTCProvider0.getZone("");
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      Chronology chronology0 = julianChronology0.withZone((DateTimeZone) null);
      TimeOfDay timeOfDay4 = timeOfDay3.withChronologyRetainFields(chronology0);
      timeOfDay2.withMillisOfSecond(3);
      timeOfDay4.minusSeconds(0);
      int int0 = (-3033);
      int int1 = (-2460);
      int int2 = 1159;
      int int3 = 7;
      Locale locale0 = Locale.PRC;
      try { 
        timeOfDay0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification: Pattern is null or empty
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = null;
      Chronology chronology0 = julianChronology0.withZone((DateTimeZone) null);
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((TimeOfDay) null, chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(17);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone1);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 17;
      intArray0[4] = 2;
      intArray0[5] = 0;
      intArray0[6] = 17;
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      timeOfDay1.minusMillis(17);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 2814);
      mockGregorianCalendar0.set(0, 11, 0, 11, 0, 0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      timeOfDay0.getFields();
      TimeOfDay timeOfDay1 = TimeOfDay.fromMillisOfDay((-2684L));
      timeOfDay1.withHourOfDay(0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      int int0 = 1454;
      // Undeclared exception!
      try { 
        timeOfDay0.withHourOfDay(1454);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1454 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(2, 4, 2);
      timeOfDay0.getMinuteOfHour();
      Object object0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      timeOfDay0.MIDNIGHT.withField(dateTimeFieldType0, 3);
      PeriodType periodType0 = null;
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimePrinter0).estimatePrintedLength();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(islamicChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo((StringBuilder) null, (ReadablePartial) timeOfDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimePrinterInternalPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeOfDay.fromMillisOfDay((-517L));
      DateTimeUtils.setCurrentMillisOffset(3);
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((long) 3);
      timeOfDay0.getFieldTypes();
      TimeOfDay timeOfDay1 = timeOfDay0.minusMinutes(2);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.eras();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      timeOfDay1.MIDNIGHT.withField(dateTimeFieldType1, timeOfDay1.SECOND_OF_MINUTE);
      int int0 = 711;
      timeOfDay0.minusSeconds(int0);
      Object object0 = null;
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay((long) timeOfDay1.MILLIS_OF_SECOND);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(timeOfDay2, timeOfDay0, periodType0);
      long long0 = (-301L);
      Duration duration0 = Duration.standardSeconds(long0);
      Period period1 = duration0.toPeriod((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.minus(period1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 11, 11);
      // Undeclared exception!
      try { 
        timeOfDay0.getField((-2372), (Chronology) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2372
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(726L);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withMillisOfSecond(2);
      TimeOfDay timeOfDay2 = timeOfDay0.minusSeconds(480);
      timeOfDay2.compareTo((ReadablePartial) timeOfDay1);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      TimeOfDay.fromMillisOfDay((long) timeOfDay2.HOUR_OF_DAY, (Chronology) copticChronology0);
      Months months0 = Months.ONE;
      // Undeclared exception!
      try { 
        Seconds.standardSecondsIn(months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P1M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 2;
      int int1 = (-2284);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(2, 2, (-2284), iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2284 for secondOfMinute must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Chronology chronology0 = null;
      TimeOfDay timeOfDay0 = new TimeOfDay(9223372036854775807L, (Chronology) null);
      timeOfDay0.getMinuteOfHour();
      // Undeclared exception!
      try { 
        timeOfDay0.getFieldType(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      timeOfDay0.getMillisOfSecond();
      ReadablePeriod readablePeriod0 = null;
      timeOfDay0.MIDNIGHT.getValue(2);
      timeOfDay0.withPeriodAdded((ReadablePeriod) null, 580);
      timeOfDay0.getMillisOfSecond();
      Date date0 = null;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 2);
      try { 
        gJChronology0.getDateTimeMillis((long) 3, 774, 0, (-2106), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 774 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      gJChronology0.withUTC();
      Chronology chronology0 = copticChronology0.withZone(dateTimeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay(100000000000L, chronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.withSecondOfMinute(4);
      timeOfDay0.getFieldTypes();
      timeOfDay0.getMillisOfSecond();
      TimeOfDay timeOfDay2 = timeOfDay0.minusSeconds(1);
      int int0 = (-2234);
      timeOfDay1.plusMillis(int0);
      timeOfDay2.size();
      timeOfDay0.withChronologyRetainFields(chronology0);
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        MockCalendar.getInstance(timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay("org.joda.time.TimeOfDay$Property", ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.TimeOfDay$Property\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = ethiopicChronology0.withZone(dateTimeZone0);
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(2454, 2, 2, 2454, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2454 for hourOfDay must not be larger than 23
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      // Undeclared exception!
      timeOfDay0.minusMillis(20503125);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("The date must not be null");
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) null);
      int[] intArray0 = new int[0];
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      timeOfDay1.plus((ReadablePeriod) null);
      timeOfDay1.size();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      LocalTime localTime0 = timeOfDay0.toLocalTime();
      timeOfDay0.toString();
      TimeOfDay timeOfDay1 = timeOfDay0.minusMinutes(2);
      int int0 = 0;
      int int1 = 2;
      timeOfDay1.MIDNIGHT.compareTo(localTime0);
      int int2 = 2;
      int int3 = (-2145);
      int int4 = 2037;
      int int5 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int1, int2, timeOfDay1.MINUTE_OF_HOUR, int3, int0, int4, int5);
      timeOfDay1.minus(mutablePeriod0);
      int int6 = 1;
      TimeOfDay timeOfDay2 = timeOfDay1.minusHours(int6);
      timeOfDay1.toLocalTime();
      timeOfDay2.getMinuteOfHour();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gJChronology0);
      Days days0 = Days.daysIn((ReadableInterval) null);
      timeOfDay0.minus(days0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-1482);
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-1482), (-1482), (-3615));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1482 for hourOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-821));
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = copticChronology0.withUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(chronology0);
      timeOfDay0.getFieldTypes();
      int int0 = 1;
      TimeOfDay timeOfDay1 = timeOfDay0.minusMillis(1);
      int int1 = (-111);
      int int2 = 1;
      int int3 = (-2047);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(int1, timeOfDay0.MILLIS_OF_SECOND, timeOfDay0.MILLIS_OF_SECOND, int2, int3, timeOfDay1.HOUR_OF_DAY, timeOfDay1.MINUTE_OF_HOUR, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2047 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(1000L);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusSeconds(0);
      TimeOfDay timeOfDay2 = new TimeOfDay(timeOfDay0.SECOND_OF_MINUTE, timeOfDay0.MILLIS_OF_SECOND, timeOfDay1.SECOND_OF_MINUTE, timeOfDay1.SECOND_OF_MINUTE);
      timeOfDay1.getMinuteOfHour();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((-1988L));
      TimeOfDay.fromMillisOfDay(439L);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.plusMillis(2);
      timeOfDay0.getMillisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      int int0 = 653;
      // Undeclared exception!
      try { 
        timeOfDay0.withField(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekOfWeekyear' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-2740L), (Chronology) gregorianChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.years();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      // Undeclared exception!
      try { 
        timeOfDay0.MIDNIGHT.withField(dateTimeFieldType1, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyear' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      Date date0 = localDateTime0.toDate(timeZone0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(date0);
      timeOfDay0.MIDNIGHT.plusMillis(3);
      int int0 = 2;
      timeOfDay0.withMillisOfSecond(int0);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Locale locale0 = new Locale(uTCDateTimeZone0.DEFAULT_TZ_DATA_PATH);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String string0 = "FMPjbD?e4 ";
      // Undeclared exception!
      try { 
        timeOfDay0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Chronology chronology0 = julianChronology0.withUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(chronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 2;
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      timeOfDay1.withMillisOfSecond(116);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) gJChronology0);
      Hours hours0 = Hours.TWO;
      Weeks weeks0 = Weeks.standardWeeksIn(hours0);
      yearMonth0.plus(weeks0);
      gJChronology0.get((ReadablePartial) yearMonth0, 2551440384L);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) null, gregorianChronology0);
      gJChronology0.withUTC();
      // Undeclared exception!
      try { 
        timeOfDay0.getValue((-482));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1L);
      int int0 = 1000;
      timeOfDay0.minusHours(1000);
      timeOfDay0.plusMillis(int0);
      int int1 = 2872;
      // Undeclared exception!
      try { 
        timeOfDay0.withMinuteOfHour(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2872 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      timeOfDay0.MIDNIGHT.toString();
      TimeOfDay timeOfDay1 = timeOfDay0.plusSeconds((-2980));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay((long) timeOfDay0.MINUTE_OF_HOUR, (Chronology) buddhistChronology0);
      timeOfDay1.plusMillis(timeOfDay2.SECOND_OF_MINUTE);
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(timeOfDay2.HOUR_OF_DAY, string0);
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(4262L);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withMinuteOfHour(0);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      timeOfDay0.getField(1, (Chronology) iSOChronology0);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("org.joda.time.Partial$Property");
      timeOfDay1.toDateTimeToday((DateTimeZone) null);
      // Undeclared exception!
      try { 
        Minutes.parseMinutes("org.joda.time.Partial$Property");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.Partial$Property\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) islamicChronology0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      timeOfDay0.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      timeOfDay0.getField(3, (Chronology) islamicChronology0);
      Years years0 = Years.yearsBetween((ReadablePartial) timeOfDay0, (ReadablePartial) timeOfDay0);
      PeriodType periodType0 = years0.getPeriodType();
      IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      timeOfDay0.withPeriodAdded(mutablePeriod0, 1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1000L);
      timeOfDay0.getMinuteOfHour();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-63), 719527, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -63 for hourOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 2688;
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(2688, 1917, 2031, 1098);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2688 for hourOfDay must not be larger than 23
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = (-2479);
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-2479), (-2479));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2479 for hourOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 0;
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      uTCDateTimeZone0.convertLocalToUTC(0L, false);
      Instant instant0 = new Instant();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0, (ReadableInstant) instant0);
      Chronology chronology0 = gJChronology0.withUTC();
      gJChronology0.getDateTimeMillis((long) 0, 0, 0, 0, 0);
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0, chronology0);
      // Undeclared exception!
      try { 
        timeOfDay0.toString("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(0L, (Chronology) iSOChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withSecondOfMinute(0);
      timeOfDay0.toLocalTime();
      timeOfDay1.MIDNIGHT.minusHours((-662));
      int int0 = (-51);
      timeOfDay1.minusHours(int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      Chronology chronology0 = islamicChronology0.withUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(1106L, chronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.withMinuteOfHour(1);
      timeOfDay1.plusSeconds(1);
      int int0 = 1;
      timeOfDay0.plusHours(int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      // Undeclared exception!
      try { 
        timeOfDay0.withMinuteOfHour(1267);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1267 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.getMinuteOfHour();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusSeconds(0);
      timeOfDay1.toDateTimeToday();
      timeOfDay0.size();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-3024L));
      timeOfDay0.minusHours(269);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = new Object();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(12, 12);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) julianChronology0);
      Duration duration0 = new Duration(0L);
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, duration0);
      Hours hours0 = Hours.hoursIn(mutableInterval0);
      Days days0 = Days.standardDaysIn(hours0);
      timeOfDay0.minus(days0);
      // Undeclared exception!
      try { 
        timeOfDay0.MIDNIGHT.getField(2, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      int int1 = (-2276);
      Chronology chronology0 = null;
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(1, (-2276), (-2276), (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2276 for minuteOfHour must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(1, (-1534), copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1534 for minuteOfHour must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Date date0 = null;
      DurationFieldType.millis();
      // Undeclared exception!
      try { 
        TimeOfDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TimeOfDay timeOfDay0 = new TimeOfDay(24L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, (Chronology) buddhistChronology0);
      int int0 = 0;
      TimeOfDay timeOfDay2 = timeOfDay1.minusMinutes(4);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      timeOfDay2.MIDNIGHT.withField(dateTimeFieldType0, timeOfDay2.MILLIS_OF_SECOND);
      BuddhistChronology.getInstance();
      TimeOfDay timeOfDay3 = timeOfDay1.withHourOfDay(int0);
      timeOfDay0.toDateTimeToday();
      Days days0 = Days.THREE;
      PeriodType periodType0 = days0.getPeriodType();
      // Undeclared exception!
      try { 
        periodType0.getFieldType(timeOfDay3.MILLIS_OF_SECOND);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(2, 2, 2);
      timeOfDay0.plusSeconds(3284);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Instant instant0 = new Instant(9223372036854775807L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = instant0.toDateTime(dateTimeZone0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Date date0 = dateTime0.toDate();
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(date0);
      timeOfDay0.getHourOfDay();
      timeOfDay0.toString();
      TimeOfDay timeOfDay1 = timeOfDay0.plusMinutes(1054);
      int int0 = 6367;
      // Undeclared exception!
      try { 
        timeOfDay1.getField(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 6367
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-23L), (Chronology) null);
      TimeOfDay timeOfDay1 = timeOfDay0.withPeriodAdded((ReadablePeriod) null, 1);
      timeOfDay0.getSecondOfMinute();
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay((-23L));
      timeOfDay0.getSecondOfMinute();
      DateTime dateTime0 = timeOfDay1.toDateTimeToday();
      timeOfDay0.MIDNIGHT.plusHours(2);
      int int0 = 1;
      TimeOfDay timeOfDay3 = timeOfDay2.plusMinutes(int0);
      Locale locale0 = Locale.UK;
      int int1 = (-3183);
      timeOfDay3.plusHours(int1);
      Calendar calendar0 = dateTime0.toCalendar(locale0);
      TimeOfDay.fromCalendarFields(calendar0);
      timeOfDay1.minusHours(timeOfDay3.MILLIS_OF_SECOND);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(3490L, (Chronology) iSOChronology0);
      Period period0 = Period.ZERO;
      uTCDateTimeZone0.getOffset((-3006L));
      TimeOfDay timeOfDay1 = timeOfDay0.plus(period0);
      TimeOfDay timeOfDay2 = timeOfDay1.plusMinutes(3);
      TimeOfDay timeOfDay3 = timeOfDay0.withChronologyRetainFields(iSOChronology0);
      timeOfDay1.toString();
      timeOfDay1.size();
      timeOfDay0.getMinuteOfHour();
      timeOfDay2.toString();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeOfDay3.MILLIS_OF_SECOND, timeOfDay0.MILLIS_OF_SECOND, timeOfDay3.MINUTE_OF_HOUR, timeOfDay2.MINUTE_OF_HOUR, timeOfDay1.HOUR_OF_DAY);
      TimeOfDay timeOfDay4 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      int int0 = 0;
      TimeOfDay timeOfDay5 = timeOfDay3.withSecondOfMinute(int0);
      assertEquals(0, timeOfDay5.getSecondOfMinute());
      
      int int1 = timeOfDay0.getMillisOfSecond();
      assertEquals(490, int1);
      
      int int2 = 2;
      timeOfDay1.plus(period0);
      timeOfDay3.getField(int2, (Chronology) iSOChronology0);
      timeOfDay2.getHourOfDay();
      TimeOfDay timeOfDay6 = timeOfDay4.withHourOfDay(timeOfDay2.MILLIS_OF_SECOND);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0, islamicChronology_LeapYearPatternType0);
      Chronology chronology0 = islamicChronology0.withUTC();
      TimeOfDay timeOfDay7 = timeOfDay6.withChronologyRetainFields(chronology0);
      assertEquals(3, timeOfDay7.getHourOfDay());
      assertEquals(3, timeOfDay2.getMinuteOfHour());
      assertEquals(0, timeOfDay7.getMinuteOfHour());
      assertEquals(0, timeOfDay7.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Chronology chronology0 = julianChronology0.withUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3084));
      julianChronology0.withZone(dateTimeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay(chronology0);
      chronology0.get((ReadablePartial) timeOfDay0, (long) (-3084));
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusSeconds(2);
      intArray0[3] = timeOfDay0.SECOND_OF_MINUTE;
      intArray0[2] = timeOfDay0.MINUTE_OF_HOUR;
      intArray0[3] = timeOfDay0.SECOND_OF_MINUTE;
      TimeOfDay timeOfDay2 = TimeOfDay.MIDNIGHT;
      int int0 = 116;
      TimeOfDay timeOfDay3 = timeOfDay2.withMillisOfSecond(int0);
      int int1 = 1996;
      TimeOfDay timeOfDay4 = timeOfDay3.plusHours(int1);
      TimeOfDay timeOfDay5 = timeOfDay0.minusMinutes(timeOfDay3.SECOND_OF_MINUTE);
      assertEquals(4, timeOfDay0.size());
      
      TimeOfDay timeOfDay6 = timeOfDay5.minusMillis(timeOfDay1.HOUR_OF_DAY);
      assertEquals(2, timeOfDay1.getSecondOfMinute());
      assertSame(timeOfDay6, timeOfDay5);
      
      int int2 = 120;
      TimeOfDay timeOfDay7 = timeOfDay4.minusMinutes(int2);
      assertEquals(2, timeOfDay7.getHourOfDay());
      assertEquals(116, timeOfDay3.getMillisOfSecond());
      assertEquals(0, timeOfDay7.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      int int0 = 3;
      timeOfDay0.getValue(3);
      DateTimeUtils.setCurrentMillisSystem();
      timeOfDay0.MIDNIGHT.getField(3);
      timeOfDay0.toString();
      timeOfDay0.getSecondOfMinute();
      TimeOfDay timeOfDay1 = timeOfDay0.withHourOfDay(1);
      // Undeclared exception!
      try { 
        timeOfDay1.MIDNIGHT.toString("T20:21:21.320");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        TimeOfDay.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((-1308L));
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 1;
      intArray0[5] = 2;
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      Object object0 = new Object();
      DateTime dateTime0 = new DateTime((long) 0);
      Duration duration0 = Duration.standardHours(1);
      Duration duration1 = new Duration((-1924L));
      Duration duration2 = duration0.withDurationAdded((ReadableDuration) duration1, 950);
      dateTime0.plus((ReadableDuration) duration2);
      String string0 = "_*CwIx^]W'~TVR";
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      duration0.withDurationAdded((ReadableDuration) duration1, 1);
      int int0 = (-23);
      // Undeclared exception!
      try { 
        timeOfDay1.withMinuteOfHour(2547);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2547 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      gJChronology0.withUTC();
      Chronology chronology0 = copticChronology0.withZone(dateTimeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay(99999999957L, chronology0);
      Period period0 = Period.hours(1);
      gJChronology0.get((ReadablePeriod) period0, (long) 1);
      timeOfDay0.getFieldTypes();
      timeOfDay0.getMillisOfSecond();
      timeOfDay0.minusSeconds(957);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      int int0 = (-2234);
      timeOfDay0.plusMillis(int0);
      timeOfDay0.size();
      TimeOfDay timeOfDay1 = timeOfDay0.withChronologyRetainFields(chronology0);
      timeOfDay1.MIDNIGHT.toLocalTime();
      timeOfDay0.toDateTimeToday(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      // Undeclared exception!
      try { 
        timeOfDay0.withField(dateTimeFieldType0, timeOfDay0.SECOND_OF_MINUTE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }
}
