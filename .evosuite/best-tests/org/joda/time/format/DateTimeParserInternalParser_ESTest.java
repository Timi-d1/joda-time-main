/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 23:18:02 GMT 2025
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeFieldType;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimeParserInternalParser;
import org.joda.time.format.InternalParser;
import org.joda.time.format.InternalParserDateTimeParser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeParserInternalParser_ESTest extends DateTimeParserInternalParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      Locale locale0 = Locale.CANADA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2393), lenientChronology0, locale0, (Integer) islamicChronology0.AH, (-41));
      int int0 = internalParser0.parseInto(dateTimeParserBucket0, "mlsZ<", (-3109));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-41)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      Locale locale0 = Locale.CANADA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2393), lenientChronology0, locale0, (Integer) islamicChronology0.AH, (-41));
      int int0 = internalParser0.parseInto(dateTimeParserBucket0, "mlsZ<", (-3109));
      assertEquals((-41), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).estimateParsedLength();
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      int int0 = internalParser0.estimateParsedLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn("Xa6!'nc@ZI").when(dateTimeParser0).toString();
      doReturn(0).when(dateTimeParser0).estimateParsedLength();
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      DateTimeParser dateTimeParser1 = InternalParserDateTimeParser.of(internalParser0);
      DateTimeParserInternalParser.of(dateTimeParser1);
      DateTimeParserInternalParser.of(dateTimeParser1);
      InternalParser internalParser1 = DateTimeParserInternalParser.of(dateTimeParser1);
      int int0 = internalParser1.estimateParsedLength();
      assertEquals(25650000, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Locale locale0 = Locale.JAPANESE;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, islamicChronology0, locale0, (Integer) islamicChronology0.AH, 783);
      // Undeclared exception!
      try { 
        internalParser0.parseInto(dateTimeParserBucket0, (CharSequence) null, 2905);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserInternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-991), true);
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TwoDigitYear0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      Locale locale0 = Locale.CANADA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2393), lenientChronology0, locale0, (Integer) islamicChronology0.AH, (-41));
      // Undeclared exception!
      try { 
        internalParserDateTimeParser0.parseInto(dateTimeParserBucket0, "mlsZ<", (-3109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-991), true);
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        ((DateTimeParserInternalParser) internalParserDateTimeParser0).getUnderlying();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-41)).when(dateTimeParser0).estimateParsedLength();
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      int int0 = internalParser0.estimateParsedLength();
      assertEquals((-41), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InternalParser internalParser0 = DateTimeParserInternalParser.of((DateTimeParser) null);
      assertNull(internalParser0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InternalParser[] internalParserArray0 = new InternalParser[4];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_MatchingParser0);
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      assertSame(dateTimeParser0, internalParser0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      Locale locale0 = Locale.CANADA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2393), lenientChronology0, locale0, (Integer) islamicChronology0.AH, (-41));
      int int0 = internalParser0.parseInto(dateTimeParserBucket0, "mlsZ<", (-3109));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeParser0).toString();
      DateTimeParserInternalParser dateTimeParserInternalParser0 = (DateTimeParserInternalParser)DateTimeParserInternalParser.of(dateTimeParser0);
      DateTimeParser dateTimeParser1 = dateTimeParserInternalParser0.getUnderlying();
      assertEquals((-41), dateTimeParser1.estimateParsedLength());
  }
}
