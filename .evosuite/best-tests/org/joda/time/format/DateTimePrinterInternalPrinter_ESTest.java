/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 22:23:43 GMT 2025
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.PipedOutputStream;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.MonthDay;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.DateTimePrinterInternalPrinter;
import org.joda.time.format.InternalPrinter;
import org.joda.time.format.InternalPrinterDateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimePrinterInternalPrinter_ESTest extends DateTimePrinterInternalPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn("MonthOfYear: ").when(dateTimePrinter0).toString();
      DateTimePrinterInternalPrinter dateTimePrinterInternalPrinter0 = (DateTimePrinterInternalPrinter)DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      DateTimePrinter dateTimePrinter1 = dateTimePrinterInternalPrinter0.getUnderlying();
      assertSame(dateTimePrinter1, dateTimePrinter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      assertEquals(0, internalPrinter0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimePrinter0).toString();
      doReturn((-897)).when(dateTimePrinter0).estimatePrintedLength();
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      DateTimePrinter dateTimePrinter1 = InternalPrinterDateTimePrinter.of(internalPrinter0);
      DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      InternalPrinter internalPrinter1 = DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      int int0 = internalPrinter1.estimatePrintedLength();
      assertEquals(1919, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn("org.joda.time.format.DateTimeParserBucket$SavedState").when(dateTimePrinter0).toString();
      doReturn((-4654)).when(dateTimePrinter0).estimatePrintedLength();
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      DateTimePrinter dateTimePrinter1 = InternalPrinterDateTimePrinter.of(internalPrinter0);
      InternalPrinter internalPrinter1 = DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(internalPrinter0, dateTimeFormatterBuilder_StringLiteral0);
      MonthDay monthDay0 = MonthDay.parse("", dateTimeFormatter0);
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        internalPrinter1.printTo((Appendable) null, (ReadablePartial) monthDay0, locale0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn((-4654)).when(dateTimePrinter0).estimatePrintedLength();
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.forLanguageTag("(,Ir");
      // Undeclared exception!
      try { 
        internalPrinter0.printTo((Appendable) null, 100000000L, (Chronology) ethiopicChronology0, 1, dateTimeZone0, locale0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn((-897)).when(dateTimePrinter0).estimatePrintedLength();
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      int int0 = internalPrinter0.estimatePrintedLength();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      LocalDate localDate0 = new LocalDate((Chronology) strictChronology0);
      Locale locale0 = Locale.KOREA;
      internalPrinter0.printTo((Appendable) mockPrintWriter0, (ReadablePartial) localDate0, locale0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      LocalDate localDate0 = new LocalDate((Chronology) strictChronology0);
      Locale locale0 = Locale.KOREA;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.DateTimeParserBucket$SavedState");
      internalPrinter0.printTo((Appendable) stringBuffer0, (ReadablePartial) localDate0, locale0);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Locale locale0 = Locale.CANADA_FRENCH;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hBM=V");
      internalPrinter0.printTo((Appendable) mockPrintWriter0, (long) 1900, (Chronology) copticChronology0, 1900, dateTimeZone0, locale0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<y&o=_]LHQ~.^FL2Cv");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      internalPrinter0.printTo((Appendable) stringBuffer0, (long) 81, (Chronology) iSOChronology0, 81, dateTimeZone0, locale0);
      assertEquals(19, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimePrinter0).estimatePrintedLength();
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      StringBuilder stringBuilder0 = new StringBuilder("`hDBM=V");
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Locale locale0 = Locale.CANADA_FRENCH;
      internalPrinter0.printTo((Appendable) stringBuilder0, (long) (-1), (Chronology) copticChronology0, (-998), dateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of((DateTimePrinter) null);
      assertNull(internalPrinter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1), false);
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TwoDigitYear0);
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      assertSame(dateTimePrinter0, internalPrinter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn((-4654)).when(dateTimePrinter0).estimatePrintedLength();
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      LocalDate localDate0 = new LocalDate((Chronology) strictChronology0);
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        internalPrinter0.printTo((Appendable) mockPrintStream0, (ReadablePartial) localDate0, locale0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
