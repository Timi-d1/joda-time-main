/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 22:02:15 GMT 2025
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.Writer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormat_ESTest extends PeriodFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased();
      Locale locale0 = Locale.FRANCE;
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      Period period0 = Period.ZERO;
      StringBuffer stringBuffer0 = new StringBuffer("yOq#~-C~=Cu )*:");
      periodFormat_DynamicWordBased0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        PeriodFormat.wordBased((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased();
      Locale locale0 = Locale.FRANCE;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter1);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(7);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 2);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 7, (PeriodType) null, (Chronology) copticChronology0);
      periodFormat_DynamicWordBased0.parseInto(mutablePeriod0, "%*)^+-'%iwWfCYPVb", 2, locale0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = new Locale("Q89WsjBYC`7T&P");
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased(locale0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      Months months0 = Months.SIX;
      int int0 = periodFormat_DynamicWordBased0.countFieldsToPrint(months0, 2165, locale0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.getDefault();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(417L, (Chronology) lenientChronology0);
      int int0 = periodFormat_DynamicWordBased0.parseInto(mutablePeriod0, "=A%C", (-847), (Locale) null);
      assertEquals((-847), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Months months0 = Months.ELEVEN;
      periodFormatter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) months0);
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased();
      Period period0 = Period.ZERO;
      String string0 = periodFormatter0.print(period0);
      assertEquals("0 milliseconds", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased();
      Locale locale0 = Locale.FRANCE;
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      Period period0 = Period.ZERO;
      int int0 = periodFormat_DynamicWordBased0.calculatePrintedLength(period0, locale0);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("5[ne7W<7|Zdwle");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      Period period0 = new Period();
      Locale locale0 = Locale.JAPAN;
      periodFormat_DynamicWordBased0.printTo((Writer) outputStreamWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("ja_JP", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodFormat periodFormat0 = new PeriodFormat();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.getDefault();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      Minutes minutes0 = Minutes.MIN_VALUE;
      int int0 = periodFormat_DynamicWordBased0.countFieldsToPrint(minutes0, (-30), (Locale) null);
      assertEquals(0, int0);
  }
}
