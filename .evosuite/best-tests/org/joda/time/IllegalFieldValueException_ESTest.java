/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 22:16:13 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IllegalFieldValueException_ESTest extends IllegalFieldValueException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(0.0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("org.joda.time.tz.ZoneInfoProvider", double0, double0, double0);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value 0.0 for org.joda.time.tz.ZoneInfoProvider must be in the range [0.0,0.0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      Double double0 = new Double(784.02822915585);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, double0, double0, double0);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value 784.02822915585 for dayOfYear must be in the range [784.02822915585,784.02822915585]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Float float0 = new Float((-1069.1354F));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("!i~4dB*Q.ZAC_8m", float0, float0, float0);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value -1069.1354 for !i~4dB*Q.ZAC_8m must be in the range [-1069.1354,-1069.1354]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("A4@Yu~", "A4@Yu~");
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value \"A4@Yu~\" for A4@Yu~ is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("Value \"\" for  is not supported", float0, float0, float0);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value -1.0 for Value \"\" for  is not supported must be in the range [-1.0,-1.0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(0.0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(": ", double0, double0, double0);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value 0.0 for :  must be in the range [0.0,0.0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      Double double0 = new Double(784.02822915585);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, double0, double0, double0);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value 784.02822915585 for dayOfYear must be in the range [784.02822915585,784.02822915585]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", "");
      String string0 = illegalFieldValueException0.getIllegalValueAsString();
      assertEquals("Value \"\" for  is not supported", illegalFieldValueException0.getMessage());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, "Ht[`uv`%`^1miF");
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value \"Ht[`uv`%`^1miF\" for monthOfYear is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", "");
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value \"\" for  is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      Short short0 = new Short((short)59);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, short0, short0, (Number) null);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value 59 for dayOfWeek must not be smaller than 59", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      Short short0 = new Short((short)0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, short0, "");
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value 0 for era is not supported: ", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Float float0 = new Float((-696.61127F));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("A4@Yu~", float0, float0, float0);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value -696.61127 for A4@Yu~ must be in the range [-696.61127,-696.61127]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("Value \"\" for  is not supported", float0, float0, float0);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value -1.0 for Value \"\" for  is not supported must be in the range [-1.0,-1.0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException((String) null, "&a");
      illegalFieldValueException0.getFieldName();
      assertEquals("Value \"&a\" for null is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", "");
      illegalFieldValueException0.getFieldName();
      assertEquals("Value \"\" for  is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      Double double0 = new Double(147.1);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, double0, double0, double0);
      illegalFieldValueException0.getDurationFieldType();
      assertEquals("Value 147.1 for seconds must be in the range [147.1,147.1]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", "");
      illegalFieldValueException0.getDateTimeFieldType();
      assertEquals("Value \"\" for  is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DurationFieldType) null, "lG[mz;_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Float float0 = new Float(1.0F);
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DurationFieldType) null, float0, float0, float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)60);
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, byte0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Double double0 = new Double((-767.335607));
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, double0, double0, double0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Long long0 = new Long((-1680L));
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, long0, long0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      Float float0 = new Float(940.9475F);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, float0, float0, float0);
      illegalFieldValueException0.prependMessage((String) null);
      assertEquals("Value 940.9475 for yearOfCentury must be in the range [940.9475,940.9475]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      Long long0 = new Long(9223372036854775807L);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, long0, "");
      String string0 = illegalFieldValueException0.getIllegalValueAsString();
      assertEquals("Value 9223372036854775807 for secondOfMinute is not supported: ", illegalFieldValueException0.getMessage());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, (String) null);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value null for centuries is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Float float0 = new Float((-0.9287272029094916));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("QyM^+,GAi>BzFB>x", float0, float0, float0);
      illegalFieldValueException0.prependMessage("QyM^+,GAi>BzFB>x");
      assertEquals("QyM^+,GAi>BzFB>x: Value -0.9287272 for QyM^+,GAi>BzFB>x must be in the range [-0.9287272,-0.9287272]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      Float float0 = new Float((-481.49F));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, (Number) null, (Number) null, float0);
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value null for monthOfYear must not be larger than -481.49", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      Long long0 = new Long(9223372036854775807L);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, long0, "");
      String string0 = illegalFieldValueException0.getMessage();
      assertEquals("Value 9223372036854775807 for secondOfMinute is not supported: ", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      Float float0 = new Float(940.9475F);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, float0, float0, float0);
      illegalFieldValueException0.getDurationFieldType();
      assertEquals("Value 940.9475 for yearOfCentury must be in the range [940.9475,940.9475]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, (String) null);
      illegalFieldValueException0.getFieldName();
      assertEquals("Value null for centuries is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, (String) null);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value null for centuries is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      Long long0 = new Long(9223372036854775807L);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, long0, "");
      illegalFieldValueException0.getDateTimeFieldType();
      assertEquals("Value 9223372036854775807 for secondOfMinute is not supported: ", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      Long long0 = new Long(9223372036854775807L);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, long0, long0, long0, "");
  }
}
