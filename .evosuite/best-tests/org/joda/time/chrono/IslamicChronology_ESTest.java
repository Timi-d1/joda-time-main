/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 20:34:25 GMT 2025
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IslamicChronology_ESTest extends IslamicChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone1 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      assertNotNull(lenientChronology0);
      
      Chronology chronology0 = lenientChronology0.withUTC();
      assertFalse(chronology0.equals((Object)lenientChronology0));
      assertNotNull(chronology0);
      assertNotSame(lenientChronology0, chronology0);
      assertNotSame(chronology0, lenientChronology0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(chronology0, (Object) null, (IslamicChronology.LeapYearPatternType) null);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(lenientChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)lenientChronology0));
      assertNotNull(islamicChronology0);
      
      // Undeclared exception!
      try { 
        islamicChronology0.calculateFirstDayOfYearMillis(1556);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "3Bf^8Y3m]CF";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, "3Bf^8Y3m]CF", islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInMonthMax();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int0);
      
      boolean boolean1 = islamicChronology0.LEAP_YEAR_15_BASED.isLeapYear(1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long long0 = 62035200000L;
      int int1 = (-292269337);
      // Undeclared exception!
      try { 
        islamicChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("hUhim#ib-", "hUhim#ib-").when(dateTimeZone0).getID();
      doReturn(0, 0, 0).when(dateTimeZone0).getOffset(anyLong());
      doReturn(0).when(dateTimeZone0).getOffsetFromLocal(anyLong());
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getYearMonthDayMillis(10209349, 10209349, 0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(338561530876800000L, long0);
      
      long long1 = islamicChronology0.calculateFirstDayOfYearMillis(10209349);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(312539944780800000L, long1);
      assertFalse(long1 == long0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology0.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      int int0 = islamicChronology0.getWeeksInYear(719527);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(50, int0);
      
      Months months0 = Months.ONE;
      assertEquals(1, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int[] intArray0 = islamicChronology0.get((ReadablePeriod) months0, (long) 10209349, 312539944780800000L);
      assertEquals(1, intArray0.length);
      assertEquals(1, months0.getMonths());
      assertEquals(1, months0.size());
      assertArrayEquals(new int[] {122495510}, intArray0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(intArray0);
      
      int int1 = islamicChronology0.getDayOfMonth((-940L), 719527, 719527);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-275709898), int1);
      assertFalse(int1 == int0);
      
      ReadablePeriod readablePeriod0 = mock(ReadablePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(readablePeriod0).size();
      int int2 = islamicChronology0.hashCode();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = islamicChronology0.getMonthOfYear(31083597720000L, 228370600);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(22993309, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int[] intArray1 = islamicChronology0.get(readablePeriod0, 3L);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = islamicChronology0.LEAP_YEAR_15_BASED.isLeapYear(719527);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(boolean0);
      
      long long2 = islamicChronology0.setYear((-1594L), (-275709898));
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-8441528785344001594L), long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      int int4 = islamicChronology0.getMonthOfYear(0L, 719527);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-8626571), int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      
      int int5 = islamicChronology0.getMinYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, int5);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      
      DateTimeZone dateTimeZone1 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("org/joda/time/tz/data", (String) null, " < ").when(dateTimeZone1).getID();
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      long long3 = islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(21260793600000L, long3);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertNotSame(islamicChronology0, islamicChronology1);
      
      long long4 = islamicChronology0.getAverageMillisPerYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30617280288L, long4);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertNotSame(islamicChronology0, islamicChronology1);
      
      long long5 = islamicChronology0.getYearDifference(0L, 0L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0L, long5);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(long5 == long0);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(long5 == long1);
      assertFalse(long5 == long3);
      assertNotSame(islamicChronology0, islamicChronology1);
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology2);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.calculateFirstDayOfYearMillis((-292269337));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-8948534433609600000L), long0);
      
      long long1 = islamicChronology0.add(976L, (long) (-292269337), (-292269337));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(85421365350420545L, long1);
      assertFalse(long1 == long0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      int int0 = islamicChronology0.getMonthOfYear((-8948534433609600000L), 905);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-16664862), int0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology0, islamicChronology1);
      
      // Undeclared exception!
      try { 
        LocalDate.parse("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getYearDifference((-2905L), (-2905L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0L, long0);
      
      int int0 = islamicChronology0.getDaysInMonthMax(100);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeZone0).getID();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInYearMax();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(355, int0);
      
      boolean boolean0 = islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB.equals(islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = mock(AssembledChronology.Fields.class, new ViolatedAssumptionAnswer());
      islamicChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getYear(30617280288L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1390, int1);
      assertFalse(int1 == int0);
      
      int int2 = islamicChronology0.getDaysInYear(1390);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(355, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = islamicChronology0.getMonthOfYear(30617280288L, 1587);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-2355), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType1 = islamicChronology0.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology_LeapYearPatternType1);
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertSame(islamicChronology_LeapYearPatternType1, islamicChronology_LeapYearPatternType0);
      
      DateTimeZone dateTimeZone1 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeZone1).getID();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone1, islamicChronology0.LEAP_YEAR_15_BASED);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      long long0 = islamicChronology1.getYearMillis(292271022);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(8948501164252800000L, long0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      int int4 = islamicChronology0.getDaysInMonthMax(1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int4);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology1);
      
      boolean boolean1 = islamicChronology0.LEAP_YEAR_15_BASED.isLeapYear(2408);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertTrue(boolean1 == boolean0);
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dateTimeZone0).getID();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_INDIAN);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      
      int int0 = 317351877;
      ReadablePeriod readablePeriod0 = mock(ReadablePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(readablePeriod0).size();
      int[] intArray0 = islamicChronology1.get(readablePeriod0, (long) 317351877, (long) 1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(intArray0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      // Undeclared exception!
      try { 
        islamicChronology1.calculateFirstDayOfYearMillis(317351877);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 317351877 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      // Undeclared exception!
      try { 
        islamicChronology0.getDayOfMonth(0L, 623191204);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 623191204 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getAverageMillisPerYearDividedByTwo();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(15308640144L, long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = islamicChronology0.LEAP_YEAR_15_BASED.equals(object0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      
      long long1 = islamicChronology0.getAverageMillisPerYear();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30617280288L, long1);
      assertFalse(long1 == long0);
      
      boolean boolean1 = islamicChronology0.isLeapYear((-1795));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInMonthMaxForSet((-3186L), 172);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int0);
      
      int int1 = islamicChronology0.getYear((-1L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1389, int1);
      assertFalse(int1 == int0);
      
      long long0 = islamicChronology0.getAverageMillisPerYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30617280288L, long0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(29);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int2 = dateTimeZone0.getOffsetFromLocal(604800L);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(29, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      boolean boolean0 = islamicChronology0.equals(islamicChronology1);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology2);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertSame(islamicChronology2, islamicChronology1);
      
      boolean boolean1 = dateTimeZone0.isStandardOffset(604800L);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int3 = islamicChronology1.getDayOfMonth(0L, 29);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(20, int3);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      long long1 = islamicChronology1.getTotalMillisByYearMonth(1389, 1389);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(3537734400000L, long1);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(long1 == long0);
      assertSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      int int4 = islamicChronology2.getDayOfYear(604800L);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(288, int4);
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertSame(islamicChronology2, islamicChronology1);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology1.getLeapYearPatternType();
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology_LeapYearPatternType0);
      assertSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      boolean boolean2 = islamicChronology0.LEAP_YEAR_16_BASED.isLeapYear(2534);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean2);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone1 = uTCProvider0.getZone("h_*%\"");
      assertNull(dateTimeZone1);
      
      long long2 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 1);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(30L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = islamicChronology2.getAverageMillisPerMonth();
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(2551440384L, long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertNotSame(islamicChronology2, islamicChronology0);
      assertSame(islamicChronology2, islamicChronology1);
      
      IslamicChronology islamicChronology3 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology3);
      assertNotSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology0);
      
      long long4 = islamicChronology3.getFirstWeekOfYearMillis(288);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-33734188800000L), long4);
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertNotSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology0);
      
      long long5 = islamicChronology1.getYearMonthMillis(45, 1);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-41174438400000L), long5);
      assertFalse(long5 == long3);
      assertFalse(long5 == long4);
      assertFalse(long5 == long0);
      assertFalse(long5 == long1);
      assertFalse(long5 == long2);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology3);
      
      int int5 = islamicChronology1.getDayOfMonth(172);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(22, int5);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology3);
      
      boolean boolean3 = islamicChronology0.isLeapYear(1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean3);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology3);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType1 = islamicChronology0.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertNotNull(islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology3);
      assertSame(islamicChronology_LeapYearPatternType1, islamicChronology_LeapYearPatternType0);
      
      int int6 = dateTimeZone0.getOffsetFromLocal(3027L);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(29, int6);
      assertFalse(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      
      long long6 = islamicChronology2.getAverageMillisPerYearDividedByTwo();
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(15308640144L, long6);
      assertFalse(islamicChronology2.equals((Object)islamicChronology3));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(long6 == long4);
      assertFalse(long6 == long2);
      assertFalse(long6 == long1);
      assertFalse(long6 == long5);
      assertFalse(long6 == long3);
      assertFalse(long6 == long0);
      assertNotSame(islamicChronology2, islamicChronology3);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertSame(islamicChronology2, islamicChronology1);
      
      IslamicChronology islamicChronology4 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology4);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertSame(islamicChronology4, islamicChronology1);
      
      IslamicChronology islamicChronology5 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology5.equals((Object)islamicChronology3));
      assertFalse(islamicChronology5.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology5);
      assertNotSame(islamicChronology5, islamicChronology3);
      assertNotSame(islamicChronology5, islamicChronology0);
      assertSame(islamicChronology5, islamicChronology4);
      assertSame(islamicChronology5, islamicChronology2);
      assertSame(islamicChronology5, islamicChronology1);
      
      long long7 = islamicChronology1.getYearDifference((-1019L), 288);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-1L), long7);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertFalse(long7 == long1);
      assertFalse(long7 == long5);
      assertFalse(long7 == long0);
      assertFalse(long7 == long6);
      assertFalse(long7 == long3);
      assertFalse(long7 == long2);
      assertFalse(long7 == long4);
      assertSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertSame(islamicChronology1, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology3);
      assertSame(islamicChronology1, islamicChronology5);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      
      boolean boolean0 = islamicChronology1.equals(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology2);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      
      long long0 = islamicChronology2.getTotalMillisByYearMonth(292271022, 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0L, long0);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      ReadablePeriod readablePeriod0 = mock(ReadablePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(readablePeriod0).size();
      long long0 = islamicChronology0.add(readablePeriod0, (long) 292271022, 292271022);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(292271022L, long0);
      
      int int0 = islamicChronology0.getDayOfYear(0L, 292271022);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-491400222), int0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = mock(AssembledChronology.Fields.class, new ViolatedAssumptionAnswer());
      islamicChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = 3;
      int int2 = (-1);
      // Undeclared exception!
      try { 
        islamicChronology0.setYear(0L, (-491400222));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -491400222 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      int int0 = 164;
      int int1 = 99;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(164, 99);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      // Undeclared exception!
      try { 
        IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -92
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      islamicChronology0.hashCode();
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getYearDifference(0L, 0L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0L, long0);
      
      int int0 = islamicChronology0.getDayOfYear(0L, (-959));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(832341, int0);
      
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_16_BASED);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(832341);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:13:52.341", dateTimeZone0.getID());
      assertEquals("+00:13:52.341", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:13:52.341", dateTimeZone0.getID());
      assertEquals("+00:13:52.341", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology2);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology0);
      
      int int1 = islamicChronology1.getDaysInMonthMaxForSet(0L, 3600000);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertTrue(islamicChronology0.equals((Object)islamicChronology1));
      assertTrue(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(int1 == int0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      boolean boolean0 = islamicChronology0.equals(islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(boolean0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertTrue(islamicChronology0.equals((Object)islamicChronology1));
      assertTrue(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      long long1 = islamicChronology0.setYear((-604800000L), 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-42497395200000L), long1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertTrue(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(long1 == long0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      
      int int2 = islamicChronology1.getDaysInYearMax();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(355, int2);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertTrue(islamicChronology0.equals((Object)islamicChronology1));
      assertTrue(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      int int3 = islamicChronology0.getDaysInYear(1229);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(355, int3);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertTrue(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      
      int int4 = islamicChronology0.getMonthOfYear(832341, 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(16683, int4);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertTrue(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(4);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDayOfYear(4, 292271022);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-491400221), int0);
      
      int int1 = islamicChronology0.getYear(1091L);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1389, int1);
      assertFalse(int1 == int0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType1 = islamicChronology0.getLeapYearPatternType();
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology_LeapYearPatternType1);
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertSame(islamicChronology_LeapYearPatternType1, islamicChronology_LeapYearPatternType0);
      
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = dateTimeZone0.getShortName(1440L, locale0);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("+04:00", string0);
      assertNotNull(string0);
      
      long long0 = islamicChronology0.getTotalMillisByYearMonth(1389, 1826);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4651603200000L, long0);
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_16_BASED);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      boolean boolean0 = islamicChronology0.LEAP_YEAR_15_BASED.equals(islamicChronology1);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      long long1 = islamicChronology0.getAverageMillisPerMonth();
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(2551440384L, long1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(long1 == long0);
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology1);
      
      int int2 = islamicChronology1.hashCode();
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      long long2 = islamicChronology1.calculateFirstDayOfYearMillis(28);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-41694912000000L), long2);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      int int3 = islamicChronology1.getDayOfMonth(4651603200000L);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(26, int3);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = islamicChronology0.equals(object0);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("5Eq#Is[CcKqo");
      assertNull(dateTimeZone0);
      
      Chronology chronology0 = gregorianChronology0.withZone((DateTimeZone) null);
      assertNotNull(chronology0);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(4);
      assertEquals("+04:00", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+04:00", dateTimeZone1.toString());
      assertNotNull(dateTimeZone1);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(chronology0, (Object) null, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.setYear((-2972L), (-12));
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-42496790402972L), long0);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      
      boolean boolean0 = islamicChronology_LeapYearPatternType0.equals(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertSame(islamicChronology0, islamicChronology1);
      
      int int0 = islamicChronology0.getDaysInMonthMax((-12));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int0);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertSame(islamicChronology0, islamicChronology1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      
      boolean boolean0 = islamicChronology0.equals(islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(boolean0);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int1 = 292271022;
      // Undeclared exception!
      try { 
        islamicChronology0.getDateMidnightMillis(2149, 12, 292271022);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292271022 for dayOfMonth must be in the range [1,29]: year: 2149 month: 12
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IslamicChronology.getInstance(dateTimeZone0, (IslamicChronology.LeapYearPatternType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.setYear(0L, (-2112));
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-106793078400000L), long0);
      
      long long1 = islamicChronology0.setYear(0L, (-2112));
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-106793078400000L), long1);
      assertTrue(long1 == long0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology0.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals("YearMonthDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      PeriodType periodType2 = periodType0.withMinutesRemoved();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType2.size());
      assertEquals("YearMonthDay", periodType2.getName());
      assertNotNull(periodType2);
      assertSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      
      mutablePeriod0.add(0L, (Chronology) islamicChronology0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      
      LocalDate localDate0 = new LocalDate((long) 1, (Chronology) islamicChronology0);
      assertEquals(3, localDate0.size());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(localDate0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      PeriodType periodType3 = PeriodType.hours();
      assertEquals(1, periodType3.size());
      assertEquals("Hours", periodType3.getName());
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(86400000L, interval0.getEndMillis());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(interval0);
      
      Period period0 = interval0.toPeriod();
      assertEquals(3, localDate0.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(86400000L, interval0.getEndMillis());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period0);
      
      Interval interval1 = interval0.withStartMillis((-2532));
      assertEquals(3, localDate0.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(86400000L, interval0.getEndMillis());
      assertEquals((-2532L), interval1.getStartMillis());
      assertEquals(86400000L, interval1.getEndMillis());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(interval1.equals((Object)interval0));
      assertNotNull(interval1);
      assertNotSame(interval0, interval1);
      assertNotSame(interval1, interval0);
      
      boolean boolean0 = interval0.isBefore((ReadableInterval) interval1);
      assertEquals(3, localDate0.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(86400000L, interval0.getEndMillis());
      assertEquals((-2532L), interval1.getStartMillis());
      assertEquals(86400000L, interval1.getEndMillis());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      assertFalse(interval0.equals((Object)interval1));
      assertFalse(interval1.equals((Object)interval0));
      assertNotSame(interval0, interval1);
      assertNotSame(interval1, interval0);
      
      mutablePeriod0.add((ReadableInterval) interval0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, localDate0.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(86400000L, interval0.getEndMillis());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(interval0.equals((Object)interval1));
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType2);
      assertNotSame(interval0, interval1);
      
      int[] intArray0 = islamicChronology0.get((ReadablePeriod) mutablePeriod0, (long) (-2112), 0L);
      assertEquals(3, intArray0.length);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(periodType0.equals((Object)periodType3));
      assertNotNull(intArray0);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType2);
      
      long long2 = islamicChronology0.getTotalMillisByYearMonth((-2532), (-2532));
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-6453561600000L), long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      islamicChronology0.assemble((AssembledChronology.Fields) null);
      assertEquals(1, IslamicChronology.AH);
      
      long long3 = islamicChronology0.setYear(918518400000L, 12);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-42160003200000L), long3);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      
      long long4 = islamicChronology0.getYearMillis((-2532));
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-119677132800000L), long4);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      
      int int0 = islamicChronology0.getDaysInYear(292271022);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(354, int0);
      
      int int1 = islamicChronology0.getMaxYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(292271022, int1);
      assertFalse(int1 == int0);
      
      int int2 = islamicChronology0.getMaxYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(292271022, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = islamicChronology0.LEAP_YEAR_15_BASED.equals("org/joda/time/tz/data");
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long long5 = islamicChronology0.getAverageMillisPerMonth();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(2551440384L, long5);
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(long5 == long1);
      assertFalse(long5 == long4);
      assertFalse(long5 == long2);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      
      int int3 = islamicChronology1.getYear((-106793078400000L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-2069), int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertSame(islamicChronology1, islamicChronology0);
      
      int int4 = islamicChronology1.getDaysInYearMax();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(355, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertSame(islamicChronology1, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getTotalMillisByYearMonth((-292269337), 1235);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(3145219200000L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getAverageMillisPerYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30617280288L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInYearMonth((-342), (-342));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int0);
      
      int int1 = islamicChronology0.getDaysInYear(29);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(355, int1);
      assertFalse(int1 == int0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      boolean boolean0 = islamicChronology_LeapYearPatternType0.isLeapYear(12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeZone0).getID();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(readablePartial0).size();
      int[] intArray0 = islamicChronology0.get(readablePartial0, (-876L));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(intArray0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      boolean boolean0 = islamicChronology0.equals(islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      int int0 = islamicChronology0.getWeekOfWeekyear((-149), 43);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, int0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology0, islamicChronology1);
      
      long long0 = islamicChronology0.getFirstWeekOfYearMillis((-149));
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-47114179200000L), long0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology0, islamicChronology1);
      
      int int1 = islamicChronology0.getDaysInMonthMax();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int1 == int0);
      assertNotSame(islamicChronology0, islamicChronology1);
      
      int int2 = islamicChronology0.getMonthOfYear((-180L), 43);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(16179, int2);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(islamicChronology0, islamicChronology1);
      
      int int3 = islamicChronology0.getMonthOfYear((-180L), (-292269337));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(16670688, int3);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertNotSame(islamicChronology0, islamicChronology1);
      
      boolean boolean1 = islamicChronology1.equals(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.setYear(1357L, 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-42496790398643L), long0);
      
      int int0 = islamicChronology0.getDayOfMonth(1357L, 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int0);
      
      boolean boolean0 = islamicChronology0.isLeapYear(12);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      
      long long1 = islamicChronology0.calculateFirstDayOfYearMillis(292271022);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(8948501164252800000L, long1);
      assertFalse(long1 == long0);
      
      int int1 = islamicChronology0.getDaysInMonthMax(292271022);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int1);
      assertFalse(int1 == int0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      boolean boolean1 = islamicChronology_LeapYearPatternType0.isLeapYear((-292269337));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInYearMax();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(355, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = islamicChronology0.getDayOfYear(355, 2339);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-336359), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = islamicChronology0.equals(object0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      
      int int2 = islamicChronology0.getYear(543L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1389, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      long long0 = islamicChronology0.calculateFirstDayOfYearMillis(1002);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-11873692800000L), long0);
      
      int int3 = islamicChronology0.getDaysInMonthMax((-292269337));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertFalse(set0.isEmpty());
      assertEquals(597, set0.size());
      assertNotNull(set0);
      
      String string0 = Locale.lookupTag(linkedList0, set0);
      assertEquals(0, linkedList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(597, set0.size());
      assertNull(string0);
      
      String string1 = locale0.getScript();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = dateTimeZone0.getShortName(1L, locale0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("UTC", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_15_BASED);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      int int4 = islamicChronology1.getMinYear();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      IslamicChronology islamicChronology2 = (IslamicChronology)islamicChronology1.withZone(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology2);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology2, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology1.getLeapYearPatternType();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology_LeapYearPatternType0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType1 = islamicChronology0.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology_LeapYearPatternType1.equals((Object)islamicChronology_LeapYearPatternType0));
      assertNotNull(islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology_LeapYearPatternType1, islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertNotNull(islamicChronology3);
      assertSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertNotSame(islamicChronology3, islamicChronology2);
      
      IslamicChronology islamicChronology4 = (IslamicChronology)islamicChronology3.withZone(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertNotNull(islamicChronology4);
      assertSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertSame(islamicChronology4, islamicChronology0);
      assertSame(islamicChronology4, islamicChronology3);
      
      long long1 = islamicChronology3.getYearMillis(2611);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(37389513600000L, long1);
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(long1 == long0);
      assertSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology2);
      
      boolean boolean1 = islamicChronology1.isLeapYear(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertTrue(boolean1 == boolean0);
      assertFalse(islamicChronology1.equals((Object)islamicChronology4));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology4);
      assertSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology3);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      long long2 = islamicChronology1.getYearDifference(1002, (-11873692800000L));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(387L, long2);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(islamicChronology1.equals((Object)islamicChronology4));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology4);
      assertSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology3);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      long long3 = islamicChronology1.getApproxMillisAtEpochDividedByTwo();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(21260793600000L, long3);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(islamicChronology1.equals((Object)islamicChronology4));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology4);
      assertSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology3);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      IslamicChronology islamicChronology5 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology5.equals((Object)islamicChronology1));
      assertFalse(islamicChronology5.equals((Object)islamicChronology2));
      assertNotNull(islamicChronology5);
      assertSame(islamicChronology0, islamicChronology5);
      assertSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology4);
      assertSame(islamicChronology5, islamicChronology0);
      assertNotSame(islamicChronology5, islamicChronology1);
      assertSame(islamicChronology5, islamicChronology3);
      assertSame(islamicChronology5, islamicChronology4);
      assertNotSame(islamicChronology5, islamicChronology2);
      
      long long4 = islamicChronology0.setYear(1633L, 2611);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(37414310401633L, long4);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertSame(islamicChronology0, islamicChronology5);
      assertSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology4);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeZone0).getID();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, "", islamicChronology0.LEAP_YEAR_15_BASED);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      
      DateTimeZone dateTimeZone1 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(dateTimeZone1).getID();
      IslamicChronology islamicChronology2 = (IslamicChronology)islamicChronology1.withZone(dateTimeZone1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology2);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertNotSame(islamicChronology2, islamicChronology1);
      
      IslamicChronology islamicChronology3 = new IslamicChronology(islamicChronology1, "", islamicChronology0.LEAP_YEAR_INDIAN);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology0));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology3);
      
      long long0 = islamicChronology1.add(0L, (-2800L), (-3003));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(8408400L, long0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology3);
      
      IslamicChronology islamicChronology4 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology4);
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology0);
      
      long long1 = islamicChronology4.calculateFirstDayOfYearMillis(12);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-42184800000000L), long1);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(long1 == long0);
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology0);
      
      int int0 = islamicChronology4.getDaysInMonthMax((-3L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int0);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology0);
      
      int int1 = islamicChronology3.getMinYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, int1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology4));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology4));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology4));
      assertFalse(islamicChronology3.equals((Object)islamicChronology0));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertFalse(int1 == int0);
      assertNotSame(islamicChronology0, islamicChronology4);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology3);
      assertNotSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology1);
      
      int int2 = islamicChronology0.getDaysInYearMonth(29, 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int2);
      assertFalse(islamicChronology0.equals((Object)islamicChronology4));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(islamicChronology0, islamicChronology4);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology2);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType1 = islamicChronology4.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertSame(islamicChronology_LeapYearPatternType1, islamicChronology_LeapYearPatternType0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = mock(AssembledChronology.Fields.class, new ViolatedAssumptionAnswer());
      islamicChronology3.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology4));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology4));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology4));
      assertFalse(islamicChronology3.equals((Object)islamicChronology0));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology4);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology3);
      assertNotSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology1);
      
      boolean boolean0 = islamicChronology3.LEAP_YEAR_15_BASED.equals(islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology4));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology4));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology4));
      assertFalse(islamicChronology3.equals((Object)islamicChronology0));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology4);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology3);
      assertNotSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology1);
      
      long long2 = islamicChronology4.calculateFirstDayOfYearMillis(1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-42521587200000L), long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInMonthMax((-3270));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int0);
      
      int int1 = islamicChronology0.getDaysInMonthMax((-63L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int1);
      assertTrue(int1 == int0);
      
      long long0 = islamicChronology0.getYearMonthDayMillis(29, 29, (-559));
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-41641344000000L), long0);
      
      int int2 = islamicChronology0.getDaysInYearMonth((-3270), 1166);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("hUhim#ib-", "hUhim#ib-").when(dateTimeZone0).getID();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getYearMonthDayMillis(10209375, 10209375, 0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(338562393148800000L, long0);
      
      long long1 = islamicChronology0.calculateFirstDayOfYearMillis(10209375);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(312540740784000000L, long1);
      assertFalse(long1 == long0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology0.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      int int0 = 719527;
      int int1 = islamicChronology0.getWeeksInYear(719527);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(50, int1);
      assertFalse(int1 == int0);
      
      int int2 = islamicChronology0.getDayOfMonth((-940L), 719527, 719527);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-275709898), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ReadablePeriod readablePeriod0 = mock(ReadablePeriod.class, new ViolatedAssumptionAnswer());
      long long2 = 3L;
      int int3 = islamicChronology0.hashCode();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      // Undeclared exception!
      try { 
        islamicChronology0.getMonthOfYear(31083597720000L, (-693983101));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -693983101 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDayOfYear(0L, (-1475));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1013068, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = islamicChronology0.equals(object0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getYearMonthDayMillis((-2818), 86399999, (-1036));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(220088281507200000L, long0);
      
      long long1 = islamicChronology0.getAverageMillisPerYearDividedByTwo();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(15308640144L, long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = islamicChronology_LeapYearPatternType0.equals(object0);
      assertFalse(boolean0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInMonthMax();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      
      int int1 = islamicChronology1.getDaysInMonthMax(30);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int1);
      assertFalse(int1 == int0);
      assertSame(islamicChronology1, islamicChronology0);
      
      boolean boolean1 = islamicChronology1.isLeapDay(30);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(islamicChronology1, islamicChronology0);
      
      long long0 = islamicChronology1.getApproxMillisAtEpochDividedByTwo();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(21260793600000L, long0);
      assertSame(islamicChronology1, islamicChronology0);
      
      IslamicChronology islamicChronology2 = (IslamicChronology)islamicChronology1.withZone((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology2);
      assertSame(islamicChronology1, islamicChronology2);
      assertSame(islamicChronology1, islamicChronology0);
      assertSame(islamicChronology2, islamicChronology0);
      assertSame(islamicChronology2, islamicChronology1);
      
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_16_BASED);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology3);
      assertSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology0, islamicChronology3);
      assertSame(islamicChronology3, islamicChronology0);
      assertSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      
      boolean boolean2 = islamicChronology1.LEAP_YEAR_15_BASED.isLeapYear(153692453);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(islamicChronology1, islamicChronology2);
      assertSame(islamicChronology1, islamicChronology3);
      assertSame(islamicChronology1, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getWeekyear((-337L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1389, int0);
      
      int int1 = islamicChronology0.getDaysInMonthMax(12);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int1);
      assertFalse(int1 == int0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology2);
      assertSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      
      int int2 = islamicChronology1.getDaysInMonthMaxForSet(0L, (-292269337));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(islamicChronology1, islamicChronology0);
      assertSame(islamicChronology1, islamicChronology2);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      boolean boolean0 = islamicChronology_LeapYearPatternType0.isLeapYear(12);
      assertFalse(boolean0);
      
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology3);
      assertSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      assertSame(islamicChronology3, islamicChronology0);
      
      int int3 = islamicChronology3.getDaysInMonthMax(292271022);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      assertSame(islamicChronology3, islamicChronology0);
      
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeZone0).getID();
      IslamicChronology islamicChronology4 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology3.LEAP_YEAR_15_BASED);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertNotNull(islamicChronology4);
      assertSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      assertSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology2);
      
      AssembledChronology.Fields assembledChronology_Fields0 = mock(AssembledChronology.Fields.class, new ViolatedAssumptionAnswer());
      islamicChronology4.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology3.equals((Object)islamicChronology4));
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      assertSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology2);
      
      DateTimeZone dateTimeZone1 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(dateTimeZone1).getID();
      IslamicChronology islamicChronology5 = (IslamicChronology)islamicChronology4.withZone(dateTimeZone1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology3.equals((Object)islamicChronology4));
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(islamicChronology5.equals((Object)islamicChronology1));
      assertFalse(islamicChronology5.equals((Object)islamicChronology4));
      assertFalse(islamicChronology5.equals((Object)islamicChronology0));
      assertFalse(islamicChronology5.equals((Object)islamicChronology2));
      assertFalse(islamicChronology5.equals((Object)islamicChronology3));
      assertNotNull(islamicChronology5);
      assertSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology3, islamicChronology5);
      assertSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology5);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology5, islamicChronology1);
      assertNotSame(islamicChronology5, islamicChronology4);
      assertNotSame(islamicChronology5, islamicChronology0);
      assertNotSame(islamicChronology5, islamicChronology2);
      assertNotSame(islamicChronology5, islamicChronology3);
      
      long long0 = islamicChronology3.getAverageMillisPerYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30617280288L, long0);
      assertFalse(islamicChronology3.equals((Object)islamicChronology5));
      assertFalse(islamicChronology3.equals((Object)islamicChronology4));
      assertSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology3, islamicChronology5);
      assertSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology4);
      
      int int4 = islamicChronology4.getDaysInYearMonth(1016, (-2720));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int4);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(islamicChronology3.equals((Object)islamicChronology5));
      assertFalse(islamicChronology3.equals((Object)islamicChronology4));
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology5));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology3, islamicChronology5);
      assertSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology5);
      assertNotSame(islamicChronology4, islamicChronology2);
      
      DateTimeZone dateTimeZone2 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dateTimeZone2).getID();
      IslamicChronology islamicChronology6 = IslamicChronology.getInstance(dateTimeZone2);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology6.equals((Object)islamicChronology0));
      assertFalse(islamicChronology6.equals((Object)islamicChronology4));
      assertFalse(islamicChronology6.equals((Object)islamicChronology2));
      assertFalse(islamicChronology6.equals((Object)islamicChronology5));
      assertFalse(islamicChronology6.equals((Object)islamicChronology3));
      assertFalse(islamicChronology6.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology6);
      assertNotSame(islamicChronology6, islamicChronology0);
      assertNotSame(islamicChronology6, islamicChronology4);
      assertNotSame(islamicChronology6, islamicChronology2);
      assertNotSame(islamicChronology6, islamicChronology5);
      assertNotSame(islamicChronology6, islamicChronology3);
      assertNotSame(islamicChronology6, islamicChronology1);
      
      long long1 = islamicChronology6.getFirstWeekOfYearMillis(1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-42521328000000L), long1);
      assertFalse(islamicChronology6.equals((Object)islamicChronology0));
      assertFalse(islamicChronology6.equals((Object)islamicChronology4));
      assertFalse(islamicChronology6.equals((Object)islamicChronology2));
      assertFalse(islamicChronology6.equals((Object)islamicChronology5));
      assertFalse(islamicChronology6.equals((Object)islamicChronology3));
      assertFalse(islamicChronology6.equals((Object)islamicChronology1));
      assertFalse(long1 == long0);
      assertNotSame(islamicChronology6, islamicChronology0);
      assertNotSame(islamicChronology6, islamicChronology4);
      assertNotSame(islamicChronology6, islamicChronology2);
      assertNotSame(islamicChronology6, islamicChronology5);
      assertNotSame(islamicChronology6, islamicChronology3);
      assertNotSame(islamicChronology6, islamicChronology1);
      
      int int5 = islamicChronology2.getMaxYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(292271022, int5);
      assertFalse(islamicChronology2.equals((Object)islamicChronology4));
      assertFalse(islamicChronology2.equals((Object)islamicChronology6));
      assertFalse(islamicChronology2.equals((Object)islamicChronology5));
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology3);
      assertNotSame(islamicChronology2, islamicChronology4);
      assertNotSame(islamicChronology2, islamicChronology6);
      assertNotSame(islamicChronology2, islamicChronology5);
      assertSame(islamicChronology2, islamicChronology0);
      
      IslamicChronology islamicChronology7 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology7.equals((Object)islamicChronology6));
      assertFalse(islamicChronology7.equals((Object)islamicChronology5));
      assertFalse(islamicChronology7.equals((Object)islamicChronology4));
      assertNotNull(islamicChronology7);
      assertNotSame(islamicChronology7, islamicChronology6);
      assertNotSame(islamicChronology7, islamicChronology5);
      assertNotSame(islamicChronology7, islamicChronology4);
      assertSame(islamicChronology7, islamicChronology0);
      assertSame(islamicChronology7, islamicChronology2);
      assertSame(islamicChronology7, islamicChronology3);
      assertSame(islamicChronology7, islamicChronology1);
      
      int int6 = islamicChronology1.getDaysInMonthMax();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int6);
      assertFalse(islamicChronology1.equals((Object)islamicChronology6));
      assertFalse(islamicChronology1.equals((Object)islamicChronology4));
      assertFalse(islamicChronology1.equals((Object)islamicChronology5));
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertTrue(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertSame(islamicChronology1, islamicChronology3);
      assertSame(islamicChronology1, islamicChronology0);
      assertSame(islamicChronology1, islamicChronology2);
      assertSame(islamicChronology1, islamicChronology7);
      assertNotSame(islamicChronology1, islamicChronology6);
      assertNotSame(islamicChronology1, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology5);
      
      int int7 = islamicChronology3.getDayOfMonth((-1430L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(21, int7);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertFalse(islamicChronology3.equals((Object)islamicChronology6));
      assertFalse(islamicChronology3.equals((Object)islamicChronology5));
      assertFalse(islamicChronology3.equals((Object)islamicChronology4));
      assertSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      assertSame(islamicChronology3, islamicChronology7);
      assertNotSame(islamicChronology3, islamicChronology6);
      assertNotSame(islamicChronology3, islamicChronology5);
      assertSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology4);
      
      long long2 = islamicChronology4.getAverageMillisPerMonth();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(2551440384L, long2);
      assertFalse(islamicChronology3.equals((Object)islamicChronology6));
      assertFalse(islamicChronology3.equals((Object)islamicChronology5));
      assertFalse(islamicChronology3.equals((Object)islamicChronology4));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology6));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(islamicChronology4.equals((Object)islamicChronology5));
      assertFalse(islamicChronology4.equals((Object)islamicChronology7));
      assertSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      assertSame(islamicChronology3, islamicChronology7);
      assertNotSame(islamicChronology3, islamicChronology6);
      assertNotSame(islamicChronology3, islamicChronology5);
      assertSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology6);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology5);
      assertNotSame(islamicChronology4, islamicChronology7);
      
      long long3 = islamicChronology0.setYear(29, (-292269337));
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-8948534408812799971L), long3);
      assertFalse(islamicChronology0.equals((Object)islamicChronology5));
      assertFalse(islamicChronology0.equals((Object)islamicChronology6));
      assertFalse(islamicChronology0.equals((Object)islamicChronology4));
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology5);
      assertSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology7);
      assertSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology6);
      assertNotSame(islamicChronology0, islamicChronology4);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInMonthMax(292271022);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.setYear((-127L), 30);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-41608857600127L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getMaxYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(292271022, int0);
      
      int int1 = islamicChronology0.getDayOfMonth(292271022);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(25, int1);
      assertFalse(int1 == int0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(1, 1);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      boolean boolean0 = islamicChronology_LeapYearPatternType0.isLeapYear(1);
      assertFalse(boolean0);
      
      int int2 = islamicChronology0.getDaysInYearMonth(0, 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      int int3 = islamicChronology0.getDaysInYear(0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(354, int3);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertNotSame(islamicChronology0, islamicChronology1);
      
      IslamicChronology islamicChronology2 = (IslamicChronology)islamicChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology2);
      assertSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      
      boolean boolean1 = islamicChronology_LeapYearPatternType0.equals(islamicChronology1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertTrue(boolean1 == boolean0);
      assertSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      IslamicChronology islamicChronology3 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology3);
      assertSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      
      IslamicChronology islamicChronology4 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology4);
      assertNotSame(islamicChronology4, islamicChronology1);
      assertSame(islamicChronology4, islamicChronology2);
      assertSame(islamicChronology4, islamicChronology3);
      assertSame(islamicChronology4, islamicChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      islamicChronology4.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology4, islamicChronology1);
      assertSame(islamicChronology4, islamicChronology2);
      assertSame(islamicChronology4, islamicChronology3);
      assertSame(islamicChronology4, islamicChronology0);
      
      IslamicChronology islamicChronology5 = IslamicChronology.getInstance(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology5.equals((Object)islamicChronology0));
      assertFalse(islamicChronology5.equals((Object)islamicChronology4));
      assertFalse(islamicChronology5.equals((Object)islamicChronology2));
      assertFalse(islamicChronology5.equals((Object)islamicChronology3));
      assertNotNull(islamicChronology5);
      assertNotSame(islamicChronology5, islamicChronology0);
      assertNotSame(islamicChronology5, islamicChronology4);
      assertSame(islamicChronology5, islamicChronology1);
      assertNotSame(islamicChronology5, islamicChronology2);
      assertNotSame(islamicChronology5, islamicChronology3);
      
      int int4 = islamicChronology3.getYear((-338L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1389, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(islamicChronology3.equals((Object)islamicChronology5));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology3, islamicChronology5);
      assertSame(islamicChronology3, islamicChronology0);
      assertSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      
      islamicChronology4.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology5));
      assertNotSame(islamicChronology4, islamicChronology1);
      assertSame(islamicChronology4, islamicChronology2);
      assertSame(islamicChronology4, islamicChronology3);
      assertSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology5);
      
      int int5 = islamicChronology3.getWeekOfWeekyear(1389);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(42, int5);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(islamicChronology3.equals((Object)islamicChronology5));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology3, islamicChronology5);
      assertSame(islamicChronology3, islamicChronology0);
      assertSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      
      int int6 = islamicChronology3.getMonthOfYear(25, (-1005));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(28576, int6);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(islamicChronology3.equals((Object)islamicChronology5));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology3, islamicChronology5);
      assertSame(islamicChronology3, islamicChronology0);
      assertSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      
      IslamicChronology islamicChronology6 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_INDIAN);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology5));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology6.equals((Object)islamicChronology0));
      assertFalse(islamicChronology6.equals((Object)islamicChronology3));
      assertFalse(islamicChronology6.equals((Object)islamicChronology4));
      assertFalse(islamicChronology6.equals((Object)islamicChronology5));
      assertFalse(islamicChronology6.equals((Object)islamicChronology1));
      assertFalse(islamicChronology6.equals((Object)islamicChronology2));
      assertNotNull(islamicChronology6);
      assertNotSame(islamicChronology0, islamicChronology6);
      assertNotSame(islamicChronology0, islamicChronology5);
      assertSame(islamicChronology0, islamicChronology3);
      assertSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology4);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology6, islamicChronology0);
      assertNotSame(islamicChronology6, islamicChronology3);
      assertNotSame(islamicChronology6, islamicChronology4);
      assertNotSame(islamicChronology6, islamicChronology5);
      assertNotSame(islamicChronology6, islamicChronology1);
      assertNotSame(islamicChronology6, islamicChronology2);
      
      long long0 = islamicChronology4.calculateFirstDayOfYearMillis(25);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-41786755200000L), long0);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology6));
      assertFalse(islamicChronology4.equals((Object)islamicChronology5));
      assertNotSame(islamicChronology4, islamicChronology1);
      assertSame(islamicChronology4, islamicChronology2);
      assertSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology6);
      assertSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology5);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(fixedDateTimeZone0);
      assertSame(dateTimeZone0, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      
      IslamicChronology islamicChronology7 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology3.LEAP_YEAR_15_BASED);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology7.equals((Object)islamicChronology5));
      assertFalse(islamicChronology7.equals((Object)islamicChronology6));
      assertFalse(islamicChronology7.equals((Object)islamicChronology1));
      assertFalse(islamicChronology7.equals((Object)islamicChronology0));
      assertFalse(islamicChronology7.equals((Object)islamicChronology2));
      assertFalse(islamicChronology7.equals((Object)islamicChronology3));
      assertFalse(islamicChronology7.equals((Object)islamicChronology4));
      assertFalse(islamicChronology3.equals((Object)islamicChronology6));
      assertFalse(islamicChronology3.equals((Object)islamicChronology5));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology7);
      assertSame(dateTimeZone0, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      assertNotSame(islamicChronology7, islamicChronology5);
      assertNotSame(islamicChronology7, islamicChronology6);
      assertNotSame(islamicChronology7, islamicChronology1);
      assertNotSame(islamicChronology7, islamicChronology0);
      assertNotSame(islamicChronology7, islamicChronology2);
      assertNotSame(islamicChronology7, islamicChronology3);
      assertNotSame(islamicChronology7, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology7);
      assertNotSame(islamicChronology3, islamicChronology6);
      assertNotSame(islamicChronology3, islamicChronology5);
      assertSame(islamicChronology3, islamicChronology0);
      assertSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      
      int int7 = islamicChronology7.getMonthOfYear(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(10, int7);
      assertFalse(islamicChronology7.equals((Object)islamicChronology5));
      assertFalse(islamicChronology7.equals((Object)islamicChronology6));
      assertFalse(islamicChronology7.equals((Object)islamicChronology1));
      assertFalse(islamicChronology7.equals((Object)islamicChronology0));
      assertFalse(islamicChronology7.equals((Object)islamicChronology2));
      assertFalse(islamicChronology7.equals((Object)islamicChronology3));
      assertFalse(islamicChronology7.equals((Object)islamicChronology4));
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertFalse(islamicChronology3.equals((Object)islamicChronology7));
      assertFalse(islamicChronology3.equals((Object)islamicChronology6));
      assertFalse(islamicChronology3.equals((Object)islamicChronology5));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertSame(dateTimeZone0, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      assertNotSame(islamicChronology7, islamicChronology5);
      assertNotSame(islamicChronology7, islamicChronology6);
      assertNotSame(islamicChronology7, islamicChronology1);
      assertNotSame(islamicChronology7, islamicChronology0);
      assertNotSame(islamicChronology7, islamicChronology2);
      assertNotSame(islamicChronology7, islamicChronology3);
      assertNotSame(islamicChronology7, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology7);
      assertNotSame(islamicChronology3, islamicChronology6);
      assertNotSame(islamicChronology3, islamicChronology5);
      assertSame(islamicChronology3, islamicChronology0);
      assertSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      
      int int8 = islamicChronology7.getMonthOfYear(354, 42);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(16191, int8);
      assertFalse(islamicChronology7.equals((Object)islamicChronology5));
      assertFalse(islamicChronology7.equals((Object)islamicChronology6));
      assertFalse(islamicChronology7.equals((Object)islamicChronology1));
      assertFalse(islamicChronology7.equals((Object)islamicChronology0));
      assertFalse(islamicChronology7.equals((Object)islamicChronology2));
      assertFalse(islamicChronology7.equals((Object)islamicChronology3));
      assertFalse(islamicChronology7.equals((Object)islamicChronology4));
      assertFalse(int8 == int4);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int6);
      assertFalse(int8 == int0);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(islamicChronology3.equals((Object)islamicChronology7));
      assertFalse(islamicChronology3.equals((Object)islamicChronology6));
      assertFalse(islamicChronology3.equals((Object)islamicChronology5));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertSame(dateTimeZone0, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      assertNotSame(islamicChronology7, islamicChronology5);
      assertNotSame(islamicChronology7, islamicChronology6);
      assertNotSame(islamicChronology7, islamicChronology1);
      assertNotSame(islamicChronology7, islamicChronology0);
      assertNotSame(islamicChronology7, islamicChronology2);
      assertNotSame(islamicChronology7, islamicChronology3);
      assertNotSame(islamicChronology7, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology7);
      assertNotSame(islamicChronology3, islamicChronology6);
      assertNotSame(islamicChronology3, islamicChronology5);
      assertSame(islamicChronology3, islamicChronology0);
      assertSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      
      long long1 = islamicChronology3.getAverageMillisPerMonth();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(2551440384L, long1);
      assertFalse(long1 == long0);
      assertFalse(islamicChronology3.equals((Object)islamicChronology7));
      assertFalse(islamicChronology3.equals((Object)islamicChronology6));
      assertFalse(islamicChronology3.equals((Object)islamicChronology5));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology3, islamicChronology7);
      assertNotSame(islamicChronology3, islamicChronology6);
      assertNotSame(islamicChronology3, islamicChronology5);
      assertSame(islamicChronology3, islamicChronology0);
      assertSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertSame(islamicChronology3, islamicChronology2);
      
      IslamicChronology islamicChronology8 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology8.equals((Object)islamicChronology7));
      assertFalse(islamicChronology8.equals((Object)islamicChronology6));
      assertFalse(islamicChronology8.equals((Object)islamicChronology5));
      assertFalse(islamicChronology8.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology8);
      assertNotSame(islamicChronology8, islamicChronology7);
      assertNotSame(islamicChronology8, islamicChronology6);
      assertSame(islamicChronology8, islamicChronology2);
      assertSame(islamicChronology8, islamicChronology0);
      assertNotSame(islamicChronology8, islamicChronology5);
      assertSame(islamicChronology8, islamicChronology4);
      assertSame(islamicChronology8, islamicChronology3);
      assertNotSame(islamicChronology8, islamicChronology1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = null;
      // Undeclared exception!
      try { 
        islamicChronology0.getWeekyear((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getWeeksInYear(532);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(50, int0);
      
      int int1 = islamicChronology0.hashCode();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      boolean boolean0 = islamicChronology0.isLeapDay((-108L));
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      
      long long0 = islamicChronology0.getAverageMillisPerYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30617280288L, long0);
      
      int int0 = islamicChronology0.getDaysInMonthMax(30617280288L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int0);
      
      long long1 = islamicChronology0.getYearDifference(30617280288L, (-1637L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1L, long1);
      assertFalse(long1 == long0);
      
      long long2 = islamicChronology0.getYearMonthMillis(3809, 3809);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(83774822400000L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = islamicChronology0.getYearMonthDayMillis((-2322), 3809, 3809);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-103212662400000L), long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology0.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      int int1 = islamicChronology0.getDayOfMonth(83774822400000L, (-320), 354);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1557661, int1);
      assertFalse(int1 == int0);
      
      int int2 = islamicChronology0.getMinYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = islamicChronology0.LEAP_YEAR_16_BASED.equals(islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = islamicChronology0.LEAP_YEAR_INDIAN.isLeapYear(1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      long long4 = islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(21260793600000L, long4);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      
      int int3 = islamicChronology0.getDayOfMonth(3545L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(22, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDayOfMonth((-1668L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(21, int0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = islamicChronology_LeapYearPatternType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, object0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(21260793600000L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getWeeksInYear(22);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(50, int0);
      
      int int1 = islamicChronology0.getDayOfMonth(1852L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(22, int1);
      assertFalse(int1 == int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(1852L);
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = islamicChronology0.get((ReadablePeriod) mutablePeriod0, (long) 1, 1852L);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1, 851}, intArray0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(intArray0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      
      int int2 = islamicChronology0.getDayOfMonth(5097600000L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(22, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(islamicChronology0, islamicChronology1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("An{7XF;dN%|(Q~;").when(dateTimeZone0).getID();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        islamicChronology0.setYear(0L, 292271028);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 292271028 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      boolean boolean0 = islamicChronology_LeapYearPatternType0.equals(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      
      int int0 = islamicChronology0.getWeeksInYear(2998);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(51, int0);
      
      int int1 = islamicChronology0.getDaysInYear((-1358));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(355, int1);
      assertFalse(int1 == int0);
      
      int int2 = islamicChronology0.getDaysInMonthMax(2998);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = islamicChronology0.hashCode();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("Year is too small: ", " > ", "Year is too small: ").when(dateTimeZone0).getID();
      int int4 = islamicChronology0.getDaysInMonthMax(51);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int4);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      
      boolean boolean1 = islamicChronology0.equals(" > ");
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = islamicChronology0.equals(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      long long0 = islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(21260793600000L, long0);
      
      int int5 = islamicChronology0.getDaysInYear(99);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(354, int5);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      
      int int6 = islamicChronology0.getYear(1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1389, int6);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      
      int int7 = islamicChronology0.getDaysInYear(1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(354, int7);
      assertFalse(int7 == int4);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertTrue(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      
      long long1 = islamicChronology0.getAverageMillisPerYearDividedByTwo();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(15308640144L, long1);
      assertFalse(long1 == long0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology0, islamicChronology1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      boolean boolean0 = islamicChronology_LeapYearPatternType0.isLeapYear((-271));
      assertFalse(boolean0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInMonthMaxForSet(5097600000L, 1555);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology2);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      
      boolean boolean1 = islamicChronology2.isLeapDay(1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean1);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      
      int int1 = islamicChronology2.getDayOfMonth(30L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(24, int1);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(int1 == int0);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = mock(AssembledChronology.Fields.class, new ViolatedAssumptionAnswer());
      islamicChronology2.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      
      int int2 = islamicChronology2.getDayOfMonth(292271013);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(27, int2);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      
      long long0 = islamicChronology2.getAverageMillisPerYearDividedByTwo();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(15308640144L, long0);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      
      int int3 = islamicChronology1.getMonthOfYear(29, 3039);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-19809), int3);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology2);
      
      int int4 = islamicChronology2.getDaysInYearMonth((-1339), 288);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int4);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getWeekyear(2261L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1389, int0);
      
      int int1 = islamicChronology0.getDaysInMonthMax(292271013);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int1);
      assertFalse(int1 == int0);
      
      long long0 = islamicChronology0.calculateFirstDayOfYearMillis(292271013);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(8948500888723200000L, long0);
      
      int int2 = islamicChronology0.getMonthOfYear(1596L, 0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(16683, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      boolean boolean0 = islamicChronology_LeapYearPatternType0.isLeapYear((-271));
      assertFalse(boolean0);
      
      long long1 = islamicChronology0.getTotalMillisByYearMonth(16683, 2502);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(6374592000000L, long1);
      assertFalse(long1 == long0);
      assertSame(islamicChronology0, islamicChronology1);
      
      int int3 = islamicChronology0.getDaysInYear(1555);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(354, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertSame(islamicChronology0, islamicChronology1);
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology2);
      assertSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      
      int int4 = islamicChronology2.getDaysInMonthMaxForSet(5097600000L, 1555);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      
      int int5 = islamicChronology0.getYear(8948500888723200000L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(292271013, int5);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology1);
      
      IslamicChronology islamicChronology3 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology3);
      assertSame(islamicChronology3, islamicChronology2);
      assertSame(islamicChronology3, islamicChronology0);
      assertSame(islamicChronology3, islamicChronology1);
      
      IslamicChronology islamicChronology4 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology4);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology1);
      
      boolean boolean1 = islamicChronology4.isLeapDay(1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean1);
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology1);
      
      int int6 = islamicChronology4.getDayOfMonth(30L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(24, int6);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology1);
      
      int int7 = islamicChronology0.hashCode();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology4));
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology3);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology4);
      
      AssembledChronology.Fields assembledChronology_Fields0 = mock(AssembledChronology.Fields.class, new ViolatedAssumptionAnswer());
      islamicChronology4.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology1);
      
      int int8 = islamicChronology0.getDaysInMonthMax(292271013);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int8);
      assertFalse(islamicChronology0.equals((Object)islamicChronology4));
      assertFalse(int8 == int0);
      assertFalse(int8 == int5);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int1);
      assertFalse(int8 == int3);
      assertSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology3);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology4);
      
      int int9 = islamicChronology4.getDayOfMonth(292271013);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(27, int9);
      assertFalse(int9 == int1);
      assertFalse(int9 == int6);
      assertFalse(int9 == int5);
      assertFalse(int9 == int3);
      assertFalse(int9 == int8);
      assertFalse(int9 == int2);
      assertFalse(int9 == int4);
      assertFalse(int9 == int0);
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology1);
      
      long long2 = islamicChronology4.getAverageMillisPerYearDividedByTwo();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(15308640144L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeZone0).getID();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(2, 2);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getWeekOfWeekyear(2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(42, int0);
      
      int int1 = islamicChronology0.getDaysInMonthMax(2629746000L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int1);
      assertFalse(int1 == int0);
      
      int int2 = islamicChronology0.getMaxYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(292271022, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      long long0 = islamicChronology0.getYearDifference(475L, 62035200000L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-3L), long0);
      
      int int3 = islamicChronology0.getDaysInMonthMax();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      int int4 = islamicChronology0.getDaysInYear(1722);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(354, int4);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertNotSame(islamicChronology0, islamicChronology1);
      
      int int5 = islamicChronology0.getDayOfMonth(0L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(24, int5);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertNotSame(islamicChronology0, islamicChronology1);
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology2);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertNotSame(islamicChronology2, islamicChronology1);
      
      int int6 = islamicChronology2.getDaysInYearMax();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(355, int6);
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertNotSame(islamicChronology2, islamicChronology1);
      
      long long1 = islamicChronology0.getAverageMillisPerMonth();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(2551440384L, long1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(long1 == long0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      
      int int7 = islamicChronology2.getMinYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, int7);
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int5);
      assertFalse(int7 == int3);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertNotSame(islamicChronology2, islamicChronology1);
      
      boolean boolean0 = islamicChronology2.isLeapYear(292271022);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology2, islamicChronology0);
      assertNotSame(islamicChronology2, islamicChronology1);
      
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology3);
      assertNotSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology3, islamicChronology0);
      assertSame(islamicChronology3, islamicChronology1);
      
      boolean boolean1 = islamicChronology0.equals(islamicChronology3);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean1);
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology0));
      assertTrue(boolean1 == boolean0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertNotSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology3, islamicChronology0);
      assertSame(islamicChronology3, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      
      long long2 = islamicChronology0.setYear(1, 18);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-41976575999999L), long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      
      int int8 = islamicChronology0.getMaxYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(292271022, int8);
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(int8 == int1);
      assertFalse(int8 == int6);
      assertTrue(int8 == int2);
      assertFalse(int8 == int5);
      assertFalse(int8 == int3);
      assertFalse(int8 == int7);
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeZone0).getID();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(2, 2);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getWeekOfWeekyear(2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(42, int0);
      
      int int1 = islamicChronology0.getDaysInMonthMax(2629746000L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int1);
      assertFalse(int1 == int0);
      
      int int2 = islamicChronology0.getMaxYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(292271022, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      long long0 = islamicChronology0.getYearDifference(475L, 62035200000L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-3L), long0);
      
      int int3 = islamicChronology0.getDaysInMonthMax();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      int int4 = islamicChronology0.getDaysInYear(1710);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(354, int4);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertNotSame(islamicChronology0, islamicChronology1);
      
      int int5 = islamicChronology0.getDayOfMonth(0L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(24, int5);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertNotSame(islamicChronology0, islamicChronology1);
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology2);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology0);
      
      int int6 = islamicChronology2.getDaysInYearMax();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(355, int6);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology0);
      
      long long1 = islamicChronology0.getAverageMillisPerMonth();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(2551440384L, long1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(long1 == long0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
      
      int int7 = islamicChronology2.getMinYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, int7);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology0);
      
      boolean boolean0 = islamicChronology2.isLeapYear(292271022);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertNotSame(islamicChronology2, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology0);
      
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology3);
      assertNotSame(islamicChronology3, islamicChronology2);
      assertSame(islamicChronology3, islamicChronology1);
      assertNotSame(islamicChronology3, islamicChronology0);
      
      boolean boolean1 = islamicChronology0.equals(islamicChronology3);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean1);
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology0));
      assertTrue(boolean1 == boolean0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertNotSame(islamicChronology3, islamicChronology2);
      assertSame(islamicChronology3, islamicChronology1);
      assertNotSame(islamicChronology3, islamicChronology0);
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(",/aSmYY6WQvNHWA").when(dateTimeZone0).getID();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, "", islamicChronology0.LEAP_YEAR_15_BASED);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      
      DateTimeZone dateTimeZone1 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(",/aSmYY6WQvNHWA", "_OuH{!bL6+k6:", "$~'").when(dateTimeZone1).getID();
      IslamicChronology islamicChronology2 = (IslamicChronology)islamicChronology1.withZone(dateTimeZone1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology2);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertNotSame(islamicChronology2, islamicChronology1);
      
      IslamicChronology islamicChronology3 = new IslamicChronology(islamicChronology1, "", islamicChronology0.LEAP_YEAR_INDIAN);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology3);
      
      long long0 = islamicChronology1.add(0L, (-2800L), (-3003));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(8408400L, long0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology3);
      
      IslamicChronology islamicChronology4 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertNotNull(islamicChronology4);
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology2);
      
      long long1 = islamicChronology4.calculateFirstDayOfYearMillis(12);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-42184800000000L), long1);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertFalse(long1 == long0);
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology2);
      
      int int0 = islamicChronology4.getDaysInMonthMax((-3L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int0);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology2);
      
      int int1 = islamicChronology3.getMinYear();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, int1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology4));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology4));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertFalse(islamicChronology3.equals((Object)islamicChronology4));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology0));
      assertFalse(int1 == int0);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology3);
      assertNotSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertNotSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology3, islamicChronology0);
      
      int int2 = islamicChronology0.getDaysInYearMonth(29, 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int2);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology4));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology4);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType1 = islamicChronology4.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertNotNull(islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology2);
      assertSame(islamicChronology_LeapYearPatternType1, islamicChronology_LeapYearPatternType0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = mock(AssembledChronology.Fields.class, new ViolatedAssumptionAnswer());
      islamicChronology3.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology4));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology4));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertFalse(islamicChronology3.equals((Object)islamicChronology4));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology0));
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology3);
      assertNotSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertNotSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology3, islamicChronology0);
      
      boolean boolean0 = islamicChronology3.LEAP_YEAR_15_BASED.equals(islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology0.equals((Object)islamicChronology3));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology4));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(islamicChronology1.equals((Object)islamicChronology4));
      assertFalse(islamicChronology1.equals((Object)islamicChronology3));
      assertFalse(islamicChronology3.equals((Object)islamicChronology4));
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
      assertFalse(islamicChronology3.equals((Object)islamicChronology2));
      assertFalse(islamicChronology3.equals((Object)islamicChronology0));
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology0, islamicChronology3);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertNotSame(islamicChronology1, islamicChronology4);
      assertNotSame(islamicChronology1, islamicChronology3);
      assertNotSame(islamicChronology3, islamicChronology4);
      assertNotSame(islamicChronology3, islamicChronology1);
      assertNotSame(islamicChronology3, islamicChronology2);
      assertNotSame(islamicChronology3, islamicChronology0);
      
      long long2 = islamicChronology4.calculateFirstDayOfYearMillis(1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-42521587200000L), long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(islamicChronology4.equals((Object)islamicChronology1));
      assertFalse(islamicChronology4.equals((Object)islamicChronology0));
      assertFalse(islamicChronology4.equals((Object)islamicChronology3));
      assertFalse(islamicChronology4.equals((Object)islamicChronology2));
      assertNotSame(islamicChronology4, islamicChronology1);
      assertNotSame(islamicChronology4, islamicChronology0);
      assertNotSame(islamicChronology4, islamicChronology3);
      assertNotSame(islamicChronology4, islamicChronology2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getWeekyear(1);
      islamicChronology0.getDaysInMonthMax(12);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      IslamicChronology.getInstance();
      islamicChronology1.getDaysInMonthMaxForSet(0L, (-292269337));
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      islamicChronology_LeapYearPatternType0.isLeapYear(12);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.getDaysInMonthMax(292271022);
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("Z6qLey").when(dateTimeZone0).getID();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology2.LEAP_YEAR_15_BASED);
      AssembledChronology.Fields assembledChronology_Fields0 = mock(AssembledChronology.Fields.class, new ViolatedAssumptionAnswer());
      islamicChronology3.assemble(assembledChronology_Fields0);
      assertFalse(islamicChronology3.equals((Object)islamicChronology1));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("hUhim#ib-", "hUhim#ib-").when(dateTimeZone0).getID();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.calculateFirstDayOfYearMillis(10209375);
      islamicChronology0.getLeapYearPatternType();
      int int0 = 719527;
      islamicChronology0.getWeeksInYear(719527);
      islamicChronology0.getDayOfMonth((-940L), 719527, 719527);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology0.equals(islamicChronology1);
      islamicChronology0.hashCode();
      // Undeclared exception!
      try { 
        islamicChronology0.getMonthOfYear(31083597720000L, (-1794384325));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -1794384325 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(1, 1, 1, 1);
      int[] intArray0 = islamicChronology0.get((ReadablePeriod) period0, 147312000533L, (-482L));
      assertArrayEquals(new int[] {(-4), (-9), (-3), 0, 0, 0, (-1), (-15)}, intArray0);
      
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      boolean boolean0 = islamicChronology0.LEAP_YEAR_15_BASED.equals(islamicChronology_LeapYearPatternType0);
      assertTrue(boolean0);
      
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      Integer integer0 = new Integer(1);
      int int0 = islamicChronology0.getDaysInMonthMax();
      assertEquals(30, int0);
      
      int int1 = islamicChronology0.getDaysInYearMonth(558, 286);
      assertEquals(29, int1);
  }
}
