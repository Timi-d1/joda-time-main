/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 27 21:02:41 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Interval_ESTest extends Interval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      Duration duration0 = Duration.standardSeconds(10000000L);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertEquals(10000000000L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = new Interval((-572L), (-572L));
      boolean boolean0 = interval0.abuts(mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = new Interval(58, 58);
      boolean boolean0 = interval0.abuts(mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = new Interval(1049L, 2368L, dateTimeZone0);
      DateTimeUtils.setCurrentMillisFixed((-1365L));
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = new Interval((-715L), 2368L, dateTimeZone0);
      Interval interval1 = interval0.gap(interval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = new Interval(seconds0, instant0);
      Interval interval1 = interval0.withStartMillis(0L);
      assertEquals(0L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = new Interval((ReadablePeriod) null, instant0);
      Interval interval1 = interval0.withStartMillis((-842L));
      assertEquals((-842L), interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-842L));
      Interval interval0 = Interval.parse((String) null);
      Interval interval1 = interval0.withStartMillis((-2395L));
      assertEquals((-2395L), interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(224L);
      Instant instant0 = new Instant(224L);
      Interval interval0 = duration0.toIntervalTo(instant0);
      Interval interval1 = interval0.withStart(instant0);
      assertEquals(224L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      Instant instant0 = Instant.ofEpochSecond(0L);
      Interval interval1 = interval0.withStart(instant0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis((-842L));
      Interval interval0 = Interval.parse((String) null);
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = new DateTime((-842L));
      Interval interval1 = interval0.withEndMillis(69);
      Years years0 = Years.MAX_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      Interval interval2 = interval1.withPeriodBeforeEnd(period0);
      assertEquals(69L, interval2.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 0L, ethiopicChronology0);
      Seconds seconds0 = Seconds.ZERO;
      Interval interval1 = interval0.withPeriodAfterStart(seconds0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = new Interval(1049L, 2368L, dateTimeZone0);
      Interval interval1 = interval0.withEndMillis(2368L);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      LocalDate localDate0 = new LocalDate(0L, (Chronology) gJChronology0);
      Interval interval0 = localDate0.toInterval((DateTimeZone) null);
      Interval interval1 = interval0.withEndMillis(0L);
      assertEquals(0L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = new Duration(10000000000L, 10000000000L);
      Interval interval0 = new Interval((ReadableInstant) null, duration0);
      Interval interval1 = interval0.withEnd((ReadableInstant) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-842L));
      Interval interval0 = Interval.parse((String) null);
      DateTime dateTime0 = new DateTime((-842L));
      Interval interval1 = interval0.withEnd(dateTime0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-1L));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTime dateTime0 = instant0.toDateTime((Chronology) ethiopicChronology0);
      Duration duration0 = new Duration(0L, 1L);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      Interval interval0 = new Interval(dateTime0, period0);
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 0L, ethiopicChronology0);
      Duration duration0 = interval0.toDuration();
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = new Interval(seconds0, instant0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Interval interval1 = interval0.withChronology(ethiopicChronology0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Interval interval0 = new Interval((-2350L), (-2350L));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Interval interval1 = interval0.withChronology(buddhistChronology0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(224L);
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = duration0.toIntervalTo(instant0);
      Interval interval1 = interval0.toInterval();
      assertSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis((-842L));
      Interval interval0 = Interval.parse((String) null);
      Interval interval1 = interval0.toInterval();
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Interval interval0 = new Interval((-2028L), 0L);
      Interval interval1 = interval0.overlap(interval0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Interval interval0 = new Interval((-1156L), (-1156L), (DateTimeZone) null);
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval1 = interval0.gap(mutableInterval0);
      assertNotSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 0L, ethiopicChronology0);
      // Undeclared exception!
      try { 
        interval0.withStartMillis(1000000000000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableDuration) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1L), (Chronology) islamicChronology0);
      DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
      // Undeclared exception!
      try { 
        interval0.withStart(dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        interval0.withPeriodBeforeEnd(years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481633 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2147483646), (-2147483646), (-2147483646), 69);
      // Undeclared exception!
      try { 
        interval0.withPeriodBeforeEnd(mutablePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2147483646), (-2147483646), (-2147483646), (-2147483646), (-2147483646), (-2147483646), (-2147483646), (-2147483646));
      // Undeclared exception!
      try { 
        interval0.withPeriodBeforeEnd(mutablePeriod0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483646
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      Period period0 = Period.ZERO;
      Period period1 = period0.minusYears(2144986573);
      // Undeclared exception!
      try { 
        interval0.withPeriodAfterStart(period1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2144984559 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Instant instant0 = new Instant(15778476000L);
      Interval interval0 = new Interval(instant0, instant0);
      Period period0 = Period.weeks((-3900));
      // Undeclared exception!
      try { 
        interval0.withPeriodAfterStart(period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        interval0.withPeriodAfterStart(years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      // Undeclared exception!
      try { 
        interval0.withEndMillis(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((long) 1, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        interval0.withEnd(dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      Interval interval0 = new Interval((-2123L), 1704L, dateTimeZone0);
      Duration duration0 = Duration.standardSeconds((-538L));
      // Undeclared exception!
      try { 
        interval0.withDurationBeforeEnd(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      Interval interval0 = new Interval((-2123L), 1704L, dateTimeZone0);
      Duration duration0 = Duration.standardSeconds((-2123L));
      // Undeclared exception!
      try { 
        interval0.withDurationAfterStart(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parse("u;Z{z@ZzV3V_1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: u;Z{z@ZzV3V_1
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-842L));
      Years years0 = Years.MAX_VALUE;
      Interval interval0 = null;
      try {
        interval0 = new Interval(years0, dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481678 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Period period0 = duration0.toPeriodTo((ReadableInstant) null);
      Period period1 = period0.withHours((-1631));
      Interval interval0 = null;
      try {
        interval0 = new Interval(period1, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(24L, dateTimeZone0);
      Years years0 = Years.MIN_VALUE;
      Interval interval0 = null;
      try {
        interval0 = new Interval(dateTime0, years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481678 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-636L));
      Days days0 = Days.MIN_VALUE;
      Interval interval0 = null;
      try {
        interval0 = new Interval(instant0, days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Interval interval0 = new Interval((-1637L), (-1637L), dateTimeZone0);
      DateTime dateTime0 = interval0.getEnd();
      Years years0 = Years.MAX_VALUE;
      Interval interval1 = null;
      try {
        interval1 = new Interval(dateTime0, years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1969 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.minus((-529L));
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      Interval interval0 = null;
      try {
        interval0 = new Interval(instant1, mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-3269L));
      Duration duration0 = Duration.standardSeconds(5158);
      Duration duration1 = duration0.minus(31083597720000L);
      Interval interval0 = null;
      try {
        interval0 = new Interval(dateTime0, duration1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(2422L);
      Duration duration1 = duration0.negated();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Interval interval0 = new Interval(2422L, 2422L, gregorianChronology0);
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = null;
      try {
        interval1 = new Interval(duration1, dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Interval interval0 = null;
      try {
        interval0 = new Interval(integer0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No interval converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer((-1827));
      Interval interval0 = null;
      try {
        interval0 = new Interval(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No interval converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval(1538L, 0L, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      Interval interval0 = null;
      try {
        interval0 = new Interval(822L, 0L, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval(2419L, (-1938L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Interval interval0 = new Interval((-2028L), 0L);
      Duration duration0 = Duration.parse((String) null);
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertEquals(0L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      Duration duration0 = hours0.toStandardDuration();
      Duration duration1 = duration0.minus(1785L);
      Interval interval0 = duration1.toIntervalTo((ReadableInstant) null);
      Interval interval1 = interval0.withPeriodAfterStart(hours0);
      Interval interval2 = interval1.withDurationAfterStart(duration1);
      assertEquals(1392409281320L, interval2.getEndMillis());
      assertEquals(1392409283105L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = new Interval((-715L), 2368L, dateTimeZone0);
      Interval interval1 = interval0.withStartMillis(2368L);
      assertEquals(2368L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      Duration duration0 = weeks0.toStandardDuration();
      Instant instant0 = Instant.ofEpochSecond(0L);
      Interval interval0 = new Interval(duration0, instant0);
      assertEquals(0L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Interval interval0 = new Interval((Object) null);
      assertEquals(1392409281320L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = new Interval((ReadablePeriod) null, instant0);
      Interval interval1 = interval0.withPeriodBeforeEnd((ReadablePeriod) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-1L));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTime dateTime0 = instant0.toDateTime((Chronology) ethiopicChronology0);
      Duration duration0 = new Duration(0L, 1L);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      Interval interval0 = new Interval(dateTime0, period0);
      Interval interval1 = interval0.withPeriodBeforeEnd(period0);
      assertTrue(interval1.equals((Object)interval0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-636L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(636);
      LocalTime localTime0 = new LocalTime((-2007L), dateTimeZone0);
      Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Interval interval0 = new Interval(instant0, days0);
      Interval interval1 = interval0.withPeriodAfterStart(days0);
      assertNotSame(interval1, interval0);
      assertEquals((-636000L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Duration duration0 = new Duration(3600000L);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      Interval interval0 = new Interval(period0, (ReadableInstant) null);
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-636L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(636);
      LocalTime localTime0 = new LocalTime((-2007L), dateTimeZone0);
      Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Interval interval0 = new Interval(instant0, days0);
      Duration duration0 = interval0.toDuration();
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      System.setCurrentTimeMillis((-842L));
      Interval interval0 = Interval.parse((String) null);
      DateTime dateTime0 = new DateTime((-842L));
      Interval interval1 = interval0.withStart(dateTime0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Duration duration0 = new Duration(3600000L);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      Interval interval0 = new Interval(period0, (ReadableInstant) null);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Interval interval1 = interval0.withChronology(iSOChronology0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      Interval interval0 = new Interval((-2123L), 1704L, dateTimeZone0);
      Interval interval1 = interval0.withEndMillis((-2123L));
      boolean boolean0 = interval1.abuts(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      boolean boolean0 = interval0.abuts(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = new Interval((-715L), 2368L, dateTimeZone0);
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      Interval interval1 = interval0.gap(interval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Duration duration0 = new Duration(3600000L);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      Interval interval0 = new Interval(period0, (ReadableInstant) null);
      Interval interval1 = interval0.overlap(interval0);
      assertEquals(1392405681320L, interval1.getStartMillis());
      assertNotNull(interval1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("6/UZ>mYY6/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"UZ>mYY6/\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("R6]Z*mYYqUj/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: R6]Z*mYYqUj/
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("/|SQ5>RvY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: /|SQ5>RvY
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("Uvb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: Uvb
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      Interval interval0 = new Interval((-2123L), 1704L, dateTimeZone0);
      Interval interval1 = interval0.withEndMillis((-2123L));
      Interval interval2 = interval0.overlap(interval1);
      assertNull(interval2);
      assertEquals((-2123L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      Interval interval0 = new Interval((Object) null, iSOChronology0);
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval1 = interval0.gap(mutableInterval0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Interval interval0 = new Interval(2483L, 3552L);
      Interval interval1 = interval0.gap((ReadableInterval) null);
      assertNotNull(interval1);
      
      boolean boolean0 = interval1.abuts((ReadableInterval) null);
      assertEquals(3552L, interval1.getStartMillis());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(224L);
      Instant instant0 = new Instant(224L);
      Interval interval0 = duration0.toIntervalTo(instant0);
      Interval interval1 = interval0.withPeriodAfterStart((ReadablePeriod) null);
      assertEquals((-13439776L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      Interval interval1 = interval0.toInterval();
      assertEquals(1392409281320L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = new Interval((ReadablePeriod) null, instant0);
      Interval interval1 = interval0.withEnd(instant0);
      assertSame(interval1, interval0);
  }
}
