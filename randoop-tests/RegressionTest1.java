import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        org.joda.time.Chronology chronology23 = julianChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType19.getField((org.joda.time.Chronology) julianChronology22);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.Chronology chronology28 = julianChronology27.withUTC();
        mutableInterval25.setChronology((org.joda.time.Chronology) julianChronology27);
        mutableInterval25.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        int int35 = dateTime33.getWeekyear();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.plus(readableDuration36);
        boolean boolean38 = mutableInterval25.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Interval interval39 = mutableInterval25.toInterval();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) interval39);
        long long41 = interval39.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology43 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.weekyear();
        org.joda.time.Interval interval46 = dateMidnight44.toInterval();
        boolean boolean47 = interval39.isAfter((org.joda.time.ReadableInterval) interval46);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property53 = dateTime51.property(dateTimeFieldType52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.chrono.JulianChronology julianChronology55 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone54);
        org.joda.time.Chronology chronology56 = julianChronology55.withUTC();
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType52.getField((org.joda.time.Chronology) julianChronology55);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone59);
        org.joda.time.Chronology chronology61 = julianChronology60.withUTC();
        mutableInterval58.setChronology((org.joda.time.Chronology) julianChronology60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology64 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone63);
        org.joda.time.Days days65 = org.joda.time.Days.THREE;
        int[] intArray68 = gregorianChronology64.get((org.joda.time.ReadablePeriod) days65, (long) 0, (-1L));
        org.joda.time.Duration duration69 = days65.toStandardDuration();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property72 = dateTime71.dayOfWeek();
        int int73 = dateTime71.getWeekyear();
        int int74 = dateTime71.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology76 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone75);
        org.joda.time.Days days77 = org.joda.time.Days.THREE;
        int[] intArray80 = gregorianChronology76.get((org.joda.time.ReadablePeriod) days77, (long) 0, (-1L));
        org.joda.time.Duration duration81 = days77.toStandardDuration();
        org.joda.time.DateTime dateTime83 = dateTime71.withDurationAdded((org.joda.time.ReadableDuration) duration81, 26);
        boolean boolean84 = duration69.isShorterThan((org.joda.time.ReadableDuration) duration81);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology86 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone85);
        org.joda.time.DateMidnight dateMidnight87 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology86);
        org.joda.time.DateMidnight.Property property88 = dateMidnight87.dayOfYear();
        org.joda.time.DateMidnight dateMidnight89 = property88.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight89.plusWeeks((int) (byte) 10);
        org.joda.time.Period period92 = duration69.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight91);
        boolean boolean93 = mutableInterval58.contains((org.joda.time.ReadableInstant) dateMidnight91);
        org.joda.time.Interval interval94 = interval39.gap((org.joda.time.ReadableInterval) mutableInterval58);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 90L + "'", long41 == 90L);
        org.junit.Assert.assertNotNull(gregorianChronology43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(julianChronology55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(julianChronology60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(gregorianChronology64);
        org.junit.Assert.assertNotNull(days65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertArrayEquals(intArray68, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology76);
        org.junit.Assert.assertNotNull(days77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertArrayEquals(intArray80, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(gregorianChronology86);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(interval94);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withYear((-35));
        int int4 = dateTime1.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.parse("26", dateTimeFormatter6);
        org.joda.time.DateTime dateTime8 = dateTime1.withTime(localTime7);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("IslamicChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: I");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        org.joda.time.Chronology chronology23 = julianChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType19.getField((org.joda.time.Chronology) julianChronology22);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.Chronology chronology28 = julianChronology27.withUTC();
        mutableInterval25.setChronology((org.joda.time.Chronology) julianChronology27);
        mutableInterval25.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        int int35 = dateTime33.getWeekyear();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.plus(readableDuration36);
        boolean boolean38 = mutableInterval25.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Interval interval39 = mutableInterval25.toInterval();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) interval39);
        long long41 = interval39.toDurationMillis();
        boolean boolean43 = interval39.equals((java.lang.Object) 100);
        boolean boolean45 = interval39.contains((long) 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 90L + "'", long41 == 90L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone1);
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        int[] intArray6 = gregorianChronology2.get((org.joda.time.ReadablePeriod) days3, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology2.dayOfMonth();
        org.joda.time.DurationField durationField8 = gregorianChronology2.years();
        org.joda.time.DurationField durationField9 = gregorianChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = julianChronology11.seconds();
        int int13 = durationField9.compareTo(durationField12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        org.joda.time.Chronology chronology20 = julianChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType16.getField((org.joda.time.Chronology) julianChronology19);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField21.getAsShortText((int) (byte) 0, locale23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property28 = dateTime26.property(dateTimeFieldType27);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField21, dateTimeFieldType27, (int) (byte) -1, (int) (byte) -1, (-35));
        int int34 = offsetDateTimeField32.getLeapAmount((long) (short) 0);
        org.joda.time.DurationField durationField35 = offsetDateTimeField32.getRangeDurationField();
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField36 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, durationField9, durationField35);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = preciseDateTimeField36.set(82800000L, 70067048);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70067048 for millisOfSecond must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(julianChronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.Days days8 = org.joda.time.Days.THREE;
        int[] intArray11 = gregorianChronology7.get((org.joda.time.ReadablePeriod) days8, (long) 0, (-1L));
        org.joda.time.Duration duration12 = days8.toStandardDuration();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone14);
        org.joda.time.Days days16 = org.joda.time.Days.THREE;
        int[] intArray19 = gregorianChronology15.get((org.joda.time.ReadablePeriod) days16, (long) 0, (-1L));
        org.joda.time.Duration duration20 = days16.toStandardDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfWeek();
        int int24 = dateTime22.getWeekyear();
        int int25 = dateTime22.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone26);
        org.joda.time.Days days28 = org.joda.time.Days.THREE;
        int[] intArray31 = gregorianChronology27.get((org.joda.time.ReadablePeriod) days28, (long) 0, (-1L));
        org.joda.time.Duration duration32 = days28.toStandardDuration();
        org.joda.time.DateTime dateTime34 = dateTime22.withDurationAdded((org.joda.time.ReadableDuration) duration32, 26);
        boolean boolean35 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration37 = duration32.plus(90L);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration37, 9);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime43 = dateTime41.withYear((-35));
        int int44 = dateTime41.getMinuteOfDay();
        org.joda.time.DateTime dateTime46 = dateTime41.withYearOfEra(7);
        int int47 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getRangeDurationType();
        boolean boolean50 = dateTime41.isSupported(dateTimeFieldType48);
        boolean boolean51 = localDateTime13.isSupported(dateTimeFieldType48);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = localDateTime13.getFieldType(0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertArrayEquals(intArray11, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertArrayEquals(intArray19, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertArrayEquals(intArray31, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        boolean boolean5 = days0.equals((java.lang.Object) property3);
        org.joda.time.DateTime dateTime6 = property3.getDateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime9 = dateTime6.withHourOfDay(12);
        org.joda.time.DateTime.Property property10 = dateTime6.monthOfYear();
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks(1970);
        int int6 = localDateTime5.getDayOfMonth();
        int int7 = localDateTime5.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5999999 + "'", int7 == 5999999);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.lang.Appendable appendable0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.FormatUtils.appendPaddedInteger(appendable0, 1743535724466L, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.plus(readableDuration4);
        org.joda.time.DateTime.Property property6 = dateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime1.toMutableDateTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.plus(readableDuration4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((-1));
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfWeek();
        int int12 = dateTime10.getWeekyear();
        int int13 = dateTime10.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone14);
        org.joda.time.Days days16 = org.joda.time.Days.THREE;
        int[] intArray19 = gregorianChronology15.get((org.joda.time.ReadablePeriod) days16, (long) 0, (-1L));
        org.joda.time.Duration duration20 = days16.toStandardDuration();
        org.joda.time.DateTime dateTime22 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration20, 26);
        org.joda.time.Duration duration24 = duration20.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration26 = duration20.multipliedBy((long) (-35));
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property32 = dateTime30.property(dateTimeFieldType31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        org.joda.time.Chronology chronology35 = julianChronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType31.getField((org.joda.time.Chronology) julianChronology34);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone38);
        org.joda.time.Chronology chronology40 = julianChronology39.withUTC();
        mutableInterval37.setChronology((org.joda.time.Chronology) julianChronology39);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property47 = dateTime45.property(dateTimeFieldType46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.chrono.JulianChronology julianChronology49 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone48);
        org.joda.time.Chronology chronology50 = julianChronology49.withUTC();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType46.getField((org.joda.time.Chronology) julianChronology49);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology49);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.chrono.JulianChronology julianChronology54 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone53);
        org.joda.time.Chronology chronology55 = julianChronology54.withUTC();
        mutableInterval52.setChronology((org.joda.time.Chronology) julianChronology54);
        mutableInterval52.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property61 = dateTime60.dayOfWeek();
        int int62 = dateTime60.getWeekyear();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime60.plus(readableDuration63);
        boolean boolean65 = mutableInterval52.contains((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Interval interval66 = mutableInterval52.toInterval();
        mutableInterval37.setInterval((org.joda.time.ReadableInterval) interval66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology69 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone68);
        org.joda.time.Days days70 = org.joda.time.Days.THREE;
        int[] intArray73 = gregorianChronology69.get((org.joda.time.ReadablePeriod) days70, (long) 0, (-1L));
        org.joda.time.Duration duration74 = days70.toStandardDuration();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property77 = dateTime76.dayOfWeek();
        int int78 = dateTime76.getWeekyear();
        int int79 = dateTime76.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology81 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone80);
        org.joda.time.Days days82 = org.joda.time.Days.THREE;
        int[] intArray85 = gregorianChronology81.get((org.joda.time.ReadablePeriod) days82, (long) 0, (-1L));
        org.joda.time.Duration duration86 = days82.toStandardDuration();
        org.joda.time.DateTime dateTime88 = dateTime76.withDurationAdded((org.joda.time.ReadableDuration) duration86, 26);
        boolean boolean89 = duration74.isShorterThan((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Interval interval90 = interval66.withDurationAfterStart((org.joda.time.ReadableDuration) duration74);
        int int91 = duration26.compareTo((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Instant instant93 = instant8.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) '4');
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertArrayEquals(intArray19, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(julianChronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(julianChronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(julianChronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1970 + "'", int62 == 1970);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(gregorianChronology69);
        org.junit.Assert.assertNotNull(days70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertArrayEquals(intArray73, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1970 + "'", int78 == 1970);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology81);
        org.junit.Assert.assertNotNull(days82);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertArrayEquals(intArray85, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(instant93);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.ReadableInterval readableInterval1 = null;
        mutablePeriod0.add(readableInterval1);
        mutablePeriod0.setMonths(20179);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.joda.time.tz.DefaultNameProvider defaultNameProvider0 = new org.joda.time.tz.DefaultNameProvider();
        org.joda.time.DateTimeZone.setNameProvider((org.joda.time.tz.NameProvider) defaultNameProvider0);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfWeek();
        int int9 = dateTime7.getWeekyear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime7.plus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) property12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket5.getZone();
        java.lang.Object obj16 = dateTimeParserBucket5.saveState();
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        java.lang.StringBuilder stringBuilder1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.JulianChronology julianChronology4 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone3);
        org.joda.time.Chronology chronology5 = julianChronology4.withUTC();
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology4, locale6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        int int11 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.plus(readableDuration12);
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        boolean boolean15 = dateTimeParserBucket7.restoreState((java.lang.Object) property14);
        org.joda.time.DateTime dateTime17 = property14.setCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(stringBuilder1, (org.joda.time.ReadableInstant) dateTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(julianChronology4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.withField(dateTimeFieldType8, 82799999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82799999 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-86401), 5, 3600, 86400, 3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86400 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay4 = dateTime3.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.plus(readableDuration9);
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        boolean boolean13 = dateTime10.isBefore(26L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime10, readableInstant14);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay4.withChronologyRetainFields(chronology15);
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        java.util.Locale locale18 = null;
        int int19 = property17.getMaximumTextLength(locale18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfMonth((int) (byte) 1);
        org.joda.time.Instant instant24 = dateTime23.toInstant();
        int int25 = property17.compareTo((org.joda.time.ReadableInstant) instant24);
        org.joda.time.TimeOfDay timeOfDay27 = property17.addToCopy(5);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeOfDay27);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeZone0, dateTimeZone2);
        int int4 = mutableDateTime3.getRoundingMode();
        mutableDateTime3.addDays(0);
        mutableDateTime3.setSecondOfDay(1440);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property21 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology24 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType20.getField((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology23);
        java.util.Locale locale29 = null;
        java.lang.String str30 = skipDateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime27, 0, locale29);
        org.joda.time.DurationField durationField31 = skipDateTimeField14.getRangeDurationField();
        int int33 = skipDateTimeField14.getMinimumValue((long) 2);
        boolean boolean34 = skipDateTimeField14.isSupported();
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26 + "'", int13 == 26);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.Chronology chronology7 = localDate0.getChronology();
        java.lang.String str8 = chronology7.toString();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("GregorianChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"GregorianChronology[UTC]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        int int21 = offsetDateTimeField18.getMaximumValue();
        long long24 = offsetDateTimeField18.getDifferenceAsLong((long) 13, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, dateTimeZone26);
        org.joda.time.Days days28 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType29 = days28.getFieldType();
        boolean boolean30 = localTime27.isSupported(durationFieldType29);
        java.util.Locale locale32 = null;
        java.lang.String str33 = offsetDateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localTime27, 31, locale32);
        long long35 = offsetDateTimeField18.roundHalfEven((long) (short) 10);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property41 = dateTime39.property(dateTimeFieldType40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone42);
        org.joda.time.Chronology chronology44 = julianChronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType40.getField((org.joda.time.Chronology) julianChronology43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = julianChronology43.withZone(dateTimeZone46);
        org.joda.time.chrono.StrictChronology strictChronology48 = org.joda.time.chrono.StrictChronology.getInstance(chronology47);
        org.joda.time.format.PeriodFormatter periodFormatter49 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale50 = periodFormatter49.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (-86401), chronology47, locale50, (java.lang.Integer) 1440, 7);
        java.lang.String str54 = offsetDateTimeField18.getAsShortText(604800000, locale50);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-35) + "'", int21 == (-35));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "31" + "'", str33, "31");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(julianChronology43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(strictChronology48);
        org.junit.Assert.assertNotNull(periodFormatter49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "604800000" + "'", str54, "604800000");
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        boolean boolean5 = days0.equals((java.lang.Object) property3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property3.getFieldType();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.withYear((-35));
        org.joda.time.DateTime dateTime12 = dateTime8.plusMillis(1970);
        int int13 = property3.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.DateTime.Property property15 = dateTime12.weekOfWeekyear();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.weekyear();
        int int4 = dateMidnight2.getDayOfWeek();
        org.joda.time.Chronology chronology5 = dateMidnight2.getChronology();
        org.joda.time.MonthDay monthDay6 = new org.joda.time.MonthDay(chronology5);
        int int7 = monthDay6.getDayOfMonth();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("Thursday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Thursday\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        org.joda.time.Chronology chronology23 = julianChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType19.getField((org.joda.time.Chronology) julianChronology22);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.Chronology chronology28 = julianChronology27.withUTC();
        mutableInterval25.setChronology((org.joda.time.Chronology) julianChronology27);
        mutableInterval25.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        int int35 = dateTime33.getWeekyear();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.plus(readableDuration36);
        boolean boolean38 = mutableInterval25.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Interval interval39 = mutableInterval25.toInterval();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) interval39);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval10.toMutableInterval();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(mutableInterval41);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology1.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology1.clockhourOfHalfday();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property15 = dateTime13.property(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        org.joda.time.Chronology chronology18 = julianChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology17);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField19.getAsShortText((int) (byte) 0, locale21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField30 = new org.joda.time.field.OffsetDateTimeField(dateTimeField19, dateTimeFieldType25, (int) (byte) -1, (int) (byte) -1, (-35));
        int int32 = offsetDateTimeField30.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField33 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField30);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39);
        org.joda.time.Chronology chronology41 = julianChronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType37.getField((org.joda.time.Chronology) julianChronology40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = julianChronology40.withZone(dateTimeZone43);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) '#', chronology44);
        org.joda.time.LocalTime localTime47 = localTime45.plusSeconds((int) 'a');
        int[] intArray51 = new int[] { 26, '#', 31 };
        int int52 = offsetDateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localTime47, intArray51);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField54 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) gregorianChronology1, (org.joda.time.DateTimeField) offsetDateTimeField30, 5);
        java.lang.String str55 = offsetDateTimeField30.getName();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(julianChronology40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertArrayEquals(intArray51, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hourOfHalfday" + "'", str55, "hourOfHalfday");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.Days days4 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType5 = days4.getFieldType();
        org.joda.time.LocalDate localDate7 = localDate3.withFieldAdded(durationFieldType5, 1);
        org.joda.time.LocalDate localDate9 = localDate3.minusMonths((-35));
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtStartOfDay();
        boolean boolean11 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType25.getField((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = julianChronology28.withZone(dateTimeZone31);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) '#', chronology32);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds((int) 'a');
        int[] intArray39 = new int[] { 26, '#', 31 };
        int int40 = offsetDateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localTime35, intArray39);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = localTime35.getValue(1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertArrayEquals(intArray39, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField18);
        int int22 = offsetDateTimeField18.getOffset();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = offsetDateTimeField18.set((long) (byte) 1, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8 for hourOfHalfday must be in the range [-1,-35]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DurationField durationField6 = gregorianChronology1.halfdays();
        org.joda.time.Chronology chronology7 = gregorianChronology1.withUTC();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.LocalDate localDate10 = localDate8.plusDays(3);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.Chronology chronology17 = julianChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType13.getField((org.joda.time.Chronology) julianChronology16);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeField18.getAsShortText((int) (byte) 0, locale20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property25 = dateTime23.property(dateTimeFieldType24);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField29 = new org.joda.time.field.OffsetDateTimeField(dateTimeField18, dateTimeFieldType24, (int) (byte) -1, (int) (byte) -1, (-35));
        int int31 = offsetDateTimeField29.getLeapAmount((long) (short) 0);
        int int32 = offsetDateTimeField29.getMaximumValue();
        long long35 = offsetDateTimeField29.getDifferenceAsLong((long) 13, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, dateTimeZone37);
        org.joda.time.Days days39 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType40 = days39.getFieldType();
        boolean boolean41 = localTime38.isSupported(durationFieldType40);
        java.util.Locale locale43 = null;
        java.lang.String str44 = offsetDateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localTime38, 31, locale43);
        org.joda.time.LocalTime localTime46 = localTime38.minusHours((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = localDate10.toDateTime(localTime38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The chronology of the time does not match");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-35) + "'", int32 == (-35));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "31" + "'", str44, "31");
        org.junit.Assert.assertNotNull(localTime46);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.joda.time.Years years0 = org.joda.time.Years.TWO;
        org.joda.time.Years years2 = years0.minus(32);
        org.joda.time.Years years3 = years2.negated();
        org.joda.time.DurationFieldType durationFieldType4 = years3.getFieldType();
        org.junit.Assert.assertNotNull(years0);
        org.junit.Assert.assertNotNull(years2);
        org.junit.Assert.assertNotNull(years3);
        org.junit.Assert.assertNotNull(durationFieldType4);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology1.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology1.clockhourOfHalfday();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property15 = dateTime13.property(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        org.joda.time.Chronology chronology18 = julianChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology17);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField19.getAsShortText((int) (byte) 0, locale21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField30 = new org.joda.time.field.OffsetDateTimeField(dateTimeField19, dateTimeFieldType25, (int) (byte) -1, (int) (byte) -1, (-35));
        int int32 = offsetDateTimeField30.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField33 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField30);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39);
        org.joda.time.Chronology chronology41 = julianChronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType37.getField((org.joda.time.Chronology) julianChronology40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = julianChronology40.withZone(dateTimeZone43);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) '#', chronology44);
        org.joda.time.LocalTime localTime47 = localTime45.plusSeconds((int) 'a');
        int[] intArray51 = new int[] { 26, '#', 31 };
        int int52 = offsetDateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localTime47, intArray51);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField54 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) gregorianChronology1, (org.joda.time.DateTimeField) offsetDateTimeField30, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = skipUndoDateTimeField54.set((long) 59, 2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2 for hourOfHalfday must be in the range [0,-35]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(julianChronology40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertArrayEquals(intArray51, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds("PT2M", 3, (int) (byte) 10, 70067048);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3 for PT2M must be in the range [10,70067048]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfWeek();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfWeek();
        int int5 = dateTime3.getMillisOfSecond();
        int int6 = property1.getDifference((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property7 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime3.withWeekOfWeekyear(19);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20179 + "'", int6 == 20179);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("2025-04-01");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2025-04-01\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.junit.Assert.assertNotNull(minutes0);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        long long21 = offsetDateTimeField18.getDifferenceAsLong((long) (-1), (long) (byte) 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((org.joda.time.ReadablePeriod) weeks3);
        java.util.Date date5 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay6.toDateMidnight(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.plusMonths(8);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = property11.withMinimumValue();
        org.joda.time.DurationField durationField13 = property11.getRangeDurationField();
        org.joda.time.DurationField durationField14 = property11.getRangeDurationField();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Mar 31 20:00:00 EDT 2025");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        int int4 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        int[] intArray10 = gregorianChronology6.get((org.joda.time.ReadablePeriod) days7, (long) 0, (-1L));
        org.joda.time.Duration duration11 = days7.toStandardDuration();
        org.joda.time.DateTime dateTime13 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration11, 26);
        org.joda.time.Duration duration15 = duration11.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        org.joda.time.format.PeriodFormatter periodFormatter20 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter20.withParseType(periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime18, periodType21);
        java.lang.String str24 = dateTime18.toString();
        org.joda.time.format.PeriodFormatter periodFormatter26 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale27 = periodFormatter26.getLocale();
        java.lang.String str28 = dateTime18.toString("00:01:37.035", locale27);
        org.joda.time.DateTime.Property property29 = dateTime18.secondOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertArrayEquals(intArray10, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str24, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "00:01:37.035" + "'", str28, "00:01:37.035");
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(20179, 1440, 80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 20179 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateParser();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology2.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) dateTimeFormatter0, (org.joda.time.Chronology) gregorianChronology2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.format.DateTimeFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYearOfCentury(100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay((java.lang.Object) dateMidnight4, chronology7);
        org.joda.time.MonthDay.Property property9 = monthDay8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay12 = property9.setCopy("IslamicChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"IslamicChronology[UTC]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology13, locale15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology21);
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology21.weekyearOfCentury();
        int int24 = dateMidnight19.get(dateTimeField23);
        org.joda.time.field.SkipDateTimeField skipDateTimeField25 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology13, dateTimeField23);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property32 = dateTime30.property(dateTimeFieldType31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        org.joda.time.Chronology chronology35 = julianChronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType31.getField((org.joda.time.Chronology) julianChronology34);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology34);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology34);
        java.util.Locale locale40 = null;
        java.lang.String str41 = skipDateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime38, 0, locale40);
        org.joda.time.DurationField durationField42 = skipDateTimeField25.getRangeDurationField();
        org.joda.time.Days days43 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType44 = days43.getFieldType();
        org.joda.time.field.ScaledDurationField scaledDurationField46 = new org.joda.time.field.ScaledDurationField(durationField42, durationFieldType44, 1440);
        long long48 = durationField42.getValueAsLong((long) 9);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField51 = new org.joda.time.field.DividedDateTimeField(dateTimeField7, durationField42, dateTimeFieldType49, 19);
        // The following exception was thrown during execution in test generation
        try {
            long long54 = dividedDateTimeField51.set((long) (-35), (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for millisOfSecond must be in the range [0,0]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 26 + "'", int24 == 26);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone15);
        org.joda.time.Days days17 = org.joda.time.Days.THREE;
        int[] intArray20 = gregorianChronology16.get((org.joda.time.ReadablePeriod) days17, (long) 0, (-1L));
        org.joda.time.Duration duration21 = days17.toStandardDuration();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfWeek();
        int int25 = dateTime23.getWeekyear();
        int int26 = dateTime23.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone27);
        org.joda.time.Days days29 = org.joda.time.Days.THREE;
        int[] intArray32 = gregorianChronology28.get((org.joda.time.ReadablePeriod) days29, (long) 0, (-1L));
        org.joda.time.Duration duration33 = days29.toStandardDuration();
        org.joda.time.DateTime dateTime35 = dateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration33, 26);
        boolean boolean36 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology38 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.dayOfYear();
        org.joda.time.DateMidnight dateMidnight41 = property40.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plusWeeks((int) (byte) 10);
        org.joda.time.Period period44 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight43);
        boolean boolean45 = mutableInterval10.contains((org.joda.time.ReadableInstant) dateMidnight43);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval10.setStartMillis(2746894413240000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater than the start instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertArrayEquals(intArray20, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertArrayEquals(intArray32, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(gregorianChronology38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay4 = dateTime3.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.plus(readableDuration9);
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        boolean boolean13 = dateTime10.isBefore(26L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime10, readableInstant14);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay4.withChronologyRetainFields(chronology15);
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay19 = property17.addToCopy((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay20 = property17.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay20);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology1.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology1.clockhourOfHalfday();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property15 = dateTime13.property(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        org.joda.time.Chronology chronology18 = julianChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology17);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField19.getAsShortText((int) (byte) 0, locale21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField30 = new org.joda.time.field.OffsetDateTimeField(dateTimeField19, dateTimeFieldType25, (int) (byte) -1, (int) (byte) -1, (-35));
        int int32 = offsetDateTimeField30.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField33 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField30);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39);
        org.joda.time.Chronology chronology41 = julianChronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType37.getField((org.joda.time.Chronology) julianChronology40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = julianChronology40.withZone(dateTimeZone43);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) '#', chronology44);
        org.joda.time.LocalTime localTime47 = localTime45.plusSeconds((int) 'a');
        int[] intArray51 = new int[] { 26, '#', 31 };
        int int52 = offsetDateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localTime47, intArray51);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField54 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) gregorianChronology1, (org.joda.time.DateTimeField) offsetDateTimeField30, 5);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = skipUndoDateTimeField54.add((long) 86400, (-1512000000L));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfHalfday must be in the range [-1,-35]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(julianChronology40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertArrayEquals(intArray51, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.JulianChronology julianChronology1 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone0);
        org.joda.time.Chronology chronology2 = julianChronology1.withUTC();
        org.joda.time.DurationField durationField3 = julianChronology1.weekyears();
        java.lang.String str4 = durationField3.toString();
        org.junit.Assert.assertNotNull(julianChronology1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DurationField[weekyears]" + "'", str4, "DurationField[weekyears]");
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "91" + "'", str4, "91");
        org.junit.Assert.assertNotNull(dateMidnight5);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        int int0 = org.joda.time.YearMonth.MONTH_OF_YEAR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate0.plusYears(13);
        org.joda.time.DateMidnight dateMidnight9 = localDate8.toDateMidnight();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology5, locale7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfWeek();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.plus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        boolean boolean16 = dateTimeParserBucket8.restoreState((java.lang.Object) property15);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket8.getZone();
        org.joda.time.DateTime dateTime18 = localDate0.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone20 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone17);
        java.util.TimeZone timeZone21 = cachedDateTimeZone20.toTimeZone();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod();
        boolean boolean24 = mutablePeriod22.equals((java.lang.Object) (-1L));
        mutablePeriod22.addYears(100);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight31 = property30.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plusWeeks((int) (byte) 10);
        org.joda.time.Days days34 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType35 = days34.getFieldType();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withFieldAdded(durationFieldType35, 26);
        mutablePeriod22.add(durationFieldType35, 1);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property45 = dateTime43.property(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.JulianChronology julianChronology47 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone46);
        org.joda.time.Chronology chronology48 = julianChronology47.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType44.getField((org.joda.time.Chronology) julianChronology47);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology47);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.chrono.JulianChronology julianChronology52 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51);
        org.joda.time.Chronology chronology53 = julianChronology52.withUTC();
        mutableInterval50.setChronology((org.joda.time.Chronology) julianChronology52);
        mutablePeriod22.add((org.joda.time.ReadableInterval) mutableInterval50);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.chrono.JulianChronology julianChronology58 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone57);
        org.joda.time.Chronology chronology59 = julianChronology58.withUTC();
        org.joda.time.DurationField durationField60 = julianChronology58.weekyears();
        mutablePeriod22.add((long) 'a', (org.joda.time.Chronology) julianChronology58);
        boolean boolean62 = cachedDateTimeZone20.equals((java.lang.Object) julianChronology58);
        org.joda.time.chrono.CopticChronology copticChronology63 = org.joda.time.chrono.CopticChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone20);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(cachedDateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(julianChronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(julianChronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(julianChronology58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(copticChronology63);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant5 = new org.joda.time.Instant((java.lang.Object) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.Days days8 = org.joda.time.Days.THREE;
        int[] intArray11 = gregorianChronology7.get((org.joda.time.ReadablePeriod) days8, (long) 0, (-1L));
        org.joda.time.Duration duration12 = days8.toStandardDuration();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod();
        mutablePeriod14.addWeeks((-1));
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, 5);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.Chronology chronology25 = julianChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType21.getField((org.joda.time.Chronology) julianChronology24);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeField26.getAsShortText((int) (byte) 0, locale28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property33 = dateTime31.property(dateTimeFieldType32);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField37 = new org.joda.time.field.OffsetDateTimeField(dateTimeField26, dateTimeFieldType32, (int) (byte) -1, (int) (byte) -1, (-35));
        int int39 = offsetDateTimeField37.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField40 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField37);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property45 = dateTime43.property(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.JulianChronology julianChronology47 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone46);
        org.joda.time.Chronology chronology48 = julianChronology47.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType44.getField((org.joda.time.Chronology) julianChronology47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = julianChronology47.withZone(dateTimeZone50);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) '#', chronology51);
        org.joda.time.LocalTime localTime54 = localTime52.plusSeconds((int) 'a');
        int[] intArray58 = new int[] { 26, '#', 31 };
        int int59 = offsetDateTimeField37.getMinimumValue((org.joda.time.ReadablePartial) localTime54, intArray58);
        org.joda.time.LocalTime.Property property60 = localTime54.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            int int61 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localTime54);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertArrayEquals(intArray11, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(julianChronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertArrayEquals(intArray58, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.Instant instant4 = dateTime3.toInstant();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.Instant instant7 = instant4.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.Days days11 = org.joda.time.Days.THREE;
        int[] intArray14 = gregorianChronology10.get((org.joda.time.ReadablePeriod) days11, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology10.dayOfMonth();
        org.joda.time.DurationField durationField16 = gregorianChronology10.millis();
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 26, (org.joda.time.Chronology) gregorianChronology10, locale17);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((java.lang.Object) instant4, (org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfYear();
        org.joda.time.DateMidnight dateMidnight25 = property24.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withYearOfCentury(100);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withDurationAdded(readableDuration28, 31);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        boolean boolean34 = dateTimeZone32.equals((java.lang.Object) dateTimeFormatter33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.withZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 80, dateTimeZone32);
        org.joda.time.DateTime dateTime37 = yearMonthDay19.toDateTimeAtMidnight(dateTimeZone32);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfCentury(3);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertArrayEquals(intArray14, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.joda.time.Chronology chronology6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(32, 0, 86400, 1, (int) (short) 1, 32, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(2746894413240000000L);
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType4 = days3.getFieldType();
        org.joda.time.PeriodType periodType5 = days3.getPeriodType();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property11 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType10.getField((org.joda.time.Chronology) julianChronology13);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.Chronology chronology19 = julianChronology18.withUTC();
        mutableInterval16.setChronology((org.joda.time.Chronology) julianChronology18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 0, periodType5, (org.joda.time.Chronology) julianChronology18);
        org.joda.time.PeriodType periodType22 = periodType5.withDaysRemoved();
        java.lang.String str23 = periodType22.getName();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology25 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone24);
        org.joda.time.Days days26 = org.joda.time.Days.THREE;
        int[] intArray29 = gregorianChronology25.get((org.joda.time.ReadablePeriod) days26, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology25.dayOfMonth();
        org.joda.time.DurationField durationField31 = gregorianChronology25.weeks();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology25);
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology25.yearOfEra();
        org.joda.time.Period period34 = duration1.toPeriod(periodType22, (org.joda.time.Chronology) gregorianChronology25);
        java.lang.String str35 = periodType22.getName();
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DaysNoDays" + "'", str23, "DaysNoDays");
        org.junit.Assert.assertNotNull(gregorianChronology25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertArrayEquals(intArray29, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DaysNoDays" + "'", str35, "DaysNoDays");
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        mutablePeriod0.addYears(100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.DateMidnight dateMidnight9 = property8.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plusWeeks((int) (byte) 10);
        org.joda.time.Days days12 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType13 = days12.getFieldType();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.withFieldAdded(durationFieldType13, 26);
        mutablePeriod0.add(durationFieldType13, 1);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property23 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        org.joda.time.Chronology chronology26 = julianChronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType22.getField((org.joda.time.Chronology) julianChronology25);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29);
        org.joda.time.Chronology chronology31 = julianChronology30.withUTC();
        mutableInterval28.setChronology((org.joda.time.Chronology) julianChronology30);
        mutablePeriod0.add((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35);
        org.joda.time.Chronology chronology37 = julianChronology36.withUTC();
        org.joda.time.DurationField durationField38 = julianChronology36.weekyears();
        mutablePeriod0.add((long) 'a', (org.joda.time.Chronology) julianChronology36);
        mutablePeriod0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(julianChronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(julianChronology30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(julianChronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property4 = dateTime2.property(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.Chronology chronology7 = julianChronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType3.getField((org.joda.time.Chronology) julianChronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = julianChronology6.withZone(dateTimeZone9);
        org.joda.time.chrono.StrictChronology strictChronology11 = org.joda.time.chrono.StrictChronology.getInstance(chronology10);
        org.joda.time.format.PeriodFormatter periodFormatter12 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale13 = periodFormatter12.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (-86401), chronology10, locale13, (java.lang.Integer) 1440, 7);
        java.lang.Integer int17 = dateTimeParserBucket16.getOffsetInteger();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(julianChronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(strictChronology11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = julianChronology5.withZone(dateTimeZone8);
        org.joda.time.chrono.StrictChronology strictChronology10 = org.joda.time.chrono.StrictChronology.getInstance(chronology9);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = strictChronology10.getDateTimeMillis(12, (int) (byte) 100, 59, 1440);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(strictChronology10);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.JulianChronology julianChronology1 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone0);
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.now((org.joda.time.Chronology) julianChronology1);
        org.joda.time.MonthDay.Property property3 = monthDay2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology7, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfWeek();
        int int14 = dateTime12.getWeekyear();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.plus(readableDuration15);
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        boolean boolean18 = dateTimeParserBucket10.restoreState((java.lang.Object) property17);
        java.util.Locale locale19 = dateTimeParserBucket10.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay20 = property3.setCopy("2080-06-30", locale19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2080-06-30\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(julianChronology1);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.Instant instant4 = dateTime3.toInstant();
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.TWO;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) weeks5);
        long long7 = mutableInterval6.getStartMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        int int3 = mutablePeriod0.getSeconds();
        int int4 = mutablePeriod0.getSeconds();
        org.joda.time.Period period5 = mutablePeriod0.toPeriod();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(0L, 26L);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.weekyear();
        int int7 = dateMidnight5.getDayOfWeek();
        org.joda.time.Chronology chronology8 = dateMidnight5.getChronology();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        int int13 = dateMidnight5.get(dateTimeFieldType12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod0, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.Months months15 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Interval interval17 = interval14.withStartMillis((long) (-1));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(months15);
        org.junit.Assert.assertNotNull(interval17);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology1.monthOfYear();
        int int8 = gregorianChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone9 = gregorianChronology1.getZone();
        org.joda.time.Chronology chronology10 = gregorianChronology1.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gregorianChronology1.getDateTimeMillis(82799999, (int) (byte) 1, 5, 10, (int) '#', (-20274), 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -20274 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = localDate0.getChronology();
        org.joda.time.LocalDate localDate3 = localDate0.plusDays(20179);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) str4);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod();
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType8 = days7.getFieldType();
        org.joda.time.PeriodType periodType9 = days7.getPeriodType();
        mutablePeriod6.add((org.joda.time.ReadablePeriod) days7);
        int int11 = mutablePeriod6.getHours();
        org.joda.time.DateTime dateTime12 = dateTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime5.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2080-06-30" + "'", str4, "2080-06-30");
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.joda.time.Months months0 = org.joda.time.Months.ZERO;
        org.junit.Assert.assertNotNull(months0);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType0 = org.joda.time.chrono.IslamicChronology.LEAP_YEAR_INDIAN;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Chronology chronology11 = julianChronology7.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) '#', chronology11);
        org.joda.time.LocalTime localTime14 = localTime12.plusSeconds((int) 'a');
        org.joda.time.LocalTime.Property property15 = localTime12.minuteOfHour();
        boolean boolean16 = leapYearPatternType0.equals((java.lang.Object) property15);
        org.junit.Assert.assertNotNull(leapYearPatternType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.weekyear();
        int int4 = dateMidnight2.getDayOfWeek();
        org.joda.time.Chronology chronology5 = dateMidnight2.getChronology();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        int int10 = dateMidnight2.get(dateTimeFieldType9);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod();
        mutablePeriod11.setHours(5);
        int int14 = mutablePeriod11.getSeconds();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Period period16 = interval15.toPeriod();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDayOfYear(8);
        int int3 = mutableDateTime0.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.centuryOfEra();
        int int5 = mutableDateTime0.getHourOfDay();
        long long6 = mutableDateTime0.getMillis();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 25 + "'", int3 == 25);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
// flaky "1) test0575(RegressionTest1)":         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1736364564229L + "'", long6 == 1736364564229L);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(1, 4, 2080, 0, 20179, 9, 31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 20179 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        boolean boolean5 = days0.equals((java.lang.Object) property3);
        org.joda.time.DateTime dateTime6 = property3.getDateTime();
        org.joda.time.DateTime dateTime7 = dateTime6.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths((int) (byte) 0);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        int int0 = org.joda.time.YearMonthDay.YEAR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDayOfYear(8);
        mutableDateTime0.setDayOfYear(31);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add((long) (-19));
        org.joda.time.MutableDateTime mutableDateTime9 = property5.add((-19));
        org.joda.time.MutableDateTime mutableDateTime10 = property5.roundHalfFloor();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((-1511999993L), (long) (short) 1);
        java.lang.Object obj3 = mutablePeriod2.clone();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "P2W3DT11H59M59.994S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "P2W3DT11H59M59.994S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "P2W3DT11H59M59.994S");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology5, locale7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfWeek();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.plus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        boolean boolean16 = dateTimeParserBucket8.restoreState((java.lang.Object) property15);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket8.getZone();
        org.joda.time.DateTime dateTime18 = localDate0.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone20 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone17);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(cachedDateTimeZone20);
        org.junit.Assert.assertNotNull(iSOChronology21);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone1);
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        int[] intArray6 = gregorianChronology2.get((org.joda.time.ReadablePeriod) days3, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology2.dayOfMonth();
        org.joda.time.DurationField durationField8 = gregorianChronology2.years();
        org.joda.time.DurationField durationField9 = gregorianChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = julianChronology11.seconds();
        int int13 = durationField9.compareTo(durationField12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        org.joda.time.Chronology chronology20 = julianChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType16.getField((org.joda.time.Chronology) julianChronology19);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField21.getAsShortText((int) (byte) 0, locale23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property28 = dateTime26.property(dateTimeFieldType27);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField21, dateTimeFieldType27, (int) (byte) -1, (int) (byte) -1, (-35));
        int int34 = offsetDateTimeField32.getLeapAmount((long) (short) 0);
        org.joda.time.DurationField durationField35 = offsetDateTimeField32.getRangeDurationField();
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField36 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, durationField9, durationField35);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType0.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(julianChronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationFieldType37);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MIN_VALUE;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = hours0.negated();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addMonths((int) (short) 100);
        mutableDateTime0.setMillis((long) (byte) 1);
        java.lang.String str5 = mutableDateTime0.toString();
        org.joda.time.DateTime dateTime6 = mutableDateTime0.toDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str5, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYearOfCentury(100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay((java.lang.Object) dateMidnight4, chronology7);
        org.joda.time.MonthDay.Property property9 = monthDay8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.Chronology chronology15 = julianChronology14.withUTC();
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology14, locale16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology22);
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology22.weekyearOfCentury();
        int int25 = dateMidnight20.get(dateTimeField24);
        org.joda.time.field.SkipDateTimeField skipDateTimeField26 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology14, dateTimeField24);
        int int27 = skipDateTimeField26.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusHours((int) (byte) -1);
        int int32 = localDateTime31.size();
        org.joda.time.format.PeriodFormatter periodFormatter34 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale35 = periodFormatter34.getLocale();
        java.lang.String str36 = skipDateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDateTime31, (int) 'a', locale35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay37 = property9.setCopy("Coordinated Universal Time", locale35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Coordinated Universal Time\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26 + "'", int25 == 26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(periodFormatter34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds3 = seconds1.plus((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType4 = seconds3.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds5 = seconds0.plus(seconds3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -2147483648");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(durationFieldType4);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("31");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Instant instant2 = gJChronology1.getGregorianCutover();
        org.joda.time.DurationField durationField3 = gJChronology1.seconds();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        int[] intArray9 = gregorianChronology5.get((org.joda.time.ReadablePeriod) days6, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology5.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology5.monthOfYear();
        int int12 = gregorianChronology5.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = gregorianChronology5.getZone();
        org.joda.time.Chronology chronology14 = gJChronology1.withZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = iSOChronology0.withZone(dateTimeZone13);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(gJChronology1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertArrayEquals(intArray9, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        int int0 = org.joda.time.DateTimeConstants.SECONDS_PER_MINUTE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 60 + "'", int0 == 60);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        int int16 = skipDateTimeField14.getMaximumValue(101L);
        long long19 = skipDateTimeField14.set((long) 1969, (int) (byte) 10);
        java.lang.String str21 = skipDateTimeField14.getAsShortText((long) 2);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfYear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.dayOfMonth();
        int int28 = localDateTime25.getEra();
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31);
        org.joda.time.Chronology chronology33 = julianChronology32.withUTC();
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology32, locale34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology40 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology40);
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology40.weekyearOfCentury();
        int int43 = dateMidnight38.get(dateTimeField42);
        org.joda.time.field.SkipDateTimeField skipDateTimeField44 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology32, dateTimeField42);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfWeek();
        int int50 = dateTime48.getWeekyear();
        int int51 = dateTime48.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology53 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone52);
        org.joda.time.Days days54 = org.joda.time.Days.THREE;
        int[] intArray57 = gregorianChronology53.get((org.joda.time.ReadablePeriod) days54, (long) 0, (-1L));
        org.joda.time.Duration duration58 = days54.toStandardDuration();
        org.joda.time.DateTime dateTime60 = dateTime48.withDurationAdded((org.joda.time.ReadableDuration) duration58, 26);
        org.joda.time.Duration duration62 = duration58.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration63 = duration62.toDuration();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property66 = dateTime65.dayOfWeek();
        org.joda.time.format.PeriodFormatter periodFormatter67 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter69 = periodFormatter67.withParseType(periodType68);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration62, (org.joda.time.ReadableInstant) dateTime65, periodType68);
        java.lang.String str71 = dateTime65.toString();
        org.joda.time.format.PeriodFormatter periodFormatter73 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale74 = periodFormatter73.getLocale();
        java.lang.String str75 = dateTime65.toString("00:01:37.035", locale74);
        long long76 = skipDateTimeField44.set((long) 32, "60", locale74);
        java.lang.String str77 = skipDateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, locale74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime79 = localDateTime25.withMonthOfYear((-19));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26 + "'", int13 == 26);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1924473598031L) + "'", long19 == (-1924473598031L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "71" + "'", str21, "71");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(julianChronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(gregorianChronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 26 + "'", int43 == 26);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertArrayEquals(intArray57, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(periodFormatter67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodFormatter69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str71, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(periodFormatter73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "00:01:37.035" + "'", str75, "00:01:37.035");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-347155199968L) + "'", long76 == (-347155199968L));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "69" + "'", str77, "69");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((org.joda.time.ReadablePeriod) weeks3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        boolean boolean6 = weeks3.isSupported(durationFieldType5);
        org.joda.time.IllegalFieldValueException illegalFieldValueException8 = new org.joda.time.IllegalFieldValueException(durationFieldType5, "2025-04-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        int int3 = mutablePeriod0.getSeconds();
        int int4 = mutablePeriod0.getYears();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((org.joda.time.ReadablePeriod) weeks3);
        java.util.Date date5 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay6.toDateMidnight(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.plusMonths(8);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = property11.withMinimumValue();
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds15 = seconds13.plus((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType16 = seconds15.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay12.withFieldAdded(durationFieldType16, 3600);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'seconds' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Mar 31 20:00:00 EDT 2025");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(durationFieldType16);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property4 = dateTime2.property(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.Chronology chronology7 = julianChronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType3.getField((org.joda.time.Chronology) julianChronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = julianChronology6.withZone(dateTimeZone9);
        org.joda.time.chrono.StrictChronology strictChronology11 = org.joda.time.chrono.StrictChronology.getInstance(chronology10);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((long) 1970, (org.joda.time.Chronology) strictChronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusMonths(0);
        org.joda.time.YearMonth.Property property15 = yearMonth14.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth17 = property15.setCopy("DaysNoDays");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DaysNoDays\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(julianChronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(strictChronology11);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.weekyear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DurationField durationField6 = gregorianChronology1.halfdays();
        org.joda.time.Chronology chronology7 = gregorianChronology1.withUTC();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now((org.joda.time.Chronology) gregorianChronology1);
        java.util.Date date9 = localDate8.toDate();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Apr 01 00:00:00 EDT 2025");
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        int int1 = org.joda.time.field.FieldUtils.safeNegate(4);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-4) + "'", int1 == (-4));
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.LocalDate.Property property5 = localDate4.era();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfCentury(0);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology13, locale15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        int int20 = dateTime18.getWeekyear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readableDuration21);
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        boolean boolean24 = dateTimeParserBucket16.restoreState((java.lang.Object) property23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket16.getZone();
        org.joda.time.DateTime dateTime26 = localDate8.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = localDate4.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology31 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone30);
        org.joda.time.Days days32 = org.joda.time.Days.THREE;
        int[] intArray35 = gregorianChronology31.get((org.joda.time.ReadablePeriod) days32, (long) 0, (-1L));
        org.joda.time.Duration duration36 = days32.toStandardDuration();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfWeek();
        int int40 = dateTime38.getWeekyear();
        int int41 = dateTime38.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology43 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone42);
        org.joda.time.Days days44 = org.joda.time.Days.THREE;
        int[] intArray47 = gregorianChronology43.get((org.joda.time.ReadablePeriod) days44, (long) 0, (-1L));
        org.joda.time.Duration duration48 = days44.toStandardDuration();
        org.joda.time.DateTime dateTime50 = dateTime38.withDurationAdded((org.joda.time.ReadableDuration) duration48, 26);
        boolean boolean51 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology53 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.dayOfYear();
        org.joda.time.DateMidnight dateMidnight56 = property55.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plusWeeks((int) (byte) 10);
        org.joda.time.Period period59 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.DateTime dateTime60 = dateTime29.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now();
        mutableDateTime61.setMillis((-1L));
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime67 = dateTime65.withYearOfCentury(60);
        mutableDateTime61.setMillis((org.joda.time.ReadableInstant) dateTime67);
        java.util.Date date69 = dateTime67.toDate();
        boolean boolean70 = dateTime29.equals((java.lang.Object) dateTime67);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianChronology31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertArrayEquals(intArray35, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertArrayEquals(intArray47, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(gregorianChronology53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Dec 31 19:00:00 EST 1959");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        boolean boolean5 = days0.equals((java.lang.Object) property3);
        org.joda.time.DateTime dateTime7 = property3.addToCopy(1970);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone8);
        org.joda.time.Days days10 = org.joda.time.Days.THREE;
        int[] intArray13 = gregorianChronology9.get((org.joda.time.ReadablePeriod) days10, (long) 0, (-1L));
        org.joda.time.DurationField durationField14 = gregorianChronology9.halfdays();
        org.joda.time.Chronology chronology15 = gregorianChronology9.withUTC();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime7, chronology15);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertArrayEquals(intArray13, new int[] { 0 });
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DurationField durationField6 = gregorianChronology1.halfdays();
        org.joda.time.Chronology chronology7 = gregorianChronology1.withUTC();
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.now((org.joda.time.Chronology) gregorianChronology1);
        int int9 = monthDay8.getMonthOfYear();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((org.joda.time.ReadablePeriod) weeks3);
        java.util.Date date5 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay6.toDateMidnight(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.plusMonths(8);
        int int11 = yearMonthDay6.getYear();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Mar 31 20:00:00 EDT 2025");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2025 + "'", int11 == 2025);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType25.getField((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = julianChronology28.withZone(dateTimeZone31);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) '#', chronology32);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds((int) 'a');
        int[] intArray39 = new int[] { 26, '#', 31 };
        int int40 = offsetDateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localTime35, intArray39);
        org.joda.time.LocalTime.Property property41 = localTime35.minuteOfHour();
        org.joda.time.LocalTime localTime42 = property41.roundCeilingCopy();
        org.joda.time.LocalTime localTime44 = localTime42.plusSeconds(32);
        org.joda.time.Chronology chronology45 = localTime42.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertArrayEquals(intArray39, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(chronology45);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.joda.time.DurationField durationField0 = org.joda.time.field.MillisDurationField.INSTANCE;
        org.junit.Assert.assertNotNull(durationField0);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.joda.time.Months months0 = org.joda.time.Months.ONE;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) months0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as months is not precise in the period P1M");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(months0);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeField9.getAsShortText((int) (byte) 0, locale11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property16 = dateTime14.property(dateTimeFieldType15);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField20 = new org.joda.time.field.OffsetDateTimeField(dateTimeField9, dateTimeFieldType15, (int) (byte) -1, (int) (byte) -1, (-35));
        int int22 = offsetDateTimeField20.getLeapAmount((long) (short) 0);
        int int24 = offsetDateTimeField20.get((long) 3);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology28, locale30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology36);
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology36.weekyearOfCentury();
        int int39 = dateMidnight34.get(dateTimeField38);
        org.joda.time.field.SkipDateTimeField skipDateTimeField40 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology28, dateTimeField38);
        int int41 = skipDateTimeField40.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusHours((int) (byte) -1);
        int int46 = localDateTime45.size();
        org.joda.time.format.PeriodFormatter periodFormatter48 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale49 = periodFormatter48.getLocale();
        java.lang.String str50 = skipDateTimeField40.getAsShortText((org.joda.time.ReadablePartial) localDateTime45, (int) 'a', locale49);
        java.lang.String str51 = offsetDateTimeField20.getAsShortText((long) 60, locale49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = localDate0.toString("org.joda.time.IllegalInstantException: hi!", locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(gregorianChronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 26 + "'", int39 == 26);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(periodFormatter48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "97" + "'", str50, "97");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1" + "'", str51, "-1");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.weekyear();
        int int7 = dateMidnight5.getDayOfWeek();
        org.joda.time.Chronology chronology8 = dateMidnight5.getChronology();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        int int13 = dateMidnight5.get(dateTimeFieldType12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod0, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.DateMidnight.Property property15 = dateMidnight5.year();
        java.lang.String str16 = property15.getAsShortText();
        java.lang.String str17 = property15.getName();
        org.joda.time.Days days19 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType20 = days19.getFieldType();
        org.joda.time.PeriodType periodType21 = days19.getPeriodType();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property27 = dateTime25.property(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.Chronology chronology30 = julianChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType26.getField((org.joda.time.Chronology) julianChronology29);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        org.joda.time.Chronology chronology35 = julianChronology34.withUTC();
        mutableInterval32.setChronology((org.joda.time.Chronology) julianChronology34);
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 0, periodType21, (org.joda.time.Chronology) julianChronology34);
        org.joda.time.Days days38 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType39 = days38.getFieldType();
        org.joda.time.PeriodType periodType40 = days38.getPeriodType();
        boolean boolean41 = periodType21.equals((java.lang.Object) periodType40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((java.lang.Object) str17, periodType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"year\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2025" + "'", str16, "2025");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "year" + "'", str17, "year");
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology5, locale7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfWeek();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.plus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        boolean boolean16 = dateTimeParserBucket8.restoreState((java.lang.Object) property15);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket8.getZone();
        org.joda.time.DateTime dateTime18 = localDate0.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone20 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone17);
        java.util.TimeZone timeZone21 = cachedDateTimeZone20.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        long long24 = dateTimeZone22.convertUTCToLocal((long) 31);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(cachedDateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 31L + "'", long24 == 31L);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = days0.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType3 = days0.getFieldType(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 59");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addMonths((int) (short) 100);
        mutableDateTime0.setMillis((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDate(604800000, (-4), 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 604800000 for year must be in the range [-292275055,292278994]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        mutablePeriod0.setPeriod(86400000, 13, (int) (byte) -1, (int) ' ', 26, (-35), (int) (short) -1, (int) (short) 100);
        org.joda.time.Days days13 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType14 = days13.getFieldType();
        org.joda.time.PeriodType periodType15 = days13.getPeriodType();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property21 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology24 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType20.getField((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        mutableInterval26.setChronology((org.joda.time.Chronology) julianChronology28);
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 0, periodType15, (org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfYear();
        org.joda.time.DateMidnight dateMidnight36 = property35.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plusWeeks((int) (byte) 10);
        org.joda.time.Days days39 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType40 = days39.getFieldType();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight38.withFieldAdded(durationFieldType40, 26);
        org.joda.time.Period period44 = period31.withFieldAdded(durationFieldType40, (int) (short) 1);
        boolean boolean45 = mutablePeriod0.isSupported(durationFieldType40);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property49 = dateTime47.property(dateTimeFieldType48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.chrono.JulianChronology julianChronology51 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone50);
        org.joda.time.Chronology chronology52 = julianChronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType48.getField((org.joda.time.Chronology) julianChronology51);
        java.util.Locale locale55 = null;
        java.lang.String str56 = dateTimeField53.getAsShortText((int) (byte) 0, locale55);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property60 = dateTime58.property(dateTimeFieldType59);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField64 = new org.joda.time.field.OffsetDateTimeField(dateTimeField53, dateTimeFieldType59, (int) (byte) -1, (int) (byte) -1, (-35));
        int int66 = offsetDateTimeField64.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField67 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField64);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property72 = dateTime70.property(dateTimeFieldType71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.chrono.JulianChronology julianChronology74 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone73);
        org.joda.time.Chronology chronology75 = julianChronology74.withUTC();
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType71.getField((org.joda.time.Chronology) julianChronology74);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.Chronology chronology78 = julianChronology74.withZone(dateTimeZone77);
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((long) '#', chronology78);
        org.joda.time.LocalTime localTime81 = localTime79.plusSeconds((int) 'a');
        int[] intArray85 = new int[] { 26, '#', 31 };
        int int86 = offsetDateTimeField64.getMinimumValue((org.joda.time.ReadablePartial) localTime81, intArray85);
        org.joda.time.Days days87 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType88 = days87.getFieldType();
        boolean boolean89 = localTime81.equals((java.lang.Object) durationFieldType88);
        mutablePeriod0.add(durationFieldType88, 1970);
        org.joda.time.DurationFieldType durationFieldType92 = org.joda.time.DurationFieldType.seconds();
        int int93 = mutablePeriod0.indexOf(durationFieldType92);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(julianChronology51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(julianChronology74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertArrayEquals(intArray85, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(days87);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 6 + "'", int93 == 6);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfYear();
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        boolean boolean11 = mutablePeriod9.equals((java.lang.Object) (-1L));
        mutablePeriod9.addMillis(1970);
        org.joda.time.Period period14 = period8.withFields((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Period period15 = period14.toPeriod();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.joda.time.Years years1 = org.joda.time.Years.years((int) (short) 0);
        org.joda.time.Years years3 = org.joda.time.Years.years((int) (short) 0);
        org.joda.time.Years years4 = years1.plus(years3);
        org.joda.time.DurationFieldType durationFieldType5 = years3.getFieldType();
        org.junit.Assert.assertNotNull(years1);
        org.junit.Assert.assertNotNull(years3);
        org.junit.Assert.assertNotNull(years4);
        org.junit.Assert.assertNotNull(durationFieldType5);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.dayOfMonth();
        int int21 = localDateTime18.getEra();
        int[] intArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = skipDateTimeField14.set((org.joda.time.ReadablePartial) localDateTime18, (-19), intArray23, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26 + "'", int13 == 26);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        org.joda.time.Chronology chronology23 = julianChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType19.getField((org.joda.time.Chronology) julianChronology22);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.Chronology chronology28 = julianChronology27.withUTC();
        mutableInterval25.setChronology((org.joda.time.Chronology) julianChronology27);
        mutableInterval25.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        int int35 = dateTime33.getWeekyear();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.plus(readableDuration36);
        boolean boolean38 = mutableInterval25.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Interval interval39 = mutableInterval25.toInterval();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone41);
        org.joda.time.Days days43 = org.joda.time.Days.THREE;
        int[] intArray46 = gregorianChronology42.get((org.joda.time.ReadablePeriod) days43, (long) 0, (-1L));
        org.joda.time.Duration duration47 = days43.toStandardDuration();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfWeek();
        int int51 = dateTime49.getWeekyear();
        int int52 = dateTime49.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology54 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone53);
        org.joda.time.Days days55 = org.joda.time.Days.THREE;
        int[] intArray58 = gregorianChronology54.get((org.joda.time.ReadablePeriod) days55, (long) 0, (-1L));
        org.joda.time.Duration duration59 = days55.toStandardDuration();
        org.joda.time.DateTime dateTime61 = dateTime49.withDurationAdded((org.joda.time.ReadableDuration) duration59, 26);
        boolean boolean62 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Interval interval63 = interval39.withDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime67 = dateTime65.withDayOfMonth((int) (byte) 1);
        org.joda.time.Instant instant68 = dateTime67.toInstant();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.Instant instant71 = instant68.minus((org.joda.time.ReadableDuration) duration70);
        boolean boolean72 = duration47.isEqual((org.joda.time.ReadableDuration) duration70);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertArrayEquals(intArray46, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology54);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertArrayEquals(intArray58, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property6 = dateTime4.property(dateTimeFieldType5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology9 = julianChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField((org.joda.time.Chronology) julianChronology8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        mutableInterval11.setChronology((org.joda.time.Chronology) julianChronology13);
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 84, (org.joda.time.Chronology) julianChronology13);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(julianChronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.Duration duration6 = days2.toStandardDuration();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfWeek();
        int int10 = dateTime8.getWeekyear();
        int int11 = dateTime8.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology13 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone12);
        org.joda.time.Days days14 = org.joda.time.Days.THREE;
        int[] intArray17 = gregorianChronology13.get((org.joda.time.ReadablePeriod) days14, (long) 0, (-1L));
        org.joda.time.Duration duration18 = days14.toStandardDuration();
        org.joda.time.DateTime dateTime20 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration18, 26);
        boolean boolean21 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration22 = duration18.toDuration();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertArrayEquals(intArray17, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration22);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDayOfYear(8);
        mutableDateTime0.setDayOfYear(31);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.monthOfYear();
        mutableDateTime0.addMillis(7);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.lang.Number number1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException("DurationField[halfdays]", number1, (java.lang.Number) (-1L), (java.lang.Number) 31);
        java.lang.String str5 = illegalFieldValueException4.getIllegalValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((java.lang.Object) illegalFieldValueException4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.IllegalFieldValueException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "null" + "'", str5, "null");
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        mutablePeriod0.setPeriod(86400000, 13, (int) (byte) -1, (int) ' ', 26, (-35), (int) (short) -1, (int) (short) 100);
        int int12 = mutablePeriod0.getDays();
        org.joda.time.Period period14 = org.joda.time.Period.days(7);
        org.joda.time.Period period16 = period14.plusMonths(60);
        org.joda.time.Period period18 = period16.minusDays((-86401));
        mutablePeriod0.add((org.joda.time.ReadablePeriod) period16);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology1.millis();
        org.joda.time.DurationField durationField8 = gregorianChronology1.hours();
        long long10 = durationField8.getValueAsLong((long) 3600);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setHours(5);
        int int3 = mutablePeriod0.getSeconds();
        org.joda.time.Hours hours4 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours6 = hours4.dividedBy((int) (short) -1);
        mutablePeriod0.add((org.joda.time.ReadablePeriod) hours4);
        mutablePeriod0.setDays((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology10 = julianChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType6.getField((org.joda.time.Chronology) julianChronology9);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.Chronology chronology15 = julianChronology14.withUTC();
        mutableInterval12.setChronology((org.joda.time.Chronology) julianChronology14);
        mutableInterval12.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfWeek();
        int int22 = dateTime20.getWeekyear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.plus(readableDuration23);
        boolean boolean25 = mutableInterval12.contains((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Days days26 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        boolean boolean31 = days26.equals((java.lang.Object) property29);
        org.joda.time.DateTime dateTime32 = property29.getDateTime();
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        mutableInterval12.setStart((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property35 = dateTime33.dayOfYear();
        org.joda.time.Period period36 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property37 = dateTime33.hourOfDay();
        int int38 = property37.getMinimumValue();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(julianChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(82800000L, (-86339820672000000L), periodType2);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        boolean boolean5 = days0.equals((java.lang.Object) property3);
        org.joda.time.DateTime dateTime6 = property3.getDateTime();
        org.joda.time.DurationField durationField7 = property3.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = property11.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plusWeeks((int) (byte) 10);
        org.joda.time.Days days15 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType16 = days15.getFieldType();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.withFieldAdded(durationFieldType16, 26);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfWeek();
        int int20 = property3.getDifference((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateTime dateTime21 = property3.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = property3.setCopy((-86401));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -86401 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-20274) + "'", int20 == (-20274));
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plusWeeks((int) (byte) 10);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType8 = days7.getFieldType();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.withFieldAdded(durationFieldType8, 26);
        org.joda.time.DateMidnight.Property property11 = dateMidnight6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        org.joda.time.Chronology chronology16 = julianChronology15.withUTC();
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology15, locale17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology23 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology23.weekyearOfCentury();
        int int26 = dateMidnight21.get(dateTimeField25);
        org.joda.time.field.SkipDateTimeField skipDateTimeField27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology15, dateTimeField25);
        int int29 = skipDateTimeField27.getMaximumValue(101L);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfWeek();
        int int34 = dateTime32.getWeekyear();
        int int35 = dateTime32.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone36);
        org.joda.time.Days days38 = org.joda.time.Days.THREE;
        int[] intArray41 = gregorianChronology37.get((org.joda.time.ReadablePeriod) days38, (long) 0, (-1L));
        org.joda.time.Duration duration42 = days38.toStandardDuration();
        org.joda.time.DateTime dateTime44 = dateTime32.withDurationAdded((org.joda.time.ReadableDuration) duration42, 26);
        org.joda.time.Duration duration46 = duration42.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration47 = duration46.toDuration();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfWeek();
        org.joda.time.format.PeriodFormatter periodFormatter51 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter53 = periodFormatter51.withParseType(periodType52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime49, periodType52);
        java.lang.String str55 = dateTime49.toString();
        org.joda.time.format.PeriodFormatter periodFormatter57 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale58 = periodFormatter57.getLocale();
        java.lang.String str59 = dateTime49.toString("00:01:37.035", locale58);
        java.lang.String str60 = skipDateTimeField27.getAsText(60, locale58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight61 = property11.setCopy("71", locale58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(gregorianChronology20);
        org.junit.Assert.assertNotNull(gregorianChronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 26 + "'", int26 == 26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertArrayEquals(intArray41, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(periodFormatter51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodFormatter53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str55, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(periodFormatter57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "00:01:37.035" + "'", str59, "00:01:37.035");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "60" + "'", str60, "60");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMonths(0);
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(82799999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82799999 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfWeek();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfWeek();
        int int5 = dateTime3.getMillisOfSecond();
        int int6 = property1.getDifference((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property7 = dateTime3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20179 + "'", int6 == 20179);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.ZoneInfoProvider zoneInfoProvider1 = new org.joda.time.tz.ZoneInfoProvider("2025-04-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Resource not found: \"2025-04-01T00:00:00.000Z/ZoneInfoMap\" ClassLoader: sun.misc.Launcher$AppClassLoader@7852e922");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology13, locale15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology21);
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology21.weekyearOfCentury();
        int int24 = dateMidnight19.get(dateTimeField23);
        org.joda.time.field.SkipDateTimeField skipDateTimeField25 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology13, dateTimeField23);
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology13);
        org.joda.time.DateTimeZone dateTimeZone27 = julianChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology13.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 26 + "'", int24 == 26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology1.weekyear();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        int int4 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        int[] intArray10 = gregorianChronology6.get((org.joda.time.ReadablePeriod) days7, (long) 0, (-1L));
        org.joda.time.Duration duration11 = days7.toStandardDuration();
        org.joda.time.DateTime dateTime13 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration11, 26);
        org.joda.time.Duration duration15 = duration11.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        org.joda.time.format.PeriodFormatter periodFormatter20 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter20.withParseType(periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime18, periodType21);
        java.lang.String str24 = dateTime18.toString();
        boolean boolean26 = dateTime18.isEqual(10L);
        org.joda.time.DateTime dateTime28 = dateTime18.minus((long) 26);
        org.joda.time.DateTime dateTime30 = dateTime18.plusDays(20179);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (short) -1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        boolean boolean35 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateMidnight33);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertArrayEquals(intArray10, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str24, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.PeriodType periodType3 = days1.getPeriodType();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property9 = dateTime7.property(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        org.joda.time.Chronology chronology12 = julianChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType8.getField((org.joda.time.Chronology) julianChronology11);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.Chronology chronology17 = julianChronology16.withUTC();
        mutableInterval14.setChronology((org.joda.time.Chronology) julianChronology16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 0, periodType3, (org.joda.time.Chronology) julianChronology16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = property23.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plusWeeks((int) (byte) 10);
        org.joda.time.Days days27 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType28 = days27.getFieldType();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.withFieldAdded(durationFieldType28, 26);
        org.joda.time.Period period32 = period19.withFieldAdded(durationFieldType28, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period34 = period19.minusMonths(19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight5 = property3.getDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((org.joda.time.ReadablePeriod) weeks9);
        java.util.Date date11 = dateMidnight8.toDate();
        org.joda.time.YearMonthDay yearMonthDay12 = org.joda.time.YearMonthDay.fromDateFields(date11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay12.toDateMidnight(dateTimeZone13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.plusMonths(8);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.withMinimumValue();
        org.joda.time.format.PeriodFormatter periodFormatter20 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale21 = periodFormatter20.getLocale();
        java.lang.String str22 = property17.getAsText(locale21);
        java.lang.String str23 = property3.getAsText(locale21);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Mar 31 20:00:00 EDT 2025");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "March" + "'", str22, "March");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "91" + "'", str23, "91");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        int int0 = org.joda.time.DateTimeConstants.CE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        java.math.RoundingMode roundingMode2 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long3 = org.joda.time.field.FieldUtils.safeDivide((long) 84, (long) 0, roundingMode2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.localDateParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("0");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDayOfYear(8);
        int int3 = mutableDateTime0.getYearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod();
        boolean boolean6 = mutablePeriod4.equals((java.lang.Object) (-1L));
        mutablePeriod4.addYears(100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight13 = property12.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusWeeks((int) (byte) 10);
        org.joda.time.Days days16 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType17 = days16.getFieldType();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.withFieldAdded(durationFieldType17, 26);
        mutablePeriod4.add(durationFieldType17, 1);
        mutableDateTime0.add(durationFieldType17, (-1));
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology25 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone24);
        org.joda.time.Days days26 = org.joda.time.Days.THREE;
        int[] intArray29 = gregorianChronology25.get((org.joda.time.ReadablePeriod) days26, (long) 0, (-1L));
        org.joda.time.Duration duration30 = days26.toStandardDuration();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfWeek();
        int int34 = dateTime32.getWeekyear();
        int int35 = dateTime32.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone36);
        org.joda.time.Days days38 = org.joda.time.Days.THREE;
        int[] intArray41 = gregorianChronology37.get((org.joda.time.ReadablePeriod) days38, (long) 0, (-1L));
        org.joda.time.Duration duration42 = days38.toStandardDuration();
        org.joda.time.DateTime dateTime44 = dateTime32.withDurationAdded((org.joda.time.ReadableDuration) duration42, 26);
        boolean boolean45 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfYear();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology53 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone52);
        org.joda.time.Days days54 = org.joda.time.Days.THREE;
        int[] intArray57 = gregorianChronology53.get((org.joda.time.ReadablePeriod) days54, (long) 0, (-1L));
        org.joda.time.Duration duration58 = days54.toStandardDuration();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime49.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration60 = duration30.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableDuration) duration58, periodType61);
        mutableDateTime0.setWeekyear(12);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 25 + "'", int3 == 25);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(gregorianChronology25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertArrayEquals(intArray29, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertArrayEquals(intArray41, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(gregorianChronology53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertArrayEquals(intArray57, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(duration60);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfWeek();
        int int9 = dateTime7.getWeekyear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime7.plus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) property12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket5.getZone();
        int int16 = dateTimeZone14.getOffset(101L);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        mutableInterval10.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        int int20 = dateTime18.getWeekyear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readableDuration21);
        boolean boolean23 = mutableInterval10.contains((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Days days24 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property27.getFieldType();
        boolean boolean29 = days24.equals((java.lang.Object) property27);
        org.joda.time.DateTime dateTime30 = property27.getDateTime();
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        mutableInterval10.setStart((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39);
        org.joda.time.Chronology chronology41 = julianChronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType37.getField((org.joda.time.Chronology) julianChronology40);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology40);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone44);
        org.joda.time.Chronology chronology46 = julianChronology45.withUTC();
        mutableInterval43.setChronology((org.joda.time.Chronology) julianChronology45);
        mutableInterval43.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfWeek();
        int int53 = dateTime51.getWeekyear();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTime dateTime55 = dateTime51.plus(readableDuration54);
        boolean boolean56 = mutableInterval43.contains((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = mutableInterval43.copy();
        mutableInterval57.setStartMillis((long) (byte) 0);
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property66 = dateTime64.property(dateTimeFieldType65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.chrono.JulianChronology julianChronology68 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone67);
        org.joda.time.Chronology chronology69 = julianChronology68.withUTC();
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType65.getField((org.joda.time.Chronology) julianChronology68);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology68);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.chrono.JulianChronology julianChronology73 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone72);
        org.joda.time.Chronology chronology74 = julianChronology73.withUTC();
        mutableInterval71.setChronology((org.joda.time.Chronology) julianChronology73);
        mutableInterval71.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property80 = dateTime79.dayOfWeek();
        int int81 = dateTime79.getWeekyear();
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.DateTime dateTime83 = dateTime79.plus(readableDuration82);
        boolean boolean84 = mutableInterval71.contains((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.MutableInterval mutableInterval85 = mutableInterval71.copy();
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology87 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone86);
        org.joda.time.Days days88 = org.joda.time.Days.THREE;
        int[] intArray91 = gregorianChronology87.get((org.joda.time.ReadablePeriod) days88, (long) 0, (-1L));
        java.lang.String str92 = gregorianChronology87.toString();
        mutableInterval71.setChronology((org.joda.time.Chronology) gregorianChronology87);
        org.joda.time.Days days94 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType95 = days94.getFieldType();
        org.joda.time.PeriodType periodType96 = days94.getPeriodType();
        org.joda.time.Period period97 = mutableInterval71.toPeriod(periodType96);
        boolean boolean98 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval71);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(julianChronology40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(julianChronology45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(julianChronology68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(julianChronology73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1970 + "'", int81 == 1970);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mutableInterval85);
        org.junit.Assert.assertNotNull(gregorianChronology87);
        org.junit.Assert.assertNotNull(days88);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertArrayEquals(intArray91, new int[] { 0 });
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "GregorianChronology[UTC]" + "'", str92, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(days94);
        org.junit.Assert.assertNotNull(durationFieldType95);
        org.junit.Assert.assertNotNull(periodType96);
        org.junit.Assert.assertNotNull(period97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("31");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"31\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = localDate0.getChronology();
        org.joda.time.LocalDate localDate3 = localDate0.plusDays(20179);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra(5999999);
        org.joda.time.LocalTime localTime6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDate5.toLocalDateTime(localTime6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology1.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType25.getField((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = julianChronology28.withZone(dateTimeZone31);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) '#', chronology32);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds((int) 'a');
        int[] intArray39 = new int[] { 26, '#', 31 };
        int int40 = offsetDateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localTime35, intArray39);
        java.lang.String str41 = localTime35.toString();
        boolean boolean42 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertArrayEquals(intArray39, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "00:01:37.035" + "'", str41, "00:01:37.035");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateMidnight dateMidnight6 = property3.addToCopy((long) 25);
        boolean boolean7 = property3.isLeap();
        org.joda.time.DateMidnight dateMidnight9 = property3.setCopy("1");
        org.joda.time.DateMidnight dateMidnight11 = property3.setCopy(5);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "91" + "'", str4, "91");
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((org.joda.time.ReadablePeriod) weeks3);
        java.util.Date date5 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay6.toDateMidnight(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.plusMonths(8);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = property11.withMinimumValue();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod();
        boolean boolean15 = mutablePeriod13.equals((java.lang.Object) (-1L));
        mutablePeriod13.setPeriod(86400000, 13, (int) (byte) -1, (int) ' ', 26, (-35), (int) (short) -1, (int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay12.minus((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Seconds seconds26 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds28 = seconds26.plus((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType29 = seconds28.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay12.withFieldAdded(durationFieldType29, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'seconds' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Mar 31 20:00:00 EDT 2025");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(durationFieldType29);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((org.joda.time.ReadablePeriod) weeks3);
        java.util.Date date5 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay6.toDateMidnight(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.plusMonths(8);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay6.monthOfYear();
        org.joda.time.Period period13 = org.joda.time.Period.days(7);
        org.joda.time.Period period15 = period13.plusMonths(60);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period13, (int) (short) 1);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.monthOfYear();
        int int19 = yearMonthDay17.getYear();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Mar 31 20:00:00 EDT 2025");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2025 + "'", int19 == 2025);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.joda.time.IllegalInstantException illegalInstantException1 = new org.joda.time.IllegalInstantException("hi!");
        boolean boolean2 = org.joda.time.IllegalInstantException.isIllegalInstant((java.lang.Throwable) illegalInstantException1);
        java.lang.Throwable[] throwableArray3 = illegalInstantException1.getSuppressed();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertArrayEquals(throwableArray3, new java.lang.Throwable[] {});
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.lang.Appendable appendable0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.FormatUtils.appendPaddedInteger(appendable0, 259200L, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology10 = julianChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType6.getField((org.joda.time.Chronology) julianChronology9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = julianChronology9.withZone(dateTimeZone12);
        org.joda.time.chrono.StrictChronology strictChronology14 = org.joda.time.chrono.StrictChronology.getInstance(chronology13);
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((long) 1970, (org.joda.time.Chronology) strictChronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1, 20179, 100, (org.joda.time.Chronology) strictChronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 20179 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(julianChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(strictChronology14);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfYear();
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.DateTime.Property property9 = dateTime1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.joda.time.Months months2 = org.joda.time.Months.MAX_VALUE;
        org.joda.time.Months months3 = org.joda.time.Months.EIGHT;
        org.joda.time.Months months4 = months2.minus(months3);
        org.joda.time.PeriodType periodType5 = months3.getPeriodType();
        java.lang.String str6 = periodType5.toString();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfWeek();
        int int10 = dateTime8.getWeekyear();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        boolean boolean15 = dateTime12.isBefore(26L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime12, readableInstant16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.joda.time.Period period19 = new org.joda.time.Period((-347155199968L), (-259200000L), periodType5, chronology17);
        org.junit.Assert.assertNotNull(months2);
        org.junit.Assert.assertNotNull(months3);
        org.junit.Assert.assertNotNull(months4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Months]" + "'", str6, "PeriodType[Months]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("UTC");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"UTC\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = copticChronology0.getDateTimeMillis(0, 0, (int) (byte) 1, 330958, (int) (byte) 10, 70067048, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 330958 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.weekyear();
        int int4 = dateMidnight2.getDayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod();
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = days6.getFieldType();
        org.joda.time.PeriodType periodType8 = days6.getPeriodType();
        mutablePeriod5.add((org.joda.time.ReadablePeriod) days6);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfYear();
        org.joda.time.DateMidnight dateMidnight21 = property20.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plusWeeks((int) (byte) 10);
        org.joda.time.Days days24 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType25 = days24.getFieldType();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight23.withFieldAdded(durationFieldType25, 26);
        boolean boolean28 = localDateTime15.isSupported(durationFieldType25);
        int int29 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        int int30 = localDateTime15.getSecondOfMinute();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 59 + "'", int30 == 59);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology1.monthOfYear();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField8 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField7);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = delegatedDateTimeField8.set((-347155199968L), 2080);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2080 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology8.weekyearOfCentury();
        int int11 = dateMidnight6.get(dateTimeField10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        int int15 = dateTime13.getWeekyear();
        int int16 = dateTime13.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone17);
        org.joda.time.Days days19 = org.joda.time.Days.THREE;
        int[] intArray22 = gregorianChronology18.get((org.joda.time.ReadablePeriod) days19, (long) 0, (-1L));
        org.joda.time.Duration duration23 = days19.toStandardDuration();
        org.joda.time.DateTime dateTime25 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration23, 26);
        org.joda.time.Duration duration27 = duration23.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration28 = duration27.toDuration();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfWeek();
        org.joda.time.format.PeriodFormatter periodFormatter32 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter34 = periodFormatter32.withParseType(periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime30, periodType33);
        org.joda.time.Days days36 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateMidnight6, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime37 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateMidnight6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight39 = dateMidnight6.withWeekOfWeekyear((-20274));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -20274 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 26 + "'", int11 == 26);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertArrayEquals(intArray22, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(periodFormatter32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodFormatter34);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.JulianChronology julianChronology1 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone0);
        org.joda.time.DurationField durationField2 = julianChronology1.seconds();
        org.joda.time.DurationField durationField3 = julianChronology1.hours();
        org.junit.Assert.assertNotNull(julianChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(1969);
        org.joda.time.DateTime dateTime8 = dateTime1.withMillisOfDay(1970);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Hours out of range: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYearOfCentury(100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay((java.lang.Object) dateMidnight4, chronology7);
        org.joda.time.MonthDay.Property property9 = monthDay8.monthOfYear();
        org.joda.time.Period period12 = new org.joda.time.Period((long) 31, (long) 25);
        org.joda.time.MonthDay monthDay13 = monthDay8.minus((org.joda.time.ReadablePeriod) period12);
        java.util.Locale locale15 = null;
        java.lang.String str16 = monthDay13.toString("26", locale15);
        org.joda.time.Period period18 = org.joda.time.Period.days(7);
        org.joda.time.Period period20 = period18.plusMonths(60);
        org.joda.time.MonthDay monthDay22 = monthDay13.withPeriodAdded((org.joda.time.ReadablePeriod) period20, 100);
        java.lang.String str23 = monthDay22.toString();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfMonth((int) (byte) 1);
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.Instant instant31 = instant28.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology34 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone33);
        org.joda.time.Days days35 = org.joda.time.Days.THREE;
        int[] intArray38 = gregorianChronology34.get((org.joda.time.ReadablePeriod) days35, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology34.dayOfMonth();
        org.joda.time.DurationField durationField40 = gregorianChronology34.millis();
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 26, (org.joda.time.Chronology) gregorianChronology34, locale41);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((java.lang.Object) instant28, (org.joda.time.Chronology) gregorianChronology34);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.plusDays(8);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay45.minusMonths(4);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) monthDay22, (org.joda.time.ReadablePartial) yearMonthDay47, periodType48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "26" + "'", str16, "26");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "--02-29" + "'", str23, "--02-29");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(gregorianChronology34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertArrayEquals(intArray38, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(periodType48);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSuffix("2025");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No field to apply suffix to");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((org.joda.time.ReadablePeriod) weeks3);
        java.util.Date date5 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay6.toDateMidnight(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.plusMonths(8);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = property11.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMinimumValue();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.Chronology chronology21 = julianChronology20.withUTC();
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology20, locale22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfWeek();
        int int27 = dateTime25.getWeekyear();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.plus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        boolean boolean31 = dateTimeParserBucket23.restoreState((java.lang.Object) property30);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket23.getZone();
        org.joda.time.DateTime dateTime33 = localDate15.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone35 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withYear((-35));
        int int40 = dateTime37.getMinuteOfDay();
        org.joda.time.DateTime dateTime42 = dateTime37.withYearOfEra(7);
        int int43 = dateTime37.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType44.getRangeDurationType();
        boolean boolean46 = dateTime37.isSupported(dateTimeFieldType44);
        boolean boolean47 = cachedDateTimeZone35.equals((java.lang.Object) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology50 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology50);
        org.joda.time.Weeks weeks52 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.plus((org.joda.time.ReadablePeriod) weeks52);
        java.util.Date date54 = dateMidnight51.toDate();
        org.joda.time.YearMonthDay yearMonthDay55 = org.joda.time.YearMonthDay.fromDateFields(date54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = yearMonthDay55.toDateMidnight(dateTimeZone56);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay55.plusMonths(8);
        org.joda.time.YearMonthDay.Property property60 = yearMonthDay55.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay61 = property60.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay62 = property60.withMinimumValue();
        org.joda.time.format.PeriodFormatter periodFormatter63 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale64 = periodFormatter63.getLocale();
        java.lang.String str65 = property60.getAsText(locale64);
        java.lang.String str66 = cachedDateTimeZone35.getName((long) 1000, locale64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay67 = property11.setCopy("2025-04-01", locale64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2025-04-01\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Mar 31 20:00:00 EDT 2025");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(cachedDateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(gregorianChronology50);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Mon Mar 31 20:00:00 EDT 2025");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(periodFormatter63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "March" + "'", str65, "March");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Coordinated Universal Time" + "'", str66, "Coordinated Universal Time");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.joda.time.DateTimeUtils.setCurrentMillisFixed((long) 22);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.LocalDate.Property property5 = localDate4.era();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfCentury(0);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology13, locale15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        int int20 = dateTime18.getWeekyear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readableDuration21);
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        boolean boolean24 = dateTimeParserBucket16.restoreState((java.lang.Object) property23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket16.getZone();
        org.joda.time.DateTime dateTime26 = localDate8.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = localDate4.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology31 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone30);
        org.joda.time.Days days32 = org.joda.time.Days.THREE;
        int[] intArray35 = gregorianChronology31.get((org.joda.time.ReadablePeriod) days32, (long) 0, (-1L));
        org.joda.time.Duration duration36 = days32.toStandardDuration();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfWeek();
        int int40 = dateTime38.getWeekyear();
        int int41 = dateTime38.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology43 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone42);
        org.joda.time.Days days44 = org.joda.time.Days.THREE;
        int[] intArray47 = gregorianChronology43.get((org.joda.time.ReadablePeriod) days44, (long) 0, (-1L));
        org.joda.time.Duration duration48 = days44.toStandardDuration();
        org.joda.time.DateTime dateTime50 = dateTime38.withDurationAdded((org.joda.time.ReadableDuration) duration48, 26);
        boolean boolean51 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology53 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.dayOfYear();
        org.joda.time.DateMidnight dateMidnight56 = property55.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plusWeeks((int) (byte) 10);
        org.joda.time.Period period59 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.DateTime dateTime60 = dateTime29.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime64 = dateTime62.withDayOfMonth((int) (byte) 1);
        org.joda.time.Instant instant65 = dateTime64.toInstant();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.Instant instant68 = instant65.minus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.format.PeriodFormatter periodFormatter69 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter69.withParseType(periodType70);
        org.joda.time.PeriodType periodType72 = periodFormatter71.getParseType();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) instant68, periodType72);
        mutablePeriod73.addYears((int) ' ');
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianChronology31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertArrayEquals(intArray35, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertArrayEquals(intArray47, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(gregorianChronology53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(periodFormatter69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodFormatter71);
        org.junit.Assert.assertNotNull(periodType72);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.tz.DateTimeZoneBuilder.readFrom(inputStream0, "UTC");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((org.joda.time.ReadablePeriod) weeks3);
        java.util.Date date5 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay6.toDateMidnight(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.plusMonths(8);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay6.monthOfYear();
        org.joda.time.Period period13 = org.joda.time.Period.days(7);
        org.joda.time.Period period15 = period13.plusMonths(60);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period13, (int) (short) 1);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 19:00:00 EST 1969");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(8, 2080, 25, (int) (short) -1, 19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = julianChronology5.withZone(dateTimeZone8);
        org.joda.time.chrono.StrictChronology strictChronology10 = org.joda.time.chrono.StrictChronology.getInstance(chronology9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.Chronology chronology17 = julianChronology16.withUTC();
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology16, locale18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfWeek();
        int int23 = dateTime21.getWeekyear();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.plus(readableDuration24);
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        boolean boolean27 = dateTimeParserBucket19.restoreState((java.lang.Object) property26);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket19.getZone();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.Chronology chronology31 = strictChronology10.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField32 = strictChronology10.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(strictChronology10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone1);
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        int[] intArray6 = gregorianChronology2.get((org.joda.time.ReadablePeriod) days3, (long) 0, (-1L));
        org.joda.time.DurationField durationField7 = gregorianChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology2.year();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((-1924473598031L), (org.joda.time.Chronology) gregorianChronology2);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0 });
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        int int0 = org.joda.time.chrono.BuddhistChronology.BE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.JulianChronology julianChronology1 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = julianChronology1.halfdayOfDay();
        long long4 = dateTimeField2.roundCeiling(0L);
        org.junit.Assert.assertNotNull(julianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DurationField durationField2 = iSOChronology0.seconds();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(durationField2);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.Days days8 = org.joda.time.Days.THREE;
        int[] intArray11 = gregorianChronology7.get((org.joda.time.ReadablePeriod) days8, (long) 0, (-1L));
        org.joda.time.Duration duration12 = days8.toStandardDuration();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime3.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertArrayEquals(intArray11, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.lang.StringBuffer stringBuffer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.FormatUtils.appendUnpaddedInteger(stringBuffer0, (-19));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateMidnight dateMidnight6 = property3.addToCopy((long) 25);
        boolean boolean7 = property3.isLeap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = property3.addToCopy(1743465600001L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1743465600001 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateWithWeeks();
        org.junit.Assert.assertNotNull(periodFormatter0);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        int int21 = offsetDateTimeField18.getMaximumValue();
        long long24 = offsetDateTimeField18.getDifferenceAsLong((long) 13, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, dateTimeZone26);
        org.joda.time.Days days28 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType29 = days28.getFieldType();
        boolean boolean30 = localTime27.isSupported(durationFieldType29);
        java.util.Locale locale32 = null;
        java.lang.String str33 = offsetDateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localTime27, 31, locale32);
        long long35 = offsetDateTimeField18.roundHalfEven((long) (short) 10);
        org.joda.time.DurationField durationField36 = offsetDateTimeField18.getRangeDurationField();
        long long38 = offsetDateTimeField18.roundCeiling((long) 86400000);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-35) + "'", int21 == (-35));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "31" + "'", str33, "31");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86400000L + "'", long38 == 86400000L);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField7 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField6);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.Instant instant4 = dateTime3.toInstant();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.Instant instant7 = instant4.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property10.getFieldType();
        int int12 = instant7.get(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.LocalDate.Property property5 = localDate4.era();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfCentury(0);
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfWeek((int) (short) 1);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DurationField durationField6 = gregorianChronology1.halfdays();
        org.joda.time.Chronology chronology7 = gregorianChronology1.withUTC();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.LocalDate localDate10 = localDate8.plusDays(3);
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.PeriodType periodType3 = days1.getPeriodType();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property9 = dateTime7.property(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        org.joda.time.Chronology chronology12 = julianChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType8.getField((org.joda.time.Chronology) julianChronology11);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.Chronology chronology17 = julianChronology16.withUTC();
        mutableInterval14.setChronology((org.joda.time.Chronology) julianChronology16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 0, periodType3, (org.joda.time.Chronology) julianChronology16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = property23.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plusWeeks((int) (byte) 10);
        org.joda.time.Days days27 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType28 = days27.getFieldType();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.withFieldAdded(durationFieldType28, 26);
        org.joda.time.Period period32 = period19.withFieldAdded(durationFieldType28, (int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod();
        boolean boolean35 = mutablePeriod33.equals((java.lang.Object) (-1L));
        mutablePeriod33.setPeriod(86400000, 13, (int) (byte) -1, (int) ' ', 26, (-35), (int) (short) -1, (int) (short) 100);
        org.joda.time.Days days46 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType47 = days46.getFieldType();
        org.joda.time.PeriodType periodType48 = days46.getPeriodType();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property54 = dateTime52.property(dateTimeFieldType53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.chrono.JulianChronology julianChronology56 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone55);
        org.joda.time.Chronology chronology57 = julianChronology56.withUTC();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType53.getField((org.joda.time.Chronology) julianChronology56);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology56);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.chrono.JulianChronology julianChronology61 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone60);
        org.joda.time.Chronology chronology62 = julianChronology61.withUTC();
        mutableInterval59.setChronology((org.joda.time.Chronology) julianChronology61);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 0, periodType48, (org.joda.time.Chronology) julianChronology61);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology66 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology66);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.dayOfYear();
        org.joda.time.DateMidnight dateMidnight69 = property68.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.plusWeeks((int) (byte) 10);
        org.joda.time.Days days72 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType73 = days72.getFieldType();
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight71.withFieldAdded(durationFieldType73, 26);
        org.joda.time.Period period77 = period64.withFieldAdded(durationFieldType73, (int) (short) 1);
        boolean boolean78 = mutablePeriod33.isSupported(durationFieldType73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period79 = period19.minus((org.joda.time.ReadablePeriod) mutablePeriod33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(julianChronology56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(julianChronology61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(gregorianChronology66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(days72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Days days8 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType9 = days8.getFieldType();
        org.joda.time.PeriodType periodType10 = days8.getPeriodType();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property16 = dateTime14.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.Chronology chronology19 = julianChronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType15.getField((org.joda.time.Chronology) julianChronology18);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology24 = julianChronology23.withUTC();
        mutableInterval21.setChronology((org.joda.time.Chronology) julianChronology23);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 0, periodType10, (org.joda.time.Chronology) julianChronology23);
        org.joda.time.Days days27 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType28 = days27.getFieldType();
        org.joda.time.PeriodType periodType29 = days27.getPeriodType();
        boolean boolean30 = periodType10.equals((java.lang.Object) periodType29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, readableDuration6, periodType10);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        int int35 = dateTime33.getWeekyear();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.plus(readableDuration36);
        org.joda.time.DateTime.Property property38 = dateTime37.minuteOfDay();
        org.joda.time.Hours hours39 = org.joda.time.Hours.TWO;
        org.joda.time.DateTime dateTime41 = dateTime37.withPeriodAdded((org.joda.time.ReadablePeriod) hours39, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period42 = period31.withFields((org.joda.time.ReadablePeriod) hours39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        int int0 = org.joda.time.MutableDateTime.ROUND_HALF_EVEN;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 5 + "'", int0 == 5);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.PeriodType periodType3 = days1.getPeriodType();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property9 = dateTime7.property(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        org.joda.time.Chronology chronology12 = julianChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType8.getField((org.joda.time.Chronology) julianChronology11);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.Chronology chronology17 = julianChronology16.withUTC();
        mutableInterval14.setChronology((org.joda.time.Chronology) julianChronology16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 0, periodType3, (org.joda.time.Chronology) julianChronology16);
        org.joda.time.Days days20 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType21 = days20.getFieldType();
        org.joda.time.PeriodType periodType22 = days20.getPeriodType();
        boolean boolean23 = periodType3.equals((java.lang.Object) periodType22);
        org.joda.time.PeriodType periodType24 = periodType3.withYearsRemoved();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.Chronology chronology28 = julianChronology27.withUTC();
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology27, locale29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology32 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology35);
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology35.weekyearOfCentury();
        int int38 = dateMidnight33.get(dateTimeField37);
        org.joda.time.field.SkipDateTimeField skipDateTimeField39 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology27, dateTimeField37);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property46 = dateTime44.property(dateTimeFieldType45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.chrono.JulianChronology julianChronology48 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone47);
        org.joda.time.Chronology chronology49 = julianChronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType45.getField((org.joda.time.Chronology) julianChronology48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology48);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology48);
        java.util.Locale locale54 = null;
        java.lang.String str55 = skipDateTimeField39.getAsText((org.joda.time.ReadablePartial) localDateTime52, 0, locale54);
        org.joda.time.DurationField durationField56 = skipDateTimeField39.getRangeDurationField();
        org.joda.time.Days days57 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType58 = days57.getFieldType();
        org.joda.time.field.ScaledDurationField scaledDurationField60 = new org.joda.time.field.ScaledDurationField(durationField56, durationFieldType58, 1440);
        java.lang.String str61 = scaledDurationField60.getName();
        long long62 = scaledDurationField60.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType63 = scaledDurationField60.getType();
        int int64 = periodType3.indexOf(durationFieldType63);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(gregorianChronology32);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 71 + "'", int38 == 71);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(julianChronology48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "days" + "'", str61, "days");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 4544201088000000L + "'", long62 == 4544201088000000L);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.PeriodType periodType3 = days1.getPeriodType();
        mutablePeriod0.add((org.joda.time.ReadablePeriod) days1);
        int int5 = mutablePeriod0.getHours();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod();
        boolean boolean8 = mutablePeriod6.equals((java.lang.Object) (-1L));
        mutablePeriod6.setPeriod(86400000, 13, (int) (byte) -1, (int) ' ', 26, (-35), (int) (short) -1, (int) (short) 100);
        org.joda.time.Days days19 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType20 = days19.getFieldType();
        org.joda.time.PeriodType periodType21 = days19.getPeriodType();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property27 = dateTime25.property(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.Chronology chronology30 = julianChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType26.getField((org.joda.time.Chronology) julianChronology29);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        org.joda.time.Chronology chronology35 = julianChronology34.withUTC();
        mutableInterval32.setChronology((org.joda.time.Chronology) julianChronology34);
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 0, periodType21, (org.joda.time.Chronology) julianChronology34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology39 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology39);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.dayOfYear();
        org.joda.time.DateMidnight dateMidnight42 = property41.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plusWeeks((int) (byte) 10);
        org.joda.time.Days days45 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType46 = days45.getFieldType();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight44.withFieldAdded(durationFieldType46, 26);
        org.joda.time.Period period50 = period37.withFieldAdded(durationFieldType46, (int) (short) 1);
        boolean boolean51 = mutablePeriod6.isSupported(durationFieldType46);
        boolean boolean52 = mutablePeriod0.isSupported(durationFieldType46);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property58 = dateTime56.property(dateTimeFieldType57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone59);
        org.joda.time.Chronology chronology61 = julianChronology60.withUTC();
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType57.getField((org.joda.time.Chronology) julianChronology60);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology60);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.chrono.JulianChronology julianChronology65 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone64);
        org.joda.time.Chronology chronology66 = julianChronology65.withUTC();
        mutableInterval63.setChronology((org.joda.time.Chronology) julianChronology65);
        mutableInterval63.setEndMillis((long) 'a');
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval63);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(gregorianChronology39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(julianChronology60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(julianChronology65);
        org.junit.Assert.assertNotNull(chronology66);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtStartOfDay();
        int int8 = localDate0.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = julianChronology5.withZone(dateTimeZone8);
        org.joda.time.chrono.StrictChronology strictChronology10 = org.joda.time.chrono.StrictChronology.getInstance(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = strictChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = strictChronology10.yearOfEra();
        org.joda.time.Days days16 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType17 = days16.getFieldType();
        org.joda.time.PeriodType periodType18 = days16.getPeriodType();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property24 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        org.joda.time.Chronology chronology27 = julianChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType23.getField((org.joda.time.Chronology) julianChronology26);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30);
        org.joda.time.Chronology chronology32 = julianChronology31.withUTC();
        mutableInterval29.setChronology((org.joda.time.Chronology) julianChronology31);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 0, periodType18, (org.joda.time.Chronology) julianChronology31);
        org.joda.time.PeriodType periodType35 = periodType18.withDaysRemoved();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone36);
        org.joda.time.Days days38 = org.joda.time.Days.THREE;
        int[] intArray41 = gregorianChronology37.get((org.joda.time.ReadablePeriod) days38, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology37.dayOfMonth();
        org.joda.time.DurationField durationField43 = gregorianChronology37.weeks();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology37);
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology37.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, (long) 1, periodType35, (org.joda.time.Chronology) gregorianChronology37);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime49 = property48.roundFloor();
        int int50 = mutableDateTime49.getYear();
        mutableDateTime49.addDays(1969);
        boolean boolean53 = mutablePeriod46.equals((java.lang.Object) mutableDateTime49);
        boolean boolean54 = strictChronology10.equals((java.lang.Object) mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(strictChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertArrayEquals(intArray41, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology1.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = gregorianChronology1.days();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        mutablePeriod0.addYears(100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.DateMidnight dateMidnight9 = property8.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plusWeeks((int) (byte) 10);
        org.joda.time.Days days12 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType13 = days12.getFieldType();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.withFieldAdded(durationFieldType13, 26);
        mutablePeriod0.add(durationFieldType13, 1);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear((-35));
        int int22 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTime dateTime24 = dateTime19.withYearOfEra(7);
        org.joda.time.Duration duration25 = mutablePeriod0.toDurationTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.setDayOfYear(8);
        int int29 = mutableDateTime26.getYearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod();
        boolean boolean32 = mutablePeriod30.equals((java.lang.Object) (-1L));
        mutablePeriod30.addYears(100);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfYear();
        org.joda.time.DateMidnight dateMidnight39 = property38.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plusWeeks((int) (byte) 10);
        org.joda.time.Days days42 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType43 = days42.getFieldType();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight41.withFieldAdded(durationFieldType43, 26);
        mutablePeriod30.add(durationFieldType43, 1);
        mutableDateTime26.add(durationFieldType43, (-1));
        org.joda.time.Period period50 = duration25.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds51 = duration25.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 3155846400");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 70 + "'", int29 == 70);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(gregorianChronology36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder0 = new org.joda.time.tz.DateTimeZoneBuilder();
        java.io.DataOutput dataOutput2 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeZoneBuilder0.writeTo("[]", dataOutput2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology10 = julianChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType6.getField((org.joda.time.Chronology) julianChronology9);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.Chronology chronology15 = julianChronology14.withUTC();
        mutableInterval12.setChronology((org.joda.time.Chronology) julianChronology14);
        mutableInterval12.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfWeek();
        int int22 = dateTime20.getWeekyear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.plus(readableDuration23);
        boolean boolean25 = mutableInterval12.contains((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Days days26 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        boolean boolean31 = days26.equals((java.lang.Object) property29);
        org.joda.time.DateTime dateTime32 = property29.getDateTime();
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        mutableInterval12.setStart((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property35 = dateTime33.dayOfYear();
        org.joda.time.Period period36 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period38 = period36.plusMillis((-20274));
        org.joda.time.Period period40 = period38.plusSeconds((int) (byte) 100);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(julianChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.weekyear();
        int int4 = dateMidnight2.getDayOfWeek();
        org.joda.time.Chronology chronology5 = dateMidnight2.getChronology();
        org.joda.time.MonthDay monthDay6 = new org.joda.time.MonthDay(chronology5);
        java.lang.String str8 = monthDay6.toString("2025");
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2025" + "'", str8, "2025");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addMonths((int) (short) 100);
        mutableDateTime0.setYear(26);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property11 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType10.getField((org.joda.time.Chronology) julianChronology13);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.Chronology chronology19 = julianChronology18.withUTC();
        mutableInterval16.setChronology((org.joda.time.Chronology) julianChronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) 4, (org.joda.time.Chronology) julianChronology18);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plusYears(100);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.plusYears(59);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight23.withCenturyOfEra(9);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology1.monthOfYear();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField8 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays(19);
        int int15 = localDateTime14.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        org.joda.time.Chronology chronology20 = julianChronology19.withUTC();
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology19, locale21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfWeek();
        int int26 = dateTime24.getWeekyear();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.plus(readableDuration27);
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        boolean boolean30 = dateTimeParserBucket22.restoreState((java.lang.Object) property29);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket22.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket22.getZone();
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType35 = org.joda.time.chrono.IslamicChronology.LEAP_YEAR_15_BASED;
        org.joda.time.chrono.IslamicChronology islamicChronology36 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone32, leapYearPatternType35);
        org.joda.time.DateTimeField dateTimeField37 = islamicChronology36.year();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusWeeks(1970);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusMinutes(2);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDayOfYear((int) ' ');
        org.joda.time.Days days49 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType50 = days49.getFieldType();
        org.joda.time.PeriodType periodType51 = days49.getPeriodType();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property57 = dateTime55.property(dateTimeFieldType56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.chrono.JulianChronology julianChronology59 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone58);
        org.joda.time.Chronology chronology60 = julianChronology59.withUTC();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType56.getField((org.joda.time.Chronology) julianChronology59);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology59);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.chrono.JulianChronology julianChronology64 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone63);
        org.joda.time.Chronology chronology65 = julianChronology64.withUTC();
        mutableInterval62.setChronology((org.joda.time.Chronology) julianChronology64);
        org.joda.time.Period period67 = new org.joda.time.Period((long) (byte) 0, periodType51, (org.joda.time.Chronology) julianChronology64);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology69 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology69);
        org.joda.time.DateMidnight.Property property71 = dateMidnight70.dayOfYear();
        org.joda.time.DateMidnight dateMidnight72 = property71.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.plusWeeks((int) (byte) 10);
        org.joda.time.Days days75 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType76 = days75.getFieldType();
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight74.withFieldAdded(durationFieldType76, 26);
        org.joda.time.Period period80 = period67.withFieldAdded(durationFieldType76, (int) (short) 1);
        int[] intArray81 = period67.getValues();
        int int82 = dateTimeField37.getMaximumValue((org.joda.time.ReadablePartial) localDateTime43, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = delegatedDateTimeField8.addWrapPartial((org.joda.time.ReadablePartial) localDateTime14, 2080, intArray81, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2080");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertNotNull(julianChronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(leapYearPatternType35);
        org.junit.Assert.assertNotNull(islamicChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(julianChronology59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(julianChronology64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(gregorianChronology69);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(days75);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertArrayEquals(intArray81, new int[] { 0 });
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 292271022 + "'", int82 == 292271022);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone1);
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        int[] intArray6 = gregorianChronology2.get((org.joda.time.ReadablePeriod) days3, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology2.dayOfMonth();
        org.joda.time.DurationField durationField8 = gregorianChronology2.eras();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology2.era();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((long) 70067048, (org.joda.time.Chronology) gregorianChronology2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks(1970);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMinutes((int) (byte) 100);
        org.joda.time.Hours hours21 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localDateTime16, (org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property25 = dateTime23.property(dateTimeFieldType24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.Chronology chronology28 = julianChronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType24.getField((org.joda.time.Chronology) julianChronology27);
        boolean boolean30 = hours21.equals((java.lang.Object) dateTimeFieldType24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property31 = timeOfDay10.property(dateTimeFieldType24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(0, 84);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 84 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds2 = seconds0.minus(7);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property6 = dateTime4.property(dateTimeFieldType5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology9 = julianChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField((org.joda.time.Chronology) julianChronology8);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeField10.getAsShortText((int) (byte) 0, locale12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField21 = new org.joda.time.field.OffsetDateTimeField(dateTimeField10, dateTimeFieldType16, (int) (byte) -1, (int) (byte) -1, (-35));
        int int23 = offsetDateTimeField21.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField24 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField21);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property29 = dateTime27.property(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30);
        org.joda.time.Chronology chronology32 = julianChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType28.getField((org.joda.time.Chronology) julianChronology31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Chronology chronology35 = julianChronology31.withZone(dateTimeZone34);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) '#', chronology35);
        org.joda.time.LocalTime localTime38 = localTime36.plusSeconds((int) 'a');
        int[] intArray42 = new int[] { 26, '#', 31 };
        int int43 = offsetDateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localTime38, intArray42);
        org.joda.time.LocalTime.Property property44 = localTime38.minuteOfHour();
        org.joda.time.LocalTime localTime45 = property44.withMaximumValue();
        org.joda.time.Seconds seconds46 = org.joda.time.Seconds.TWO;
        org.joda.time.LocalTime localTime47 = localTime45.minus((org.joda.time.ReadablePeriod) seconds46);
        org.joda.time.Seconds seconds48 = seconds0.minus(seconds46);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(julianChronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertArrayEquals(intArray42, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(seconds48);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property4 = dateTime2.property(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.Chronology chronology7 = julianChronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType3.getField((org.joda.time.Chronology) julianChronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = julianChronology6.withZone(dateTimeZone9);
        org.joda.time.chrono.StrictChronology strictChronology11 = org.joda.time.chrono.StrictChronology.getInstance(chronology10);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((long) 1970, (org.joda.time.Chronology) strictChronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusMonths(0);
        org.joda.time.YearMonth.Property property15 = yearMonth14.year();
        java.lang.String str16 = property15.getAsString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(julianChronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(strictChronology11);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1969" + "'", str16, "1969");
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.Instant instant4 = dateTime3.toInstant();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.Instant instant7 = instant4.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.Days days11 = org.joda.time.Days.THREE;
        int[] intArray14 = gregorianChronology10.get((org.joda.time.ReadablePeriod) days11, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology10.dayOfMonth();
        org.joda.time.DurationField durationField16 = gregorianChronology10.millis();
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 26, (org.joda.time.Chronology) gregorianChronology10, locale17);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((java.lang.Object) instant4, (org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTime dateTime20 = instant4.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertArrayEquals(intArray14, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        int int2 = org.joda.time.field.FieldUtils.safeMultiplyToInt((long) 3, (long) 2080);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6240 + "'", int2 == 6240);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis(2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours(12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter9.getParser();
        java.lang.String str11 = localDateTime5.toString(dateTimeFormatter9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.plusMonths(9);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeParser10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10:59:59 o'clock PM " + "'", str11, "10:59:59 o'clock PM ");
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.joda.time.Days days1 = org.joda.time.Days.days((int) '4');
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.Chronology chronology11 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType7.getField((org.joda.time.Chronology) julianChronology10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) days1, (org.joda.time.Chronology) julianChronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Days");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        int int0 = org.joda.time.MonthDay.MONTH_OF_YEAR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        mutablePeriod0.addYears(100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.DateMidnight dateMidnight9 = property8.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plusWeeks((int) (byte) 10);
        org.joda.time.Days days12 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType13 = days12.getFieldType();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.withFieldAdded(durationFieldType13, 26);
        mutablePeriod0.add(durationFieldType13, 1);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property23 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        org.joda.time.Chronology chronology26 = julianChronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType22.getField((org.joda.time.Chronology) julianChronology25);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29);
        org.joda.time.Chronology chronology31 = julianChronology30.withUTC();
        mutableInterval28.setChronology((org.joda.time.Chronology) julianChronology30);
        mutablePeriod0.add((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35);
        org.joda.time.Chronology chronology37 = julianChronology36.withUTC();
        org.joda.time.DurationField durationField38 = julianChronology36.weekyears();
        mutablePeriod0.add((long) 'a', (org.joda.time.Chronology) julianChronology36);
        org.joda.time.DateTimeField dateTimeField40 = julianChronology36.millisOfDay();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(julianChronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(julianChronology30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(julianChronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDateTime();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        long long22 = offsetDateTimeField18.remainder((long) '#');
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 35L + "'", long22 == 35L);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology10 = julianChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType6.getField((org.joda.time.Chronology) julianChronology9);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.Chronology chronology15 = julianChronology14.withUTC();
        mutableInterval12.setChronology((org.joda.time.Chronology) julianChronology14);
        mutableInterval12.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfWeek();
        int int22 = dateTime20.getWeekyear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.plus(readableDuration23);
        boolean boolean25 = mutableInterval12.contains((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableInterval mutableInterval26 = mutableInterval12.copy();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone27);
        org.joda.time.Days days29 = org.joda.time.Days.THREE;
        int[] intArray32 = gregorianChronology28.get((org.joda.time.ReadablePeriod) days29, (long) 0, (-1L));
        java.lang.String str33 = gregorianChronology28.toString();
        mutableInterval12.setChronology((org.joda.time.Chronology) gregorianChronology28);
        org.joda.time.Days days35 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType36 = days35.getFieldType();
        org.joda.time.PeriodType periodType37 = days35.getPeriodType();
        org.joda.time.Period period38 = mutableInterval12.toPeriod(periodType37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology40 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone39);
        org.joda.time.Days days41 = org.joda.time.Days.THREE;
        int[] intArray44 = gregorianChronology40.get((org.joda.time.ReadablePeriod) days41, (long) 0, (-1L));
        org.joda.time.DurationField durationField45 = gregorianChronology40.halfdays();
        org.joda.time.DateTimeField dateTimeField46 = gregorianChronology40.yearOfEra();
        org.joda.time.DurationField durationField47 = gregorianChronology40.hours();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology49 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology49);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfYear();
        org.joda.time.DateMidnight dateMidnight52 = property51.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.withYearOfCentury(100);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = new org.joda.time.MonthDay((java.lang.Object) dateMidnight52, chronology55);
        int[] intArray58 = gregorianChronology40.get((org.joda.time.ReadablePartial) monthDay56, (long) 84);
        org.joda.time.Period period59 = new org.joda.time.Period((long) ' ', (-3600000L), periodType37, (org.joda.time.Chronology) gregorianChronology40);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(julianChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertArrayEquals(intArray32, new int[] { 0 });
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GregorianChronology[UTC]" + "'", str33, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(gregorianChronology40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertArrayEquals(intArray44, new int[] { 0 });
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(gregorianChronology49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertArrayEquals(intArray58, new int[] { 1, 1 });
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.JulianChronology julianChronology1 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone0);
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.now((org.joda.time.Chronology) julianChronology1);
        org.joda.time.MonthDay.Property property3 = monthDay2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.Chronology chronology7 = julianChronology6.withUTC();
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology6, locale8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfWeek();
        int int13 = dateTime11.getWeekyear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.plus(readableDuration14);
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        boolean boolean17 = dateTimeParserBucket9.restoreState((java.lang.Object) property16);
        java.util.Locale locale18 = dateTimeParserBucket9.getLocale();
        java.lang.String str19 = property3.getAsText(locale18);
        boolean boolean21 = property3.equals((java.lang.Object) 19);
        org.junit.Assert.assertNotNull(julianChronology1);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "December" + "'", str19, "December");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = julianChronology5.withZone(dateTimeZone8);
        org.joda.time.chrono.StrictChronology strictChronology10 = org.joda.time.chrono.StrictChronology.getInstance(chronology9);
        java.lang.String str11 = chronology9.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(strictChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JulianChronology[UTC]" + "'", str11, "JulianChronology[UTC]");
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property21 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology24 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType20.getField((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology23);
        java.util.Locale locale29 = null;
        java.lang.String str30 = skipDateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime27, 0, locale29);
        org.joda.time.DurationField durationField31 = skipDateTimeField14.getRangeDurationField();
        org.joda.time.Days days32 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType33 = days32.getFieldType();
        org.joda.time.field.ScaledDurationField scaledDurationField35 = new org.joda.time.field.ScaledDurationField(durationField31, durationFieldType33, 1440);
        long long37 = durationField31.getValueAsLong((long) 9);
        boolean boolean38 = durationField31.isPrecise();
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 71 + "'", int13 == 71);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology1.millis();
        org.joda.time.ReadablePartial readablePartial8 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property15 = dateTime13.property(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        org.joda.time.Chronology chronology18 = julianChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology17);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology17);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology17);
        org.joda.time.DateTimeZone dateTimeZone22 = julianChronology17.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfYear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology30 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone29);
        org.joda.time.Days days31 = org.joda.time.Days.THREE;
        int[] intArray34 = gregorianChronology30.get((org.joda.time.ReadablePeriod) days31, (long) 0, (-1L));
        org.joda.time.Duration duration35 = days31.toStandardDuration();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.minus((org.joda.time.ReadableDuration) duration35);
        int[] intArray38 = julianChronology17.get((org.joda.time.ReadablePartial) localDateTime26, (long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            gregorianChronology1.validate(readablePartial8, intArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(gregorianChronology30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertArrayEquals(intArray34, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertArrayEquals(intArray38, new int[] { 1969, 12, 19, 1 });
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis(2);
        int int6 = localDateTime5.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType4 = days3.getFieldType();
        org.joda.time.PeriodType periodType5 = days3.getPeriodType();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property11 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType10.getField((org.joda.time.Chronology) julianChronology13);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.Chronology chronology19 = julianChronology18.withUTC();
        mutableInterval16.setChronology((org.joda.time.Chronology) julianChronology18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 0, periodType5, (org.joda.time.Chronology) julianChronology18);
        org.joda.time.Days days22 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType23 = days22.getFieldType();
        org.joda.time.PeriodType periodType24 = days22.getPeriodType();
        boolean boolean25 = periodType5.equals((java.lang.Object) periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(86400000L, (-3155673600000L), periodType5);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.Days days8 = org.joda.time.Days.THREE;
        int[] intArray11 = gregorianChronology7.get((org.joda.time.ReadablePeriod) days8, (long) 0, (-1L));
        org.joda.time.Duration duration12 = days8.toStandardDuration();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod();
        mutablePeriod14.addWeeks((-1));
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, 5);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes(32);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDateTime20);
        java.lang.String str23 = partial21.toString("604800000");
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 100, dateTimeZone25);
        boolean boolean28 = localTime26.equals((java.lang.Object) 26);
        int int29 = localTime26.getMillisOfDay();
        org.joda.time.LocalTime localTime31 = localTime26.plusMillis(1970);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = partial21.isMatch((org.joda.time.ReadablePartial) localTime31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertArrayEquals(intArray11, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "604800000" + "'", str23, "604800000");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(localTime31);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        int int22 = offsetDateTimeField18.get((long) 3);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = offsetDateTimeField18.add((long) (byte) 1, 32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7 for hourOfHalfday must be in the range [-1,-35]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths(0);
        mutablePeriod0.addMonths((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone7);
        org.joda.time.Days days9 = org.joda.time.Days.THREE;
        int[] intArray12 = gregorianChronology8.get((org.joda.time.ReadablePeriod) days9, (long) 0, (-1L));
        java.lang.String str13 = gregorianChronology8.toString();
        mutablePeriod0.setPeriod((long) 1, (long) (short) 1, (org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone15);
        org.joda.time.Days days17 = org.joda.time.Days.THREE;
        int[] intArray20 = gregorianChronology16.get((org.joda.time.ReadablePeriod) days17, (long) 0, (-1L));
        org.joda.time.Duration duration21 = days17.toStandardDuration();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfWeek();
        int int25 = dateTime23.getWeekyear();
        int int26 = dateTime23.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone27);
        org.joda.time.Days days29 = org.joda.time.Days.THREE;
        int[] intArray32 = gregorianChronology28.get((org.joda.time.ReadablePeriod) days29, (long) 0, (-1L));
        org.joda.time.Duration duration33 = days29.toStandardDuration();
        org.joda.time.DateTime dateTime35 = dateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration33, 26);
        boolean boolean36 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration38 = duration33.plus(90L);
        mutablePeriod0.add((org.joda.time.ReadableDuration) duration38);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertArrayEquals(intArray12, new int[] { 0 });
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GregorianChronology[UTC]" + "'", str13, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertArrayEquals(intArray20, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertArrayEquals(intArray32, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        int int21 = offsetDateTimeField18.getMaximumValue();
        long long24 = offsetDateTimeField18.getDifferenceAsLong((long) 13, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, dateTimeZone26);
        org.joda.time.Days days28 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType29 = days28.getFieldType();
        boolean boolean30 = localTime27.isSupported(durationFieldType29);
        java.util.Locale locale32 = null;
        java.lang.String str33 = offsetDateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localTime27, 31, locale32);
        long long35 = offsetDateTimeField18.roundHalfEven((long) (short) 10);
        org.joda.time.DurationField durationField36 = offsetDateTimeField18.getRangeDurationField();
        long long38 = offsetDateTimeField18.roundHalfEven(1L);
        int int40 = offsetDateTimeField18.getMaximumValue((long) 12);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-35) + "'", int21 == (-35));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "31" + "'", str33, "31");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-35) + "'", int40 == (-35));
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfWeek();
        int int9 = dateTime7.getWeekyear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime7.plus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) property12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.weekyear();
        int int19 = dateMidnight17.getDayOfWeek();
        org.joda.time.Chronology chronology20 = dateMidnight17.getChronology();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        int int25 = dateMidnight17.get(dateTimeFieldType24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.Chronology chronology30 = julianChronology29.withUTC();
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology29, locale31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology34 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology37);
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.weekyearOfCentury();
        int int40 = dateMidnight35.get(dateTimeField39);
        org.joda.time.field.SkipDateTimeField skipDateTimeField41 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology29, dateTimeField39);
        int int42 = skipDateTimeField41.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusHours((int) (byte) -1);
        int int47 = localDateTime46.size();
        org.joda.time.format.PeriodFormatter periodFormatter49 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale50 = periodFormatter49.getLocale();
        java.lang.String str51 = skipDateTimeField41.getAsShortText((org.joda.time.ReadablePartial) localDateTime46, (int) 'a', locale50);
        dateTimeParserBucket5.saveField(dateTimeFieldType24, "DurationField[halfdays]", locale50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial54 = new org.joda.time.Partial(dateTimeFieldType24, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfWeek must not be larger than 7");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(gregorianChronology34);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 71 + "'", int40 == 71);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(periodFormatter49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "97" + "'", str51, "97");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.IllegalFieldValueException illegalFieldValueException5 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 26, (java.lang.Number) 100.0f, (java.lang.Number) 100L, "Thursday");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology2);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plusWeeks((int) (byte) 10);
        org.joda.time.Days days8 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType9 = days8.getFieldType();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight7.withFieldAdded(durationFieldType9, 26);
        org.joda.time.LocalDate localDate12 = dateMidnight7.toLocalDate();
        org.joda.time.Days days14 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType15 = days14.getFieldType();
        org.joda.time.PeriodType periodType16 = days14.getPeriodType();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.Chronology chronology25 = julianChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType21.getField((org.joda.time.Chronology) julianChronology24);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.Chronology chronology30 = julianChronology29.withUTC();
        mutableInterval27.setChronology((org.joda.time.Chronology) julianChronology29);
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 0, periodType16, (org.joda.time.Chronology) julianChronology29);
        org.joda.time.Days days33 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType34 = days33.getFieldType();
        org.joda.time.PeriodType periodType35 = days33.getPeriodType();
        boolean boolean36 = periodType16.equals((java.lang.Object) periodType35);
        org.joda.time.PeriodType periodType37 = periodType16.withYearsRemoved();
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableInstant) dateMidnight7, periodType16);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(periodType37);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYearOfCentury(100);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDurationAdded(readableDuration7, 31);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfWeek();
        int int13 = dateTime11.getWeekyear();
        int int14 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone15);
        org.joda.time.Days days17 = org.joda.time.Days.THREE;
        int[] intArray20 = gregorianChronology16.get((org.joda.time.ReadablePeriod) days17, (long) 0, (-1L));
        org.joda.time.Duration duration21 = days17.toStandardDuration();
        org.joda.time.DateTime dateTime23 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration21, 26);
        org.joda.time.Duration duration25 = duration21.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration26 = duration25.toDuration();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight9.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plusDays(80);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertArrayEquals(intArray20, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property21 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology24 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType20.getField((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology23);
        java.util.Locale locale29 = null;
        java.lang.String str30 = skipDateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime27, 0, locale29);
        org.joda.time.DurationField durationField31 = skipDateTimeField14.getRangeDurationField();
        org.joda.time.Days days32 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType33 = days32.getFieldType();
        org.joda.time.field.ScaledDurationField scaledDurationField35 = new org.joda.time.field.ScaledDurationField(durationField31, durationFieldType33, 1440);
        java.lang.String str36 = scaledDurationField35.getName();
        long long39 = scaledDurationField35.getMillis((int) ' ', (long) (short) -1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 71 + "'", int13 == 71);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "days" + "'", str36, "days");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 145414434816000000L + "'", long39 == 145414434816000000L);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        long long17 = skipDateTimeField14.set(31L, 12);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 71 + "'", int13 == 71);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1861574399969L) + "'", long17 == (-1861574399969L));
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        boolean boolean5 = days0.equals((java.lang.Object) property3);
        org.joda.time.DateTime dateTime6 = property3.getDateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime9 = dateTime6.withHourOfDay(12);
        org.joda.time.DateTime.Property property10 = dateTime6.monthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(3600);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        // The following exception was thrown during execution in test generation
        try {
            long long21 = offsetDateTimeField18.add(0L, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10 for hourOfHalfday must be in the range [-1,-35]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.maximumParsedDigits(2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSuffix("60", "T00:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No field to apply suffix to");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology1.monthOfYear();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField8 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField7);
        long long10 = delegatedDateTimeField8.roundHalfFloor((long) 3);
        long long13 = delegatedDateTimeField8.add((long) '4', 86400000L);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 227210054400000052L + "'", long13 == 227210054400000052L);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.joda.time.DateTimeUtils.MillisProvider millisProvider0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeUtils.setCurrentMillisProvider(millisProvider0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The MillisProvider must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.PeriodFormat.getDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = periodFormatter0.parseMutablePeriod("Thursday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Thursday\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatter0);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property8 = localDate0.monthOfYear();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property9 = dateTime7.property(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        org.joda.time.Chronology chronology12 = julianChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType8.getField((org.joda.time.Chronology) julianChronology11);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.Chronology chronology17 = julianChronology16.withUTC();
        mutableInterval14.setChronology((org.joda.time.Chronology) julianChronology16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(84, 84, 1000, (-4), (org.joda.time.Chronology) julianChronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 84 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.LocalDate.Property property5 = localDate4.era();
        org.joda.time.LocalDate localDate6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate8 = localDate6.plusDays(2);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDayOfYear(8);
        mutableDateTime0.setDayOfYear(31);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add((long) (-19));
        org.joda.time.MutableDateTime mutableDateTime9 = property5.add((-19));
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setDateTime(31, (int) (short) 0, 2080, 86400000, (-1), 1, 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86400000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property6.getFieldType();
        boolean boolean8 = days3.equals((java.lang.Object) property6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property6.getFieldType();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((-35));
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis(1970);
        int int16 = property6.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology17 = dateTime15.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((long) (-86401), chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 71, 0L, chronology17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater than the start instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate0.plusYears(13);
        org.joda.time.LocalDate.Property property9 = localDate0.dayOfMonth();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        int int21 = offsetDateTimeField18.getMaximumValue();
        long long24 = offsetDateTimeField18.getDifferenceAsLong((long) 13, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, dateTimeZone26);
        org.joda.time.Days days28 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType29 = days28.getFieldType();
        boolean boolean30 = localTime27.isSupported(durationFieldType29);
        java.util.Locale locale32 = null;
        java.lang.String str33 = offsetDateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localTime27, 31, locale32);
        org.joda.time.LocalTime localTime35 = localTime27.minusHours((int) 'a');
        org.joda.time.LocalTime localTime37 = localTime27.minusHours(3);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-35) + "'", int21 == (-35));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "31" + "'", str33, "31");
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Instant instant1 = gJChronology0.getGregorianCutover();
        org.joda.time.Chronology chronology2 = gJChronology0.withUTC();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(chronology2);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        boolean boolean5 = days0.equals((java.lang.Object) property3);
        org.joda.time.DateTime dateTime6 = property3.getDateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = property7.addToCopy(26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.junit.Assert.assertNotNull(monthDay0);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyearWeek();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.Chronology chronology7 = julianChronology6.withUTC();
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology6, locale8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfWeek();
        int int13 = dateTime11.getWeekyear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.plus(readableDuration14);
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        boolean boolean17 = dateTimeParserBucket9.restoreState((java.lang.Object) property16);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket9.getZone();
        org.joda.time.DateTime dateTime19 = localDate1.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone21 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        java.util.TimeZone timeZone22 = cachedDateTimeZone21.toTimeZone();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod();
        boolean boolean25 = mutablePeriod23.equals((java.lang.Object) (-1L));
        mutablePeriod23.addYears(100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology29 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = property31.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plusWeeks((int) (byte) 10);
        org.joda.time.Days days35 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType36 = days35.getFieldType();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight34.withFieldAdded(durationFieldType36, 26);
        mutablePeriod23.add(durationFieldType36, 1);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property46 = dateTime44.property(dateTimeFieldType45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.chrono.JulianChronology julianChronology48 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone47);
        org.joda.time.Chronology chronology49 = julianChronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType45.getField((org.joda.time.Chronology) julianChronology48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone52);
        org.joda.time.Chronology chronology54 = julianChronology53.withUTC();
        mutableInterval51.setChronology((org.joda.time.Chronology) julianChronology53);
        mutablePeriod23.add((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.chrono.JulianChronology julianChronology59 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone58);
        org.joda.time.Chronology chronology60 = julianChronology59.withUTC();
        org.joda.time.DurationField durationField61 = julianChronology59.weekyears();
        mutablePeriod23.add((long) 'a', (org.joda.time.Chronology) julianChronology59);
        boolean boolean63 = cachedDateTimeZone21.equals((java.lang.Object) julianChronology59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone21);
        java.lang.String str66 = cachedDateTimeZone21.getNameKey((-3155673600000L));
        long long68 = cachedDateTimeZone21.nextTransition((long) 19);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(julianChronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(cachedDateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(gregorianChronology29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(julianChronology48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(julianChronology53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(julianChronology59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "UTC" + "'", str66, "UTC");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 19L + "'", long68 == 19L);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.JulianChronology julianChronology1 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone0);
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.now((org.joda.time.Chronology) julianChronology1);
        org.joda.time.DurationField durationField3 = julianChronology1.weekyears();
        org.junit.Assert.assertNotNull(julianChronology1);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.roundFloor();
        mutableDateTime2.addWeekyears((int) (short) 100);
        int int5 = mutableDateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property9 = dateTime7.property(dateTimeFieldType8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime2.property(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfWeek();
        int int9 = dateTime7.getWeekyear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime7.plus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) property12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket5.getZone();
        long long18 = dateTimeZone14.convertLocalToUTC(26L, true, 1L);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth(dateTimeZone14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = yearMonth19.toLocalDate(1000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1000 for dayOfMonth must be in the range [1,31]: year: 1970 month: 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 26L + "'", long18 == 26L);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.roundFloor();
        mutableDateTime2.addMonths(2025);
        org.joda.time.DateTimeField dateTimeField5 = mutableDateTime2.getRoundingField();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNull(dateTimeField5);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        int int4 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        int[] intArray10 = gregorianChronology6.get((org.joda.time.ReadablePeriod) days7, (long) 0, (-1L));
        org.joda.time.Duration duration11 = days7.toStandardDuration();
        org.joda.time.DateTime dateTime13 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration11, 26);
        org.joda.time.Duration duration15 = duration11.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        org.joda.time.format.PeriodFormatter periodFormatter20 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter20.withParseType(periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime18, periodType21);
        org.joda.time.PeriodType periodType24 = periodType21.withSecondsRemoved();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        boolean boolean29 = periodType24.equals((java.lang.Object) dateTime28);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertArrayEquals(intArray10, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology1.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology1.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = gregorianChronology1.getDateTimeMillis((long) (short) 0, (-19), (int) '#', 80, 604800000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusSeconds((int) (short) 0);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(101L);
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.ZERO;
        org.joda.time.YearMonth yearMonth6 = yearMonth4.plus((org.joda.time.ReadablePeriod) weeks5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours7 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localDateTime2, (org.joda.time.ReadablePartial) yearMonth4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(yearMonth6);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        mutableInterval10.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        int int20 = dateTime18.getWeekyear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readableDuration21);
        boolean boolean23 = mutableInterval10.contains((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval24 = mutableInterval10.copy();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology26 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone25);
        org.joda.time.Days days27 = org.joda.time.Days.THREE;
        int[] intArray30 = gregorianChronology26.get((org.joda.time.ReadablePeriod) days27, (long) 0, (-1L));
        java.lang.String str31 = gregorianChronology26.toString();
        mutableInterval10.setChronology((org.joda.time.Chronology) gregorianChronology26);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property36 = dateTime34.property(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37);
        org.joda.time.Chronology chronology39 = julianChronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType35.getField((org.joda.time.Chronology) julianChronology38);
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeField40.getAsShortText((int) (byte) 0, locale42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property47 = dateTime45.property(dateTimeFieldType46);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField51 = new org.joda.time.field.OffsetDateTimeField(dateTimeField40, dateTimeFieldType46, (int) (byte) -1, (int) (byte) -1, (-35));
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldType46, 2);
        org.joda.time.Days days55 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType56 = days55.getFieldType();
        org.joda.time.PeriodType periodType57 = days55.getPeriodType();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property63 = dateTime61.property(dateTimeFieldType62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.chrono.JulianChronology julianChronology65 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone64);
        org.joda.time.Chronology chronology66 = julianChronology65.withUTC();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType62.getField((org.joda.time.Chronology) julianChronology65);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology65);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.chrono.JulianChronology julianChronology70 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone69);
        org.joda.time.Chronology chronology71 = julianChronology70.withUTC();
        mutableInterval68.setChronology((org.joda.time.Chronology) julianChronology70);
        org.joda.time.Period period73 = new org.joda.time.Period((long) (byte) 0, periodType57, (org.joda.time.Chronology) julianChronology70);
        org.joda.time.Partial partial74 = partial53.plus((org.joda.time.ReadablePeriod) period73);
        mutableInterval10.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period73);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(gregorianChronology26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertArrayEquals(intArray30, new int[] { 0 });
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GregorianChronology[UTC]" + "'", str31, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(julianChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(julianChronology65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(julianChronology70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(partial74);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        int int16 = skipDateTimeField14.getMaximumValue(101L);
        long long19 = skipDateTimeField14.set((long) 1969, (int) (byte) 10);
        java.lang.String str21 = skipDateTimeField14.getAsShortText((long) 2);
        java.util.Locale locale23 = null;
        java.lang.String str24 = skipDateTimeField14.getAsText(5, locale23);
        long long27 = skipDateTimeField14.add((long) 100, 2080);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 71 + "'", int13 == 71);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1924473598031L) + "'", long19 == (-1924473598031L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "71" + "'", str21, "71");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "5" + "'", str24, "5");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 65638944000100L + "'", long27 == 65638944000100L);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.joda.time.field.FieldUtils.getWrappedValue(6240, 330958, 1969);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        int int0 = org.joda.time.MutableDateTime.ROUND_CEILING;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks(1970);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMinutes((int) (byte) 100);
        org.joda.time.Hours hours10 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localDateTime5, (org.joda.time.ReadablePartial) localDateTime7);
        int int11 = localDateTime5.size();
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology11.weekyearOfCentury();
        int int14 = dateMidnight9.get(dateTimeField13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfWeek();
        int int18 = dateTime16.getWeekyear();
        int int19 = dateTime16.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone20);
        org.joda.time.Days days22 = org.joda.time.Days.THREE;
        int[] intArray25 = gregorianChronology21.get((org.joda.time.ReadablePeriod) days22, (long) 0, (-1L));
        org.joda.time.Duration duration26 = days22.toStandardDuration();
        org.joda.time.DateTime dateTime28 = dateTime16.withDurationAdded((org.joda.time.ReadableDuration) duration26, 26);
        org.joda.time.Duration duration30 = duration26.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration31 = duration30.toDuration();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        org.joda.time.format.PeriodFormatter periodFormatter35 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter37 = periodFormatter35.withParseType(periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33, periodType36);
        org.joda.time.Days days39 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime43 = dateTime41.withYear((-35));
        int int44 = dateTime41.getMinuteOfDay();
        org.joda.time.DateTime dateTime46 = dateTime41.withYearOfEra(7);
        int int47 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getRangeDurationType();
        boolean boolean50 = dateTime41.isSupported(dateTimeFieldType48);
        boolean boolean51 = dateTime33.isSupported(dateTimeFieldType48);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = localDate0.get(dateTimeFieldType48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 71 + "'", int14 == 71);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertArrayEquals(intArray25, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(periodFormatter35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodFormatter37);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property21 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology24 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType20.getField((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology23);
        java.util.Locale locale29 = null;
        java.lang.String str30 = skipDateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime27, 0, locale29);
        int int31 = localDateTime27.getHourOfDay();
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 71 + "'", int13 == 71);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 23 + "'", int31 == 23);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology1.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology1.clockhourOfHalfday();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property15 = dateTime13.property(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        org.joda.time.Chronology chronology18 = julianChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology17);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField19.getAsShortText((int) (byte) 0, locale21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField30 = new org.joda.time.field.OffsetDateTimeField(dateTimeField19, dateTimeFieldType25, (int) (byte) -1, (int) (byte) -1, (-35));
        int int32 = offsetDateTimeField30.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField33 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField30);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39);
        org.joda.time.Chronology chronology41 = julianChronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType37.getField((org.joda.time.Chronology) julianChronology40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = julianChronology40.withZone(dateTimeZone43);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) '#', chronology44);
        org.joda.time.LocalTime localTime47 = localTime45.plusSeconds((int) 'a');
        int[] intArray51 = new int[] { 26, '#', 31 };
        int int52 = offsetDateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localTime47, intArray51);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField54 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) gregorianChronology1, (org.joda.time.DateTimeField) offsetDateTimeField30, 5);
        int int55 = skipUndoDateTimeField54.getMinimumValue();
        java.lang.String str57 = skipUndoDateTimeField54.getAsShortText(18000000L);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology59 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology59);
        org.joda.time.Weeks weeks61 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((org.joda.time.ReadablePeriod) weeks61);
        java.util.Date date63 = dateMidnight60.toDate();
        org.joda.time.YearMonthDay yearMonthDay64 = org.joda.time.YearMonthDay.fromDateFields(date63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = yearMonthDay64.toDateMidnight(dateTimeZone65);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay64.plusMonths(8);
        org.joda.time.YearMonthDay.Property property69 = yearMonthDay64.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay70 = property69.withMinimumValue();
        org.joda.time.DurationField durationField71 = property69.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay72 = property69.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.chrono.JulianChronology julianChronology75 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone74);
        org.joda.time.Chronology chronology76 = julianChronology75.withUTC();
        java.util.Locale locale77 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology75, locale77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology80 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone79);
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology80);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology83 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone82);
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology83);
        org.joda.time.DateTimeField dateTimeField85 = gregorianChronology83.weekyearOfCentury();
        int int86 = dateMidnight81.get(dateTimeField85);
        org.joda.time.field.SkipDateTimeField skipDateTimeField87 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology75, dateTimeField85);
        int int88 = skipDateTimeField87.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime90.plusHours((int) (byte) -1);
        int int93 = localDateTime92.size();
        org.joda.time.format.PeriodFormatter periodFormatter95 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale96 = periodFormatter95.getLocale();
        java.lang.String str97 = skipDateTimeField87.getAsShortText((org.joda.time.ReadablePartial) localDateTime92, (int) 'a', locale96);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = skipUndoDateTimeField54.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay72, locale96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(julianChronology40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertArrayEquals(intArray51, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "4" + "'", str57, "4");
        org.junit.Assert.assertNotNull(gregorianChronology59);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 19:00:00 EST 1969");
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(julianChronology75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(gregorianChronology80);
        org.junit.Assert.assertNotNull(gregorianChronology83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 71 + "'", int86 == 71);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
        org.junit.Assert.assertNotNull(periodFormatter95);
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "97" + "'", str97, "97");
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeZone0, dateTimeZone2);
        int int4 = mutableDateTime3.getRoundingMode();
        mutableDateTime3.addDays(0);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology12, locale14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfWeek();
        int int19 = dateTime17.getWeekyear();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.plus(readableDuration20);
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        boolean boolean23 = dateTimeParserBucket15.restoreState((java.lang.Object) property22);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket15.getZone();
        org.joda.time.DateTime dateTime25 = localDate7.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone24);
        boolean boolean27 = mutableDateTime3.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        int int1 = weeks0.getWeeks();
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(101L);
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.ZERO;
        org.joda.time.YearMonth yearMonth5 = yearMonth3.plus((org.joda.time.ReadablePeriod) weeks4);
        org.joda.time.Weeks weeks6 = weeks0.plus(weeks4);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.ZERO;
        boolean boolean8 = weeks0.isLessThan(weeks7);
        org.joda.time.DurationFieldType durationFieldType9 = weeks0.getFieldType();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(durationFieldType9);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDayOfYear(8);
        int int3 = mutableDateTime0.getYearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod();
        boolean boolean6 = mutablePeriod4.equals((java.lang.Object) (-1L));
        mutablePeriod4.addYears(100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight13 = property12.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusWeeks((int) (byte) 10);
        org.joda.time.Days days16 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType17 = days16.getFieldType();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.withFieldAdded(durationFieldType17, 26);
        mutablePeriod4.add(durationFieldType17, 1);
        mutableDateTime0.add(durationFieldType17, (-1));
        mutableDateTime0.setMinuteOfHour(0);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType4 = days3.getFieldType();
        org.joda.time.PeriodType periodType5 = days3.getPeriodType();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property11 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType10.getField((org.joda.time.Chronology) julianChronology13);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.Chronology chronology19 = julianChronology18.withUTC();
        mutableInterval16.setChronology((org.joda.time.Chronology) julianChronology18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 0, periodType5, (org.joda.time.Chronology) julianChronology18);
        org.joda.time.PeriodType periodType22 = periodType5.withDaysRemoved();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology24 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone23);
        org.joda.time.Days days25 = org.joda.time.Days.THREE;
        int[] intArray28 = gregorianChronology24.get((org.joda.time.ReadablePeriod) days25, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology24.dayOfMonth();
        org.joda.time.DurationField durationField30 = gregorianChronology24.weeks();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology24);
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology24.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, (long) 1, periodType22, (org.joda.time.Chronology) gregorianChronology24);
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology24.dayOfYear();
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(gregorianChronology24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertArrayEquals(intArray28, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDayOfYear(8);
        int int3 = mutableDateTime0.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.setMillis((-1L));
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfCentury(60);
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) dateTime11);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes16 = minutes14.multipliedBy((int) (short) 1);
        mutableDateTime5.add((org.joda.time.ReadablePeriod) minutes16, 3600);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = localDate0.getChronology();
        org.joda.time.LocalDate localDate3 = localDate0.plusDays(20179);
        org.joda.time.LocalDate.Property property4 = localDate0.year();
        org.joda.time.LocalDate localDate6 = property4.addToCopy(5999999);
        org.joda.time.LocalDate localDate7 = property4.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property12 = dateTime10.property(dateTimeFieldType11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.Chronology chronology15 = julianChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType11.getField((org.joda.time.Chronology) julianChronology14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = julianChronology14.withZone(dateTimeZone17);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) '#', chronology18);
        org.joda.time.LocalTime localTime21 = localTime19.plusSeconds((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.Chronology chronology25 = julianChronology24.withUTC();
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology24, locale26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfWeek();
        int int31 = dateTime29.getWeekyear();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.plus(readableDuration32);
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        boolean boolean35 = dateTimeParserBucket27.restoreState((java.lang.Object) property34);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket27.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket27.getZone();
        java.lang.String str38 = dateTimeZone37.getID();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(dateTimeZone37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = localDate7.toDateTime(localTime21, dateTimeZone37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The chronology of the time does not match");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.weekyear();
        int int7 = dateMidnight5.getDayOfWeek();
        org.joda.time.Chronology chronology8 = dateMidnight5.getChronology();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        int int13 = dateMidnight5.get(dateTimeFieldType12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod0, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight5.withDayOfYear(50);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property6 = dateTime4.property(dateTimeFieldType5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology9 = julianChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField((org.joda.time.Chronology) julianChronology8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology8);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology8);
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMonthOfYear(2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekOfWeekyear(82799999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82799999 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(julianChronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1969 + "'", int13 == 1969);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeZone0, dateTimeZone2);
        int int4 = mutableDateTime3.getRoundingMode();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime3.yearOfCentury();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.format.PeriodFormatter periodFormatter2 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.lang.String str4 = yearMonth0.toString("days", locale3);
        org.junit.Assert.assertNotNull(periodFormatter2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
// flaky "2) test0770(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd" + "'", str4, "\ufffd\ufffd\ufffd");
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology1.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology1.clockhourOfHalfday();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property15 = dateTime13.property(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        org.joda.time.Chronology chronology18 = julianChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology17);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField19.getAsShortText((int) (byte) 0, locale21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField30 = new org.joda.time.field.OffsetDateTimeField(dateTimeField19, dateTimeFieldType25, (int) (byte) -1, (int) (byte) -1, (-35));
        int int32 = offsetDateTimeField30.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField33 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField30);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39);
        org.joda.time.Chronology chronology41 = julianChronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType37.getField((org.joda.time.Chronology) julianChronology40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = julianChronology40.withZone(dateTimeZone43);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) '#', chronology44);
        org.joda.time.LocalTime localTime47 = localTime45.plusSeconds((int) 'a');
        int[] intArray51 = new int[] { 26, '#', 31 };
        int int52 = offsetDateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localTime47, intArray51);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField54 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) gregorianChronology1, (org.joda.time.DateTimeField) offsetDateTimeField30, 5);
        int int55 = skipUndoDateTimeField54.getMinimumValue();
        java.lang.String str57 = skipUndoDateTimeField54.getAsShortText(18000000L);
        long long60 = skipUndoDateTimeField54.getDifferenceAsLong((-1861574399969L), 86400000L);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(julianChronology40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertArrayEquals(intArray51, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "4" + "'", str57, "4");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-517127L) + "'", long60 == (-517127L));
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeZone0, dateTimeZone2);
        int int4 = mutableDateTime3.getRoundingMode();
        mutableDateTime3.addDays(0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setDayOfMonth((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfWeek();
        int int9 = dateTime7.getWeekyear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime7.plus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) property12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket5.getZone();
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = org.joda.time.chrono.IslamicChronology.LEAP_YEAR_15_BASED;
        org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15, leapYearPatternType18);
        org.joda.time.DateTimeField dateTimeField20 = islamicChronology19.year();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(1970);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMinutes(2);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDayOfYear((int) ' ');
        org.joda.time.Days days32 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType33 = days32.getFieldType();
        org.joda.time.PeriodType periodType34 = days32.getPeriodType();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property40 = dateTime38.property(dateTimeFieldType39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone41);
        org.joda.time.Chronology chronology43 = julianChronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType39.getField((org.joda.time.Chronology) julianChronology42);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.JulianChronology julianChronology47 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone46);
        org.joda.time.Chronology chronology48 = julianChronology47.withUTC();
        mutableInterval45.setChronology((org.joda.time.Chronology) julianChronology47);
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 0, periodType34, (org.joda.time.Chronology) julianChronology47);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology52 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology52);
        org.joda.time.DateMidnight.Property property54 = dateMidnight53.dayOfYear();
        org.joda.time.DateMidnight dateMidnight55 = property54.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.plusWeeks((int) (byte) 10);
        org.joda.time.Days days58 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType59 = days58.getFieldType();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight57.withFieldAdded(durationFieldType59, 26);
        org.joda.time.Period period63 = period50.withFieldAdded(durationFieldType59, (int) (short) 1);
        int[] intArray64 = period50.getValues();
        int int65 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26, intArray64);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = localDateTime26.getValue(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(leapYearPatternType18);
        org.junit.Assert.assertNotNull(islamicChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(julianChronology42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(julianChronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(gregorianChronology52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertArrayEquals(intArray64, new int[] { 0 });
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 292271022 + "'", int65 == 292271022);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (byte) -1);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        java.lang.String str1 = minutes0.toString();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        java.lang.String str3 = minutes2.toString();
        org.joda.time.Minutes minutes4 = minutes0.minus(minutes2);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT2M" + "'", str1, "PT2M");
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2M" + "'", str3, "PT2M");
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        int int21 = offsetDateTimeField18.getMaximumValue();
        long long23 = offsetDateTimeField18.roundHalfEven((long) 60);
        int int24 = offsetDateTimeField18.getMaximumValue();
        long long26 = offsetDateTimeField18.roundFloor((long) 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-35) + "'", int21 == (-35));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-35) + "'", int24 == (-35));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.LocalDate.Property property5 = localDate4.era();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfCentury(0);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology13, locale15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        int int20 = dateTime18.getWeekyear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readableDuration21);
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        boolean boolean24 = dateTimeParserBucket16.restoreState((java.lang.Object) property23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket16.getZone();
        org.joda.time.DateTime dateTime26 = localDate8.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = localDate4.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology31 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.weekyear();
        int int34 = dateMidnight32.getDayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod();
        org.joda.time.Days days36 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType37 = days36.getFieldType();
        org.joda.time.PeriodType periodType38 = days36.getPeriodType();
        mutablePeriod35.add((org.joda.time.ReadablePeriod) days36);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight32.plus((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) dateMidnight40, 5999999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 5999999");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianChronology31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.ZoneInfoProvider zoneInfoProvider2 = new org.joda.time.tz.ZoneInfoProvider("March", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Resource not found: \"March/ZoneInfoMap\" ClassLoader: system");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldType13, 2);
        org.joda.time.Days days22 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType23 = days22.getFieldType();
        org.joda.time.PeriodType periodType24 = days22.getPeriodType();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property30 = dateTime28.property(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31);
        org.joda.time.Chronology chronology33 = julianChronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType29.getField((org.joda.time.Chronology) julianChronology32);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        org.joda.time.Chronology chronology38 = julianChronology37.withUTC();
        mutableInterval35.setChronology((org.joda.time.Chronology) julianChronology37);
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 0, periodType24, (org.joda.time.Chronology) julianChronology37);
        org.joda.time.Partial partial41 = partial20.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfWeek();
        int int45 = dateTime43.getWeekyear();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.plus(readableDuration46);
        org.joda.time.DateTime.Property property48 = dateTime47.minuteOfDay();
        org.joda.time.Hours hours49 = org.joda.time.Hours.TWO;
        org.joda.time.DateTime dateTime51 = dateTime47.withPeriodAdded((org.joda.time.ReadablePeriod) hours49, (int) (byte) 1);
        org.joda.time.Hours hours53 = hours49.plus(0);
        org.joda.time.DurationFieldType durationFieldType55 = hours53.getFieldType(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial57 = partial20.withFieldAdded(durationFieldType55, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(julianChronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(julianChronology37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(hours49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertNotNull(durationFieldType55);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        mutableInterval10.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        int int20 = dateTime18.getWeekyear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readableDuration21);
        boolean boolean23 = mutableInterval10.contains((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval24 = mutableInterval10.copy();
        long long25 = mutableInterval24.getEndMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 97L + "'", long25 == 97L);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.JulianChronology julianChronology1 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = julianChronology1.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusWeeks(1970);
        int int9 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDateTime8);
        org.junit.Assert.assertNotNull(julianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateMidnight dateMidnight6 = property3.addToCopy((long) 25);
        boolean boolean7 = property3.isLeap();
        org.joda.time.DurationField durationField8 = property3.getRangeDurationField();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.Instant instant4 = dateTime3.toInstant();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.Instant instant7 = instant4.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.Days days11 = org.joda.time.Days.THREE;
        int[] intArray14 = gregorianChronology10.get((org.joda.time.ReadablePeriod) days11, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology10.dayOfMonth();
        org.joda.time.DurationField durationField16 = gregorianChronology10.millis();
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 26, (org.joda.time.Chronology) gregorianChronology10, locale17);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((java.lang.Object) instant4, (org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusDays(8);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.Chronology chronology25 = julianChronology24.withUTC();
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology24, locale26);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay19.withChronologyRetainFields((org.joda.time.Chronology) julianChronology24);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertArrayEquals(intArray14, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.LocalDate.Property property5 = localDate4.era();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfCentury(0);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology13, locale15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        int int20 = dateTime18.getWeekyear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readableDuration21);
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        boolean boolean24 = dateTimeParserBucket16.restoreState((java.lang.Object) property23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket16.getZone();
        org.joda.time.DateTime dateTime26 = localDate8.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = localDate4.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone25);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        mutablePeriod0.addMillis(1970);
        int int5 = mutablePeriod0.getSeconds();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException("Wednesday", (java.lang.Number) 2024L, (java.lang.Number) 12, (java.lang.Number) 5);
        java.lang.String str5 = illegalFieldValueException4.getIllegalValueAsString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2024" + "'", str5, "2024");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.weekyear();
        int int4 = dateMidnight2.getDayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod();
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = days6.getFieldType();
        org.joda.time.PeriodType periodType8 = days6.getPeriodType();
        mutablePeriod5.add((org.joda.time.ReadablePeriod) days6);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.weekOfWeekyear();
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = property11.getDifference(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property6 = localDate4.property(dateTimeFieldType5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DurationField durationField15 = julianChronology12.months();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeFormatter1.getZone();
        boolean boolean3 = dateTimeFormatter1.isOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter1.getChronology();
        org.joda.time.Chronology chronology5 = dateTimeFormatter1.getChronolgy();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.Instant instant4 = dateTime3.toInstant();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.Instant instant7 = instant4.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        int int11 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.plus(readableDuration12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis((-1));
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        org.joda.time.Hours hours17 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) instant4, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = instant4.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        org.joda.time.Chronology chronology23 = julianChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType19.getField((org.joda.time.Chronology) julianChronology22);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.Chronology chronology28 = julianChronology27.withUTC();
        mutableInterval25.setChronology((org.joda.time.Chronology) julianChronology27);
        mutableInterval25.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        int int35 = dateTime33.getWeekyear();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.plus(readableDuration36);
        boolean boolean38 = mutableInterval25.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Interval interval39 = mutableInterval25.toInterval();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) interval39);
        long long41 = interval39.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology43 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.weekyear();
        org.joda.time.Interval interval46 = dateMidnight44.toInterval();
        boolean boolean47 = interval39.isAfter((org.joda.time.ReadableInterval) interval46);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusMillis(2);
        org.joda.time.Chronology chronology54 = localDateTime51.getChronology();
        boolean boolean55 = interval46.equals((java.lang.Object) localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 90L + "'", long41 == 90L);
        org.junit.Assert.assertNotNull(gregorianChronology43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeZone0, dateTimeZone2);
        int int4 = mutableDateTime3.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology9 = julianChronology8.withUTC();
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology8, locale10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology13 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology16);
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.weekyearOfCentury();
        int int19 = dateMidnight14.get(dateTimeField18);
        org.joda.time.field.SkipDateTimeField skipDateTimeField20 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology8, dateTimeField18);
        int int22 = skipDateTimeField20.getMaximumValue(101L);
        long long25 = skipDateTimeField20.set((long) 1969, (int) (byte) 10);
        java.lang.String str27 = skipDateTimeField20.getAsShortText((long) 2);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfYear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.dayOfMonth();
        int int34 = localDateTime31.getEra();
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37);
        org.joda.time.Chronology chronology39 = julianChronology38.withUTC();
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology38, locale40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology43 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology46 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology46);
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology46.weekyearOfCentury();
        int int49 = dateMidnight44.get(dateTimeField48);
        org.joda.time.field.SkipDateTimeField skipDateTimeField50 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology38, dateTimeField48);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property55 = dateTime54.dayOfWeek();
        int int56 = dateTime54.getWeekyear();
        int int57 = dateTime54.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology59 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone58);
        org.joda.time.Days days60 = org.joda.time.Days.THREE;
        int[] intArray63 = gregorianChronology59.get((org.joda.time.ReadablePeriod) days60, (long) 0, (-1L));
        org.joda.time.Duration duration64 = days60.toStandardDuration();
        org.joda.time.DateTime dateTime66 = dateTime54.withDurationAdded((org.joda.time.ReadableDuration) duration64, 26);
        org.joda.time.Duration duration68 = duration64.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration69 = duration68.toDuration();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property72 = dateTime71.dayOfWeek();
        org.joda.time.format.PeriodFormatter periodFormatter73 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter75 = periodFormatter73.withParseType(periodType74);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration68, (org.joda.time.ReadableInstant) dateTime71, periodType74);
        java.lang.String str77 = dateTime71.toString();
        org.joda.time.format.PeriodFormatter periodFormatter79 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale80 = periodFormatter79.getLocale();
        java.lang.String str81 = dateTime71.toString("00:01:37.035", locale80);
        long long82 = skipDateTimeField50.set((long) 32, "60", locale80);
        java.lang.String str83 = skipDateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime31, locale80);
        java.lang.String str84 = mutableDateTime3.toString("1969", locale80);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(julianChronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(gregorianChronology13);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 71 + "'", int19 == 71);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1924473598031L) + "'", long25 == (-1924473598031L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "71" + "'", str27, "71");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(julianChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(gregorianChronology43);
        org.junit.Assert.assertNotNull(gregorianChronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 71 + "'", int49 == 71);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology59);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertArrayEquals(intArray63, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(periodFormatter73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodFormatter75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str77, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(periodFormatter79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "00:01:37.035" + "'", str81, "00:01:37.035");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-347155199968L) + "'", long82 == (-347155199968L));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "69" + "'", str83, "69");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1969" + "'", str84, "1969");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
        periodFormatterBuilder1.clear();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendYears();
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTTime();
        java.lang.StringBuffer stringBuffer1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.parse("26", dateTimeFormatter3);
        org.joda.time.LocalTime localTime6 = localTime4.minusMillis(0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(stringBuffer1, (org.joda.time.ReadablePartial) localTime6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.junit.Assert.assertNotNull(seconds0);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        java.io.Writer writer1 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology10 = julianChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType6.getField((org.joda.time.Chronology) julianChronology9);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.Chronology chronology15 = julianChronology14.withUTC();
        mutableInterval12.setChronology((org.joda.time.Chronology) julianChronology14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone17);
        org.joda.time.Days days19 = org.joda.time.Days.THREE;
        int[] intArray22 = gregorianChronology18.get((org.joda.time.ReadablePeriod) days19, (long) 0, (-1L));
        org.joda.time.Duration duration23 = days19.toStandardDuration();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfWeek();
        int int27 = dateTime25.getWeekyear();
        int int28 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology30 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone29);
        org.joda.time.Days days31 = org.joda.time.Days.THREE;
        int[] intArray34 = gregorianChronology30.get((org.joda.time.ReadablePeriod) days31, (long) 0, (-1L));
        org.joda.time.Duration duration35 = days31.toStandardDuration();
        org.joda.time.DateTime dateTime37 = dateTime25.withDurationAdded((org.joda.time.ReadableDuration) duration35, 26);
        boolean boolean38 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology40 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.dayOfYear();
        org.joda.time.DateMidnight dateMidnight43 = property42.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plusWeeks((int) (byte) 10);
        org.joda.time.Period period46 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight45);
        boolean boolean47 = mutableInterval12.contains((org.joda.time.ReadableInstant) dateMidnight45);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(writer1, (org.joda.time.ReadableInstant) dateMidnight45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(julianChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertArrayEquals(intArray22, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertArrayEquals(intArray34, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(gregorianChronology40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType4 = days3.getFieldType();
        org.joda.time.PeriodType periodType5 = days3.getPeriodType();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property11 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType10.getField((org.joda.time.Chronology) julianChronology13);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.Chronology chronology19 = julianChronology18.withUTC();
        mutableInterval16.setChronology((org.joda.time.Chronology) julianChronology18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 0, periodType5, (org.joda.time.Chronology) julianChronology18);
        org.joda.time.PeriodType periodType22 = periodType5.withDaysRemoved();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology24 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone23);
        org.joda.time.Days days25 = org.joda.time.Days.THREE;
        int[] intArray28 = gregorianChronology24.get((org.joda.time.ReadablePeriod) days25, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology24.dayOfMonth();
        org.joda.time.DurationField durationField30 = gregorianChronology24.weeks();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology24);
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology24.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, (long) 1, periodType22, (org.joda.time.Chronology) gregorianChronology24);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundFloor();
        int int37 = mutableDateTime36.getYear();
        mutableDateTime36.addDays(1969);
        boolean boolean40 = mutablePeriod33.equals((java.lang.Object) mutableDateTime36);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod();
        boolean boolean43 = mutablePeriod41.equals((java.lang.Object) (-1L));
        mutablePeriod41.setPeriod(86400000, 13, (int) (byte) -1, (int) ' ', 26, (-35), (int) (short) -1, (int) (short) 100);
        org.joda.time.Days days54 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType55 = days54.getFieldType();
        org.joda.time.PeriodType periodType56 = days54.getPeriodType();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property62 = dateTime60.property(dateTimeFieldType61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.chrono.JulianChronology julianChronology64 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone63);
        org.joda.time.Chronology chronology65 = julianChronology64.withUTC();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType61.getField((org.joda.time.Chronology) julianChronology64);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology64);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.chrono.JulianChronology julianChronology69 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone68);
        org.joda.time.Chronology chronology70 = julianChronology69.withUTC();
        mutableInterval67.setChronology((org.joda.time.Chronology) julianChronology69);
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 0, periodType56, (org.joda.time.Chronology) julianChronology69);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology74 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology74);
        org.joda.time.DateMidnight.Property property76 = dateMidnight75.dayOfYear();
        org.joda.time.DateMidnight dateMidnight77 = property76.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight77.plusWeeks((int) (byte) 10);
        org.joda.time.Days days80 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType81 = days80.getFieldType();
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight79.withFieldAdded(durationFieldType81, 26);
        org.joda.time.Period period85 = period72.withFieldAdded(durationFieldType81, (int) (short) 1);
        boolean boolean86 = mutablePeriod41.isSupported(durationFieldType81);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod33.add(durationFieldType81, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(gregorianChronology24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertArrayEquals(intArray28, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(julianChronology64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(julianChronology69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(gregorianChronology74);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(days80);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        int int21 = offsetDateTimeField18.getMaximumValue();
        long long24 = offsetDateTimeField18.getDifferenceAsLong((long) 13, (long) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long27 = offsetDateTimeField18.add(1743465600001L, (long) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3 for hourOfHalfday must be in the range [-1,-35]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-35) + "'", int21 == (-35));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMonths(0);
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime dateTime8 = dateTime1.plusWeeks(80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime1.withDate(1, 2025, 70067048);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2025 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDayOfYear(8);
        mutableDateTime0.setDayOfYear(31);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add((long) (-19));
        org.joda.time.MutableDateTime mutableDateTime9 = property5.add((-19));
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        org.joda.time.Chronology chronology20 = julianChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType16.getField((org.joda.time.Chronology) julianChronology19);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.Chronology chronology25 = julianChronology24.withUTC();
        mutableInterval22.setChronology((org.joda.time.Chronology) julianChronology24);
        mutableInterval22.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfWeek();
        int int32 = dateTime30.getWeekyear();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.plus(readableDuration33);
        boolean boolean35 = mutableInterval22.contains((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Days days36 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property39.getFieldType();
        boolean boolean41 = days36.equals((java.lang.Object) property39);
        org.joda.time.DateTime dateTime42 = property39.getDateTime();
        org.joda.time.DateTime dateTime43 = dateTime42.withEarlierOffsetAtOverlap();
        mutableInterval22.setStart((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime.Property property45 = dateTime43.dayOfYear();
        org.joda.time.Period period46 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime.Property property47 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property54 = dateTime52.property(dateTimeFieldType53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.chrono.JulianChronology julianChronology56 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone55);
        org.joda.time.Chronology chronology57 = julianChronology56.withUTC();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType53.getField((org.joda.time.Chronology) julianChronology56);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology56);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology56);
        org.joda.time.DateTimeZone dateTimeZone61 = julianChronology56.getZone();
        org.joda.time.DateTime dateTime62 = dateTime43.withZone(dateTimeZone61);
        mutableDateTime9.setZoneRetainFields(dateTimeZone61);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(julianChronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(julianChronology56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        int int4 = dateTime1.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.now((org.joda.time.Chronology) julianChronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = julianChronology6.getZone();
        org.joda.time.DateTime dateTime9 = dateTime1.withZoneRetainFields(dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour((-35));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -35 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(julianChronology6);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean2 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Minutes minutes4 = minutes0.dividedBy((int) '4');
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean7 = minutes5.isGreaterThan(minutes6);
        org.joda.time.Minutes minutes9 = minutes5.dividedBy((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes10 = minutes0.minus(minutes5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(minutes9);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        java.lang.Number number1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException("DurationField[halfdays]", number1, (java.lang.Number) (-1L), (java.lang.Number) 31);
        java.lang.String str5 = illegalFieldValueException4.getIllegalValueAsString();
        java.lang.String str6 = illegalFieldValueException4.getIllegalValueAsString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "null" + "'", str5, "null");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null" + "'", str6, "null");
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.timeElementParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldType13, 2);
        org.joda.time.Days days22 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType23 = days22.getFieldType();
        org.joda.time.PeriodType periodType24 = days22.getPeriodType();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property30 = dateTime28.property(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31);
        org.joda.time.Chronology chronology33 = julianChronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType29.getField((org.joda.time.Chronology) julianChronology32);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        org.joda.time.Chronology chronology38 = julianChronology37.withUTC();
        mutableInterval35.setChronology((org.joda.time.Chronology) julianChronology37);
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 0, periodType24, (org.joda.time.Chronology) julianChronology37);
        org.joda.time.Partial partial41 = partial20.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology42 = partial41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.era();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(julianChronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(julianChronology37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.Days days2 = days0.minus((int) (short) 1);
        org.joda.time.Days days4 = days2.minus((-19));
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone1);
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        int[] intArray6 = gregorianChronology2.get((org.joda.time.ReadablePeriod) days3, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology2.dayOfMonth();
        org.joda.time.DurationField durationField8 = gregorianChronology2.years();
        org.joda.time.DurationField durationField9 = gregorianChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = julianChronology11.seconds();
        int int13 = durationField9.compareTo(durationField12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        org.joda.time.Chronology chronology20 = julianChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType16.getField((org.joda.time.Chronology) julianChronology19);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField21.getAsShortText((int) (byte) 0, locale23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property28 = dateTime26.property(dateTimeFieldType27);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField21, dateTimeFieldType27, (int) (byte) -1, (int) (byte) -1, (-35));
        int int34 = offsetDateTimeField32.getLeapAmount((long) (short) 0);
        org.joda.time.DurationField durationField35 = offsetDateTimeField32.getRangeDurationField();
        org.joda.time.field.PreciseDateTimeField preciseDateTimeField36 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, durationField9, durationField35);
        long long38 = preciseDateTimeField36.roundHalfCeiling((-1511999993L));
        // The following exception was thrown during execution in test generation
        try {
            long long41 = preciseDateTimeField36.set((long) 26, 86400000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86400000 for millisOfSecond must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(julianChronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1512000000L) + "'", long38 == (-1512000000L));
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears(0);
        int int6 = localDateTime5.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setHours(5);
        int int3 = mutablePeriod0.getSeconds();
        mutablePeriod0.addSeconds(9);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfWeek();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod0, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod0.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod9.setValue(604800000, (-20274));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 604800000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutablePeriod9);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.Days days8 = org.joda.time.Days.THREE;
        int[] intArray11 = gregorianChronology7.get((org.joda.time.ReadablePeriod) days8, (long) 0, (-1L));
        org.joda.time.Duration duration12 = days8.toStandardDuration();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        int int15 = property14.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertArrayEquals(intArray11, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-292275054) + "'", int15 == (-292275054));
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay4 = dateTime3.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.plus(readableDuration9);
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        boolean boolean13 = dateTime10.isBefore(26L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime10, readableInstant14);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay4.withChronologyRetainFields(chronology15);
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay19 = property17.addToCopy((int) (short) -1);
        java.lang.String str20 = timeOfDay19.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType22 = timeOfDay19.getFieldType(59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 59");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "T00:00:00.000" + "'", str20, "T00:00:00.000");
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property5 = dateTime4.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property5.getFieldType();
        boolean boolean7 = days2.equals((java.lang.Object) property5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property5.getFieldType();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime12 = dateTime10.withYear((-35));
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis(1970);
        int int15 = property5.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology16 = dateTime14.getChronology();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((long) (-86401), chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0, chronology16);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 'a', (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater than the start instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 1970, 1743535724466L);
        java.lang.String str3 = mutableInterval2.toString();
        mutableInterval2.setStartMillis((-517127L));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:01.970Z/2025-04-01T19:28:44.466Z" + "'", str3, "1970-01-01T00:00:01.970Z/2025-04-01T19:28:44.466Z");
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Instant instant1 = gJChronology0.getGregorianCutover();
        org.joda.time.DurationField durationField2 = gJChronology0.seconds();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone3);
        org.joda.time.Days days5 = org.joda.time.Days.THREE;
        int[] intArray8 = gregorianChronology4.get((org.joda.time.ReadablePeriod) days5, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology4.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology4.monthOfYear();
        int int11 = gregorianChronology4.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = gregorianChronology4.getZone();
        org.joda.time.Chronology chronology13 = gJChronology0.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology0.years();
        org.joda.time.DurationField durationField15 = gJChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertArrayEquals(intArray8, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        boolean boolean8 = dateTimeZone6.equals((java.lang.Object) dateTimeFormatter7);
        java.lang.String str10 = dateTimeZone6.getShortName((long) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((int) (short) 1, (-35), 60, 2025, 86400000, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2025 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("00:01:37.035");
        boolean boolean3 = jodaTimePermission1.equals((java.lang.Object) (-1512000000L));
        java.security.PermissionCollection permissionCollection4 = jodaTimePermission1.newPermissionCollection();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(permissionCollection4);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = days6.getFieldType();
        org.joda.time.PeriodType periodType8 = days6.getPeriodType();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.Chronology chronology17 = julianChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType13.getField((org.joda.time.Chronology) julianChronology16);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        org.joda.time.Chronology chronology22 = julianChronology21.withUTC();
        mutableInterval19.setChronology((org.joda.time.Chronology) julianChronology21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 0, periodType8, (org.joda.time.Chronology) julianChronology21);
        org.joda.time.PeriodType periodType25 = periodType8.withDaysRemoved();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone26);
        org.joda.time.Days days28 = org.joda.time.Days.THREE;
        int[] intArray31 = gregorianChronology27.get((org.joda.time.ReadablePeriod) days28, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology27.dayOfMonth();
        org.joda.time.DurationField durationField33 = gregorianChronology27.weeks();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology27.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, (long) 1, periodType25, (org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology27.hourOfHalfday();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 1000, (long) 1969, (org.joda.time.Chronology) gregorianChronology27);
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (-19), (org.joda.time.Chronology) gregorianChronology27, locale39, (java.lang.Integer) 86400, 80);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(julianChronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertArrayEquals(intArray31, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property21 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology24 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType20.getField((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology23);
        java.util.Locale locale29 = null;
        java.lang.String str30 = skipDateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime27, 0, locale29);
        org.joda.time.DurationField durationField31 = skipDateTimeField14.getRangeDurationField();
        org.joda.time.Days days32 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType33 = days32.getFieldType();
        org.joda.time.field.ScaledDurationField scaledDurationField35 = new org.joda.time.field.ScaledDurationField(durationField31, durationFieldType33, 1440);
        long long38 = durationField31.getMillis((-1), (long) (-35));
        long long40 = durationField31.getValueAsLong((long) 6);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 71 + "'", int13 == 71);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-3155673600000L) + "'", long38 == (-3155673600000L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfMonth();
        int int6 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.weekOfWeekyear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime3.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType25.getField((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = julianChronology28.withZone(dateTimeZone31);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) '#', chronology32);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds((int) 'a');
        int[] intArray39 = new int[] { 26, '#', 31 };
        int int40 = offsetDateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localTime35, intArray39);
        org.joda.time.LocalTime.Property property41 = localTime35.minuteOfHour();
        org.joda.time.LocalTime localTime42 = property41.withMinimumValue();
        org.joda.time.LocalTime localTime43 = property41.withMinimumValue();
        java.lang.String str44 = property41.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertArrayEquals(intArray39, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "minuteOfHour" + "'", str44, "minuteOfHour");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        mutablePeriod0.addDays(26);
        mutablePeriod0.addHours((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, dateTimeZone1);
        boolean boolean4 = localTime2.equals((java.lang.Object) 26);
        org.joda.time.LocalTime.Property property5 = localTime2.hourOfDay();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        org.joda.time.Chronology chronology23 = julianChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType19.getField((org.joda.time.Chronology) julianChronology22);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.Chronology chronology28 = julianChronology27.withUTC();
        mutableInterval25.setChronology((org.joda.time.Chronology) julianChronology27);
        mutableInterval25.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        int int35 = dateTime33.getWeekyear();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.plus(readableDuration36);
        boolean boolean38 = mutableInterval25.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Interval interval39 = mutableInterval25.toInterval();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) interval39);
        long long41 = interval39.toDurationMillis();
        boolean boolean43 = interval39.equals((java.lang.Object) 100);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property49 = dateTime47.property(dateTimeFieldType48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.chrono.JulianChronology julianChronology51 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone50);
        org.joda.time.Chronology chronology52 = julianChronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType48.getField((org.joda.time.Chronology) julianChronology51);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.chrono.JulianChronology julianChronology56 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone55);
        org.joda.time.Chronology chronology57 = julianChronology56.withUTC();
        mutableInterval54.setChronology((org.joda.time.Chronology) julianChronology56);
        mutableInterval54.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property63 = dateTime62.dayOfWeek();
        int int64 = dateTime62.getWeekyear();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime62.plus(readableDuration65);
        boolean boolean67 = mutableInterval54.contains((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology69 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeZone68, dateTimeZone70);
        int int72 = mutableDateTime71.getRoundingMode();
        mutableInterval54.setEnd((org.joda.time.ReadableInstant) mutableDateTime71);
        mutableInterval54.setInterval((long) 12, 410659200097L);
        boolean boolean77 = interval39.isAfter((org.joda.time.ReadableInterval) mutableInterval54);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 90L + "'", long41 == 90L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(julianChronology51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(julianChronology56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(gregorianChronology69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfCentury(60);
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod();
        boolean boolean6 = mutablePeriod4.equals((java.lang.Object) (-1L));
        mutablePeriod4.addDays(26);
        org.joda.time.DateTime dateTime10 = dateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod4, 3);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((-20274), 5999999, (int) '#', 25, 6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.plus(readableDuration4);
        org.joda.time.DateTime.Property property6 = dateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfYear();
        org.joda.time.DateMidnight dateMidnight11 = property10.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plusWeeks((int) (byte) 10);
        boolean boolean14 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone15);
        org.joda.time.Days days17 = org.joda.time.Days.THREE;
        int[] intArray20 = gregorianChronology16.get((org.joda.time.ReadablePeriod) days17, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology16.dayOfMonth();
        org.joda.time.DurationField durationField22 = gregorianChronology16.eras();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology16.era();
        org.joda.time.DateTime dateTime24 = dateTime1.withChronology((org.joda.time.Chronology) gregorianChronology16);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertArrayEquals(intArray20, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology5, locale7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfWeek();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.plus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        boolean boolean16 = dateTimeParserBucket8.restoreState((java.lang.Object) property15);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket8.getZone();
        org.joda.time.DateTime dateTime18 = localDate0.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = dateTime19.toLocalDate();
        int int21 = localDate20.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.tTime();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.junit.Assert.assertNotNull(periodType0);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyearOfCentury();
        int int7 = dateMidnight2.get(dateTimeField6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        int int11 = dateTime9.getWeekyear();
        int int12 = dateTime9.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone13);
        org.joda.time.Days days15 = org.joda.time.Days.THREE;
        int[] intArray18 = gregorianChronology14.get((org.joda.time.ReadablePeriod) days15, (long) 0, (-1L));
        org.joda.time.Duration duration19 = days15.toStandardDuration();
        org.joda.time.DateTime dateTime21 = dateTime9.withDurationAdded((org.joda.time.ReadableDuration) duration19, 26);
        org.joda.time.Duration duration23 = duration19.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.format.PeriodFormatter periodFormatter28 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter30 = periodFormatter28.withParseType(periodType29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26, periodType29);
        org.joda.time.Days days32 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime36 = dateTime34.withYear((-35));
        int int37 = dateTime34.getMinuteOfDay();
        org.joda.time.DateTime dateTime39 = dateTime34.withYearOfEra(7);
        int int40 = dateTime34.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getRangeDurationType();
        boolean boolean43 = dateTime34.isSupported(dateTimeFieldType41);
        boolean boolean44 = dateTime26.isSupported(dateTimeFieldType41);
        boolean boolean45 = dateTime26.isBeforeNow();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 71 + "'", int7 == 71);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertArrayEquals(intArray18, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodFormatter30);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.Days days8 = org.joda.time.Days.THREE;
        int[] intArray11 = gregorianChronology7.get((org.joda.time.ReadablePeriod) days8, (long) 0, (-1L));
        org.joda.time.Duration duration12 = days8.toStandardDuration();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withWeekOfWeekyear(23);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertArrayEquals(intArray11, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType1 = org.joda.time.DateTimeUtils.getPeriodType(periodType0);
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType4 = days3.getFieldType();
        org.joda.time.PeriodType periodType5 = days3.getPeriodType();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property11 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType10.getField((org.joda.time.Chronology) julianChronology13);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.Chronology chronology19 = julianChronology18.withUTC();
        mutableInterval16.setChronology((org.joda.time.Chronology) julianChronology18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 0, periodType5, (org.joda.time.Chronology) julianChronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        boolean boolean24 = period21.isSupported(durationFieldType23);
        int int25 = periodType1.indexOf(durationFieldType23);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.PeriodType periodType3 = days1.getPeriodType();
        mutablePeriod0.add((org.joda.time.ReadablePeriod) days1);
        int int5 = mutablePeriod0.getMillis();
        mutablePeriod0.addYears((-1));
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.now((org.joda.time.Chronology) julianChronology5);
        org.joda.time.DateTimeField dateTimeField7 = julianChronology5.monthOfYear();
        long long12 = julianChronology5.getDateTimeMillis(6, 7, 3, 3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(86400, (-20274), (int) (byte) 10, 6, (org.joda.time.Chronology) julianChronology5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86400 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-61962191999997L) + "'", long12 == (-61962191999997L));
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.JulianChronology julianChronology1 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone0);
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.now((org.joda.time.Chronology) julianChronology1);
        org.joda.time.MonthDay.Property property3 = monthDay2.monthOfYear();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfWeek();
        int int7 = dateTime5.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfYear();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateMidnight10);
        int int13 = property3.compareTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Period period15 = org.joda.time.Period.days(7);
        org.joda.time.Period period17 = period15.plusMonths(60);
        org.joda.time.Period period19 = period17.minusDays((-86401));
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadablePeriod) period17);
        org.junit.Assert.assertNotNull(julianChronology1);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.plus(readableDuration4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((-1));
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.Instant instant10 = instant8.withMillis((long) 0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfWeek();
        int int14 = dateTime12.getWeekyear();
        int int15 = dateTime12.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology17 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone16);
        org.joda.time.Days days18 = org.joda.time.Days.THREE;
        int[] intArray21 = gregorianChronology17.get((org.joda.time.ReadablePeriod) days18, (long) 0, (-1L));
        org.joda.time.Duration duration22 = days18.toStandardDuration();
        org.joda.time.DateTime dateTime24 = dateTime12.withDurationAdded((org.joda.time.ReadableDuration) duration22, 26);
        org.joda.time.Duration duration25 = duration22.abs();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology29 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology29.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((java.lang.Object) instant27, (org.joda.time.Chronology) gregorianChronology29);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertArrayEquals(intArray21, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(gregorianChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Partial partial2 = new org.joda.time.Partial((org.joda.time.Chronology) gregorianChronology1);
        java.lang.String str3 = partial2.toStringList();
        int[] intArray4 = partial2.getValues();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertArrayEquals(intArray4, new int[] {});
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(101L);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.ZERO;
        org.joda.time.YearMonth yearMonth3 = yearMonth1.plus((org.joda.time.ReadablePeriod) weeks2);
        org.joda.time.Duration duration4 = weeks2.toStandardDuration();
        org.joda.time.Weeks weeks6 = weeks2.minus((-19));
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.ONE;
        int int8 = weeks7.getWeeks();
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(101L);
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.ZERO;
        org.joda.time.YearMonth yearMonth12 = yearMonth10.plus((org.joda.time.ReadablePeriod) weeks11);
        org.joda.time.Weeks weeks13 = weeks7.plus(weeks11);
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.ZERO;
        boolean boolean15 = weeks7.isLessThan(weeks14);
        boolean boolean16 = weeks6.isGreaterThan(weeks14);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.joda.time.Days days0 = org.joda.time.Days.TWO;
        org.joda.time.Days days2 = org.joda.time.Days.days((int) '4');
        boolean boolean3 = days0.isLessThan(days2);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property4 = dateTime2.property(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.Chronology chronology7 = julianChronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType3.getField((org.joda.time.Chronology) julianChronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = julianChronology6.withZone(dateTimeZone9);
        org.joda.time.chrono.StrictChronology strictChronology11 = org.joda.time.chrono.StrictChronology.getInstance(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = strictChronology11.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, (org.joda.time.Chronology) strictChronology11);
        java.lang.String str14 = strictChronology11.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(julianChronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(strictChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "StrictChronology[JulianChronology[UTC]]" + "'", str14, "StrictChronology[JulianChronology[UTC]]");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        int int4 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        int[] intArray10 = gregorianChronology6.get((org.joda.time.ReadablePeriod) days7, (long) 0, (-1L));
        org.joda.time.Duration duration11 = days7.toStandardDuration();
        org.joda.time.DateTime dateTime13 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration11, 26);
        org.joda.time.Duration duration15 = duration11.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Days days19 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType20 = days19.getFieldType();
        org.joda.time.PeriodType periodType21 = days19.getPeriodType();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property27 = dateTime25.property(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.Chronology chronology30 = julianChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType26.getField((org.joda.time.Chronology) julianChronology29);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        org.joda.time.Chronology chronology35 = julianChronology34.withUTC();
        mutableInterval32.setChronology((org.joda.time.Chronology) julianChronology34);
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 0, periodType21, (org.joda.time.Chronology) julianChronology34);
        org.joda.time.PeriodType periodType38 = periodType21.withDaysRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, readableInstant17, periodType38);
        int int40 = period39.size();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod();
        org.joda.time.ReadableInterval readableInterval42 = null;
        mutablePeriod41.add(readableInterval42);
        mutablePeriod41.addMillis((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period46 = period39.minus((org.joda.time.ReadablePeriod) mutablePeriod41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertArrayEquals(intArray10, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.junit.Assert.assertNotNull(iSOChronology0);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((org.joda.time.ReadablePeriod) weeks3);
        int int5 = weeks3.size();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.plus(readableDuration4);
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime5.withEra((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology5, locale7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfWeek();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.plus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        boolean boolean16 = dateTimeParserBucket8.restoreState((java.lang.Object) property15);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket8.getZone();
        org.joda.time.DateTime dateTime18 = localDate0.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone20 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withYear((-35));
        int int25 = dateTime22.getMinuteOfDay();
        org.joda.time.DateTime dateTime27 = dateTime22.withYearOfEra(7);
        int int28 = dateTime22.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getRangeDurationType();
        boolean boolean31 = dateTime22.isSupported(dateTimeFieldType29);
        boolean boolean32 = cachedDateTimeZone20.equals((java.lang.Object) dateTime22);
        long long34 = cachedDateTimeZone20.previousTransition((long) (short) 100);
        boolean boolean35 = cachedDateTimeZone20.isFixed();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(cachedDateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears(0);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.seconds();
        boolean boolean7 = localDateTime5.isSupported(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property21 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology24 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType20.getField((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology23);
        java.util.Locale locale29 = null;
        java.lang.String str30 = skipDateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime27, 0, locale29);
        org.joda.time.DurationField durationField31 = skipDateTimeField14.getRangeDurationField();
        org.joda.time.Days days32 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType33 = days32.getFieldType();
        org.joda.time.field.ScaledDurationField scaledDurationField35 = new org.joda.time.field.ScaledDurationField(durationField31, durationFieldType33, 1440);
        long long37 = scaledDurationField35.getMillis((long) (short) -1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 71 + "'", int13 == 71);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-4544201088000000L) + "'", long37 == (-4544201088000000L));
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.Days days2 = days0.minus((int) (short) 1);
        org.joda.time.PeriodType periodType3 = days0.getPeriodType();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeFormatter1.getZone();
        boolean boolean3 = dateTimeFormatter1.isOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter1.getChronology();
        boolean boolean5 = dateTimeFormatter1.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(3600);
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone1);
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        int[] intArray6 = gregorianChronology2.get((org.joda.time.ReadablePeriod) days3, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology2.dayOfMonth();
        org.joda.time.DurationField durationField8 = gregorianChronology2.eras();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology2.era();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((long) 70067048, (org.joda.time.Chronology) gregorianChronology2);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology2.yearOfEra();
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType25.getField((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = julianChronology28.withZone(dateTimeZone31);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) '#', chronology32);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds((int) 'a');
        int[] intArray39 = new int[] { 26, '#', 31 };
        int int40 = offsetDateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localTime35, intArray39);
        java.lang.String str41 = offsetDateTimeField18.getName();
        // The following exception was thrown during execution in test generation
        try {
            int int44 = offsetDateTimeField18.getDifference(2746894413240000000L, (-1924473598031L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 763026760475");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertArrayEquals(intArray39, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hourOfHalfday" + "'", str41, "hourOfHalfday");
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology5);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(9, 1, 5, 5, (org.joda.time.Chronology) gregorianChronology5);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay9 = property8.withMaximumValue();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((org.joda.time.Chronology) julianChronology2);
        org.joda.time.Chronology chronology16 = julianChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology2.year();
        org.joda.time.chrono.StrictChronology strictChronology18 = org.joda.time.chrono.StrictChronology.getInstance((org.joda.time.Chronology) julianChronology2);
        java.lang.Object obj19 = null;
        boolean boolean20 = strictChronology18.equals(obj19);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 71 + "'", int13 == 71);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(strictChronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
        periodFormatterBuilder1.clear();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatterBuilder3.toFormatter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatter4);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = localDate0.getChronology();
        org.joda.time.LocalDate localDate3 = localDate0.plusDays(20179);
        org.joda.time.LocalDate.Property property4 = localDate0.year();
        org.joda.time.LocalDate localDate6 = property4.addToCopy(5999999);
        org.joda.time.LocalDate localDate7 = property4.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField8 = property4.getField();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean2 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Minutes minutes4 = minutes0.dividedBy((int) '4');
        org.joda.time.PeriodType periodType5 = minutes0.getPeriodType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 86400000);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        int int1 = weeks0.getWeeks();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology3);
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((org.joda.time.ReadablePeriod) weeks5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        boolean boolean8 = weeks5.isSupported(durationFieldType7);
        boolean boolean9 = weeks0.isLessThan(weeks5);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.addDays(3);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        int int0 = org.joda.time.DateTimeConstants.BC;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.year();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDayOfYear(8);
        int int3 = mutableDateTime0.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.setMillis((-1L));
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfCentury(60);
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) dateTime11);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime5);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setMonthOfYear(2025);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2025 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        java.lang.Number number1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException("DurationField[halfdays]", number1, (java.lang.Number) (-1L), (java.lang.Number) 31);
        java.lang.String str5 = illegalFieldValueException4.getIllegalValueAsString();
        java.lang.Number number7 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException10 = new org.joda.time.IllegalFieldValueException("DurationField[halfdays]", number7, (java.lang.Number) (-1L), (java.lang.Number) 31);
        illegalFieldValueException4.addSuppressed((java.lang.Throwable) illegalFieldValueException10);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "null" + "'", str5, "null");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType25.getField((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = julianChronology28.withZone(dateTimeZone31);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) '#', chronology32);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds((int) 'a');
        int[] intArray39 = new int[] { 26, '#', 31 };
        int int40 = offsetDateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localTime35, intArray39);
        int int42 = offsetDateTimeField18.getMaximumValue(90L);
        org.joda.time.DurationField durationField43 = offsetDateTimeField18.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = offsetDateTimeField18.set((long) 5999999, "millisOfDay");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"millisOfDay\" for hourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertArrayEquals(intArray39, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-35) + "'", int42 == (-35));
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.joda.time.Period period1 = org.joda.time.Period.years((-20274));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMonths(0);
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime.Property property7 = dateTime1.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        org.joda.time.DurationField durationField8 = julianChronology5.halfdays();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 31, (long) 25);
        int[] intArray13 = julianChronology5.get((org.joda.time.ReadablePeriod) period11, (-1924473598031L));
        org.joda.time.DateTimeField dateTimeField14 = julianChronology5.weekyear();
        org.joda.time.Months months15 = org.joda.time.Months.ONE;
        org.joda.time.DurationFieldType durationFieldType16 = months15.getFieldType();
        boolean boolean17 = julianChronology5.equals((java.lang.Object) months15);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertArrayEquals(intArray13, new int[] { 0, 0, (-3181), (-6), (-23), (-59), (-58), (-31) });
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(months15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property21 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology24 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType20.getField((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology23);
        java.util.Locale locale29 = null;
        java.lang.String str30 = skipDateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime27, 0, locale29);
        org.joda.time.DurationField durationField31 = skipDateTimeField14.getRangeDurationField();
        java.util.Locale locale33 = null;
        java.lang.String str34 = skipDateTimeField14.getAsShortText(1743465600001L, locale33);
        long long36 = skipDateTimeField14.roundFloor((-61565702399975L));
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 71 + "'", int13 == 71);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "26" + "'", str34, "26");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-61567689600000L) + "'", long36 == (-61567689600000L));
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        mutablePeriod0.addDays(26);
        mutablePeriod0.addHours(0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        mutablePeriod0.setPeriod(86400000, 13, (int) (byte) -1, (int) ' ', 26, (-35), (int) (short) -1, (int) (short) 100);
        int int12 = mutablePeriod0.getDays();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone14);
        org.joda.time.Days days16 = org.joda.time.Days.THREE;
        int[] intArray19 = gregorianChronology15.get((org.joda.time.ReadablePeriod) days16, (long) 0, (-1L));
        org.joda.time.DurationField durationField20 = gregorianChronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology15.yearOfEra();
        org.joda.time.DurationField durationField22 = gregorianChronology15.hours();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology24 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfYear();
        org.joda.time.DateMidnight dateMidnight27 = property26.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.withYearOfCentury(100);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay((java.lang.Object) dateMidnight27, chronology30);
        int[] intArray33 = gregorianChronology15.get((org.joda.time.ReadablePartial) monthDay31, (long) 84);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gregorianChronology15);
        mutablePeriod0.add(259200000L, (org.joda.time.Chronology) gregorianChronology15);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertArrayEquals(intArray19, new int[] { 0 });
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(gregorianChronology24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertArrayEquals(intArray33, new int[] { 1, 1 });
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone1);
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        int[] intArray6 = gregorianChronology2.get((org.joda.time.ReadablePeriod) days3, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology2.dayOfMonth();
        org.joda.time.DurationField durationField8 = gregorianChronology2.millis();
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 26, (org.joda.time.Chronology) gregorianChronology2, locale9);
        dateTimeParserBucket10.setOffset(0);
        dateTimeParserBucket10.setOffset(84);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(101L);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.ZERO;
        org.joda.time.YearMonth yearMonth3 = yearMonth1.plus((org.joda.time.ReadablePeriod) weeks2);
        org.joda.time.YearMonth yearMonth5 = yearMonth1.withMonthOfYear((int) (short) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) yearMonth5, periodType6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.YearMonth");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.joda.time.Years years0 = org.joda.time.Years.ZERO;
        org.joda.time.Years years2 = years0.minus(50);
        org.junit.Assert.assertNotNull(years0);
        org.junit.Assert.assertNotNull(years2);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        org.joda.time.Chronology chronology23 = julianChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType19.getField((org.joda.time.Chronology) julianChronology22);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.Chronology chronology28 = julianChronology27.withUTC();
        mutableInterval25.setChronology((org.joda.time.Chronology) julianChronology27);
        mutableInterval25.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        int int35 = dateTime33.getWeekyear();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.plus(readableDuration36);
        boolean boolean38 = mutableInterval25.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Interval interval39 = mutableInterval25.toInterval();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone41);
        org.joda.time.Days days43 = org.joda.time.Days.THREE;
        int[] intArray46 = gregorianChronology42.get((org.joda.time.ReadablePeriod) days43, (long) 0, (-1L));
        org.joda.time.Duration duration47 = days43.toStandardDuration();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfWeek();
        int int51 = dateTime49.getWeekyear();
        int int52 = dateTime49.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology54 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone53);
        org.joda.time.Days days55 = org.joda.time.Days.THREE;
        int[] intArray58 = gregorianChronology54.get((org.joda.time.ReadablePeriod) days55, (long) 0, (-1L));
        org.joda.time.Duration duration59 = days55.toStandardDuration();
        org.joda.time.DateTime dateTime61 = dateTime49.withDurationAdded((org.joda.time.ReadableDuration) duration59, 26);
        boolean boolean62 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Interval interval63 = interval39.withDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval39);
        java.lang.String str65 = interval39.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertArrayEquals(intArray46, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology54);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertArrayEquals(intArray58, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1969-12-19T00:00:00.007Z/1969-12-19T00:00:00.097Z" + "'", str65, "1969-12-19T00:00:00.007Z/1969-12-19T00:00:00.097Z");
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyearWeek();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.Chronology chronology7 = julianChronology6.withUTC();
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology6, locale8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfWeek();
        int int13 = dateTime11.getWeekyear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.plus(readableDuration14);
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        boolean boolean17 = dateTimeParserBucket9.restoreState((java.lang.Object) property16);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket9.getZone();
        org.joda.time.DateTime dateTime19 = localDate1.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone21 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        java.util.TimeZone timeZone22 = cachedDateTimeZone21.toTimeZone();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod();
        boolean boolean25 = mutablePeriod23.equals((java.lang.Object) (-1L));
        mutablePeriod23.addYears(100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology29 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = property31.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plusWeeks((int) (byte) 10);
        org.joda.time.Days days35 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType36 = days35.getFieldType();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight34.withFieldAdded(durationFieldType36, 26);
        mutablePeriod23.add(durationFieldType36, 1);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property46 = dateTime44.property(dateTimeFieldType45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.chrono.JulianChronology julianChronology48 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone47);
        org.joda.time.Chronology chronology49 = julianChronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType45.getField((org.joda.time.Chronology) julianChronology48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone52);
        org.joda.time.Chronology chronology54 = julianChronology53.withUTC();
        mutableInterval51.setChronology((org.joda.time.Chronology) julianChronology53);
        mutablePeriod23.add((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.chrono.JulianChronology julianChronology59 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone58);
        org.joda.time.Chronology chronology60 = julianChronology59.withUTC();
        org.joda.time.DurationField durationField61 = julianChronology59.weekyears();
        mutablePeriod23.add((long) 'a', (org.joda.time.Chronology) julianChronology59);
        boolean boolean63 = cachedDateTimeZone21.equals((java.lang.Object) julianChronology59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology66 = org.joda.time.chrono.JulianChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone21, 6240);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 6240");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(julianChronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(cachedDateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(gregorianChronology29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(julianChronology48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(julianChronology53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(julianChronology59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.joda.time.Years years0 = org.joda.time.Years.THREE;
        org.junit.Assert.assertNotNull(years0);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        mutableInterval10.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        int int20 = dateTime18.getWeekyear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readableDuration21);
        boolean boolean23 = mutableInterval10.contains((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval24 = mutableInterval10.copy();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology26 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone25);
        org.joda.time.Days days27 = org.joda.time.Days.THREE;
        int[] intArray30 = gregorianChronology26.get((org.joda.time.ReadablePeriod) days27, (long) 0, (-1L));
        java.lang.String str31 = gregorianChronology26.toString();
        mutableInterval10.setChronology((org.joda.time.Chronology) gregorianChronology26);
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology26.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(gregorianChronology26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertArrayEquals(intArray30, new int[] { 0 });
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GregorianChronology[UTC]" + "'", str31, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        boolean boolean5 = days0.equals((java.lang.Object) property3);
        org.joda.time.DateTime dateTime6 = property3.getDateTime();
        org.joda.time.DateTime dateTime7 = dateTime6.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear(3);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((org.joda.time.Chronology) julianChronology2);
        org.joda.time.Chronology chronology16 = julianChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology19);
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((org.joda.time.ReadablePeriod) weeks21);
        java.util.Date date23 = dateMidnight20.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = org.joda.time.YearMonthDay.fromDateFields(date23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay24.toDateMidnight(dateTimeZone25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.plusMonths(8);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30);
        org.joda.time.Chronology chronology32 = julianChronology31.withUTC();
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology31, locale33);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfWeek();
        int int38 = dateTime36.getWeekyear();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.plus(readableDuration39);
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        boolean boolean42 = dateTimeParserBucket34.restoreState((java.lang.Object) property41);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket34.getZone();
        org.joda.time.DateTime dateTime44 = yearMonthDay28.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone45 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone43);
        org.joda.time.Chronology chronology46 = julianChronology2.withZone(dateTimeZone43);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 71 + "'", int13 == 71);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 EST 1969");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(cachedDateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType3 = days2.getFieldType();
        org.joda.time.LocalDate localDate5 = localDate1.withFieldAdded(durationFieldType3, 1);
        org.joda.time.LocalDate.Property property6 = localDate5.era();
        org.joda.time.LocalDate localDate8 = localDate5.withYearOfCentury(0);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.Chronology chronology15 = julianChronology14.withUTC();
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology14, locale16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfWeek();
        int int21 = dateTime19.getWeekyear();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.plus(readableDuration22);
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        boolean boolean25 = dateTimeParserBucket17.restoreState((java.lang.Object) property24);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket17.getZone();
        org.joda.time.DateTime dateTime27 = localDate9.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = localDate5.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology32 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone31);
        org.joda.time.Days days33 = org.joda.time.Days.THREE;
        int[] intArray36 = gregorianChronology32.get((org.joda.time.ReadablePeriod) days33, (long) 0, (-1L));
        org.joda.time.Duration duration37 = days33.toStandardDuration();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfWeek();
        int int41 = dateTime39.getWeekyear();
        int int42 = dateTime39.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone43);
        org.joda.time.Days days45 = org.joda.time.Days.THREE;
        int[] intArray48 = gregorianChronology44.get((org.joda.time.ReadablePeriod) days45, (long) 0, (-1L));
        org.joda.time.Duration duration49 = days45.toStandardDuration();
        org.joda.time.DateTime dateTime51 = dateTime39.withDurationAdded((org.joda.time.ReadableDuration) duration49, 26);
        boolean boolean52 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology54 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.dayOfYear();
        org.joda.time.DateMidnight dateMidnight57 = property56.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.plusWeeks((int) (byte) 10);
        org.joda.time.Period period60 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.DateTime dateTime61 = dateTime30.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime65 = dateTime63.withDayOfMonth((int) (byte) 1);
        org.joda.time.Instant instant66 = dateTime65.toInstant();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.Instant instant69 = instant66.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.format.PeriodFormatter periodFormatter70 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter72 = periodFormatter70.withParseType(periodType71);
        org.joda.time.PeriodType periodType73 = periodFormatter72.getParseType();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) instant69, periodType73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval75 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater than the start instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(gregorianChronology32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertArrayEquals(intArray36, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology44);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertArrayEquals(intArray48, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(gregorianChronology54);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(periodFormatter70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodFormatter72);
        org.junit.Assert.assertNotNull(periodType73);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds("1970-01-01T00:00:00.001Z", (-1), 80, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for 1970-01-01T00:00:00.001Z must be in the range [80,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeZone0, dateTimeZone2);
        int int4 = mutableDateTime3.getRoundingMode();
        mutableDateTime3.addWeekyears((int) '4');
        mutableDateTime3.setWeekyear(32);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter2 = periodFormatter0.withParseType(periodType1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay7 = dateTime6.toTimeOfDay();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        int int11 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.plus(readableDuration12);
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        boolean boolean16 = dateTime13.isBefore(26L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime13, readableInstant17);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay7.withChronologyRetainFields(chronology18);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay19.millisOfSecond();
        java.util.Locale locale21 = null;
        int int22 = property20.getMaximumTextLength(locale21);
        boolean boolean23 = periodType1.equals((java.lang.Object) int22);
        org.junit.Assert.assertNotNull(periodFormatter0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodFormatter2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        int int21 = offsetDateTimeField18.getMaximumValue();
        long long24 = offsetDateTimeField18.getDifferenceAsLong((long) 13, (long) 10);
        int int26 = offsetDateTimeField18.get((long) 4);
        org.joda.time.DateTimeField dateTimeField27 = offsetDateTimeField18.getWrappedField();
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = org.joda.time.field.LenientDateTimeField.getInstance(dateTimeField27, (org.joda.time.Chronology) gJChronology28);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-35) + "'", int21 == (-35));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.weekyear();
        int int4 = dateMidnight2.getDayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod();
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = days6.getFieldType();
        org.joda.time.PeriodType periodType8 = days6.getPeriodType();
        mutablePeriod5.add((org.joda.time.ReadablePeriod) days6);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        mutablePeriod5.setYears(4);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        mutableInterval10.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        int int20 = dateTime18.getWeekyear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readableDuration21);
        boolean boolean23 = mutableInterval10.contains((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Days days24 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property27.getFieldType();
        boolean boolean29 = days24.equals((java.lang.Object) property27);
        org.joda.time.DateTime dateTime30 = property27.getDateTime();
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        mutableInterval10.setStart((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) (byte) 10, (long) 10);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) mutableInterval35);
        org.joda.time.DateTime dateTime38 = mutableInterval10.getEnd();
        long long39 = mutableInterval10.getEndMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYearOfCentury(100);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDurationAdded(readableDuration7, 31);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfWeek();
        int int13 = dateTime11.getWeekyear();
        int int14 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone15);
        org.joda.time.Days days17 = org.joda.time.Days.THREE;
        int[] intArray20 = gregorianChronology16.get((org.joda.time.ReadablePeriod) days17, (long) 0, (-1L));
        org.joda.time.Duration duration21 = days17.toStandardDuration();
        org.joda.time.DateTime dateTime23 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration21, 26);
        org.joda.time.Duration duration25 = duration21.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration26 = duration25.toDuration();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight9.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight9.plusDays(1);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertArrayEquals(intArray20, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.ReadableInterval readableInterval1 = null;
        mutablePeriod0.add(readableInterval1);
        org.joda.time.Period period3 = mutablePeriod0.toPeriod();
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.JulianChronology julianChronology1 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone0);
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.now((org.joda.time.Chronology) julianChronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = julianChronology1.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone3, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 86400000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(julianChronology1);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.plus(readableDuration4);
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        boolean boolean8 = dateTime5.isBefore(26L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime5, readableInstant9);
        org.joda.time.DurationField durationField11 = chronology10.months();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(12);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology10 = julianChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType6.getField((org.joda.time.Chronology) julianChronology9);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.Chronology chronology15 = julianChronology14.withUTC();
        mutableInterval12.setChronology((org.joda.time.Chronology) julianChronology14);
        mutableInterval12.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfWeek();
        int int22 = dateTime20.getWeekyear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.plus(readableDuration23);
        boolean boolean25 = mutableInterval12.contains((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Days days26 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        boolean boolean31 = days26.equals((java.lang.Object) property29);
        org.joda.time.DateTime dateTime32 = property29.getDateTime();
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        mutableInterval12.setStart((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property35 = dateTime33.dayOfYear();
        org.joda.time.Period period36 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        int int37 = dateTime33.getDayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime33.minusMinutes(1);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfWeek();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(julianChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property6 = dateTime4.property(dateTimeFieldType5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology9 = julianChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField((org.joda.time.Chronology) julianChronology8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology8);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology8);
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusDays(23);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(julianChronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1969 + "'", int13 == 1969);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = julianChronology5.withZone(dateTimeZone8);
        org.joda.time.chrono.StrictChronology strictChronology10 = org.joda.time.chrono.StrictChronology.getInstance(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = strictChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = strictChronology10.yearOfEra();
        int int14 = dateTimeField12.get(259202024L);
        org.joda.time.ReadablePartial readablePartial15 = null;
        int[] intArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = dateTimeField12.addWrapField(readablePartial15, 22, intArray17, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(strictChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1969 + "'", int14 == 1969);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.date();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = dateTimeFormatter0.parseLocalDate("null");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"null\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.Duration duration1 = hours0.toStandardDuration();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.addWeeks(13);
        mutablePeriod0.addMillis((int) (short) 0);
        mutablePeriod0.addDays((int) (short) 10);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDayOfYear(8);
        mutableDateTime0.setDayOfYear(31);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add((long) (-19));
        org.joda.time.MutableDateTime mutableDateTime9 = property5.add((-19));
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology12, locale14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfWeek();
        int int19 = dateTime17.getWeekyear();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.plus(readableDuration20);
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        boolean boolean23 = dateTimeParserBucket15.restoreState((java.lang.Object) property22);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket15.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology26 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.weekyear();
        int int29 = dateMidnight27.getDayOfWeek();
        org.joda.time.Chronology chronology30 = dateMidnight27.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property33.getFieldType();
        int int35 = dateMidnight27.get(dateTimeFieldType34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone38);
        org.joda.time.Chronology chronology40 = julianChronology39.withUTC();
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology39, locale41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology47 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology47);
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology47.weekyearOfCentury();
        int int50 = dateMidnight45.get(dateTimeField49);
        org.joda.time.field.SkipDateTimeField skipDateTimeField51 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology39, dateTimeField49);
        int int52 = skipDateTimeField51.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusHours((int) (byte) -1);
        int int57 = localDateTime56.size();
        org.joda.time.format.PeriodFormatter periodFormatter59 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale60 = periodFormatter59.getLocale();
        java.lang.String str61 = skipDateTimeField51.getAsShortText((org.joda.time.ReadablePartial) localDateTime56, (int) 'a', locale60);
        dateTimeParserBucket15.saveField(dateTimeFieldType34, "DurationField[halfdays]", locale60);
        java.lang.String str63 = property5.getAsText(locale60);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(gregorianChronology26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(julianChronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(gregorianChronology44);
        org.junit.Assert.assertNotNull(gregorianChronology47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 71 + "'", int50 == 71);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(periodFormatter59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "97" + "'", str61, "97");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "November" + "'", str63, "November");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.PeriodFormat.getDefault();
        org.joda.time.format.PeriodPrinter periodPrinter1 = periodFormatter0.getPrinter();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(50, 10, 4, 330958, 82799999, (-86401), (-35), 82799999);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology13 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology13);
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((org.joda.time.ReadablePeriod) weeks15);
        java.util.Date date17 = dateMidnight14.toDate();
        org.joda.time.YearMonthDay yearMonthDay18 = org.joda.time.YearMonthDay.fromDateFields(date17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay18.toDateMidnight(dateTimeZone19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.plusMonths(8);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay18.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay24 = property23.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay25 = property23.withMinimumValue();
        org.joda.time.format.PeriodFormatter periodFormatter26 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale27 = periodFormatter26.getLocale();
        java.lang.String str28 = property23.getAsText(locale27);
        int int29 = periodPrinter1.countFieldsToPrint((org.joda.time.ReadablePeriod) mutablePeriod10, 12, locale27);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod10.copy();
        int int31 = mutablePeriod10.getWeeks();
        org.junit.Assert.assertNotNull(periodFormatter0);
        org.junit.Assert.assertNotNull(periodPrinter1);
        org.junit.Assert.assertNotNull(gregorianChronology13);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 EST 1969");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "December" + "'", str28, "December");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addMonths((int) (short) 100);
        mutableDateTime0.setYear(26);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property11 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType10.getField((org.joda.time.Chronology) julianChronology13);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.Chronology chronology19 = julianChronology18.withUTC();
        mutableInterval16.setChronology((org.joda.time.Chronology) julianChronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) 4, (org.joda.time.Chronology) julianChronology18);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plusYears(100);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight23.weekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("StrictChronology[JulianChronology[UTC]]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"StrictChronology[JulianChronolog...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.JulianChronology julianChronology1 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone0);
        org.joda.time.Chronology chronology2 = julianChronology1.withUTC();
        org.joda.time.DurationField durationField3 = julianChronology1.weekyears();
        org.joda.time.DurationField durationField4 = julianChronology1.eras();
        org.junit.Assert.assertNotNull(julianChronology1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology1.monthOfYear();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField8 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField7);
        org.joda.time.DurationField durationField9 = dateTimeField7.getLeapDurationField();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setWeekyear(86400);
        org.junit.Assert.assertNotNull(mutableDateTime0);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        int int6 = days2.getDays();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType25.getField((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = julianChronology28.withZone(dateTimeZone31);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) '#', chronology32);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds((int) 'a');
        int[] intArray39 = new int[] { 26, '#', 31 };
        int int40 = offsetDateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localTime35, intArray39);
        org.joda.time.LocalTime.Property property41 = localTime35.minuteOfHour();
        org.joda.time.LocalTime localTime42 = property41.withMaximumValue();
        org.joda.time.Seconds seconds43 = org.joda.time.Seconds.TWO;
        org.joda.time.LocalTime localTime44 = localTime42.minus((org.joda.time.ReadablePeriod) seconds43);
        java.lang.String str45 = localTime44.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertArrayEquals(intArray39, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "00:59:35.035" + "'", str45, "00:59:35.035");
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addMonths((int) (short) 100);
        mutableDateTime0.setMillis((long) (byte) 1);
        java.lang.String str5 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.weekOfWeekyear();
        java.lang.Object obj7 = mutableDateTime0.clone();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str5, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        mutableInterval10.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        int int20 = dateTime18.getWeekyear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readableDuration21);
        boolean boolean23 = mutableInterval10.contains((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval24 = mutableInterval10.copy();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology26 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone25);
        org.joda.time.Days days27 = org.joda.time.Days.THREE;
        int[] intArray30 = gregorianChronology26.get((org.joda.time.ReadablePeriod) days27, (long) 0, (-1L));
        java.lang.String str31 = gregorianChronology26.toString();
        mutableInterval10.setChronology((org.joda.time.Chronology) gregorianChronology26);
        org.joda.time.Chronology chronology33 = gregorianChronology26.withUTC();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(gregorianChronology26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertArrayEquals(intArray30, new int[] { 0 });
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GregorianChronology[UTC]" + "'", str31, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        org.joda.time.DurationField durationField21 = offsetDateTimeField18.getRangeDurationField();
        long long23 = offsetDateTimeField18.roundCeiling((long) 0);
        org.joda.time.DurationField durationField24 = offsetDateTimeField18.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(101L);
        org.joda.time.YearMonth.Property property2 = yearMonth1.year();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property5 = dateTime4.dayOfWeek();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        int int7 = property2.compareTo((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        int int11 = dateTime9.getWeekyear();
        int int12 = dateTime9.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone13);
        org.joda.time.Days days15 = org.joda.time.Days.THREE;
        int[] intArray18 = gregorianChronology14.get((org.joda.time.ReadablePeriod) days15, (long) 0, (-1L));
        org.joda.time.Duration duration19 = days15.toStandardDuration();
        org.joda.time.DateTime dateTime21 = dateTime9.withDurationAdded((org.joda.time.ReadableDuration) duration19, 26);
        org.joda.time.Duration duration23 = duration19.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.format.PeriodFormatter periodFormatter28 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter30 = periodFormatter28.withParseType(periodType29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26, periodType29);
        java.lang.String str32 = dateTime26.toString();
        boolean boolean34 = dateTime26.isEqual(10L);
        org.joda.time.DateTime dateTime36 = dateTime26.minus((long) 26);
        org.joda.time.DateTime dateTime38 = dateTime26.plusDays(20179);
        int int39 = property2.compareTo((org.joda.time.ReadableInstant) dateTime26);
        java.lang.String str40 = property2.getAsString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertArrayEquals(intArray18, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodFormatter30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str32, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970" + "'", str40, "1970");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.Instant instant4 = dateTime3.toInstant();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.Instant instant7 = instant4.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.Days days11 = org.joda.time.Days.THREE;
        int[] intArray14 = gregorianChronology10.get((org.joda.time.ReadablePeriod) days11, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology10.dayOfMonth();
        org.joda.time.DurationField durationField16 = gregorianChronology10.millis();
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 26, (org.joda.time.Chronology) gregorianChronology10, locale17);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((java.lang.Object) instant4, (org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property25 = dateTime23.property(dateTimeFieldType24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.Chronology chronology28 = julianChronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType24.getField((org.joda.time.Chronology) julianChronology27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = julianChronology27.withZone(dateTimeZone30);
        org.joda.time.chrono.StrictChronology strictChronology32 = org.joda.time.chrono.StrictChronology.getInstance(chronology31);
        org.joda.time.format.PeriodFormatter periodFormatter33 = org.joda.time.format.PeriodFormat.wordBased();
        java.util.Locale locale34 = periodFormatter33.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (-86401), chronology31, locale34, (java.lang.Integer) 1440, 7);
        int int38 = property20.getMaximumTextLength(locale34);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertArrayEquals(intArray14, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(strictChronology32);
        org.junit.Assert.assertNotNull(periodFormatter33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setHours(5);
        int int3 = mutablePeriod0.getSeconds();
        mutablePeriod0.addSeconds(9);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfWeek();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod0, (org.joda.time.ReadableInstant) mutableDateTime6);
        mutablePeriod0.addHours(20179);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setHours(5);
        int int3 = mutablePeriod0.getSeconds();
        org.joda.time.Hours hours4 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours6 = hours4.dividedBy((int) (short) -1);
        mutablePeriod0.add((org.joda.time.ReadablePeriod) hours4);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear((-35));
        org.joda.time.Duration duration12 = mutablePeriod0.toDurationTo((org.joda.time.ReadableInstant) dateTime9);
        mutablePeriod0.setMillis(3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration12);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(101L);
        org.joda.time.YearMonth.Property property2 = yearMonth1.year();
        java.lang.String str3 = property2.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[year]" + "'", str3, "Property[year]");
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology13, locale15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology21);
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology21.weekyearOfCentury();
        int int24 = dateMidnight19.get(dateTimeField23);
        org.joda.time.field.SkipDateTimeField skipDateTimeField25 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology13, dateTimeField23);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property32 = dateTime30.property(dateTimeFieldType31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        org.joda.time.Chronology chronology35 = julianChronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType31.getField((org.joda.time.Chronology) julianChronology34);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology34);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology34);
        java.util.Locale locale40 = null;
        java.lang.String str41 = skipDateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime38, 0, locale40);
        org.joda.time.DurationField durationField42 = skipDateTimeField25.getRangeDurationField();
        org.joda.time.Days days43 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType44 = days43.getFieldType();
        org.joda.time.field.ScaledDurationField scaledDurationField46 = new org.joda.time.field.ScaledDurationField(durationField42, durationFieldType44, 1440);
        long long48 = durationField42.getValueAsLong((long) 9);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField51 = new org.joda.time.field.DividedDateTimeField(dateTimeField7, durationField42, dateTimeFieldType49, 19);
        long long53 = dividedDateTimeField51.roundFloor((long) (short) 1);
        org.joda.time.DurationField durationField54 = dividedDateTimeField51.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 71 + "'", int24 == 71);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone2);
        org.joda.time.Chronology chronology4 = julianChronology3.withUTC();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology3, locale5);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfWeek();
        int int10 = dateTime8.getWeekyear();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        boolean boolean14 = dateTimeParserBucket6.restoreState((java.lang.Object) property13);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket6.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket6.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType19 = org.joda.time.chrono.IslamicChronology.LEAP_YEAR_15_BASED;
        org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16, leapYearPatternType19);
        java.lang.String str21 = islamicChronology20.toString();
        org.joda.time.Chronology chronology22 = islamicChronology20.withUTC();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (-19), chronology22);
        mutableDateTime23.addDays(0);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(leapYearPatternType19);
        org.junit.Assert.assertNotNull(islamicChronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "IslamicChronology[UTC]" + "'", str21, "IslamicChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FIVE;
        org.junit.Assert.assertNotNull(hours0);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter2 = periodFormatter0.withParseType(periodType1);
        java.lang.StringBuffer stringBuffer3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod();
        boolean boolean6 = mutablePeriod4.equals((java.lang.Object) (-1L));
        mutablePeriod4.addYears(100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight13 = property12.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusWeeks((int) (byte) 10);
        org.joda.time.Days days16 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType17 = days16.getFieldType();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.withFieldAdded(durationFieldType17, 26);
        mutablePeriod4.add(durationFieldType17, 1);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime25 = dateTime23.withYear((-35));
        int int26 = dateTime23.getMinuteOfDay();
        org.joda.time.DateTime dateTime28 = dateTime23.withYearOfEra(7);
        org.joda.time.Duration duration29 = mutablePeriod4.toDurationTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        mutableDateTime30.setDayOfYear(8);
        int int33 = mutableDateTime30.getYearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod();
        boolean boolean36 = mutablePeriod34.equals((java.lang.Object) (-1L));
        mutablePeriod34.addYears(100);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology40 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.dayOfYear();
        org.joda.time.DateMidnight dateMidnight43 = property42.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plusWeeks((int) (byte) 10);
        org.joda.time.Days days46 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType47 = days46.getFieldType();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight45.withFieldAdded(durationFieldType47, 26);
        mutablePeriod34.add(durationFieldType47, 1);
        mutableDateTime30.add(durationFieldType47, (-1));
        org.joda.time.Period period54 = duration29.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime30);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter0.printTo(stringBuffer3, (org.joda.time.ReadablePeriod) period54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatter0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodFormatter2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 70 + "'", int33 == 70);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(gregorianChronology40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(period54);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Instant instant1 = gJChronology0.getGregorianCutover();
        org.joda.time.DurationField durationField2 = gJChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfYear();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withYearOfCentury(100);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Instant instant12 = gJChronology11.getGregorianCutover();
        org.joda.time.DurationField durationField13 = gJChronology11.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone14);
        org.joda.time.Days days16 = org.joda.time.Days.THREE;
        int[] intArray19 = gregorianChronology15.get((org.joda.time.ReadablePeriod) days16, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology15.monthOfYear();
        int int22 = gregorianChronology15.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone23 = gregorianChronology15.getZone();
        org.joda.time.Chronology chronology24 = gJChronology11.withZone(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight8.toMutableDateTime(dateTimeZone23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) gregorianChronology1, dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.GregorianChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertArrayEquals(intArray19, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = julianChronology5.withZone(dateTimeZone8);
        org.joda.time.chrono.StrictChronology strictChronology10 = org.joda.time.chrono.StrictChronology.getInstance(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = strictChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = strictChronology10.yearOfEra();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.LocalDate localDate16 = localDate13.plusDays(20179);
        org.joda.time.LocalDate localDate18 = localDate16.withMonthOfYear(7);
        int int19 = localDate16.getYearOfCentury();
        int[] intArray21 = strictChronology10.get((org.joda.time.ReadablePartial) localDate16, (long) 20179);
        org.joda.time.DurationField durationField22 = strictChronology10.halfdays();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(strictChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 25 + "'", int19 == 25);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertArrayEquals(intArray21, new int[] { 1969, 12, 19 });
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.junit.Assert.assertNotNull(durationFieldType0);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay4 = dateTime3.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.plus(readableDuration9);
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        boolean boolean13 = dateTime10.isBefore(26L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime10, readableInstant14);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay4.withChronologyRetainFields(chronology15);
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        java.util.Locale locale18 = null;
        int int19 = property17.getMaximumTextLength(locale18);
        org.joda.time.TimeOfDay timeOfDay20 = property17.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays(19);
        int int27 = localDateTime26.getSecondOfMinute();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property31 = dateTime29.property(dateTimeFieldType30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        org.joda.time.Chronology chronology34 = julianChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType30.getField((org.joda.time.Chronology) julianChronology33);
        int int36 = localDateTime26.indexOf(dateTimeFieldType30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay38 = timeOfDay20.withField(dateTimeFieldType30, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(julianChronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfMonth();
        int int6 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        boolean boolean2 = mutablePeriod0.equals((java.lang.Object) (-1L));
        mutablePeriod0.setPeriod(86400000, 13, (int) (byte) -1, (int) ' ', 26, (-35), (int) (short) -1, (int) (short) 100);
        org.joda.time.Days days13 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType14 = days13.getFieldType();
        org.joda.time.PeriodType periodType15 = days13.getPeriodType();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property21 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology24 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType20.getField((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        mutableInterval26.setChronology((org.joda.time.Chronology) julianChronology28);
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 0, periodType15, (org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfYear();
        org.joda.time.DateMidnight dateMidnight36 = property35.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plusWeeks((int) (byte) 10);
        org.joda.time.Days days39 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType40 = days39.getFieldType();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight38.withFieldAdded(durationFieldType40, 26);
        org.joda.time.Period period44 = period31.withFieldAdded(durationFieldType40, (int) (short) 1);
        boolean boolean45 = mutablePeriod0.isSupported(durationFieldType40);
        org.joda.time.Days days46 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType47 = days46.getFieldType();
        boolean boolean48 = mutablePeriod0.isSupported(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.joda.time.Period period1 = org.joda.time.Period.days(7);
        org.joda.time.Period period3 = period1.plusMonths(60);
        org.joda.time.Weeks weeks4 = period1.toStandardWeeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) period1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(weeks4);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        int int5 = localDate4.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate4.withMonthOfYear((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfYear();
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.DateTime dateTime9 = dateTime1.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime9.withWeekOfWeekyear(82799999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82799999 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.Instant instant4 = dateTime3.toInstant();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) 8);
        org.joda.time.Instant instant7 = instant4.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        int int11 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.plus(readableDuration12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis((-1));
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        org.joda.time.Hours hours17 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) instant4, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration18 = hours17.toStandardDuration();
        long long19 = duration18.getStandardMinutes();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.roundFloor();
        mutableDateTime2.addWeekyears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfEven();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        int int11 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.plus(readableDuration12);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfDay();
        org.joda.time.Hours hours15 = org.joda.time.Hours.TWO;
        org.joda.time.DateTime dateTime17 = dateTime13.withPeriodAdded((org.joda.time.ReadablePeriod) hours15, (int) (byte) 1);
        boolean boolean18 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2070 + "'", int7 == 2070);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        boolean boolean5 = days0.equals((java.lang.Object) property3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property3.getFieldType();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.withYear((-35));
        org.joda.time.DateTime dateTime12 = dateTime8.plusMillis(1970);
        int int13 = property3.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime15 = property3.addWrapFieldToCopy(2080);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.joda.time.Years years0 = org.joda.time.Years.ONE;
        org.junit.Assert.assertNotNull(years0);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType4 = days3.getFieldType();
        org.joda.time.PeriodType periodType5 = days3.getPeriodType();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property11 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType10.getField((org.joda.time.Chronology) julianChronology13);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.Chronology chronology19 = julianChronology18.withUTC();
        mutableInterval16.setChronology((org.joda.time.Chronology) julianChronology18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 0, periodType5, (org.joda.time.Chronology) julianChronology18);
        org.joda.time.PeriodType periodType22 = periodType5.withDaysRemoved();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology24 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone23);
        org.joda.time.Days days25 = org.joda.time.Days.THREE;
        int[] intArray28 = gregorianChronology24.get((org.joda.time.ReadablePeriod) days25, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology24.dayOfMonth();
        org.joda.time.DurationField durationField30 = gregorianChronology24.weeks();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology24);
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology24.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, (long) 1, periodType22, (org.joda.time.Chronology) gregorianChronology24);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundFloor();
        int int37 = mutableDateTime36.getYear();
        mutableDateTime36.addDays(1969);
        boolean boolean40 = mutablePeriod33.equals((java.lang.Object) mutableDateTime36);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod33.add(59, 604800000, 20179, (int) (byte) -1, (int) (byte) 100, 71, 86400, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(gregorianChronology24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertArrayEquals(intArray28, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateMidnight dateMidnight6 = property3.addToCopy((long) 25);
        boolean boolean7 = property3.isLeap();
        org.joda.time.Interval interval8 = property3.toInterval();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks(1970);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMinutes((int) (byte) 100);
        org.joda.time.Hours hours10 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localDateTime5, (org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.Chronology chronology17 = julianChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType13.getField((org.joda.time.Chronology) julianChronology16);
        boolean boolean19 = hours10.equals((java.lang.Object) dateTimeFieldType13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((java.lang.Object) hours10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Hours");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyearOfCentury();
        int int7 = dateMidnight2.get(dateTimeField6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        int int11 = dateTime9.getWeekyear();
        int int12 = dateTime9.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone13);
        org.joda.time.Days days15 = org.joda.time.Days.THREE;
        int[] intArray18 = gregorianChronology14.get((org.joda.time.ReadablePeriod) days15, (long) 0, (-1L));
        org.joda.time.Duration duration19 = days15.toStandardDuration();
        org.joda.time.DateTime dateTime21 = dateTime9.withDurationAdded((org.joda.time.ReadableDuration) duration19, 26);
        org.joda.time.Duration duration23 = duration19.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.format.PeriodFormatter periodFormatter28 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter30 = periodFormatter28.withParseType(periodType29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26, periodType29);
        org.joda.time.Days days32 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Days days33 = org.joda.time.Days.THREE;
        org.joda.time.Days days35 = days33.minus((int) (short) 1);
        boolean boolean36 = days32.isLessThan(days35);
        org.joda.time.Days days38 = days32.dividedBy(86400000);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 71 + "'", int7 == 71);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertArrayEquals(intArray18, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodFormatter30);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(days38);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        int int15 = skipDateTimeField14.getMinimumValue();
        java.util.Locale locale17 = null;
        java.lang.String str18 = skipDateTimeField14.getAsShortText(26, locale17);
        long long21 = skipDateTimeField14.addWrapField(100L, 13);
        boolean boolean22 = skipDateTimeField14.isSupported();
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 71 + "'", int13 == 71);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "26" + "'", str18, "26");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 410659200100L + "'", long21 == 410659200100L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.joda.time.Years years1 = org.joda.time.Years.years((int) (short) 0);
        org.joda.time.Years years3 = org.joda.time.Years.years((int) (short) 0);
        org.joda.time.Years years4 = years1.plus(years3);
        org.joda.time.DurationFieldType durationFieldType5 = years4.getFieldType();
        org.junit.Assert.assertNotNull(years1);
        org.junit.Assert.assertNotNull(years3);
        org.junit.Assert.assertNotNull(years4);
        org.junit.Assert.assertNotNull(durationFieldType5);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = minutes0.plus(minutes2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -2147483648");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) ' ');
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeZone0, dateTimeZone2);
        int int4 = mutableDateTime3.getRoundingMode();
        mutableDateTime3.addWeekyears((int) '4');
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withYear((-35));
        int int4 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfEra(7);
        int int7 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = localDate0.getChronology();
        org.joda.time.LocalDate localDate3 = localDate0.plusDays(20179);
        java.lang.String str4 = localDate0.toString();
        int int5 = localDate0.getDayOfWeek();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType25.getField((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = julianChronology28.withZone(dateTimeZone31);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) '#', chronology32);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds((int) 'a');
        int[] intArray39 = new int[] { 26, '#', 31 };
        int int40 = offsetDateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localTime35, intArray39);
        org.joda.time.Days days41 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType42 = days41.getFieldType();
        boolean boolean43 = localTime35.equals((java.lang.Object) durationFieldType42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property47 = dateTime45.property(dateTimeFieldType46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.chrono.JulianChronology julianChronology49 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone48);
        org.joda.time.Chronology chronology50 = julianChronology49.withUTC();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType46.getField((org.joda.time.Chronology) julianChronology49);
        java.lang.String str52 = dateTimeFieldType46.toString();
        boolean boolean53 = localTime35.isSupported(dateTimeFieldType46);
        org.joda.time.ReadablePartial readablePartial54 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int55 = localTime35.compareTo(readablePartial54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertArrayEquals(intArray39, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(julianChronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hourOfHalfday" + "'", str52, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType25.getField((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = julianChronology28.withZone(dateTimeZone31);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) '#', chronology32);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds((int) 'a');
        int[] intArray39 = new int[] { 26, '#', 31 };
        int int40 = offsetDateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localTime35, intArray39);
        java.lang.String str41 = offsetDateTimeField18.getName();
        int int42 = offsetDateTimeField18.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertArrayEquals(intArray39, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hourOfHalfday" + "'", str41, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        int int4 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        int[] intArray10 = gregorianChronology6.get((org.joda.time.ReadablePeriod) days7, (long) 0, (-1L));
        org.joda.time.Duration duration11 = days7.toStandardDuration();
        org.joda.time.DateTime dateTime13 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration11, 26);
        org.joda.time.Duration duration15 = duration11.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.Chronology chronology25 = julianChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType21.getField((org.joda.time.Chronology) julianChronology24);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.Chronology chronology30 = julianChronology29.withUTC();
        mutableInterval27.setChronology((org.joda.time.Chronology) julianChronology29);
        mutableInterval27.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfWeek();
        int int37 = dateTime35.getWeekyear();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.plus(readableDuration38);
        boolean boolean40 = mutableInterval27.contains((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval27.copy();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology43 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone42);
        org.joda.time.Days days44 = org.joda.time.Days.THREE;
        int[] intArray47 = gregorianChronology43.get((org.joda.time.ReadablePeriod) days44, (long) 0, (-1L));
        java.lang.String str48 = gregorianChronology43.toString();
        mutableInterval27.setChronology((org.joda.time.Chronology) gregorianChronology43);
        org.joda.time.Days days50 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType51 = days50.getFieldType();
        org.joda.time.PeriodType periodType52 = days50.getPeriodType();
        org.joda.time.Period period53 = mutableInterval27.toPeriod(periodType52);
        org.joda.time.Period period54 = duration16.toPeriod(periodType52);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertArrayEquals(intArray10, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(gregorianChronology43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertArrayEquals(intArray47, new int[] { 0 });
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GregorianChronology[UTC]" + "'", str48, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType25.getField((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = julianChronology28.withZone(dateTimeZone31);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) '#', chronology32);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds((int) 'a');
        int[] intArray39 = new int[] { 26, '#', 31 };
        int int40 = offsetDateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localTime35, intArray39);
        org.joda.time.Months months41 = org.joda.time.Months.TWO;
        org.joda.time.LocalTime localTime42 = localTime35.minus((org.joda.time.ReadablePeriod) months41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime44 = localTime35.withHourOfDay(604800000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 604800000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertArrayEquals(intArray39, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(months41);
        org.junit.Assert.assertNotNull(localTime42);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        int int4 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        int[] intArray10 = gregorianChronology6.get((org.joda.time.ReadablePeriod) days7, (long) 0, (-1L));
        org.joda.time.Duration duration11 = days7.toStandardDuration();
        org.joda.time.DateTime dateTime13 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration11, 26);
        org.joda.time.Duration duration15 = duration11.multipliedBy((long) (short) 1);
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        org.joda.time.format.PeriodFormatter periodFormatter20 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter20.withParseType(periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime18, periodType21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period25 = period23.minusWeeks(23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertArrayEquals(intArray10, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodFormatter22);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecondMillis();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.minusDays(26);
        org.joda.time.DateTime.Property property6 = dateTime1.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) property6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.LocalDate localDate4 = localDate0.withFieldAdded(durationFieldType2, 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        int int6 = localDate4.get(dateTimeFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate4.era();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.joda.time.Period period1 = org.joda.time.Period.days(7);
        int int2 = period1.getMonths();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYearOfCentury(100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay((java.lang.Object) dateMidnight4, chronology7);
        org.joda.time.MonthDay.Property property9 = monthDay8.monthOfYear();
        org.joda.time.Period period12 = new org.joda.time.Period((long) 31, (long) 25);
        org.joda.time.MonthDay monthDay13 = monthDay8.minus((org.joda.time.ReadablePeriod) period12);
        java.util.Locale locale15 = null;
        java.lang.String str16 = monthDay13.toString("26", locale15);
        org.joda.time.Period period18 = org.joda.time.Period.days(7);
        org.joda.time.Period period20 = period18.plusMonths(60);
        org.joda.time.MonthDay monthDay22 = monthDay13.withPeriodAdded((org.joda.time.ReadablePeriod) period20, 100);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod();
        mutablePeriod23.setHours(5);
        int int26 = mutablePeriod23.getSeconds();
        org.joda.time.Hours hours27 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours29 = hours27.dividedBy((int) (short) -1);
        mutablePeriod23.add((org.joda.time.ReadablePeriod) hours27);
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod23, 5);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "26" + "'", str16, "26");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(monthDay32);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDayOfYear(8);
        int int3 = mutableDateTime0.getYearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod();
        boolean boolean6 = mutablePeriod4.equals((java.lang.Object) (-1L));
        mutablePeriod4.addYears(100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight13 = property12.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusWeeks((int) (byte) 10);
        org.joda.time.Days days16 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType17 = days16.getFieldType();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.withFieldAdded(durationFieldType17, 26);
        mutablePeriod4.add(durationFieldType17, 1);
        mutableDateTime0.add(durationFieldType17, (-1));
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology25 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone24);
        org.joda.time.Days days26 = org.joda.time.Days.THREE;
        int[] intArray29 = gregorianChronology25.get((org.joda.time.ReadablePeriod) days26, (long) 0, (-1L));
        org.joda.time.Duration duration30 = days26.toStandardDuration();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfWeek();
        int int34 = dateTime32.getWeekyear();
        int int35 = dateTime32.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone36);
        org.joda.time.Days days38 = org.joda.time.Days.THREE;
        int[] intArray41 = gregorianChronology37.get((org.joda.time.ReadablePeriod) days38, (long) 0, (-1L));
        org.joda.time.Duration duration42 = days38.toStandardDuration();
        org.joda.time.DateTime dateTime44 = dateTime32.withDurationAdded((org.joda.time.ReadableDuration) duration42, 26);
        boolean boolean45 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfYear();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology53 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone52);
        org.joda.time.Days days54 = org.joda.time.Days.THREE;
        int[] intArray57 = gregorianChronology53.get((org.joda.time.ReadablePeriod) days54, (long) 0, (-1L));
        org.joda.time.Duration duration58 = days54.toStandardDuration();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime49.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration60 = duration30.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableDuration) duration58, periodType61);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfWeek((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(gregorianChronology25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertArrayEquals(intArray29, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertArrayEquals(intArray41, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(gregorianChronology53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertArrayEquals(intArray57, new int[] { 0 });
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(duration60);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfCentury(2080);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2080 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.plus(readableDuration4);
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        boolean boolean8 = dateTime5.isBefore(26L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.Chronology chronology11 = julianChronology10.withUTC();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(chronology11);
        org.joda.time.DateTime dateTime13 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.Days days14 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime13);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(days14);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.joda.time.field.FieldUtils.getWrappedValue(13, 1970, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plusWeeks((int) (byte) 10);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType8 = days7.getFieldType();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.withFieldAdded(durationFieldType8, 26);
        org.joda.time.LocalDate localDate11 = dateMidnight6.toLocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.year();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property21 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology24 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType20.getField((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology23);
        java.util.Locale locale29 = null;
        java.lang.String str30 = skipDateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime27, 0, locale29);
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = null;
        java.lang.String str34 = skipDateTimeField14.getAsShortText(readablePartial31, 100, locale33);
        int int36 = skipDateTimeField14.get(410659200100L);
        long long38 = skipDateTimeField14.roundFloor((long) 86400000);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 71 + "'", int13 == 71);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 84 + "'", int36 == 84);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-259200000L) + "'", long38 == (-259200000L));
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 100);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone2);
        org.joda.time.Chronology chronology4 = julianChronology3.withUTC();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology3, locale5);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfWeek();
        int int10 = dateTime8.getWeekyear();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        boolean boolean14 = dateTimeParserBucket6.restoreState((java.lang.Object) property13);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket6.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket6.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.now((org.joda.time.Chronology) julianChronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = julianChronology20.getZone();
        long long24 = dateTimeZone16.getMillisKeepLocal(dateTimeZone22, 259200000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter0.withZone(dateTimeZone22);
        org.joda.time.chrono.EthiopicChronology ethiopicChronology26 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone22);
        java.lang.String str27 = ethiopicChronology26.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long35 = ethiopicChronology26.getDateTimeMillis(0, (int) (short) -1, (int) (short) 100, 71, 0, 1000, 5999999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 259200000L + "'", long24 == 259200000L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(ethiopicChronology26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "EthiopicChronology[UTC]" + "'", str27, "EthiopicChronology[UTC]");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = julianChronology2.withUTC();
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.weekyearOfCentury();
        int int13 = dateMidnight8.get(dateTimeField12);
        org.joda.time.field.SkipDateTimeField skipDateTimeField14 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology2, dateTimeField12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property21 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology24 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType20.getField((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) -1, (org.joda.time.Chronology) julianChronology23);
        java.util.Locale locale29 = null;
        java.lang.String str30 = skipDateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime27, 0, locale29);
        org.joda.time.DurationField durationField31 = skipDateTimeField14.getRangeDurationField();
        org.joda.time.Days days32 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType33 = days32.getFieldType();
        org.joda.time.field.ScaledDurationField scaledDurationField35 = new org.joda.time.field.ScaledDurationField(durationField31, durationFieldType33, 1440);
        java.lang.String str36 = scaledDurationField35.getName();
        long long37 = scaledDurationField35.getUnitMillis();
        int int39 = scaledDurationField35.getValue(0L);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 71 + "'", int13 == 71);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "days" + "'", str36, "days");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4544201088000000L + "'", long37 == 4544201088000000L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.junit.Assert.assertNotNull(gJChronology0);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        mutableDateTime4.setDate((long) 3);
        int int7 = mutableDateTime4.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, dateTimeZone1);
        boolean boolean4 = localTime2.equals((java.lang.Object) 26);
        int int5 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime localTime7 = localTime2.plusMillis(1970);
        org.joda.time.LocalTime localTime9 = localTime2.minusMinutes(0);
        org.joda.time.LocalTime localTime11 = localTime2.minusMinutes(0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forStyle("PT2M");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: PT2M");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime4 = property3.roundHalfFloorCopy();
        int int5 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime7 = dateTime4.withCenturyOfEra(6);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.joda.time.Months months1 = org.joda.time.Months.months(82799999);
        org.joda.time.Months months3 = months1.minus(60);
        org.junit.Assert.assertNotNull(months1);
        org.junit.Assert.assertNotNull(months3);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        long long2 = duration1.getStandardHours();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-35791394L) + "'", long2 == (-35791394L));
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property3 = dateTime1.property(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone4);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType2.getField((org.joda.time.Chronology) julianChronology5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText((int) (byte) 0, locale9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField18 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType13, (int) (byte) -1, (int) (byte) -1, (-35));
        int int20 = offsetDateTimeField18.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = julianChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType25.getField((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = julianChronology28.withZone(dateTimeZone31);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) '#', chronology32);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds((int) 'a');
        int[] intArray39 = new int[] { 26, '#', 31 };
        int int40 = offsetDateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localTime35, intArray39);
        org.joda.time.LocalTime.Property property41 = localTime35.minuteOfHour();
        org.joda.time.LocalTime localTime42 = property41.withMaximumValue();
        org.joda.time.LocalTime localTime43 = property41.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertArrayEquals(intArray39, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.joda.time.tz.ZoneInfoLogger.set(false);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology13 = julianChronology12.withUTC();
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology12);
        mutableInterval10.setEndMillis((long) 'a');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        int int20 = dateTime18.getWeekyear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readableDuration21);
        boolean boolean23 = mutableInterval10.contains((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Years years25 = org.joda.time.Years.years((int) (short) 0);
        org.joda.time.Years years27 = org.joda.time.Years.years((int) (short) 0);
        org.joda.time.Years years28 = years25.plus(years27);
        boolean boolean29 = mutableInterval10.equals((java.lang.Object) years25);
        mutableInterval10.setStartMillis((long) 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(years25);
        org.junit.Assert.assertNotNull(years27);
        org.junit.Assert.assertNotNull(years28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        int[] intArray5 = gregorianChronology1.get((org.joda.time.ReadablePeriod) days2, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology1.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology1.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology1.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology12 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.joda.time.DateMidnight dateMidnight15 = property14.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withYearOfCentury(100);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Instant instant19 = gJChronology18.getGregorianCutover();
        org.joda.time.DurationField durationField20 = gJChronology18.seconds();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone21);
        org.joda.time.Days days23 = org.joda.time.Days.THREE;
        int[] intArray26 = gregorianChronology22.get((org.joda.time.ReadablePeriod) days23, (long) 0, (-1L));
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology22.monthOfYear();
        int int29 = gregorianChronology22.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone30 = gregorianChronology22.getZone();
        org.joda.time.Chronology chronology31 = gJChronology18.withZone(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight15.toMutableDateTime(dateTimeZone30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((java.lang.Object) gregorianChronology1, dateTimeZone30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.GregorianChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(gregorianChronology12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertArrayEquals(intArray26, new int[] { 0 });
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(84, 13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 13 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis(2);
        java.lang.String str7 = localDateTime3.toString("\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ufffd\ufffd\ufffd" + "'", str7, "\ufffd\ufffd\ufffd");
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.junit.Assert.assertNotNull(durationFieldType0);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYearOfCentury(100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay((java.lang.Object) dateMidnight4, chronology7);
        org.joda.time.MonthDay.Property property9 = monthDay8.monthOfYear();
        org.joda.time.Period period12 = new org.joda.time.Period((long) 31, (long) 25);
        org.joda.time.MonthDay monthDay13 = monthDay8.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = monthDay8.getChronology();
        org.joda.time.MonthDay monthDay16 = monthDay8.minusMonths(71);
        org.joda.time.ReadablePartial readablePartial17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days18 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) monthDay8, readablePartial17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(monthDay16);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.ONE;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((org.joda.time.ReadablePeriod) weeks3);
        java.util.Date date5 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay6.toDateMidnight(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.plusMonths(8);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = property11.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay14 = property11.getYearMonthDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property18 = dateTime16.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.Chronology chronology21 = julianChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType17.getField((org.joda.time.Chronology) julianChronology20);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField22.getAsShortText((int) (byte) 0, locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property29 = dateTime27.property(dateTimeFieldType28);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField33 = new org.joda.time.field.OffsetDateTimeField(dateTimeField22, dateTimeFieldType28, (int) (byte) -1, (int) (byte) -1, (-35));
        int int35 = offsetDateTimeField33.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeField dateTimeField36 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField) offsetDateTimeField33);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property41 = dateTime39.property(dateTimeFieldType40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone42);
        org.joda.time.Chronology chronology44 = julianChronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType40.getField((org.joda.time.Chronology) julianChronology43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = julianChronology43.withZone(dateTimeZone46);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) '#', chronology47);
        org.joda.time.LocalTime localTime50 = localTime48.plusSeconds((int) 'a');
        int[] intArray54 = new int[] { 26, '#', 31 };
        int int55 = offsetDateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localTime50, intArray54);
        java.lang.String str56 = localTime50.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int57 = yearMonthDay14.compareTo((org.joda.time.ReadablePartial) localTime50);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 19:00:00 EST 1969");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(julianChronology43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertArrayEquals(intArray54, new int[] { 26, 35, 31 });
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "00:01:37.035" + "'", str56, "00:01:37.035");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1000, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1000 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        org.joda.time.Chronology chronology1 = buddhistChronology0.withUTC();
        org.junit.Assert.assertNotNull(buddhistChronology0);
        org.junit.Assert.assertNotNull(chronology1);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = days1.getFieldType();
        org.joda.time.PeriodType periodType3 = days1.getPeriodType();
        mutablePeriod0.add((org.joda.time.ReadablePeriod) days1);
        mutablePeriod0.setPeriod(0, 4, (int) (byte) 1, 59, 71, 70067048, 39, 100);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            int int4 = localTime2.getValue(1969);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1969");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDayOfYear(8);
        int int3 = mutableDateTime0.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.centuryOfEra();
        int int5 = mutableDateTime0.getHourOfDay();
        mutableDateTime0.addDays(82799999);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = localDate0.getChronology();
        org.joda.time.LocalDate localDate3 = localDate0.plusDays(20179);
        org.joda.time.LocalDate localDate5 = localDate3.withMonthOfYear(7);
        org.joda.time.LocalDate.Property property6 = localDate3.era();
        int int7 = localDate3.getYear();
        int int8 = localDate3.getEra();
        org.joda.time.LocalDate localDate10 = localDate3.withDayOfYear(26);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfMonth((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay15 = dateTime14.toTimeOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfWeek();
        int int19 = dateTime17.getWeekyear();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.plus(readableDuration20);
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        boolean boolean24 = dateTime21.isBefore(26L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime21, readableInstant25);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay15.withChronologyRetainFields(chronology26);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay30 = property28.addToCopy((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = localDate3.compareTo((org.joda.time.ReadablePartial) timeOfDay30);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2025 + "'", int7 == 2025);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(timeOfDay30);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology8 = julianChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) 31, (org.joda.time.Chronology) julianChronology7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, (org.joda.time.Chronology) julianChronology13, locale15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((org.joda.time.Chronology) gregorianChronology21);
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology21.weekyearOfCentury();
        int int24 = dateMidnight19.get(dateTimeField23);
        org.joda.time.field.SkipDateTimeField skipDateTimeField25 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) julianChronology13, dateTimeField23);
        mutableInterval10.setChronology((org.joda.time.Chronology) julianChronology13);
        int int27 = julianChronology13.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 71 + "'", int24 == 71);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }
}
